
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010460  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001110  08010600  08010600  00020600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011710  08011710  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  08011710  08011710  00021710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011718  08011718  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011718  08011718  00021718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801171c  0801171c  0002171c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08011720  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d44  2000019c  080118bc  0003019c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006ee0  080118bc  00036ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b863  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006575  00000000  00000000  0005ba2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e8  00000000  00000000  00061fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002030  00000000  00000000  00064290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206eb  00000000  00000000  000662c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e24f  00000000  00000000  000869ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1593  00000000  00000000  000b4bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015618d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009650  00000000  00000000  001561e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000019c 	.word	0x2000019c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080105e8 	.word	0x080105e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a0 	.word	0x200001a0
 80001dc:	080105e8 	.word	0x080105e8

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

//static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4639      	mov	r1, r7
 8000ccc:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f00f fac1 	bl	801025c <malloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	897a      	ldrh	r2, [r7, #10]
 8000ce8:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	1d9a      	adds	r2, r3, #6
 8000cee:	463b      	mov	r3, r7
 8000cf0:	cb03      	ldmia	r3!, {r0, r1}
 8000cf2:	6010      	str	r0, [r2, #0]
 8000cf4:	6051      	str	r1, [r2, #4]
	return pConfig;
 8000cf6:	697b      	ldr	r3, [r7, #20]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1d9a      	adds	r2, r3, #6
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	cb03      	ldmia	r3!, {r0, r1}
 8000d16:	6010      	str	r0, [r2, #0]
 8000d18:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ADS1115_updateConfig+0x60>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	82bb      	strh	r3, [r7, #20]
 8000d20:	2300      	movs	r3, #0
 8000d22:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000d34:	460b      	mov	r3, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f000 f841 	bl	8000dc0 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2303      	movs	r3, #3
 8000d54:	f003 fc16 	bl	8004584 <HAL_I2C_Master_Transmit>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08010600 	.word	0x08010600

08000d64 <ADS1115_startContinousMode>:

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
}

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <ADS1115_startContinousMode+0x58>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	82bb      	strh	r3, [r7, #20]
 8000d72:	2300      	movs	r3, #0
 8000d74:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	3206      	adds	r2, #6
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	6851      	ldr	r1, [r2, #4]
 8000d82:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000d88:	f107 0014 	add.w	r0, r7, #20
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000d94:	f000 f814 	bl	8000dc0 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	889b      	ldrh	r3, [r3, #4]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	b299      	uxth	r1, r3
 8000da4:	f107 0214 	add.w	r2, r7, #20
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2303      	movs	r3, #3
 8000dae:	f003 fbe9 	bl	8004584 <HAL_I2C_Master_Transmit>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08010600 	.word	0x08010600

08000dc0 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t temp[3] = {0};
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <prepareConfigFrame+0xac>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	82bb      	strh	r3, [r7, #20]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	75bb      	strb	r3, [r7, #22]
	pOutFrame[0] = 0x01;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	793b      	ldrb	r3, [r7, #4]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	b259      	sxtb	r1, r3
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	430b      	orrs	r3, r1
 8000df4:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	b259      	sxtb	r1, r3
 8000e18:	7a3b      	ldrb	r3, [r7, #8]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	b259      	sxtb	r1, r3
 8000e22:	7a7b      	ldrb	r3, [r7, #9]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 8000e2c:	7abb      	ldrb	r3, [r7, #10]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	430b      	orrs	r3, r1
 8000e34:	b259      	sxtb	r1, r3
 8000e36:	7afb      	ldrb	r3, [r7, #11]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3302      	adds	r3, #2
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	701a      	strb	r2, [r3, #0]
	temp[0] = pOutFrame[0];
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	753b      	strb	r3, [r7, #20]
	temp[1] = pOutFrame[1];
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	785b      	ldrb	r3, [r3, #1]
 8000e56:	757b      	strb	r3, [r7, #21]
	temp[2] = pOutFrame[2];
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	75bb      	strb	r3, [r7, #22]
}
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	08010600 	.word	0x08010600

08000e70 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	ed87 0a00 	vstr	s0, [r7]
 8000e80:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	ed97 0a00 	vldr	s0, [r7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f822 	bl	8000ee0 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}

08000eb2 <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	791b      	ldrb	r3, [r3, #4]
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f004 f9a0 	bl	800520c <HAL_I2C_IsDeviceReady>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000eec:	edd7 7a00 	vldr	s15, [r7]
 8000ef0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	d103      	bne.n	8000f02 <MCP4725_setReferenceVoltage+0x22>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <MCP4725_setReferenceVoltage+0x50>)
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	e002      	b.n	8000f08 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f0e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f34 <MCP4725_setReferenceVoltage+0x54>
 8000f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1a:	ee17 3a90 	vmov	r3, s15
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	819a      	strh	r2, [r3, #12]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40533333 	.word	0x40533333
 8000f34:	45800000 	.word	0x45800000

08000f38 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	707b      	strb	r3, [r7, #1]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000f52:	783b      	ldrb	r3, [r7, #0]
 8000f54:	787a      	ldrb	r2, [r7, #1]
 8000f56:	8879      	ldrh	r1, [r7, #2]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f822 	bl	8000fa2 <MCP4725_writeComand>
 8000f5e:	4603      	mov	r3, r0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000f70:	2101      	movs	r1, #1
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f895 	bl	80010a2 <MCP4725_readRegister>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d008      	beq.n	8000f98 <MCP4725_getEepromBusyFlag+0x30>
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	e000      	b.n	8000f9a <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	4608      	mov	r0, r1
 8000fac:	4611      	mov	r1, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	707b      	strb	r3, [r7, #1]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b60      	cmp	r3, #96	; 0x60
 8000fc0:	d028      	beq.n	8001014 <MCP4725_writeComand+0x72>
 8000fc2:	2b60      	cmp	r3, #96	; 0x60
 8000fc4:	dc4a      	bgt.n	800105c <MCP4725_writeComand+0xba>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <MCP4725_writeComand+0x2e>
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d022      	beq.n	8001014 <MCP4725_writeComand+0x72>
 8000fce:	e045      	b.n	800105c <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8000fd0:	783b      	ldrb	r3, [r7, #0]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	b25a      	sxtb	r2, r3
 8000fd6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b25a      	sxtb	r2, r3
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	f003 fabb 	bl	8004584 <HAL_I2C_Master_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
		
      break;
 8001012:	e023      	b.n	800105c <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 800101a:	783b      	ldrb	r3, [r7, #0]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b25a      	sxtb	r2, r3
 8001020:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001024:	4313      	orrs	r3, r2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	b299      	uxth	r1, r3
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2303      	movs	r3, #3
 8001052:	f003 fa97 	bl	8004584 <HAL_I2C_Master_Transmit>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
		
			break;
 800105a:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MCP4725_writeComand+0xc4>
 8001062:	2300      	movs	r3, #0
 8001064:	e019      	b.n	800109a <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 8001066:	787b      	ldrb	r3, [r7, #1]
 8001068:	2b60      	cmp	r3, #96	; 0x60
 800106a:	d115      	bne.n	8001098 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff7b 	bl	8000f68 <MCP4725_getEepromBusyFlag>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <MCP4725_writeComand+0xda>
 8001078:	2301      	movs	r3, #1
 800107a:	e00e      	b.n	800109a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 800107c:	2019      	movs	r0, #25
 800107e:	f002 fad7 	bl	8003630 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff70 	bl	8000f68 <MCP4725_getEepromBusyFlag>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <MCP4725_writeComand+0xf0>
 800108e:	2301      	movs	r3, #1
 8001090:	e003      	b.n	800109a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 8001092:	2019      	movs	r0, #25
 8001094:	f002 facc 	bl	8003630 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 80010a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
 80010b0:	466b      	mov	r3, sp
 80010b2:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 80010b8:	2300      	movs	r3, #0
 80010ba:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 80010bc:	78f9      	ldrb	r1, [r7, #3]
 80010be:	460b      	mov	r3, r1
 80010c0:	3b01      	subs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	b2cb      	uxtb	r3, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	4698      	mov	r8, r3
 80010ca:	4691      	mov	r9, r2
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010e0:	b2cb      	uxtb	r3, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	461c      	mov	r4, r3
 80010e6:	4615      	mov	r5, r2
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	00eb      	lsls	r3, r5, #3
 80010f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010f6:	00e2      	lsls	r2, r4, #3
 80010f8:	460b      	mov	r3, r1
 80010fa:	3307      	adds	r3, #7
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	ebad 0d03 	sub.w	sp, sp, r3
 8001104:	ab02      	add	r3, sp, #8
 8001106:	3300      	adds	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	b299      	uxth	r1, r3
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	b29b      	uxth	r3, r3
 8001118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111c:	9200      	str	r2, [sp, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	f003 fb2e 	bl	8004780 <HAL_I2C_Master_Receive>
 8001124:	4603      	mov	r3, r0
 8001126:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <MCP4725_readRegister+0x92>
 800112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001132:	e01f      	b.n	8001174 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d00a      	beq.n	8001150 <MCP4725_readRegister+0xae>
 800113a:	2b05      	cmp	r3, #5
 800113c:	dc19      	bgt.n	8001172 <MCP4725_readRegister+0xd0>
 800113e:	2b01      	cmp	r3, #1
 8001140:	d002      	beq.n	8001148 <MCP4725_readRegister+0xa6>
 8001142:	2b03      	cmp	r3, #3
 8001144:	d004      	beq.n	8001150 <MCP4725_readRegister+0xae>
 8001146:	e014      	b.n	8001172 <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	82fb      	strh	r3, [r7, #22]

      break;
 800114e:	e010      	b.n	8001172 <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8001150:	8abb      	ldrh	r3, [r7, #20]
 8001152:	3b02      	subs	r3, #2
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 800115a:	8afb      	ldrh	r3, [r7, #22]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	8abb      	ldrh	r3, [r7, #20]
 8001162:	3b01      	subs	r3, #1
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	5ccb      	ldrb	r3, [r1, r3]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21b      	sxth	r3, r3
 800116e:	82fb      	strh	r3, [r7, #22]
      break;
 8001170:	bf00      	nop
  }

  return ret_val;
 8001172:	8afb      	ldrh	r3, [r7, #22]
 8001174:	46b5      	mov	sp, r6
}
 8001176:	4618      	mov	r0, r3
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001180 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af04      	add	r7, sp, #16
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	2178      	movs	r1, #120	; 0x78
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <ssd1306_WriteCommand+0x2c>)
 80011b0:	f003 fd0c 	bl	8004bcc <HAL_I2C_Mem_Write>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200006bc 	.word	0x200006bc

080011c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295
 80011d2:	9202      	str	r2, [sp, #8]
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2240      	movs	r2, #64	; 0x40
 80011de:	2178      	movs	r1, #120	; 0x78
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <ssd1306_WriteData+0x30>)
 80011e2:	f003 fcf3 	bl	8004bcc <HAL_I2C_Mem_Write>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200006bc 	.word	0x200006bc

080011f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80011f8:	f7ff ffc2 	bl	8001180 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f002 fa17 	bl	8003630 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001202:	2000      	movs	r0, #0
 8001204:	f000 fa8a 	bl	800171c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001208:	2020      	movs	r0, #32
 800120a:	f7ff ffc1 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ffbe 	bl	8001190 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001214:	20b0      	movs	r0, #176	; 0xb0
 8001216:	f7ff ffbb 	bl	8001190 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800121a:	20c8      	movs	r0, #200	; 0xc8
 800121c:	f7ff ffb8 	bl	8001190 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ffb5 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001226:	2010      	movs	r0, #16
 8001228:	f7ff ffb2 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800122c:	2040      	movs	r0, #64	; 0x40
 800122e:	f7ff ffaf 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001232:	20ff      	movs	r0, #255	; 0xff
 8001234:	f000 fa5f 	bl	80016f6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001238:	20a1      	movs	r0, #161	; 0xa1
 800123a:	f7ff ffa9 	bl	8001190 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800123e:	20a6      	movs	r0, #166	; 0xa6
 8001240:	f7ff ffa6 	bl	8001190 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001244:	20a8      	movs	r0, #168	; 0xa8
 8001246:	f7ff ffa3 	bl	8001190 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800124a:	203f      	movs	r0, #63	; 0x3f
 800124c:	f7ff ffa0 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001250:	20a4      	movs	r0, #164	; 0xa4
 8001252:	f7ff ff9d 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001256:	20d3      	movs	r0, #211	; 0xd3
 8001258:	f7ff ff9a 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff ff97 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001262:	20d5      	movs	r0, #213	; 0xd5
 8001264:	f7ff ff94 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001268:	20f0      	movs	r0, #240	; 0xf0
 800126a:	f7ff ff91 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800126e:	20d9      	movs	r0, #217	; 0xd9
 8001270:	f7ff ff8e 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001274:	2022      	movs	r0, #34	; 0x22
 8001276:	f7ff ff8b 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800127a:	20da      	movs	r0, #218	; 0xda
 800127c:	f7ff ff88 	bl	8001190 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001280:	2012      	movs	r0, #18
 8001282:	f7ff ff85 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001286:	20db      	movs	r0, #219	; 0xdb
 8001288:	f7ff ff82 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800128c:	2020      	movs	r0, #32
 800128e:	f7ff ff7f 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001292:	208d      	movs	r0, #141	; 0x8d
 8001294:	f7ff ff7c 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001298:	2014      	movs	r0, #20
 800129a:	f7ff ff79 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fa3c 	bl	800171c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f80f 	bl	80012c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012aa:	f000 f831 	bl	8001310 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <ssd1306_Init+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <ssd1306_Init+0xd0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012ba:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <ssd1306_Init+0xd0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	711a      	strb	r2, [r3, #4]
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200005c8 	.word	0x200005c8

080012c8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e00d      	b.n	80012f4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <ssd1306_Fill+0x1a>
 80012de:	2100      	movs	r1, #0
 80012e0:	e000      	b.n	80012e4 <ssd1306_Fill+0x1c>
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4a09      	ldr	r2, [pc, #36]	; (800130c <ssd1306_Fill+0x44>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	460a      	mov	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80012fa:	d3ed      	bcc.n	80012d8 <ssd1306_Fill+0x10>
    }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200001b8 	.word	0x200001b8

08001310 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e01a      	b.n	8001352 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	3b50      	subs	r3, #80	; 0x50
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff34 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ff31 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800132e:	2010      	movs	r0, #16
 8001330:	f7ff ff2e 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	4613      	mov	r3, r2
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	4413      	add	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	461a      	mov	r2, r3
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <ssd1306_UpdateScreen+0x54>)
 8001342:	4413      	add	r3, r2
 8001344:	2182      	movs	r1, #130	; 0x82
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff3a 	bl	80011c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	3301      	adds	r3, #1
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	2b07      	cmp	r3, #7
 8001356:	d9e1      	bls.n	800131c <ssd1306_UpdateScreen+0xc>
    }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200001b8 	.word	0x200001b8

08001368 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001368:	b490      	push	{r4, r7}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	460b      	mov	r3, r1
 8001374:	71bb      	strb	r3, [r7, #6]
 8001376:	4613      	mov	r3, r2
 8001378:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b81      	cmp	r3, #129	; 0x81
 800137e:	d849      	bhi.n	8001414 <ssd1306_DrawPixel+0xac>
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	2b3f      	cmp	r3, #63	; 0x3f
 8001384:	d846      	bhi.n	8001414 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001386:	797b      	ldrb	r3, [r7, #5]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d120      	bne.n	80013ce <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	b2d8      	uxtb	r0, r3
 8001394:	4601      	mov	r1, r0
 8001396:	460b      	mov	r3, r1
 8001398:	019b      	lsls	r3, r3, #6
 800139a:	440b      	add	r3, r1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <ssd1306_DrawPixel+0xb8>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	b25a      	sxtb	r2, r3
 80013a6:	79bb      	ldrb	r3, [r7, #6]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	2101      	movs	r1, #1
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b25c      	sxtb	r4, r3
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	4601      	mov	r1, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	019b      	lsls	r3, r3, #6
 80013c0:	440b      	add	r3, r1
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	b2e1      	uxtb	r1, r4
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <ssd1306_DrawPixel+0xb8>)
 80013ca:	54d1      	strb	r1, [r2, r3]
 80013cc:	e023      	b.n	8001416 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	08db      	lsrs	r3, r3, #3
 80013d4:	b2d8      	uxtb	r0, r3
 80013d6:	4601      	mov	r1, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	019b      	lsls	r3, r3, #6
 80013dc:	440b      	add	r3, r1
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <ssd1306_DrawPixel+0xb8>)
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	4013      	ands	r3, r2
 80013fc:	b25c      	sxtb	r4, r3
 80013fe:	79fa      	ldrb	r2, [r7, #7]
 8001400:	4601      	mov	r1, r0
 8001402:	460b      	mov	r3, r1
 8001404:	019b      	lsls	r3, r3, #6
 8001406:	440b      	add	r3, r1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	b2e1      	uxtb	r1, r4
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <ssd1306_DrawPixel+0xb8>)
 8001410:	54d1      	strb	r1, [r2, r3]
 8001412:	e000      	b.n	8001416 <ssd1306_DrawPixel+0xae>
        return;
 8001414:	bf00      	nop
    }
}
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bc90      	pop	{r4, r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200001b8 	.word	0x200001b8

08001424 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	4604      	mov	r4, r0
 800142c:	1d38      	adds	r0, r7, #4
 800142e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001432:	461a      	mov	r2, r3
 8001434:	4623      	mov	r3, r4
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	4613      	mov	r3, r2
 800143a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b1f      	cmp	r3, #31
 8001440:	d902      	bls.n	8001448 <ssd1306_WriteChar+0x24>
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b7e      	cmp	r3, #126	; 0x7e
 8001446:	d901      	bls.n	800144c <ssd1306_WriteChar+0x28>
        return 0;
 8001448:	2300      	movs	r3, #0
 800144a:	e06d      	b.n	8001528 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800144c:	4b38      	ldr	r3, [pc, #224]	; (8001530 <ssd1306_WriteChar+0x10c>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	793b      	ldrb	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	2b82      	cmp	r3, #130	; 0x82
 8001458:	dc06      	bgt.n	8001468 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <ssd1306_WriteChar+0x10c>)
 800145c:	885b      	ldrh	r3, [r3, #2]
 800145e:	461a      	mov	r2, r3
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001464:	2b40      	cmp	r3, #64	; 0x40
 8001466:	dd01      	ble.n	800146c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001468:	2300      	movs	r3, #0
 800146a:	e05d      	b.n	8001528 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	e04c      	b.n	800150c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	3b20      	subs	r3, #32
 8001478:	7979      	ldrb	r1, [r7, #5]
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	4619      	mov	r1, r3
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	440b      	add	r3, r1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	e034      	b.n	80014fc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d012      	beq.n	80014c8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <ssd1306_WriteChar+0x10c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	b2d8      	uxtb	r0, r3
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <ssd1306_WriteChar+0x10c>)
 80014b2:	885b      	ldrh	r3, [r3, #2]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	7bba      	ldrb	r2, [r7, #14]
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff ff51 	bl	8001368 <ssd1306_DrawPixel>
 80014c6:	e016      	b.n	80014f6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <ssd1306_WriteChar+0x10c>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	b2d8      	uxtb	r0, r3
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <ssd1306_WriteChar+0x10c>)
 80014d8:	885b      	ldrh	r3, [r3, #2]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	b2d9      	uxtb	r1, r3
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bf0c      	ite	eq
 80014ea:	2301      	moveq	r3, #1
 80014ec:	2300      	movne	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	f7ff ff39 	bl	8001368 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	3301      	adds	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	793b      	ldrb	r3, [r7, #4]
 80014fe:	461a      	mov	r2, r3
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	4293      	cmp	r3, r2
 8001504:	d3c5      	bcc.n	8001492 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	797b      	ldrb	r3, [r7, #5]
 800150e:	461a      	mov	r2, r3
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4293      	cmp	r3, r2
 8001514:	d3ad      	bcc.n	8001472 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <ssd1306_WriteChar+0x10c>)
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	793b      	ldrb	r3, [r7, #4]
 800151c:	b29b      	uxth	r3, r3
 800151e:	4413      	add	r3, r2
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b03      	ldr	r3, [pc, #12]	; (8001530 <ssd1306_WriteChar+0x10c>)
 8001524:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3724      	adds	r7, #36	; 0x24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	200005c8 	.word	0x200005c8

08001534 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	1d38      	adds	r0, r7, #4
 800153e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001542:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001544:	e012      	b.n	800156c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	7818      	ldrb	r0, [r3, #0]
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	1d3a      	adds	r2, r7, #4
 800154e:	ca06      	ldmia	r2, {r1, r2}
 8001550:	f7ff ff68 	bl	8001424 <ssd1306_WriteChar>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d002      	beq.n	8001566 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	e008      	b.n	8001578 <ssd1306_WriteString+0x44>
        }
        str++;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3301      	adds	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1e8      	bne.n	8001546 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	781b      	ldrb	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	460a      	mov	r2, r1
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	4613      	mov	r3, r2
 800158e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <ssd1306_SetCursor+0x2c>)
 8001596:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <ssd1306_SetCursor+0x2c>)
 800159e:	805a      	strh	r2, [r3, #2]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	200005c8 	.word	0x200005c8

080015b0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4604      	mov	r4, r0
 80015b8:	4608      	mov	r0, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	4623      	mov	r3, r4
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	4603      	mov	r3, r0
 80015c4:	71bb      	strb	r3, [r7, #6]
 80015c6:	460b      	mov	r3, r1
 80015c8:	717b      	strb	r3, [r7, #5]
 80015ca:	4613      	mov	r3, r2
 80015cc:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80015ce:	797a      	ldrb	r2, [r7, #5]
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bfb8      	it	lt
 80015d8:	425b      	neglt	r3, r3
 80015da:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80015dc:	793a      	ldrb	r2, [r7, #4]
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bfb8      	it	lt
 80015e6:	425b      	neglt	r3, r3
 80015e8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80015ea:	79fa      	ldrb	r2, [r7, #7]
 80015ec:	797b      	ldrb	r3, [r7, #5]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d201      	bcs.n	80015f6 <ssd1306_Line+0x46>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e001      	b.n	80015fa <ssd1306_Line+0x4a>
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80015fc:	79ba      	ldrb	r2, [r7, #6]
 80015fe:	793b      	ldrb	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	d201      	bcs.n	8001608 <ssd1306_Line+0x58>
 8001604:	2301      	movs	r3, #1
 8001606:	e001      	b.n	800160c <ssd1306_Line+0x5c>
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001616:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800161a:	7939      	ldrb	r1, [r7, #4]
 800161c:	797b      	ldrb	r3, [r7, #5]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fea2 	bl	8001368 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001624:	e024      	b.n	8001670 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001626:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800162a:	79b9      	ldrb	r1, [r7, #6]
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fe9a 	bl	8001368 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	425b      	negs	r3, r3
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	429a      	cmp	r2, r3
 8001642:	dd08      	ble.n	8001656 <ssd1306_Line+0xa6>
            error -= deltaY;
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4413      	add	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	429a      	cmp	r2, r3
 800165c:	da08      	bge.n	8001670 <ssd1306_Line+0xc0>
            error += deltaX;
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	4413      	add	r3, r2
 8001664:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	4413      	add	r3, r2
 800166e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001670:	79fa      	ldrb	r2, [r7, #7]
 8001672:	797b      	ldrb	r3, [r7, #5]
 8001674:	429a      	cmp	r2, r3
 8001676:	d1d6      	bne.n	8001626 <ssd1306_Line+0x76>
 8001678:	79ba      	ldrb	r2, [r7, #6]
 800167a:	793b      	ldrb	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	d1d2      	bne.n	8001626 <ssd1306_Line+0x76>
        }
    }
    return;
 8001680:	bf00      	nop
}
 8001682:	3724      	adds	r7, #36	; 0x24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}

08001688 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af02      	add	r7, sp, #8
 800168e:	4604      	mov	r4, r0
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	461a      	mov	r2, r3
 8001696:	4623      	mov	r3, r4
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	4603      	mov	r3, r0
 800169c:	71bb      	strb	r3, [r7, #6]
 800169e:	460b      	mov	r3, r1
 80016a0:	717b      	strb	r3, [r7, #5]
 80016a2:	4613      	mov	r3, r2
 80016a4:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80016a6:	79bc      	ldrb	r4, [r7, #6]
 80016a8:	797a      	ldrb	r2, [r7, #5]
 80016aa:	79b9      	ldrb	r1, [r7, #6]
 80016ac:	79f8      	ldrb	r0, [r7, #7]
 80016ae:	7e3b      	ldrb	r3, [r7, #24]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4623      	mov	r3, r4
 80016b4:	f7ff ff7c 	bl	80015b0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80016b8:	793c      	ldrb	r4, [r7, #4]
 80016ba:	797a      	ldrb	r2, [r7, #5]
 80016bc:	79b9      	ldrb	r1, [r7, #6]
 80016be:	7978      	ldrb	r0, [r7, #5]
 80016c0:	7e3b      	ldrb	r3, [r7, #24]
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4623      	mov	r3, r4
 80016c6:	f7ff ff73 	bl	80015b0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80016ca:	793c      	ldrb	r4, [r7, #4]
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	7939      	ldrb	r1, [r7, #4]
 80016d0:	7978      	ldrb	r0, [r7, #5]
 80016d2:	7e3b      	ldrb	r3, [r7, #24]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4623      	mov	r3, r4
 80016d8:	f7ff ff6a 	bl	80015b0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80016dc:	79bc      	ldrb	r4, [r7, #6]
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	7939      	ldrb	r1, [r7, #4]
 80016e2:	79f8      	ldrb	r0, [r7, #7]
 80016e4:	7e3b      	ldrb	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4623      	mov	r3, r4
 80016ea:	f7ff ff61 	bl	80015b0 <ssd1306_Line>

    return;
 80016ee:	bf00      	nop
}
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd90      	pop	{r4, r7, pc}

080016f6 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001700:	2381      	movs	r3, #129	; 0x81
 8001702:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fd42 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fd3e 	bl	8001190 <ssd1306_WriteCommand>
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800172c:	23af      	movs	r3, #175	; 0xaf
 800172e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <ssd1306_SetDisplayOn+0x38>)
 8001732:	2201      	movs	r2, #1
 8001734:	715a      	strb	r2, [r3, #5]
 8001736:	e004      	b.n	8001742 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001738:	23ae      	movs	r3, #174	; 0xae
 800173a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <ssd1306_SetDisplayOn+0x38>)
 800173e:	2200      	movs	r2, #0
 8001740:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fd23 	bl	8001190 <ssd1306_WriteCommand>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200005c8 	.word	0x200005c8

08001758 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 800175e:	f006 f9ef 	bl	8007b40 <HAL_RCC_GetPCLK2Freq>
 8001762:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 8001764:	4b32      	ldr	r3, [pc, #200]	; (8001830 <ARGB_Init+0xd8>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <ARGB_Init+0x1c>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <ARGB_Init+0x1e>
 8001774:	2302      	movs	r3, #2
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <ARGB_Init+0xdc>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <ARGB_Init+0xe0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	b29b      	uxth	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <ARGB_Init+0xe0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <ARGB_Init+0xe0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7fe fe59 	bl	8000464 <__aeabi_ui2d>
 80017b2:	a31b      	add	r3, pc, #108	; (adr r3, 8001820 <ARGB_Init+0xc8>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe fece 	bl	8000558 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff f8da 	bl	800097c <__aeabi_d2uiz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <ARGB_Init+0xe4>)
 80017d2:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7fe fe45 	bl	8000464 <__aeabi_ui2d>
 80017da:	a313      	add	r3, pc, #76	; (adr r3, 8001828 <ARGB_Init+0xd0>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe feba 	bl	8000558 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f8c6 	bl	800097c <__aeabi_d2uiz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <ARGB_Init+0xe8>)
 80017fa:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <ARGB_Init+0xec>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <ARGB_Init+0xe0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	2104      	movs	r1, #4
 800180a:	4618      	mov	r0, r3
 800180c:	f007 f924 	bl	8008a58 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001810:	2001      	movs	r0, #1
 8001812:	f001 ff0d 	bl	8003630 <HAL_Delay>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	1eb851ec 	.word	0x1eb851ec
 8001824:	3fe1eb85 	.word	0x3fe1eb85
 8001828:	1eb851ec 	.word	0x1eb851ec
 800182c:	3fd1eb85 	.word	0x3fd1eb85
 8001830:	40023800 	.word	0x40023800
 8001834:	014f8b59 	.word	0x014f8b59
 8001838:	20000768 	.word	0x20000768
 800183c:	200005ce 	.word	0x200005ce
 8001840:	200005cf 	.word	0x200005cf
 8001844:	200006aa 	.word	0x200006aa

08001848 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2000      	movs	r0, #0
 8001852:	f000 f885 	bl	8001960 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <ARGB_SetBrightness+0x1c>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	7013      	strb	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	20000008 	.word	0x20000008

0800187c <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4623      	mov	r3, r4
 800188c:	80fb      	strh	r3, [r7, #6]
 800188e:	4603      	mov	r3, r0
 8001890:	717b      	strb	r3, [r7, #5]
 8001892:	460b      	mov	r3, r1
 8001894:	713b      	strb	r3, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	2b07      	cmp	r3, #7
 800189e:	d908      	bls.n	80018b2 <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	88fa      	ldrh	r2, [r7, #6]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <ARGB_SetRGB+0xdc>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018be:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c2:	797a      	ldrb	r2, [r7, #5]
 80018c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c8:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <ARGB_SetRGB+0xdc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018da:	793a      	ldrb	r2, [r7, #4]
 80018dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018e0:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <ARGB_SetRGB+0xdc>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f8:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 80018fa:	793b      	ldrb	r3, [r7, #4]
 80018fc:	21b0      	movs	r1, #176	; 0xb0
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f9ca 	bl	8001c98 <scale8>
 8001904:	4603      	mov	r3, r0
 8001906:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	21f0      	movs	r1, #240	; 0xf0
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f9c3 	bl	8001c98 <scale8>
 8001912:	4603      	mov	r3, r0
 8001914:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8001916:	793b      	ldrb	r3, [r7, #4]
 8001918:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8001922:	88fa      	ldrh	r2, [r7, #6]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	490c      	ldr	r1, [pc, #48]	; (800195c <ARGB_SetRGB+0xe0>)
 800192c:	7b7a      	ldrb	r2, [r7, #13]
 800192e:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	3301      	adds	r3, #1
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <ARGB_SetRGB+0xe0>)
 800193c:	7b3a      	ldrb	r2, [r7, #12]
 800193e:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	3302      	adds	r3, #2
 800194a:	4904      	ldr	r1, [pc, #16]	; (800195c <ARGB_SetRGB+0xe0>)
 800194c:	7afa      	ldrb	r2, [r7, #11]
 800194e:	54ca      	strb	r2, [r1, r3]
#endif
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}
 8001958:	20000008 	.word	0x20000008
 800195c:	200005d0 	.word	0x200005d0

08001960 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	460b      	mov	r3, r1
 800196c:	71bb      	strb	r3, [r7, #6]
 800196e:	4613      	mov	r3, r2
 8001970:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001972:	2300      	movs	r3, #0
 8001974:	81fb      	strh	r3, [r7, #14]
 8001976:	e00b      	b.n	8001990 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	b298      	uxth	r0, r3
 800197c:	797b      	ldrb	r3, [r7, #5]
 800197e:	79ba      	ldrb	r2, [r7, #6]
 8001980:	79f9      	ldrb	r1, [r7, #7]
 8001982:	f7ff ff7b 	bl	800187c <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	b29b      	uxth	r3, r3
 800198a:	3301      	adds	r3, #1
 800198c:	b29b      	uxth	r3, r3
 800198e:	81fb      	strh	r3, [r7, #14]
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b07      	cmp	r3, #7
 8001996:	d9ef      	bls.n	8001978 <ARGB_FillRGB+0x18>
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 80019aa:	4b9d      	ldr	r3, [pc, #628]	; (8001c20 <ARGB_Show+0x27c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 80019b0:	4b9c      	ldr	r3, [pc, #624]	; (8001c24 <ARGB_Show+0x280>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <ARGB_Show+0x22>
 80019ba:	4b9b      	ldr	r3, [pc, #620]	; (8001c28 <ARGB_Show+0x284>)
 80019bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <ARGB_Show+0x26>
        return ARGB_BUSY;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e15e      	b.n	8001c88 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	e0a6      	b.n	8001b1e <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019d0:	4b96      	ldr	r3, [pc, #600]	; (8001c2c <ARGB_Show+0x288>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	dd04      	ble.n	80019f2 <ARGB_Show+0x4e>
 80019e8:	4b91      	ldr	r3, [pc, #580]	; (8001c30 <ARGB_Show+0x28c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	e003      	b.n	80019fa <ARGB_Show+0x56>
 80019f2:	4b90      	ldr	r3, [pc, #576]	; (8001c34 <ARGB_Show+0x290>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <ARGB_Show+0x294>)
 8001a02:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a06:	4b89      	ldr	r3, [pc, #548]	; (8001c2c <ARGB_Show+0x288>)
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dd04      	ble.n	8001a28 <ARGB_Show+0x84>
 8001a1e:	4b84      	ldr	r3, [pc, #528]	; (8001c30 <ARGB_Show+0x28c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	e003      	b.n	8001a30 <ARGB_Show+0x8c>
 8001a28:	4b82      	ldr	r3, [pc, #520]	; (8001c34 <ARGB_Show+0x290>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3308      	adds	r3, #8
 8001a36:	4a80      	ldr	r2, [pc, #512]	; (8001c38 <ARGB_Show+0x294>)
 8001a38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a3c:	4b7b      	ldr	r3, [pc, #492]	; (8001c2c <ARGB_Show+0x288>)
 8001a3e:	789b      	ldrb	r3, [r3, #2]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dd04      	ble.n	8001a5e <ARGB_Show+0xba>
 8001a54:	4b76      	ldr	r3, [pc, #472]	; (8001c30 <ARGB_Show+0x28c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	e003      	b.n	8001a66 <ARGB_Show+0xc2>
 8001a5e:	4b75      	ldr	r3, [pc, #468]	; (8001c34 <ARGB_Show+0x290>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3310      	adds	r3, #16
 8001a6c:	4a72      	ldr	r2, [pc, #456]	; (8001c38 <ARGB_Show+0x294>)
 8001a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a72:	4b6e      	ldr	r3, [pc, #440]	; (8001c2c <ARGB_Show+0x288>)
 8001a74:	78db      	ldrb	r3, [r3, #3]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	dd04      	ble.n	8001a94 <ARGB_Show+0xf0>
 8001a8a:	4b69      	ldr	r3, [pc, #420]	; (8001c30 <ARGB_Show+0x28c>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4619      	mov	r1, r3
 8001a92:	e003      	b.n	8001a9c <ARGB_Show+0xf8>
 8001a94:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <ARGB_Show+0x290>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	3318      	adds	r3, #24
 8001aa2:	4a65      	ldr	r2, [pc, #404]	; (8001c38 <ARGB_Show+0x294>)
 8001aa4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001aa8:	4b60      	ldr	r3, [pc, #384]	; (8001c2c <ARGB_Show+0x288>)
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	dd04      	ble.n	8001aca <ARGB_Show+0x126>
 8001ac0:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <ARGB_Show+0x28c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	e003      	b.n	8001ad2 <ARGB_Show+0x12e>
 8001aca:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <ARGB_Show+0x290>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	3320      	adds	r3, #32
 8001ad8:	4a57      	ldr	r2, [pc, #348]	; (8001c38 <ARGB_Show+0x294>)
 8001ada:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ade:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <ARGB_Show+0x288>)
 8001ae0:	795b      	ldrb	r3, [r3, #5]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	dd04      	ble.n	8001b00 <ARGB_Show+0x15c>
 8001af6:	4b4e      	ldr	r3, [pc, #312]	; (8001c30 <ARGB_Show+0x28c>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	4619      	mov	r1, r3
 8001afe:	e003      	b.n	8001b08 <ARGB_Show+0x164>
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <ARGB_Show+0x290>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4619      	mov	r1, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3328      	adds	r3, #40	; 0x28
 8001b0e:	4a4a      	ldr	r2, [pc, #296]	; (8001c38 <ARGB_Show+0x294>)
 8001b10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	f67f af54 	bls.w	80019d0 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b2c:	e0a4      	b.n	8001c78 <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <ARGB_Show+0x298>)
 8001b30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d102      	bne.n	8001b40 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b3e:	e09b      	b.n	8001c78 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8001b40:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <ARGB_Show+0x298>)
 8001b42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d11d      	bne.n	8001b88 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <ARGB_Show+0x298>)
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <ARGB_Show+0x298>)
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	4a39      	ldr	r2, [pc, #228]	; (8001c40 <ARGB_Show+0x29c>)
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <ARGB_Show+0x298>)
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	4a38      	ldr	r2, [pc, #224]	; (8001c44 <ARGB_Show+0x2a0>)
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <ARGB_Show+0x298>)
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	4a37      	ldr	r2, [pc, #220]	; (8001c48 <ARGB_Show+0x2a4>)
 8001b6a:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <ARGB_Show+0x298>)
 8001b6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001b70:	4931      	ldr	r1, [pc, #196]	; (8001c38 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <ARGB_Show+0x298>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2330      	movs	r3, #48	; 0x30
 8001b7c:	f001 ff0c 	bl	8003998 <HAL_DMA_Start_IT>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <ARGB_Show+0x1f0>
 8001b86:	e002      	b.n	8001b8e <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b8c:	e074      	b.n	8001c78 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b92:	e071      	b.n	8001c78 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <ARGB_Show+0x298>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <ARGB_Show+0x298>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ba2:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <ARGB_Show+0x298>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a28      	ldr	r2, [pc, #160]	; (8001c4c <ARGB_Show+0x2a8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d107      	bne.n	8001bbe <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <ARGB_Show+0x298>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <ARGB_Show+0x298>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <ARGB_Show+0x298>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <ARGB_Show+0x2a8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d018      	beq.n	8001bfa <ARGB_Show+0x256>
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <ARGB_Show+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d013      	beq.n	8001bfa <ARGB_Show+0x256>
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <ARGB_Show+0x298>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <ARGB_Show+0x2ac>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d00e      	beq.n	8001bfa <ARGB_Show+0x256>
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <ARGB_Show+0x298>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <ARGB_Show+0x2b0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d009      	beq.n	8001bfa <ARGB_Show+0x256>
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <ARGB_Show+0x298>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <ARGB_Show+0x2b4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d004      	beq.n	8001bfa <ARGB_Show+0x256>
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <ARGB_Show+0x298>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <ARGB_Show+0x2b8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d132      	bne.n	8001c60 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <ARGB_Show+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d032      	beq.n	8001c72 <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <ARGB_Show+0x298>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <ARGB_Show+0x298>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c1c:	e029      	b.n	8001c72 <ARGB_Show+0x2ce>
 8001c1e:	bf00      	nop
 8001c20:	200006aa 	.word	0x200006aa
 8001c24:	200006a8 	.word	0x200006a8
 8001c28:	200007b0 	.word	0x200007b0
 8001c2c:	200005d0 	.word	0x200005d0
 8001c30:	200005ce 	.word	0x200005ce
 8001c34:	200005cf 	.word	0x200005cf
 8001c38:	200005e8 	.word	0x200005e8
 8001c3c:	20000768 	.word	0x20000768
 8001c40:	08001cc1 	.word	0x08001cc1
 8001c44:	08001f71 	.word	0x08001f71
 8001c48:	0800847b 	.word	0x0800847b
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40000800 	.word	0x40000800
 8001c58:	40000c00 	.word	0x40000c00
 8001c5c:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <ARGB_Show+0x2ec>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <ARGB_Show+0x2ec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e000      	b.n	8001c74 <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c72:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f47f af57 	bne.w	8001b2e <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <ARGB_Show+0x2f0>)
 8001c82:	2202      	movs	r2, #2
 8001c84:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001c86:	2302      	movs	r3, #2
    }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000768 	.word	0x20000768
 8001c94:	200006a8 	.word	0x200006a8

08001c98 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	79ba      	ldrb	r2, [r7, #6]
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	121b      	asrs	r3, r3, #8
 8001cb2:	b2db      	uxtb	r3, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ccc:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a9d      	ldr	r2, [pc, #628]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	f040 8131 	bne.w	8001f3a <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a9c      	ldr	r2, [pc, #624]	; (8001f4c <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	f040 812c 	bne.w	8001f3a <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001ce2:	4b9b      	ldr	r3, [pc, #620]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8128 	beq.w	8001f3e <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d10b      	bne.n	8001d10 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d136      	bne.n	8001d74 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d0e:	e031      	b.n	8001d74 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d10b      	bne.n	8001d32 <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d125      	bne.n	8001d74 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d30:	e020      	b.n	8001d74 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d10b      	bne.n	8001d54 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d114      	bne.n	8001d74 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d52:	e00f      	b.n	8001d74 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d10a      	bne.n	8001d74 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2208      	movs	r2, #8
 8001d62:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001d74:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b07      	cmp	r3, #7
 8001d7c:	d87b      	bhi.n	8001e76 <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	72fb      	strb	r3, [r7, #11]
 8001d82:	e06c      	b.n	8001e5e <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d84:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	4a70      	ldr	r2, [pc, #448]	; (8001f54 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	dd04      	ble.n	8001db4 <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001daa:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	4619      	mov	r1, r3
 8001db2:	e003      	b.n	8001dbc <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8001db4:	4b69      	ldr	r3, [pc, #420]	; (8001f5c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4619      	mov	r1, r3
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	3318      	adds	r3, #24
 8001dc2:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001dc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001dc8:	4b61      	ldr	r3, [pc, #388]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4a5e      	ldr	r2, [pc, #376]	; (8001f54 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	dd04      	ble.n	8001dfa <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4619      	mov	r1, r3
 8001df8:	e003      	b.n	8001e02 <ARGB_TIM_DMADelayPulseCplt+0x142>
 8001dfa:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	4619      	mov	r1, r3
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3320      	adds	r3, #32
 8001e08:	4a55      	ldr	r2, [pc, #340]	; (8001f60 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001e0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	4a4d      	ldr	r2, [pc, #308]	; (8001f54 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	dd04      	ble.n	8001e40 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8001e36:	4b48      	ldr	r3, [pc, #288]	; (8001f58 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	e003      	b.n	8001e48 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4619      	mov	r1, r3
 8001e48:	7afb      	ldrb	r3, [r7, #11]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3328      	adds	r3, #40	; 0x28
 8001e4e:	4a44      	ldr	r2, [pc, #272]	; (8001f60 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001e50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	72fb      	strb	r3, [r7, #11]
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b07      	cmp	r3, #7
 8001e64:	d98e      	bls.n	8001d84 <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	e05d      	b.n	8001f32 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	d80c      	bhi.n	8001e9a <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001e80:	2260      	movs	r2, #96	; 0x60
 8001e82:	2100      	movs	r1, #0
 8001e84:	4837      	ldr	r0, [pc, #220]	; (8001f64 <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8001e86:	f00e f9ff 	bl	8010288 <memset>
        BUF_COUNTER++;
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e96:	801a      	strh	r2, [r3, #0]
 8001e98:	e04b      	b.n	8001f32 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eae:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 fdc7 	bl	8003a48 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2a      	ldr	r2, [pc, #168]	; (8001f68 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d117      	bne.n	8001ef4 <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10f      	bne.n	8001ef4 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	f240 4344 	movw	r3, #1092	; 0x444
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a1a      	ldr	r2, [r3, #32]
 8001efa:	f241 1311 	movw	r3, #4369	; 0x1111
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10f      	bne.n	8001f24 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	f240 4344 	movw	r3, #1092	; 0x444
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
 8001f38:	e002      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f3a:	bf00      	nop
 8001f3c:	e000      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f3e:	bf00      	nop
}
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200007b0 	.word	0x200007b0
 8001f4c:	20000768 	.word	0x20000768
 8001f50:	200006a8 	.word	0x200006a8
 8001f54:	200005d0 	.word	0x200005d0
 8001f58:	200005ce 	.word	0x200005ce
 8001f5c:	200005cf 	.word	0x200005cf
 8001f60:	200005e8 	.word	0x200005e8
 8001f64:	20000648 	.word	0x20000648
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	200006aa 	.word	0x200006aa

08001f70 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a53      	ldr	r2, [pc, #332]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	f040 809e 	bne.w	80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a52      	ldr	r2, [pc, #328]	; (80020d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	f040 8099 	bne.w	80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f92:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8095 	beq.w	80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b07      	cmp	r3, #7
 8001fa6:	d87b      	bhi.n	80020a0 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001fa8:	2300      	movs	r3, #0
 8001faa:	72fb      	strb	r3, [r7, #11]
 8001fac:	e06c      	b.n	8002088 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a47      	ldr	r2, [pc, #284]	; (80020dc <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dd04      	ble.n	8001fde <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	e003      	b.n	8001fe6 <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	4619      	mov	r1, r3
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001fee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ff2:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	3301      	adds	r3, #1
 8002002:	4a36      	ldr	r2, [pc, #216]	; (80020dc <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8002004:	5cd3      	ldrb	r3, [r2, r3]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	7afb      	ldrb	r3, [r7, #11]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	dd04      	ble.n	8002024 <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 800201a:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4619      	mov	r1, r3
 8002022:	e003      	b.n	800202c <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 8002024:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4619      	mov	r1, r3
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3308      	adds	r3, #8
 8002032:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	3302      	adds	r3, #2
 8002048:	4a24      	ldr	r2, [pc, #144]	; (80020dc <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205c:	2b00      	cmp	r3, #0
 800205e:	dd04      	ble.n	800206a <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 8002060:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4619      	mov	r1, r3
 8002068:	e003      	b.n	8002072 <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4619      	mov	r1, r3
 8002072:	7afb      	ldrb	r3, [r7, #11]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	3310      	adds	r3, #16
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 800207a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	3301      	adds	r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	72fb      	strb	r3, [r7, #11]
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b07      	cmp	r3, #7
 800208e:	d98e      	bls.n	8001fae <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	3301      	adds	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	e014      	b.n	80020ca <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b09      	cmp	r3, #9
 80020a8:	d80f      	bhi.n	80020ca <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80020aa:	2260      	movs	r2, #96	; 0x60
 80020ac:	2100      	movs	r1, #0
 80020ae:	480e      	ldr	r0, [pc, #56]	; (80020e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80020b0:	f00e f8ea 	bl	8010288 <memset>
        BUF_COUNTER++;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020c0:	801a      	strh	r2, [r3, #0]
 80020c2:	e002      	b.n	80020ca <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80020c4:	bf00      	nop
 80020c6:	e000      	b.n	80020ca <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80020c8:	bf00      	nop
    }
}
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200007b0 	.word	0x200007b0
 80020d4:	20000768 	.word	0x20000768
 80020d8:	200006a8 	.word	0x200006a8
 80020dc:	200005d0 	.word	0x200005d0
 80020e0:	200005ce 	.word	0x200005ce
 80020e4:	200005cf 	.word	0x200005cf
 80020e8:	200005e8 	.word	0x200005e8

080020ec <AS5600_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1,AS5600_ADDR,&Data,1,10);	
	HAL_I2C_Mem_Write(&hi2c1,(AS5600_ADDR << 1),Reg,1,&Data,1,100);
}

uint8_t AS5600_ReadReg(uint8_t Reg)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af04      	add	r7, sp, #16
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead=0;	
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1,(AS5600_ADDR << 1),Reg,1,&DataRead,1,100);
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	2364      	movs	r3, #100	; 0x64
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	2301      	movs	r3, #1
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	f107 030f 	add.w	r3, r7, #15
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2301      	movs	r3, #1
 800210e:	216c      	movs	r1, #108	; 0x6c
 8002110:	4803      	ldr	r0, [pc, #12]	; (8002120 <AS5600_ReadReg+0x34>)
 8002112:	f002 fe55 	bl	8004dc0 <HAL_I2C_Mem_Read>
	
	
	return DataRead;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200006bc 	.word	0x200006bc

08002124 <AS5600_GetRawAngle>:
	return (int)((float)(AS5600_ReadReg(ANGLE_L) + (AS5600_ReadReg(ANGLE_H) << 8))/4096*360);	
}


uint16_t AS5600_GetRawAngle()
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
	uint16_t AngleVal=AS5600_ReadReg(RAWANG_L) + (AS5600_ReadReg(RAWANG_H) << 8);
 800212a:	200d      	movs	r0, #13
 800212c:	f7ff ffde 	bl	80020ec <AS5600_ReadReg>
 8002130:	4603      	mov	r3, r0
 8002132:	b29c      	uxth	r4, r3
 8002134:	200c      	movs	r0, #12
 8002136:	f7ff ffd9 	bl	80020ec <AS5600_ReadReg>
 800213a:	4603      	mov	r3, r0
 800213c:	b29b      	uxth	r3, r3
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b29b      	uxth	r3, r3
 8002142:	4423      	add	r3, r4
 8002144:	80fb      	strh	r3, [r7, #6]
	return AngleVal;	
 8002146:	88fb      	ldrh	r3, [r7, #6]
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bd90      	pop	{r4, r7, pc}

08002150 <AS5600_GetStatus>:

uint8_t AS5600_GetStatus()
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	return AS5600_ReadReg(STATUS) & 0x38;	
 8002154:	200b      	movs	r0, #11
 8002156:	f7ff ffc9 	bl	80020ec <AS5600_ReadReg>
 800215a:	4603      	mov	r3, r0
 800215c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002160:	b2db      	uxtb	r3, r3
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <drawMainMenu>:
    "C1:   C3:  ",
    "C2:   C4:  ",
	"    ADC    "
};

void drawMainMenu() {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af02      	add	r7, sp, #8

    uint8_t exit = 1;
 800216e:	2301      	movs	r3, #1
 8002170:	71fb      	strb	r3, [r7, #7]
    int8_t  current_item_menu = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	71bb      	strb	r3, [r7, #6]
    ssd1306_Fill(Black);
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff f8a6 	bl	80012c8 <ssd1306_Fill>
    ssd1306_DrawRectangle(1, 1, 127, 63, White);
 800217c:	2301      	movs	r3, #1
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	233f      	movs	r3, #63	; 0x3f
 8002182:	227f      	movs	r2, #127	; 0x7f
 8002184:	2101      	movs	r1, #1
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff fa7e 	bl	8001688 <ssd1306_DrawRectangle>
    udpateDisplay();
 800218c:	f000 f8b4 	bl	80022f8 <udpateDisplay>

    while(exit){ // Вывод главного меню
 8002190:	e0a5      	b.n	80022de <drawMainMenu+0x176>
        ssd1306_Fill(Black);
 8002192:	2000      	movs	r0, #0
 8002194:	f7ff f898 	bl	80012c8 <ssd1306_Fill>
        ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8002198:	2301      	movs	r3, #1
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	233f      	movs	r3, #63	; 0x3f
 800219e:	227f      	movs	r2, #127	; 0x7f
 80021a0:	2101      	movs	r1, #1
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff fa70 	bl	8001688 <ssd1306_DrawRectangle>
        udpateDisplay();
 80021a8:	f000 f8a6 	bl	80022f8 <udpateDisplay>
    	if(current_item_menu >= MENU_ITEMS_COUNT )
 80021ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	dd01      	ble.n	80021b8 <drawMainMenu+0x50>
			current_item_menu = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	71bb      	strb	r3, [r7, #6]
    	if(current_item_menu <= 0 )
 80021b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	dc01      	bgt.n	80021c4 <drawMainMenu+0x5c>
    	    current_item_menu = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	71bb      	strb	r3, [r7, #6]
    	ssd1306_SetCursor(START_POS_X, START_POS_Y+6);
 80021c4:	2106      	movs	r1, #6
 80021c6:	2002      	movs	r0, #2
 80021c8:	f7ff f9da 	bl	8001580 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[MENU_ITEMS_COUNT], Font_11x18, White);
 80021cc:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <drawMainMenu+0x188>)
 80021ce:	69d8      	ldr	r0, [r3, #28]
 80021d0:	4a48      	ldr	r2, [pc, #288]	; (80022f4 <drawMainMenu+0x18c>)
 80021d2:	2301      	movs	r3, #1
 80021d4:	ca06      	ldmia	r2, {r1, r2}
 80021d6:	f7ff f9ad 	bl	8001534 <ssd1306_WriteString>
    	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y + 5+6);
 80021da:	211d      	movs	r1, #29
 80021dc:	2002      	movs	r0, #2
 80021de:	f7ff f9cf 	bl	8001580 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[current_item_menu], Font_11x18, White);
 80021e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021e6:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <drawMainMenu+0x188>)
 80021e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021ec:	4a41      	ldr	r2, [pc, #260]	; (80022f4 <drawMainMenu+0x18c>)
 80021ee:	2301      	movs	r3, #1
 80021f0:	ca06      	ldmia	r2, {r1, r2}
 80021f2:	f7ff f99f 	bl	8001534 <ssd1306_WriteString>
    	udpateDisplay();
 80021f6:	f000 f87f 	bl	80022f8 <udpateDisplay>
        buttonEnReset();
 80021fa:	f000 f8bf 	bl	800237c <buttonEnReset>
        buttonLongReset();
 80021fe:	f000 f909 	bl	8002414 <buttonLongReset>
        encoderReset();
 8002202:	f000 f937 	bl	8002474 <encoderReset>
        HAL_Delay(500);
 8002206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800220a:	f001 fa11 	bl	8003630 <HAL_Delay>
    	while(1){
    		if(buttonLong()){
 800220e:	f000 f8e9 	bl	80023e4 <buttonLong>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <drawMainMenu+0xb6>
    			// Вернуться на стартовый дисплей
    			exit = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	71fb      	strb	r3, [r7, #7]
    			break;
 800221c:	e05f      	b.n	80022de <drawMainMenu+0x176>
    		}
    		if(buttonEn()){// если нажали ввод переходим в подменю
 800221e:	f000 f895 	bl	800234c <buttonEn>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d03f      	beq.n	80022a8 <drawMainMenu+0x140>
    			HAL_Delay(600);
 8002228:	f44f 7016 	mov.w	r0, #600	; 0x258
 800222c:	f001 fa00 	bl	8003630 <HAL_Delay>
        		if(buttonLong()){ // если нажата кнопка подтверждения ждем что это не выход
 8002230:	f000 f8d8 	bl	80023e4 <buttonLong>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <drawMainMenu+0xd8>
        			// Вернуться на стартовый дисплей
        			exit = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	71fb      	strb	r3, [r7, #7]
        			break;
 800223e:	e04e      	b.n	80022de <drawMainMenu+0x176>
        		}
    		    switch(current_item_menu){
 8002240:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d826      	bhi.n	8002296 <drawMainMenu+0x12e>
 8002248:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <drawMainMenu+0xe8>)
 800224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224e:	bf00      	nop
 8002250:	0800226d 	.word	0x0800226d
 8002254:	08002273 	.word	0x08002273
 8002258:	08002279 	.word	0x08002279
 800225c:	0800227f 	.word	0x0800227f
 8002260:	08002285 	.word	0x08002285
 8002264:	0800228b 	.word	0x0800228b
 8002268:	08002291 	.word	0x08002291
    		    	case 0: drawButtonMenu();	break;
 800226c:	f000 f94e 	bl	800250c <drawButtonMenu>
 8002270:	e013      	b.n	800229a <drawMainMenu+0x132>
    		    	case 1: drawLEDMenu(); 		break;
 8002272:	f000 fa2f 	bl	80026d4 <drawLEDMenu>
 8002276:	e010      	b.n	800229a <drawMainMenu+0x132>
    		    	case 2: drawE_inkMenu();	break;
 8002278:	f000 fa37 	bl	80026ea <drawE_inkMenu>
 800227c:	e00d      	b.n	800229a <drawMainMenu+0x132>
    		    	case 3: drawADCMenu();		break;
 800227e:	f000 fa3f 	bl	8002700 <drawADCMenu>
 8002282:	e00a      	b.n	800229a <drawMainMenu+0x132>
    		    	case 4: drawEncodMenu();	break;
 8002284:	f000 fa47 	bl	8002716 <drawEncodMenu>
 8002288:	e007      	b.n	800229a <drawMainMenu+0x132>
    		    	case 5: drawDACMenu();		break;
 800228a:	f000 fa4f 	bl	800272c <drawDACMenu>
 800228e:	e004      	b.n	800229a <drawMainMenu+0x132>
    		    	case 6: drawSettinMenu();	break;
 8002290:	f000 fa57 	bl	8002742 <drawSettinMenu>
 8002294:	e001      	b.n	800229a <drawMainMenu+0x132>
    		    	default: current_item_menu = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	71bb      	strb	r3, [r7, #6]
    		    }
                buttonEnReset();
 800229a:	f000 f86f 	bl	800237c <buttonEnReset>
                buttonLongReset();
 800229e:	f000 f8b9 	bl	8002414 <buttonLongReset>
                encoderReset();
 80022a2:	f000 f8e7 	bl	8002474 <encoderReset>
                break;
 80022a6:	e01a      	b.n	80022de <drawMainMenu+0x176>
    		}
    		if(encoderData() > 0){
 80022a8:	f000 f8c0 	bl	800242c <encoderData>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	dd08      	ble.n	80022c4 <drawMainMenu+0x15c>
    			current_item_menu++;
 80022b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	71bb      	strb	r3, [r7, #6]
    			encoderReset();
 80022be:	f000 f8d9 	bl	8002474 <encoderReset>
    			break;
 80022c2:	e00c      	b.n	80022de <drawMainMenu+0x176>
    		}
    		if(encoderData() < 0){
 80022c4:	f000 f8b2 	bl	800242c <encoderData>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da9f      	bge.n	800220e <drawMainMenu+0xa6>
    			current_item_menu--;
 80022ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	71bb      	strb	r3, [r7, #6]
    			encoderReset();
 80022da:	f000 f8cb 	bl	8002474 <encoderReset>
    while(exit){ // Вывод главного меню
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f47f af56 	bne.w	8002192 <drawMainMenu+0x2a>
    			break;
    		}
    	}
    }

}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	20000000 	.word	0x20000000

080022f8 <udpateDisplay>:

extern osMutexId_t BlockI2CHandle;

void udpateDisplay(){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	statusMutex = osMutexAcquire(BlockI2CHandle, 1000);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <udpateDisplay+0x34>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002304:	4618      	mov	r0, r3
 8002306:	f00a fa26 	bl	800c756 <osMutexAcquire>
 800230a:	4603      	mov	r3, r0
 800230c:	4a08      	ldr	r2, [pc, #32]	; (8002330 <udpateDisplay+0x38>)
 800230e:	6013      	str	r3, [r2, #0]
	if(statusMutex == osOK)
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <udpateDisplay+0x38>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <udpateDisplay+0x24>
		ssd1306_UpdateScreen();
 8002318:	f7fe fffa 	bl	8001310 <ssd1306_UpdateScreen>
	osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <udpateDisplay+0x34>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f00a fa63 	bl	800c7ec <osMutexRelease>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000814 	.word	0x20000814
 8002330:	200006ac 	.word	0x200006ac

08002334 <buttonUpSet>:


uint8_t buttonUp(){
	return buttonUpper;
}
void buttonUpSet(){
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	buttonUpper = 1;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <buttonUpSet+0x14>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	200006b0 	.word	0x200006b0

0800234c <buttonEn>:
void buttonUpReset(){
	buttonUpper = 0;
}

uint8_t buttonEn(){
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
	return buttonEnable;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <buttonEn+0x14>)
 8002352:	781b      	ldrb	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	200006b1 	.word	0x200006b1

08002364 <buttonEnSet>:
void buttonEnSet(){
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	buttonEnable = 1;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <buttonEnSet+0x14>)
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	200006b1 	.word	0x200006b1

0800237c <buttonEnReset>:
void buttonEnReset(){
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
	buttonEnable = 0;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <buttonEnReset+0x14>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	200006b1 	.word	0x200006b1

08002394 <buttonCounter>:

uint8_t buttonCounter(){
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	return button_counter;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <buttonCounter+0x14>)
 800239a:	781b      	ldrb	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	200006b2 	.word	0x200006b2

080023ac <buttonCounterSet>:
void buttonCounterSet(){
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
	button_counter++;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <buttonCounterSet+0x1c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <buttonCounterSet+0x1c>)
 80023ba:	701a      	strb	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	200006b2 	.word	0x200006b2

080023cc <buttonCounterReset>:

void buttonCounterReset(){
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
	button_counter = 0;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <buttonCounterReset+0x14>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	200006b2 	.word	0x200006b2

080023e4 <buttonLong>:

uint8_t buttonLong(){
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	return button_long;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <buttonLong+0x14>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200006b3 	.word	0x200006b3

080023fc <buttonLongSet>:
void buttonLongSet(){
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
	button_long = 1;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <buttonLongSet+0x14>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	200006b3 	.word	0x200006b3

08002414 <buttonLongReset>:
void buttonLongReset(){
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
	button_long = 0;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <buttonLongReset+0x14>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	200006b3 	.word	0x200006b3

0800242c <encoderData>:

int8_t encoderData(){
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
	return encoderAS56;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <encoderData+0x14>)
 8002432:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	200006b4 	.word	0x200006b4

08002444 <encoderSetUp>:
void encoderSetUp(){
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
	encoderAS56 = 1;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <encoderSetUp+0x14>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	200006b4 	.word	0x200006b4

0800245c <encoderSetDown>:

void encoderSetDown(){
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
	encoderAS56 = -1;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <encoderSetDown+0x14>)
 8002462:	22ff      	movs	r2, #255	; 0xff
 8002464:	701a      	strb	r2, [r3, #0]
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	200006b4 	.word	0x200006b4

08002474 <encoderReset>:

void encoderReset(){
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
	encoderAS56 = 0;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <encoderReset+0x14>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	200006b4 	.word	0x200006b4

0800248c <startDisplay>:
	uint8_t grn		[LED_NUM];
	uint8_t blu		[LED_NUM];
}LedData;


void startDisplay(){
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af02      	add	r7, sp, #8
	    ssd1306_Fill(Black);
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe ff18 	bl	80012c8 <ssd1306_Fill>
	    ssd1306_Line(0, 1, 128, 1, White);
 8002498:	2301      	movs	r3, #1
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2301      	movs	r3, #1
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	2101      	movs	r1, #1
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7ff f884 	bl	80015b0 <ssd1306_Line>
	    ssd1306_SetCursor(7, 7); //
 80024a8:	2107      	movs	r1, #7
 80024aa:	2007      	movs	r0, #7
 80024ac:	f7ff f868 	bl	8001580 <ssd1306_SetCursor>
	    ssd1306_WriteString("SPEED:-2", Font_11x18, White);
 80024b0:	4a12      	ldr	r2, [pc, #72]	; (80024fc <startDisplay+0x70>)
 80024b2:	2301      	movs	r3, #1
 80024b4:	ca06      	ldmia	r2, {r1, r2}
 80024b6:	4812      	ldr	r0, [pc, #72]	; (8002500 <startDisplay+0x74>)
 80024b8:	f7ff f83c 	bl	8001534 <ssd1306_WriteString>
	 	ssd1306_SetCursor(7, 7+18); //
 80024bc:	2119      	movs	r1, #25
 80024be:	2007      	movs	r0, #7
 80024c0:	f7ff f85e 	bl	8001580 <ssd1306_SetCursor>
	 	ssd1306_WriteString("CHARG:82%", Font_11x18, White);
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <startDisplay+0x70>)
 80024c6:	2301      	movs	r3, #1
 80024c8:	ca06      	ldmia	r2, {r1, r2}
 80024ca:	480e      	ldr	r0, [pc, #56]	; (8002504 <startDisplay+0x78>)
 80024cc:	f7ff f832 	bl	8001534 <ssd1306_WriteString>
	 	ssd1306_SetCursor(7, 7+18+18); //
 80024d0:	212b      	movs	r1, #43	; 0x2b
 80024d2:	2007      	movs	r0, #7
 80024d4:	f7ff f854 	bl	8001580 <ssd1306_SetCursor>
	 	ssd1306_WriteString("TIMER:3h22m", Font_11x18, White);
 80024d8:	4a08      	ldr	r2, [pc, #32]	; (80024fc <startDisplay+0x70>)
 80024da:	2301      	movs	r3, #1
 80024dc:	ca06      	ldmia	r2, {r1, r2}
 80024de:	480a      	ldr	r0, [pc, #40]	; (8002508 <startDisplay+0x7c>)
 80024e0:	f7ff f828 	bl	8001534 <ssd1306_WriteString>
	 	ssd1306_Line(0, 63, 128, 63, White);
 80024e4:	2301      	movs	r3, #1
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	233f      	movs	r3, #63	; 0x3f
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	213f      	movs	r1, #63	; 0x3f
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7ff f85e 	bl	80015b0 <ssd1306_Line>
  }
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000000 	.word	0x20000000
 8002500:	0801078c 	.word	0x0801078c
 8002504:	08010798 	.word	0x08010798
 8002508:	080107a4 	.word	0x080107a4

0800250c <drawButtonMenu>:

// Тестовая функция для проверки кнопок  готова
void drawButtonMenu(){
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
	uint8_t butEn = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
	uint8_t butLo = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	75bb      	strb	r3, [r7, #22]
	uint8_t encodP = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	757b      	strb	r3, [r7, #21]
	uint8_t encodM = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	753b      	strb	r3, [r7, #20]

	char sym_butEn[1];
	char sym_butLo[1];
	char sym_encP[1];
	char sym_encM[1];
	buttonEnReset();
 8002522:	f7ff ff2b 	bl	800237c <buttonEnReset>
	buttonLongReset();
 8002526:	f7ff ff75 	bl	8002414 <buttonLongReset>
	encoderReset();
 800252a:	f7ff ffa3 	bl	8002474 <encoderReset>

	ssd1306_Fill(Black);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe feca 	bl	80012c8 <ssd1306_Fill>
	ssd1306_SetCursor(START_POS_X, START_POS_Y);
 8002534:	2100      	movs	r1, #0
 8002536:	2002      	movs	r0, #2
 8002538:	f7ff f822 	bl	8001580 <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[2], Font_11x18, White);
 800253c:	4b62      	ldr	r3, [pc, #392]	; (80026c8 <drawButtonMenu+0x1bc>)
 800253e:	6898      	ldr	r0, [r3, #8]
 8002540:	4a62      	ldr	r2, [pc, #392]	; (80026cc <drawButtonMenu+0x1c0>)
 8002542:	2301      	movs	r3, #1
 8002544:	ca06      	ldmia	r2, {r1, r2}
 8002546:	f7fe fff5 	bl	8001534 <ssd1306_WriteString>
	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y);
 800254a:	2112      	movs	r1, #18
 800254c:	2002      	movs	r0, #2
 800254e:	f7ff f817 	bl	8001580 <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[0], Font_11x18, White);
 8002552:	4b5d      	ldr	r3, [pc, #372]	; (80026c8 <drawButtonMenu+0x1bc>)
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	4a5d      	ldr	r2, [pc, #372]	; (80026cc <drawButtonMenu+0x1c0>)
 8002558:	2301      	movs	r3, #1
 800255a:	ca06      	ldmia	r2, {r1, r2}
 800255c:	f7fe ffea 	bl	8001534 <ssd1306_WriteString>
	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y*2);
 8002560:	2124      	movs	r1, #36	; 0x24
 8002562:	2002      	movs	r0, #2
 8002564:	f7ff f80c 	bl	8001580 <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[1], Font_11x18, White);
 8002568:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <drawButtonMenu+0x1bc>)
 800256a:	6858      	ldr	r0, [r3, #4]
 800256c:	4a57      	ldr	r2, [pc, #348]	; (80026cc <drawButtonMenu+0x1c0>)
 800256e:	2301      	movs	r3, #1
 8002570:	ca06      	ldmia	r2, {r1, r2}
 8002572:	f7fe ffdf 	bl	8001534 <ssd1306_WriteString>

	while(1){
		if(buttonEn() == ON){
 8002576:	f7ff fee9 	bl	800234c <buttonEn>
 800257a:	4603      	mov	r3, r0
 800257c:	2b01      	cmp	r3, #1
 800257e:	d104      	bne.n	800258a <drawButtonMenu+0x7e>
			buttonEnReset();
 8002580:	f7ff fefc 	bl	800237c <buttonEnReset>
			butEn++;
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	3301      	adds	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
		}
		if(buttonLong() == ON){
 800258a:	f7ff ff2b 	bl	80023e4 <buttonLong>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d104      	bne.n	800259e <drawButtonMenu+0x92>
			buttonLongReset();
 8002594:	f7ff ff3e 	bl	8002414 <buttonLongReset>
			butLo++;
 8002598:	7dbb      	ldrb	r3, [r7, #22]
 800259a:	3301      	adds	r3, #1
 800259c:	75bb      	strb	r3, [r7, #22]
		}
		if(encoderData() > 0){
 800259e:	f7ff ff45 	bl	800242c <encoderData>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	dd04      	ble.n	80025b2 <drawButtonMenu+0xa6>
			encoderReset();
 80025a8:	f7ff ff64 	bl	8002474 <encoderReset>
			encodP++;
 80025ac:	7d7b      	ldrb	r3, [r7, #21]
 80025ae:	3301      	adds	r3, #1
 80025b0:	757b      	strb	r3, [r7, #21]
		}
		if(encoderData() < 0){
 80025b2:	f7ff ff3b 	bl	800242c <encoderData>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	da04      	bge.n	80025c6 <drawButtonMenu+0xba>
			encoderReset();
 80025bc:	f7ff ff5a 	bl	8002474 <encoderReset>
			encodM++;
 80025c0:	7d3b      	ldrb	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	753b      	strb	r3, [r7, #20]
		}
		encodM %=10;
 80025c6:	7d3a      	ldrb	r2, [r7, #20]
 80025c8:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <drawButtonMenu+0x1c4>)
 80025ca:	fba3 1302 	umull	r1, r3, r3, r2
 80025ce:	08d9      	lsrs	r1, r3, #3
 80025d0:	460b      	mov	r3, r1
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	753b      	strb	r3, [r7, #20]
		encodP %=10;
 80025dc:	7d7a      	ldrb	r2, [r7, #21]
 80025de:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <drawButtonMenu+0x1c4>)
 80025e0:	fba3 1302 	umull	r1, r3, r3, r2
 80025e4:	08d9      	lsrs	r1, r3, #3
 80025e6:	460b      	mov	r3, r1
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	757b      	strb	r3, [r7, #21]

		butEn = butEn % 10;
 80025f2:	7dfa      	ldrb	r2, [r7, #23]
 80025f4:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <drawButtonMenu+0x1c4>)
 80025f6:	fba3 1302 	umull	r1, r3, r3, r2
 80025fa:	08d9      	lsrs	r1, r3, #3
 80025fc:	460b      	mov	r3, r1
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	75fb      	strb	r3, [r7, #23]
		butLo = butLo % 10;
 8002608:	7dba      	ldrb	r2, [r7, #22]
 800260a:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <drawButtonMenu+0x1c4>)
 800260c:	fba3 1302 	umull	r1, r3, r3, r2
 8002610:	08d9      	lsrs	r1, r3, #3
 8002612:	460b      	mov	r3, r1
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	75bb      	strb	r3, [r7, #22]

		itoa(butEn, sym_butEn, 10);
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	f107 0110 	add.w	r1, r7, #16
 8002624:	220a      	movs	r2, #10
 8002626:	4618      	mov	r0, r3
 8002628:	f00d fe14 	bl	8010254 <itoa>
		itoa(butLo, sym_butLo, 10);
 800262c:	7dbb      	ldrb	r3, [r7, #22]
 800262e:	f107 010c 	add.w	r1, r7, #12
 8002632:	220a      	movs	r2, #10
 8002634:	4618      	mov	r0, r3
 8002636:	f00d fe0d 	bl	8010254 <itoa>
		itoa(encodM, sym_encM, 10);
 800263a:	7d3b      	ldrb	r3, [r7, #20]
 800263c:	1d39      	adds	r1, r7, #4
 800263e:	220a      	movs	r2, #10
 8002640:	4618      	mov	r0, r3
 8002642:	f00d fe07 	bl	8010254 <itoa>
		itoa(encodP, sym_encP, 10);
 8002646:	7d7b      	ldrb	r3, [r7, #21]
 8002648:	f107 0108 	add.w	r1, r7, #8
 800264c:	220a      	movs	r2, #10
 800264e:	4618      	mov	r0, r3
 8002650:	f00d fe00 	bl	8010254 <itoa>

		ssd1306_SetCursor(SIZE_FONT_X * 4, START_POS_Y + SIZE_FONT_Y);
 8002654:	2112      	movs	r1, #18
 8002656:	202c      	movs	r0, #44	; 0x2c
 8002658:	f7fe ff92 	bl	8001580 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butLo, Font_11x18, White);
 800265c:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <drawButtonMenu+0x1c0>)
 800265e:	f107 000c 	add.w	r0, r7, #12
 8002662:	2301      	movs	r3, #1
 8002664:	ca06      	ldmia	r2, {r1, r2}
 8002666:	f7fe ff65 	bl	8001534 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 10, START_POS_Y + SIZE_FONT_Y);
 800266a:	2112      	movs	r1, #18
 800266c:	206e      	movs	r0, #110	; 0x6e
 800266e:	f7fe ff87 	bl	8001580 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butEn, Font_11x18, White);
 8002672:	4a16      	ldr	r2, [pc, #88]	; (80026cc <drawButtonMenu+0x1c0>)
 8002674:	f107 0010 	add.w	r0, r7, #16
 8002678:	2301      	movs	r3, #1
 800267a:	ca06      	ldmia	r2, {r1, r2}
 800267c:	f7fe ff5a 	bl	8001534 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 4, START_POS_Y + SIZE_FONT_Y*2);
 8002680:	2124      	movs	r1, #36	; 0x24
 8002682:	202c      	movs	r0, #44	; 0x2c
 8002684:	f7fe ff7c 	bl	8001580 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_encM, Font_11x18, White);
 8002688:	4a10      	ldr	r2, [pc, #64]	; (80026cc <drawButtonMenu+0x1c0>)
 800268a:	1d38      	adds	r0, r7, #4
 800268c:	2301      	movs	r3, #1
 800268e:	ca06      	ldmia	r2, {r1, r2}
 8002690:	f7fe ff50 	bl	8001534 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 10, START_POS_Y + SIZE_FONT_Y*2);
 8002694:	2124      	movs	r1, #36	; 0x24
 8002696:	206e      	movs	r0, #110	; 0x6e
 8002698:	f7fe ff72 	bl	8001580 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_encP, Font_11x18, White);
 800269c:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <drawButtonMenu+0x1c0>)
 800269e:	f107 0008 	add.w	r0, r7, #8
 80026a2:	2301      	movs	r3, #1
 80026a4:	ca06      	ldmia	r2, {r1, r2}
 80026a6:	f7fe ff45 	bl	8001534 <ssd1306_WriteString>

		udpateDisplay();
 80026aa:	f7ff fe25 	bl	80022f8 <udpateDisplay>
		HAL_Delay(50);
 80026ae:	2032      	movs	r0, #50	; 0x32
 80026b0:	f000 ffbe 	bl	8003630 <HAL_Delay>
		if(butLo > 2)
 80026b4:	7dbb      	ldrb	r3, [r7, #22]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d800      	bhi.n	80026bc <drawButtonMenu+0x1b0>
		if(buttonEn() == ON){
 80026ba:	e75c      	b.n	8002576 <drawButtonMenu+0x6a>
			break;
 80026bc:	bf00      	nop
	}
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000002c 	.word	0x2000002c
 80026cc:	20000000 	.word	0x20000000
 80026d0:	cccccccd 	.word	0xcccccccd

080026d4 <drawLEDMenu>:

void drawLEDMenu(){
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
	uint8_t currentLed = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	71fb      	strb	r3, [r7, #7]
	uint8_t red,grn,blu;
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <drawE_inkMenu>:

void drawE_inkMenu(){
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	71fb      	strb	r3, [r7, #7]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <drawADCMenu>:

void drawADCMenu(){
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	71fb      	strb	r3, [r7, #7]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <drawEncodMenu>:
void drawEncodMenu(){
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	71fb      	strb	r3, [r7, #7]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <drawDACMenu>:
void drawDACMenu(){
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	71fb      	strb	r3, [r7, #7]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <drawSettinMenu>:
void drawSettinMenu(){
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	71fb      	strb	r3, [r7, #7]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800275e:	f000 ff25 	bl	80035ac <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002762:	f000 f887 	bl	8002874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002766:	f000 f9e5 	bl	8002b34 <MX_GPIO_Init>
  MX_DMA_Init();
 800276a:	f000 f9c3 	bl	8002af4 <MX_DMA_Init>
  MX_I2C1_Init();
 800276e:	f000 f8e9 	bl	8002944 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002772:	f000 f915 	bl	80029a0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002776:	f000 f949 	bl	8002a0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  test_i2c_dev(); // Определяем что все устройства на линии i2c подключены
 800277a:	f000 fa61 	bl	8002c40 <test_i2c_dev>
  ssd1306_Init();
 800277e:	f7fe fd39 	bl	80011f4 <ssd1306_Init>
  ssd1306_SetCursor(5, 10);
 8002782:	210a      	movs	r1, #10
 8002784:	2005      	movs	r0, #5
 8002786:	f7fe fefb 	bl	8001580 <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 800278a:	4a30      	ldr	r2, [pc, #192]	; (800284c <main+0xf4>)
 800278c:	2301      	movs	r3, #1
 800278e:	ca06      	ldmia	r2, {r1, r2}
 8002790:	482f      	ldr	r0, [pc, #188]	; (8002850 <main+0xf8>)
 8002792:	f7fe fecf 	bl	8001534 <ssd1306_WriteString>
  ssd1306_SetCursor(3, 40);
 8002796:	2128      	movs	r1, #40	; 0x28
 8002798:	2003      	movs	r0, #3
 800279a:	f7fe fef1 	bl	8001580 <ssd1306_SetCursor>
  ssd1306_WriteString(" Tap Start ", Font_11x18, White);
 800279e:	4a2b      	ldr	r2, [pc, #172]	; (800284c <main+0xf4>)
 80027a0:	2301      	movs	r3, #1
 80027a2:	ca06      	ldmia	r2, {r1, r2}
 80027a4:	482b      	ldr	r0, [pc, #172]	; (8002854 <main+0xfc>)
 80027a6:	f7fe fec5 	bl	8001534 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80027aa:	f7fe fdb1 	bl	8001310 <ssd1306_UpdateScreen>
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 80027ae:	482a      	ldr	r0, [pc, #168]	; (8002858 <main+0x100>)
 80027b0:	f009 ff4b 	bl	800c64a <osMutexNew>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4a29      	ldr	r2, [pc, #164]	; (800285c <main+0x104>)
 80027b8:	6013      	str	r3, [r2, #0]
  //osStatus_t status = osMutexAcquire(BlockI2CHandle, 1000);
  //osMutexRelease (BlockI2CHandle);

  HAL_Delay(1000);
 80027ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027be:	f000 ff37 	bl	8003630 <HAL_Delay>
  //EPD_WhiteScreen_ALL(gqImage_R,gqImage_R); //Refresh the picture in full screen
  //EPD_WhiteScreen_ALL(default_dis,gqImage_R);
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!

  //ADS1115_setConversionReadyPin(pADS);
  float data_from_adc_0 = 0;
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
  MCP4725 myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002860 <main+0x108>
 80027ce:	2260      	movs	r2, #96	; 0x60
 80027d0:	4924      	ldr	r1, [pc, #144]	; (8002864 <main+0x10c>)
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fb4c 	bl	8000e70 <MCP4725_init>
	// Check the connection:
	uint8_t state_dac = MCP4725_isConnected(&myMCP4725);
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fb69 	bl	8000eb2 <MCP4725_isConnected>
 80027e0:	4603      	mov	r3, r0
 80027e2:	75fb      	strb	r3, [r7, #23]
	uint16_t v_out = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	83fb      	strh	r3, [r7, #30]
  for(uint8_t temp = 0; temp < 80; temp++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	777b      	strb	r3, [r7, #29]
 80027ec:	e015      	b.n	800281a <main+0xc2>
	  MCP4725_setValue(&myMCP4725, v_out, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80027ee:	8bf9      	ldrh	r1, [r7, #30]
 80027f0:	1d38      	adds	r0, r7, #4
 80027f2:	2300      	movs	r3, #0
 80027f4:	2200      	movs	r2, #0
 80027f6:	f7fe fb9f 	bl	8000f38 <MCP4725_setValue>
	  HAL_Delay(50);
 80027fa:	2032      	movs	r0, #50	; 0x32
 80027fc:	f000 ff18 	bl	8003630 <HAL_Delay>
	  //data_from_adc_0 = (ADS1115_getData(pADS));
	  v_out+= 150;
 8002800:	8bfb      	ldrh	r3, [r7, #30]
 8002802:	3396      	adds	r3, #150	; 0x96
 8002804:	83fb      	strh	r3, [r7, #30]
	  if(v_out > 4060)
 8002806:	8bfb      	ldrh	r3, [r7, #30]
 8002808:	f640 72dc 	movw	r2, #4060	; 0xfdc
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <main+0xbc>
		  v_out = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	83fb      	strh	r3, [r7, #30]
  for(uint8_t temp = 0; temp < 80; temp++){
 8002814:	7f7b      	ldrb	r3, [r7, #29]
 8002816:	3301      	adds	r3, #1
 8002818:	777b      	strb	r3, [r7, #29]
 800281a:	7f7b      	ldrb	r3, [r7, #29]
 800281c:	2b4f      	cmp	r3, #79	; 0x4f
 800281e:	d9e6      	bls.n	80027ee <main+0x96>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002820:	f009 fe1c 	bl	800c45c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of BlockI2C */
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 8002824:	480c      	ldr	r0, [pc, #48]	; (8002858 <main+0x100>)
 8002826:	f009 ff10 	bl	800c64a <osMutexNew>
 800282a:	4603      	mov	r3, r0
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <main+0x104>)
 800282e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <main+0x110>)
 8002832:	2100      	movs	r1, #0
 8002834:	480d      	ldr	r0, [pc, #52]	; (800286c <main+0x114>)
 8002836:	f009 fe5b 	bl	800c4f0 <osThreadNew>
 800283a:	4603      	mov	r3, r0
 800283c:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <main+0x118>)
 800283e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 8002840:	f000 fe5c 	bl	80034fc <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002844:	f009 fe2e 	bl	800c4a4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002848:	e7fe      	b.n	8002848 <main+0xf0>
 800284a:	bf00      	nop
 800284c:	20000000 	.word	0x20000000
 8002850:	080107c8 	.word	0x080107c8
 8002854:	080107d4 	.word	0x080107d4
 8002858:	080115ec 	.word	0x080115ec
 800285c:	20000814 	.word	0x20000814
 8002860:	40533333 	.word	0x40533333
 8002864:	200006bc 	.word	0x200006bc
 8002868:	080115c8 	.word	0x080115c8
 800286c:	08002cf5 	.word	0x08002cf5
 8002870:	20000810 	.word	0x20000810

08002874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b094      	sub	sp, #80	; 0x50
 8002878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800287a:	f107 0320 	add.w	r3, r7, #32
 800287e:	2230      	movs	r2, #48	; 0x30
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f00d fd00 	bl	8010288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <SystemClock_Config+0xc8>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a26      	ldr	r2, [pc, #152]	; (800293c <SystemClock_Config+0xc8>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <SystemClock_Config+0xc8>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <SystemClock_Config+0xcc>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a20      	ldr	r2, [pc, #128]	; (8002940 <SystemClock_Config+0xcc>)
 80028be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <SystemClock_Config+0xcc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028da:	2302      	movs	r3, #2
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80028e4:	2319      	movs	r3, #25
 80028e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80028e8:	2390      	movs	r3, #144	; 0x90
 80028ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ec:	2302      	movs	r3, #2
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80028f0:	2303      	movs	r3, #3
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f4:	f107 0320 	add.w	r3, r7, #32
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 fcdd 	bl	80072b8 <HAL_RCC_OscConfig>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002904:	f000 fa12 	bl	8002d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002908:	230f      	movs	r3, #15
 800290a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800290c:	2302      	movs	r3, #2
 800290e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	2102      	movs	r1, #2
 8002924:	4618      	mov	r0, r3
 8002926:	f004 ff3f 	bl	80077a8 <HAL_RCC_ClockConfig>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002930:	f000 f9fc 	bl	8002d2c <Error_Handler>
  }
}
 8002934:	bf00      	nop
 8002936:	3750      	adds	r7, #80	; 0x50
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	40007000 	.word	0x40007000

08002944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <MX_I2C1_Init+0x50>)
 800294a:	4a13      	ldr	r2, [pc, #76]	; (8002998 <MX_I2C1_Init+0x54>)
 800294c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_I2C1_Init+0x50>)
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <MX_I2C1_Init+0x58>)
 8002952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <MX_I2C1_Init+0x50>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_I2C1_Init+0x50>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_I2C1_Init+0x50>)
 8002962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002966:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <MX_I2C1_Init+0x50>)
 800296a:	2200      	movs	r2, #0
 800296c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_I2C1_Init+0x50>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <MX_I2C1_Init+0x50>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_I2C1_Init+0x50>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002980:	4804      	ldr	r0, [pc, #16]	; (8002994 <MX_I2C1_Init+0x50>)
 8002982:	f001 fcbb 	bl	80042fc <HAL_I2C_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800298c:	f000 f9ce 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200006bc 	.word	0x200006bc
 8002998:	40005400 	.word	0x40005400
 800299c:	00061a80 	.word	0x00061a80

080029a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <MX_SPI1_Init+0x68>)
 80029a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029d4:	2230      	movs	r2, #48	; 0x30
 80029d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029ec:	220a      	movs	r2, #10
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029f0:	4804      	ldr	r0, [pc, #16]	; (8002a04 <MX_SPI1_Init+0x64>)
 80029f2:	f005 f8eb 	bl	8007bcc <HAL_SPI_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029fc:	f000 f996 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000710 	.word	0x20000710
 8002a08:	40013000 	.word	0x40013000

08002a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08e      	sub	sp, #56	; 0x38
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a20:	f107 0320 	add.w	r3, r7, #32
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
 8002a38:	615a      	str	r2, [r3, #20]
 8002a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a3c:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4a:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002a52:	2259      	movs	r2, #89	; 0x59
 8002a54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a62:	4823      	ldr	r0, [pc, #140]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002a64:	f005 f93b 	bl	8007cde <HAL_TIM_Base_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002a6e:	f000 f95d 	bl	8002d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	481c      	ldr	r0, [pc, #112]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002a80:	f005 fc02 	bl	8008288 <HAL_TIM_ConfigClockSource>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002a8a:	f000 f94f 	bl	8002d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a8e:	4818      	ldr	r0, [pc, #96]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002a90:	f005 f9d6 	bl	8007e40 <HAL_TIM_PWM_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002a9a:	f000 f947 	bl	8002d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aa6:	f107 0320 	add.w	r3, r7, #32
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4810      	ldr	r0, [pc, #64]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002aae:	f005 fff9 	bl	8008aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002ab8:	f000 f938 	bl	8002d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002abc:	2360      	movs	r3, #96	; 0x60
 8002abe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	2204      	movs	r2, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4807      	ldr	r0, [pc, #28]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002ad4:	f005 fb16 	bl	8008104 <HAL_TIM_PWM_ConfigChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002ade:	f000 f925 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ae2:	4803      	ldr	r0, [pc, #12]	; (8002af0 <MX_TIM2_Init+0xe4>)
 8002ae4:	f000 fa44 	bl	8002f70 <HAL_TIM_MspPostInit>

}
 8002ae8:	bf00      	nop
 8002aea:	3738      	adds	r7, #56	; 0x38
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000768 	.word	0x20000768

08002af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_DMA_Init+0x3c>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <MX_DMA_Init+0x3c>)
 8002b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_DMA_Init+0x3c>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2105      	movs	r1, #5
 8002b1a:	2011      	movs	r0, #17
 8002b1c:	f000 fe64 	bl	80037e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b20:	2011      	movs	r0, #17
 8002b22:	f000 fe7d 	bl	8003820 <HAL_NVIC_EnableIRQ>

}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800

08002b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <MX_GPIO_Init+0xe0>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <MX_GPIO_Init+0xe0>)
 8002b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <MX_GPIO_Init+0xe0>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <MX_GPIO_Init+0xe0>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <MX_GPIO_Init+0xe0>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <MX_GPIO_Init+0xe0>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <MX_GPIO_Init+0xe0>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <MX_GPIO_Init+0xe0>)
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <MX_GPIO_Init+0xe0>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2107      	movs	r1, #7
 8002ba2:	481d      	ldr	r0, [pc, #116]	; (8002c18 <MX_GPIO_Init+0xe4>)
 8002ba4:	f001 fb78 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8002ba8:	2307      	movs	r3, #7
 8002baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4816      	ldr	r0, [pc, #88]	; (8002c18 <MX_GPIO_Init+0xe4>)
 8002bc0:	f001 f9ce 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 8002bd2:	f107 030c 	add.w	r3, r7, #12
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480f      	ldr	r0, [pc, #60]	; (8002c18 <MX_GPIO_Init+0xe4>)
 8002bda:	f001 f9c1 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 8002bde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002be4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bea:	2301      	movs	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4808      	ldr	r0, [pc, #32]	; (8002c18 <MX_GPIO_Init+0xe4>)
 8002bf6:	f001 f9b3 	bl	8003f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2105      	movs	r1, #5
 8002bfe:	2028      	movs	r0, #40	; 0x28
 8002c00:	f000 fdf2 	bl	80037e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c04:	2028      	movs	r0, #40	; 0x28
 8002c06:	f000 fe0b 	bl	8003820 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c0a:	bf00      	nop
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020400 	.word	0x40020400

08002c1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_button_on_Pin){
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c2c:	d104      	bne.n	8002c38 <HAL_GPIO_EXTI_Callback+0x1c>
		buttonEnSet(ON);
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f7ff fb98 	bl	8002364 <buttonEnSet>
		buttonUpSet();
 8002c34:	f7ff fb7e 	bl	8002334 <buttonUpSet>
	}
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <test_i2c_dev>:


uint8_t test_i2c_dev(){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef stateI2c;
	  // Подсчёт устройств в сети I2C 60-display, 72-ацп, 54-encoder, 96 -dac/
	  for(uint8_t i = 1; i < 127 ; i++){
 8002c46:	2301      	movs	r3, #1
 8002c48:	71fb      	strb	r3, [r7, #7]
 8002c4a:	e046      	b.n	8002cda <test_i2c_dev+0x9a>
		  stateI2c = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	b299      	uxth	r1, r3
 8002c54:	230a      	movs	r3, #10
 8002c56:	2202      	movs	r2, #2
 8002c58:	4824      	ldr	r0, [pc, #144]	; (8002cec <test_i2c_dev+0xac>)
 8002c5a:	f002 fad7 	bl	800520c <HAL_I2C_IsDeviceReady>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71bb      	strb	r3, [r7, #6]
		  if(stateI2c == HAL_OK){
 8002c62:	79bb      	ldrb	r3, [r7, #6]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d134      	bne.n	8002cd2 <test_i2c_dev+0x92>
			  switch ( i ) {
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	2b60      	cmp	r3, #96	; 0x60
 8002c6c:	d01c      	beq.n	8002ca8 <test_i2c_dev+0x68>
 8002c6e:	2b60      	cmp	r3, #96	; 0x60
 8002c70:	dc20      	bgt.n	8002cb4 <test_i2c_dev+0x74>
 8002c72:	2b48      	cmp	r3, #72	; 0x48
 8002c74:	d012      	beq.n	8002c9c <test_i2c_dev+0x5c>
 8002c76:	2b48      	cmp	r3, #72	; 0x48
 8002c78:	dc1c      	bgt.n	8002cb4 <test_i2c_dev+0x74>
 8002c7a:	2b36      	cmp	r3, #54	; 0x36
 8002c7c:	d002      	beq.n	8002c84 <test_i2c_dev+0x44>
 8002c7e:	2b3c      	cmp	r3, #60	; 0x3c
 8002c80:	d006      	beq.n	8002c90 <test_i2c_dev+0x50>
 8002c82:	e017      	b.n	8002cb4 <test_i2c_dev+0x74>
			  	  case ENC_ADRESS: devise_i2c_tree.encoder_dev = ON; break;
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <test_i2c_dev+0xb0>)
 8002c86:	7813      	ldrb	r3, [r2, #0]
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	7013      	strb	r3, [r2, #0]
 8002c8e:	e021      	b.n	8002cd4 <test_i2c_dev+0x94>
			  	  case DIS_ADRESS: devise_i2c_tree.display_dev = ON; break;
 8002c90:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <test_i2c_dev+0xb0>)
 8002c92:	7813      	ldrb	r3, [r2, #0]
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	7013      	strb	r3, [r2, #0]
 8002c9a:	e01b      	b.n	8002cd4 <test_i2c_dev+0x94>
			  	  case ADC_ADRESS: devise_i2c_tree.ADC_dev 	   = ON; break;
 8002c9c:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <test_i2c_dev+0xb0>)
 8002c9e:	7813      	ldrb	r3, [r2, #0]
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	7013      	strb	r3, [r2, #0]
 8002ca6:	e015      	b.n	8002cd4 <test_i2c_dev+0x94>
			  	  case DAC_ADRESS: devise_i2c_tree.DAC_dev 	   = ON; break;
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <test_i2c_dev+0xb0>)
 8002caa:	7813      	ldrb	r3, [r2, #0]
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	7013      	strb	r3, [r2, #0]
 8002cb2:	e00f      	b.n	8002cd4 <test_i2c_dev+0x94>
			      default: devise_i2c_tree.unknown_dev++;
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <test_i2c_dev+0xb0>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	b2d9      	uxtb	r1, r3
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <test_i2c_dev+0xb0>)
 8002cc8:	7813      	ldrb	r3, [r2, #0]
 8002cca:	f361 1307 	bfi	r3, r1, #4, #4
 8002cce:	7013      	strb	r3, [r2, #0]
 8002cd0:	e000      	b.n	8002cd4 <test_i2c_dev+0x94>
			      }
		  }
 8002cd2:	bf00      	nop
	  for(uint8_t i = 1; i < 127 ; i++){
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	71fb      	strb	r3, [r7, #7]
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	2b7e      	cmp	r3, #126	; 0x7e
 8002cde:	d9b5      	bls.n	8002c4c <test_i2c_dev+0xc>
	  }
  }
 8002ce0:	bf00      	nop
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200006bc 	.word	0x200006bc
 8002cf0:	200006b8 	.word	0x200006b8

08002cf4 <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002cfc:	f00c fd56 	bl	800f7ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8002d00:	2001      	movs	r0, #1
 8002d02:	f009 fc87 	bl	800c614 <osDelay>
 8002d06:	e7fb      	b.n	8002d00 <StartEmptyTask+0xc>

08002d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d1a:	f000 fc69 	bl	80035f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40014000 	.word	0x40014000

08002d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d30:	b672      	cpsid	i
}
 8002d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <Error_Handler+0x8>
	...

08002d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_MspInit+0x54>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <HAL_MspInit+0x54>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <HAL_MspInit+0x54>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_MspInit+0x54>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_MspInit+0x54>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_MspInit+0x54>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	210f      	movs	r1, #15
 8002d7a:	f06f 0001 	mvn.w	r0, #1
 8002d7e:	f000 fd33 	bl	80037e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800

08002d90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <HAL_I2C_MspInit+0x84>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d12b      	bne.n	8002e0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_I2C_MspInit+0x88>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <HAL_I2C_MspInit+0x88>)
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_I2C_MspInit+0x88>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dce:	23c0      	movs	r3, #192	; 0xc0
 8002dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd2:	2312      	movs	r3, #18
 8002dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dde:	2304      	movs	r3, #4
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	480c      	ldr	r0, [pc, #48]	; (8002e1c <HAL_I2C_MspInit+0x8c>)
 8002dea:	f001 f8b9 	bl	8003f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_I2C_MspInit+0x88>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <HAL_I2C_MspInit+0x88>)
 8002df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_I2C_MspInit+0x88>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40005400 	.word	0x40005400
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020400 	.word	0x40020400

08002e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <HAL_SPI_MspInit+0x84>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d12b      	bne.n	8002e9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e50:	6453      	str	r3, [r2, #68]	; 0x44
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a10      	ldr	r2, [pc, #64]	; (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002e7a:	23a0      	movs	r3, #160	; 0xa0
 8002e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e8a:	2305      	movs	r3, #5
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	f107 0314 	add.w	r3, r7, #20
 8002e92:	4619      	mov	r1, r3
 8002e94:	4805      	ldr	r0, [pc, #20]	; (8002eac <HAL_SPI_MspInit+0x8c>)
 8002e96:	f001 f863 	bl	8003f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e9a:	bf00      	nop
 8002e9c:	3728      	adds	r7, #40	; 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40013000 	.word	0x40013000
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020000 	.word	0x40020000

08002eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d14c      	bne.n	8002f5c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_TIM_Base_MspInit+0xb4>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <HAL_TIM_Base_MspInit+0xb4>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_TIM_Base_MspInit+0xb4>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002ee0:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <HAL_TIM_Base_MspInit+0xbc>)
 8002ee2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8002ee4:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002ee6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002eea:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002efe:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f06:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f14:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f1e:	2204      	movs	r2, #4
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f24:	2203      	movs	r2, #3
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f36:	f000 fc81 	bl	800383c <HAL_DMA_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8002f40:	f7ff fef4 	bl	8002d2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28
 8002f4a:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
 8002f56:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <HAL_TIM_Base_MspInit+0xb8>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	200007b0 	.word	0x200007b0
 8002f6c:	400260a0 	.word	0x400260a0

08002f70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d11d      	bne.n	8002fce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_TIM_MspPostInit+0x68>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_TIM_MspPostInit+0x68>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_TIM_MspPostInit+0x68>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	f107 030c 	add.w	r3, r7, #12
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <HAL_TIM_MspPostInit+0x6c>)
 8002fca:	f000 ffc9 	bl	8003f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fce:	bf00      	nop
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40020000 	.word	0x40020000

08002fe0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_InitTick+0xd0>)
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	4a2d      	ldr	r2, [pc, #180]	; (80030b0 <HAL_InitTick+0xd0>)
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffe:	6453      	str	r3, [r2, #68]	; 0x44
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_InitTick+0xd0>)
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800300c:	f107 020c 	add.w	r2, r7, #12
 8003010:	f107 0310 	add.w	r3, r7, #16
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f004 fda6 	bl	8007b68 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800301c:	f004 fd90 	bl	8007b40 <HAL_RCC_GetPCLK2Freq>
 8003020:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_InitTick+0xd4>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	3b01      	subs	r3, #1
 800302e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_InitTick+0xd8>)
 8003032:	4a22      	ldr	r2, [pc, #136]	; (80030bc <HAL_InitTick+0xdc>)
 8003034:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_InitTick+0xd8>)
 8003038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800303c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_InitTick+0xd8>)
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_InitTick+0xd8>)
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304a:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <HAL_InitTick+0xd8>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_InitTick+0xd8>)
 8003052:	2200      	movs	r2, #0
 8003054:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8003056:	4818      	ldr	r0, [pc, #96]	; (80030b8 <HAL_InitTick+0xd8>)
 8003058:	f004 fe41 	bl	8007cde <HAL_TIM_Base_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11b      	bne.n	80030a2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800306a:	4813      	ldr	r0, [pc, #76]	; (80030b8 <HAL_InitTick+0xd8>)
 800306c:	f004 fe86 	bl	8007d7c <HAL_TIM_Base_Start_IT>
 8003070:	4603      	mov	r3, r0
 8003072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800307a:	2b00      	cmp	r3, #0
 800307c:	d111      	bne.n	80030a2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800307e:	2018      	movs	r0, #24
 8003080:	f000 fbce 	bl	8003820 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b0f      	cmp	r3, #15
 8003088:	d808      	bhi.n	800309c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800308a:	2200      	movs	r2, #0
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	2018      	movs	r0, #24
 8003090:	f000 fbaa 	bl	80037e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_InitTick+0xe0>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e002      	b.n	80030a2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80030a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3730      	adds	r7, #48	; 0x30
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	20000818 	.word	0x20000818
 80030bc:	40014000 	.word	0x40014000
 80030c0:	2000003c 	.word	0x2000003c

080030c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <NMI_Handler+0x4>

080030ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <HardFault_Handler+0x4>

080030d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <MemManage_Handler+0x4>

080030d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030da:	e7fe      	b.n	80030da <BusFault_Handler+0x4>

080030dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e0:	e7fe      	b.n	80030e0 <UsageFault_Handler+0x4>

080030e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <DMA1_Stream6_IRQHandler+0x10>)
 80030f6:	f000 fcc9 	bl	8003a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200007b0 	.word	0x200007b0

08003104 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800310a:	f004 fef2 	bl	8007ef2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000818 	.word	0x20000818

08003118 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 800311c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003120:	f001 f8d4 	bl	80042cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}

08003128 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800312c:	4802      	ldr	r0, [pc, #8]	; (8003138 <OTG_FS_IRQHandler+0x10>)
 800312e:	f002 ff96 	bl	800605e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200067a4 	.word	0x200067a4

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f00d f830 	bl	80101d0 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	220c      	movs	r2, #12
 8003174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20020000 	.word	0x20020000
 800319c:	00004000 	.word	0x00004000
 80031a0:	20000860 	.word	0x20000860
 80031a4:	20006ee0 	.word	0x20006ee0

080031a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <SystemInit+0x20>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <SystemInit+0x20>)
 80031b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <StartLedControlTask>:

#include "tasks/LedControl.h"

void StartLedControlTask(void *argument){
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	  ARGB_Init();  // Initialization
 80031d4:	f7fe fac0 	bl	8001758 <ARGB_Init>
	  ARGB_Clear();
 80031d8:	f7fe fb36 	bl	8001848 <ARGB_Clear>
	  while (ARGB_Show() != ARGB_OK);
 80031dc:	bf00      	nop
 80031de:	f7fe fbe1 	bl	80019a4 <ARGB_Show>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d1fa      	bne.n	80031de <StartLedControlTask+0x12>
	  ARGB_SetBrightness(100);
 80031e8:	2064      	movs	r0, #100	; 0x64
 80031ea:	f7fe fb37 	bl	800185c <ARGB_SetBrightness>
	  ARGB_Clear(); // Clear stirp
 80031ee:	f7fe fb2b 	bl	8001848 <ARGB_Clear>
	  while (ARGB_Show() != ARGB_OK);
 80031f2:	bf00      	nop
 80031f4:	f7fe fbd6 	bl	80019a4 <ARGB_Show>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d1fa      	bne.n	80031f4 <StartLedControlTask+0x28>
		ARGB_SetRGB(1, 0, 50, 0); // Set LED №1 with 255 Green
 80031fe:	2300      	movs	r3, #0
 8003200:	2232      	movs	r2, #50	; 0x32
 8003202:	2100      	movs	r1, #0
 8003204:	2001      	movs	r0, #1
 8003206:	f7fe fb39 	bl	800187c <ARGB_SetRGB>
		ARGB_SetRGB(2, 50, 0, 0); // Set LED №2 with 255 Green
 800320a:	2300      	movs	r3, #0
 800320c:	2200      	movs	r2, #0
 800320e:	2132      	movs	r1, #50	; 0x32
 8003210:	2002      	movs	r0, #2
 8003212:	f7fe fb33 	bl	800187c <ARGB_SetRGB>
		ARGB_SetRGB(3, 0, 0, 50); // Set LED №3 with 255 Green
 8003216:	2332      	movs	r3, #50	; 0x32
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	2003      	movs	r0, #3
 800321e:	f7fe fb2d 	bl	800187c <ARGB_SetRGB>
	  while (ARGB_Show() != ARGB_OK);
 8003222:	bf00      	nop
 8003224:	f7fe fbbe 	bl	80019a4 <ARGB_Show>
 8003228:	4603      	mov	r3, r0
 800322a:	2b02      	cmp	r3, #2
 800322c:	d1fa      	bne.n	8003224 <StartLedControlTask+0x58>

	for(;;){

		osDelay(25);
 800322e:	2019      	movs	r0, #25
 8003230:	f009 f9f0 	bl	800c614 <osDelay>
 8003234:	e7fb      	b.n	800322e <StartLedControlTask+0x62>

08003236 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]

	while(buttonEn() != ON){
 800323e:	e002      	b.n	8003246 <StartOledMenuTask+0x10>
		osDelay(50);
 8003240:	2032      	movs	r0, #50	; 0x32
 8003242:	f009 f9e7 	bl	800c614 <osDelay>
	while(buttonEn() != ON){
 8003246:	f7ff f881 	bl	800234c <buttonEn>
 800324a:	4603      	mov	r3, r0
 800324c:	2b01      	cmp	r3, #1
 800324e:	d1f7      	bne.n	8003240 <StartOledMenuTask+0xa>
	}
	buttonEnReset();
 8003250:	f7ff f894 	bl	800237c <buttonEnReset>
	for(;;){
		osDelay(50);
 8003254:	2032      	movs	r0, #50	; 0x32
 8003256:	f009 f9dd 	bl	800c614 <osDelay>
		if(buttonEn() == ON){
 800325a:	f7ff f877 	bl	800234c <buttonEn>
 800325e:	4603      	mov	r3, r0
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <StartOledMenuTask+0x32>
			drawMainMenu();
 8003264:	f7fe ff80 	bl	8002168 <drawMainMenu>
		}
		startDisplay();
 8003268:	f7ff f910 	bl	800248c <startDisplay>
		udpateDisplay();
 800326c:	f7ff f844 	bl	80022f8 <udpateDisplay>
		osDelay(50);
 8003270:	e7f0      	b.n	8003254 <StartOledMenuTask+0x1e>
	...

08003274 <StartSensOutTask>:

osStatus_t statusMutexI2C;
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
uint8_t command_CMD[10] = {0};
// Задача для опросо кнопок ADC и энкодера
void StartSensOutTask(void *argument){
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	initAllChanelADC();
 800327c:	f000 f8e8 	bl	8003450 <initAllChanelADC>
    pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configChanel1);
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <StartSensOutTask+0xd4>)
 8003282:	cb0c      	ldmia	r3, {r2, r3}
 8003284:	2148      	movs	r1, #72	; 0x48
 8003286:	4831      	ldr	r0, [pc, #196]	; (800334c <StartSensOutTask+0xd8>)
 8003288:	f7fd fd1a 	bl	8000cc0 <ADS1115_init>
 800328c:	4603      	mov	r3, r0
 800328e:	4a30      	ldr	r2, [pc, #192]	; (8003350 <StartSensOutTask+0xdc>)
 8003290:	6013      	str	r3, [r2, #0]
    ADS1115_updateConfig(pADS, configChanel1);
 8003292:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <StartSensOutTask+0xdc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2c      	ldr	r2, [pc, #176]	; (8003348 <StartSensOutTask+0xd4>)
 8003298:	ca06      	ldmia	r2, {r1, r2}
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd fd30 	bl	8000d00 <ADS1115_updateConfig>
    ADS1115_startContinousMode(pADS);
 80032a0:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <StartSensOutTask+0xdc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd fd5d 	bl	8000d64 <ADS1115_startContinousMode>
    uint8_t buffer[] = {0};
 80032aa:	2300      	movs	r3, #0
 80032ac:	733b      	strb	r3, [r7, #12]
	for(;;){
				if(command_CMD[0] != 0){
 80032ae:	4b29      	ldr	r3, [pc, #164]	; (8003354 <StartSensOutTask+0xe0>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d028      	beq.n	8003308 <StartSensOutTask+0x94>
					switch(command_CMD[0] - 48){
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <StartSensOutTask+0xe0>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	3b30      	subs	r3, #48	; 0x30
 80032bc:	3b01      	subs	r3, #1
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d816      	bhi.n	80032f0 <StartSensOutTask+0x7c>
 80032c2:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <StartSensOutTask+0x54>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	080032d9 	.word	0x080032d9
 80032cc:	080032df 	.word	0x080032df
 80032d0:	080032e5 	.word	0x080032e5
 80032d4:	080032eb 	.word	0x080032eb
						case 1: buttonEnSet();    break;
 80032d8:	f7ff f844 	bl	8002364 <buttonEnSet>
 80032dc:	e008      	b.n	80032f0 <StartSensOutTask+0x7c>
						case 2: buttonLongSet();  break;
 80032de:	f7ff f88d 	bl	80023fc <buttonLongSet>
 80032e2:	e005      	b.n	80032f0 <StartSensOutTask+0x7c>
						case 3: encoderSetUp();   break;
 80032e4:	f7ff f8ae 	bl	8002444 <encoderSetUp>
 80032e8:	e002      	b.n	80032f0 <StartSensOutTask+0x7c>
						case 4: encoderSetDown(); break;
 80032ea:	f7ff f8b7 	bl	800245c <encoderSetDown>
 80032ee:	bf00      	nop
					}
					buffer[0] = command_CMD[0] ;
 80032f0:	4b18      	ldr	r3, [pc, #96]	; (8003354 <StartSensOutTask+0xe0>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	733b      	strb	r3, [r7, #12]
					command_CMD[0] = 0;
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <StartSensOutTask+0xe0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
				  CDC_Transmit_FS(buffer, sizeof(buffer));
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	2101      	movs	r1, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f00c fb12 	bl	800f92c <CDC_Transmit_FS>
				}
		// Попытка захвата мьютекса с таймаутом 1000 мс
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <StartSensOutTask+0xe4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003310:	4618      	mov	r0, r3
 8003312:	f009 fa20 	bl	800c756 <osMutexAcquire>
 8003316:	4603      	mov	r3, r0
 8003318:	4a10      	ldr	r2, [pc, #64]	; (800335c <StartSensOutTask+0xe8>)
 800331a:	6013      	str	r3, [r2, #0]
		if(statusMutexI2C == osOK){
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <StartSensOutTask+0xe8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <StartSensOutTask+0xc8>
			calcDeltaAngle((int16_t)getEncoderData()); // Расчитываем смещение энкодера
 8003324:	f000 f876 	bl	8003414 <getEncoderData>
 8003328:	4603      	mov	r3, r0
 800332a:	b21b      	sxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f817 	bl	8003360 <calcDeltaAngle>
			osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <StartSensOutTask+0xe4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f009 fa58 	bl	800c7ec <osMutexRelease>
		}
		longButton();
 800333c:	f000 f848 	bl	80033d0 <longButton>
		osDelay(50);
 8003340:	2032      	movs	r0, #50	; 0x32
 8003342:	f009 f967 	bl	800c614 <osDelay>
				if(command_CMD[0] != 0){
 8003346:	e7b2      	b.n	80032ae <StartSensOutTask+0x3a>
 8003348:	2000086c 	.word	0x2000086c
 800334c:	200006bc 	.word	0x200006bc
 8003350:	2000088c 	.word	0x2000088c
 8003354:	20000894 	.word	0x20000894
 8003358:	20000814 	.word	0x20000814
 800335c:	20000890 	.word	0x20000890

08003360 <calcDeltaAngle>:
	}
}

void calcDeltaAngle(int16_t current_encoder_data){
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
	delta_encoder = current_encoder_data - old_encoder_data;
 800336a:	88fa      	ldrh	r2, [r7, #6]
 800336c:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <calcDeltaAngle+0x68>)
 800336e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003372:	b29b      	uxth	r3, r3
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	b29b      	uxth	r3, r3
 8003378:	b21a      	sxth	r2, r3
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <calcDeltaAngle+0x6c>)
 800337c:	801a      	strh	r2, [r3, #0]
	old_encoder_data = current_encoder_data;
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <calcDeltaAngle+0x68>)
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	8013      	strh	r3, [r2, #0]
	if(delta_encoder > MAX_ANGLE || delta_encoder < (-1)*MAX_ANGLE){
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <calcDeltaAngle+0x6c>)
 8003386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800338a:	2bb4      	cmp	r3, #180	; 0xb4
 800338c:	dc05      	bgt.n	800339a <calcDeltaAngle+0x3a>
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <calcDeltaAngle+0x6c>)
 8003390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003394:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8003398:	da02      	bge.n	80033a0 <calcDeltaAngle+0x40>
		delta_encoder = 0;
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <calcDeltaAngle+0x6c>)
 800339c:	2200      	movs	r2, #0
 800339e:	801a      	strh	r2, [r3, #0]
	}
	if(delta_encoder > MIN_ANGLE )
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <calcDeltaAngle+0x6c>)
 80033a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	dd01      	ble.n	80033ae <calcDeltaAngle+0x4e>
		encoderSetUp();
 80033aa:	f7ff f84b 	bl	8002444 <encoderSetUp>
	if(delta_encoder < (-1)*MIN_ANGLE)
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <calcDeltaAngle+0x6c>)
 80033b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b4:	f113 0f05 	cmn.w	r3, #5
 80033b8:	da01      	bge.n	80033be <calcDeltaAngle+0x5e>
		encoderSetDown();
 80033ba:	f7ff f84f 	bl	800245c <encoderSetDown>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000866 	.word	0x20000866
 80033cc:	20000868 	.word	0x20000868

080033d0 <longButton>:
void longButton(){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80033d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033da:	480d      	ldr	r0, [pc, #52]	; (8003410 <longButton+0x40>)
 80033dc:	f000 ff44 	bl	8004268 <HAL_GPIO_ReadPin>
 80033e0:	4603      	mov	r3, r0
 80033e2:	71fb      	strb	r3, [r7, #7]
	if(pinState == GPIO_PIN_RESET){
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <longButton+0x20>
		buttonCounterSet();
 80033ea:	f7fe ffdf 	bl	80023ac <buttonCounterSet>
 80033ee:	e001      	b.n	80033f4 <longButton+0x24>
	}
	else{
		buttonCounterReset();
 80033f0:	f7fe ffec 	bl	80023cc <buttonCounterReset>
	}

	if(buttonCounter() > 50){
 80033f4:	f7fe ffce 	bl	8002394 <buttonCounter>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b32      	cmp	r3, #50	; 0x32
 80033fc:	d903      	bls.n	8003406 <longButton+0x36>
		buttonLongSet();
 80033fe:	f7fe fffd 	bl	80023fc <buttonLongSet>
		buttonCounterReset();
 8003402:	f7fe ffe3 	bl	80023cc <buttonCounterReset>
	}
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40020400 	.word	0x40020400

08003414 <getEncoderData>:

u_magnituda magnituda;
uint16_t getEncoderData(){
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
	magnituda.data = AS5600_GetStatus();
 8003418:	f7fe fe9a 	bl	8002150 <AS5600_GetStatus>
 800341c:	4603      	mov	r3, r0
 800341e:	b2da      	uxtb	r2, r3
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <getEncoderData+0x34>)
 8003422:	701a      	strb	r2, [r3, #0]
	if(magnituda.state_magnit.MD == ON)
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <getEncoderData+0x34>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <getEncoderData+0x2a>
		raw_angle = AS5600_GetRawAngle();
 8003432:	f7fe fe77 	bl	8002124 <AS5600_GetRawAngle>
 8003436:	4603      	mov	r3, r0
 8003438:	b29a      	uxth	r2, r3
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <getEncoderData+0x38>)
 800343c:	801a      	strh	r2, [r3, #0]
	return 	raw_angle;
 800343e:	4b03      	ldr	r3, [pc, #12]	; (800344c <getEncoderData+0x38>)
 8003440:	881b      	ldrh	r3, [r3, #0]
}
 8003442:	4618      	mov	r0, r3
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200008a0 	.word	0x200008a0
 800344c:	20000864 	.word	0x20000864

08003450 <initAllChanelADC>:

void initAllChanelADC(){
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
	initADC(&configChanel1);
 8003454:	480e      	ldr	r0, [pc, #56]	; (8003490 <initAllChanelADC+0x40>)
 8003456:	f000 f823 	bl	80034a0 <initADC>
	initADC(&configChanel2);
 800345a:	480e      	ldr	r0, [pc, #56]	; (8003494 <initAllChanelADC+0x44>)
 800345c:	f000 f820 	bl	80034a0 <initADC>
	initADC(&configChanel3);
 8003460:	480d      	ldr	r0, [pc, #52]	; (8003498 <initAllChanelADC+0x48>)
 8003462:	f000 f81d 	bl	80034a0 <initADC>
	initADC(&configChanel4);
 8003466:	480d      	ldr	r0, [pc, #52]	; (800349c <initAllChanelADC+0x4c>)
 8003468:	f000 f81a 	bl	80034a0 <initADC>

	initChanelADC(&configChanel1, CHANNEL_AIN0_GND);
 800346c:	2104      	movs	r1, #4
 800346e:	4808      	ldr	r0, [pc, #32]	; (8003490 <initAllChanelADC+0x40>)
 8003470:	f000 f835 	bl	80034de <initChanelADC>
	initChanelADC(&configChanel2, CHANNEL_AIN1_GND);
 8003474:	2105      	movs	r1, #5
 8003476:	4807      	ldr	r0, [pc, #28]	; (8003494 <initAllChanelADC+0x44>)
 8003478:	f000 f831 	bl	80034de <initChanelADC>
	initChanelADC(&configChanel3, CHANNEL_AIN2_GND);
 800347c:	2106      	movs	r1, #6
 800347e:	4806      	ldr	r0, [pc, #24]	; (8003498 <initAllChanelADC+0x48>)
 8003480:	f000 f82d 	bl	80034de <initChanelADC>
	initChanelADC(&configChanel4, CHANNEL_AIN3_GND);
 8003484:	2107      	movs	r1, #7
 8003486:	4805      	ldr	r0, [pc, #20]	; (800349c <initAllChanelADC+0x4c>)
 8003488:	f000 f829 	bl	80034de <initChanelADC>
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2000086c 	.word	0x2000086c
 8003494:	20000874 	.word	0x20000874
 8003498:	2000087c 	.word	0x2000087c
 800349c:	20000884 	.word	0x20000884

080034a0 <initADC>:

void initADC(ADS1115_Config_t* configReg){
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	configReg->pgaConfig 		= PGA_4_096;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	705a      	strb	r2, [r3, #1]
	configReg->operatingMode 	= MODE_CONTINOUS;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	709a      	strb	r2, [r3, #2]
	configReg->dataRate 		= DRATE_250;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2205      	movs	r2, #5
 80034b8:	70da      	strb	r2, [r3, #3]
	configReg->compareMode 		= COMP_HYSTERESIS;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	711a      	strb	r2, [r3, #4]
	configReg->polarityMode 	= POLARITY_ACTIVE_LOW;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	715a      	strb	r2, [r3, #5]
	configReg->latchingMode  	= LATCHING_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	719a      	strb	r2, [r3, #6]
	configReg->queueComparator 	= QUEUE_ONE; 			// ПОднять флаг через сколько измерений
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	71da      	strb	r2, [r3, #7]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <initChanelADC>:

void initChanelADC(ADS1115_Config_t* configReg, MultiplexerConfig_t chanel){
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
	configReg->channel = chanel;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	701a      	strb	r2, [r3, #0]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void initUserTasks(){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
	OledMenuTaskHandle   = osThreadNew(StartOledMenuTask,   NULL, &OledMenuTask_attributes);
 8003500:	4a0c      	ldr	r2, [pc, #48]	; (8003534 <initUserTasks+0x38>)
 8003502:	2100      	movs	r1, #0
 8003504:	480c      	ldr	r0, [pc, #48]	; (8003538 <initUserTasks+0x3c>)
 8003506:	f008 fff3 	bl	800c4f0 <osThreadNew>
 800350a:	4603      	mov	r3, r0
 800350c:	4a0b      	ldr	r2, [pc, #44]	; (800353c <initUserTasks+0x40>)
 800350e:	6013      	str	r3, [r2, #0]
	LedControlTaskHandle = osThreadNew(StartLedControlTask, NULL, &LedControlTask_attributes);
 8003510:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <initUserTasks+0x44>)
 8003512:	2100      	movs	r1, #0
 8003514:	480b      	ldr	r0, [pc, #44]	; (8003544 <initUserTasks+0x48>)
 8003516:	f008 ffeb 	bl	800c4f0 <osThreadNew>
 800351a:	4603      	mov	r3, r0
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <initUserTasks+0x4c>)
 800351e:	6013      	str	r3, [r2, #0]
	SensOutTaskHandle    = osThreadNew(StartSensOutTask,    NULL, &SensOutTask_attributes);
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <initUserTasks+0x50>)
 8003522:	2100      	movs	r1, #0
 8003524:	480a      	ldr	r0, [pc, #40]	; (8003550 <initUserTasks+0x54>)
 8003526:	f008 ffe3 	bl	800c4f0 <osThreadNew>
 800352a:	4603      	mov	r3, r0
 800352c:	4a09      	ldr	r2, [pc, #36]	; (8003554 <initUserTasks+0x58>)
 800352e:	6013      	str	r3, [r2, #0]
};
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}
 8003534:	08011614 	.word	0x08011614
 8003538:	08003237 	.word	0x08003237
 800353c:	200008a4 	.word	0x200008a4
 8003540:	08011638 	.word	0x08011638
 8003544:	080031cd 	.word	0x080031cd
 8003548:	200008a8 	.word	0x200008a8
 800354c:	0801165c 	.word	0x0801165c
 8003550:	08003275 	.word	0x08003275
 8003554:	200008ac 	.word	0x200008ac

08003558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003590 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800355c:	480d      	ldr	r0, [pc, #52]	; (8003594 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800355e:	490e      	ldr	r1, [pc, #56]	; (8003598 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003560:	4a0e      	ldr	r2, [pc, #56]	; (800359c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003564:	e002      	b.n	800356c <LoopCopyDataInit>

08003566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800356a:	3304      	adds	r3, #4

0800356c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800356c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800356e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003570:	d3f9      	bcc.n	8003566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003572:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003574:	4c0b      	ldr	r4, [pc, #44]	; (80035a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003578:	e001      	b.n	800357e <LoopFillZerobss>

0800357a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800357a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800357c:	3204      	adds	r2, #4

0800357e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800357e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003580:	d3fb      	bcc.n	800357a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003582:	f7ff fe11 	bl	80031a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003586:	f00c fe29 	bl	80101dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800358a:	f7ff f8e5 	bl	8002758 <main>
  bx  lr    
 800358e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003598:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 800359c:	08011720 	.word	0x08011720
  ldr r2, =_sbss
 80035a0:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80035a4:	20006ee0 	.word	0x20006ee0

080035a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a8:	e7fe      	b.n	80035a8 <ADC_IRQHandler>
	...

080035ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <HAL_Init+0x40>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <HAL_Init+0x40>)
 80035b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_Init+0x40>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <HAL_Init+0x40>)
 80035c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_Init+0x40>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_Init+0x40>)
 80035ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d4:	2003      	movs	r0, #3
 80035d6:	f000 f8fc 	bl	80037d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035da:	2000      	movs	r0, #0
 80035dc:	f7ff fd00 	bl	8002fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e0:	f7ff fbaa 	bl	8002d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023c00 	.word	0x40023c00

080035f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_IncTick+0x20>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_IncTick+0x24>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4413      	add	r3, r2
 8003600:	4a04      	ldr	r2, [pc, #16]	; (8003614 <HAL_IncTick+0x24>)
 8003602:	6013      	str	r3, [r2, #0]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000040 	.word	0x20000040
 8003614:	200008b0 	.word	0x200008b0

08003618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return uwTick;
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <HAL_GetTick+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	200008b0 	.word	0x200008b0

08003630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003638:	f7ff ffee 	bl	8003618 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d005      	beq.n	8003656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_Delay+0x44>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003656:	bf00      	nop
 8003658:	f7ff ffde 	bl	8003618 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	429a      	cmp	r2, r3
 8003666:	d8f7      	bhi.n	8003658 <HAL_Delay+0x28>
  {
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000040 	.word	0x20000040

08003678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <__NVIC_SetPriorityGrouping+0x44>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003694:	4013      	ands	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036aa:	4a04      	ldr	r2, [pc, #16]	; (80036bc <__NVIC_SetPriorityGrouping+0x44>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	60d3      	str	r3, [r2, #12]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <__NVIC_GetPriorityGrouping+0x18>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	f003 0307 	and.w	r3, r3, #7
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	db0b      	blt.n	8003706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <__NVIC_EnableIRQ+0x38>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	2001      	movs	r0, #1
 80036fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000e100 	.word	0xe000e100

08003718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	2b00      	cmp	r3, #0
 800372a:	db0a      	blt.n	8003742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	490c      	ldr	r1, [pc, #48]	; (8003764 <__NVIC_SetPriority+0x4c>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	440b      	add	r3, r1
 800373c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003740:	e00a      	b.n	8003758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4908      	ldr	r1, [pc, #32]	; (8003768 <__NVIC_SetPriority+0x50>)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	3b04      	subs	r3, #4
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	440b      	add	r3, r1
 8003756:	761a      	strb	r2, [r3, #24]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000e100 	.word	0xe000e100
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f1c3 0307 	rsb	r3, r3, #7
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf28      	it	cs
 800378a:	2304      	movcs	r3, #4
 800378c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3304      	adds	r3, #4
 8003792:	2b06      	cmp	r3, #6
 8003794:	d902      	bls.n	800379c <NVIC_EncodePriority+0x30>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3b03      	subs	r3, #3
 800379a:	e000      	b.n	800379e <NVIC_EncodePriority+0x32>
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	401a      	ands	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b4:	f04f 31ff 	mov.w	r1, #4294967295
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43d9      	mvns	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	4313      	orrs	r3, r2
         );
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff4c 	bl	8003678 <__NVIC_SetPriorityGrouping>
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037fa:	f7ff ff61 	bl	80036c0 <__NVIC_GetPriorityGrouping>
 80037fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	6978      	ldr	r0, [r7, #20]
 8003806:	f7ff ffb1 	bl	800376c <NVIC_EncodePriority>
 800380a:	4602      	mov	r2, r0
 800380c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ff80 	bl	8003718 <__NVIC_SetPriority>
}
 8003818:	bf00      	nop
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff ff54 	bl	80036dc <__NVIC_EnableIRQ>
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff fee6 	bl	8003618 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e099      	b.n	800398c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003878:	e00f      	b.n	800389a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800387a:	f7ff fecd 	bl	8003618 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b05      	cmp	r3, #5
 8003886:	d908      	bls.n	800389a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2203      	movs	r2, #3
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e078      	b.n	800398c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e8      	bne.n	800387a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <HAL_DMA_Init+0x158>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d107      	bne.n	8003904 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	4313      	orrs	r3, r2
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0307 	bic.w	r3, r3, #7
 800391a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	2b04      	cmp	r3, #4
 800392c:	d117      	bne.n	800395e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00e      	beq.n	800395e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fa91 	bl	8003e68 <DMA_CheckFifoParam>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800395a:	2301      	movs	r3, #1
 800395c:	e016      	b.n	800398c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa48 	bl	8003dfc <DMA_CalcBaseAndBitshift>
 800396c:	4603      	mov	r3, r0
 800396e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	223f      	movs	r2, #63	; 0x3f
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	f010803f 	.word	0xf010803f

08003998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_DMA_Start_IT+0x26>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e040      	b.n	8003a40 <HAL_DMA_Start_IT+0xa8>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d12f      	bne.n	8003a32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2202      	movs	r2, #2
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f9da 	bl	8003da0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	223f      	movs	r2, #63	; 0x3f
 80039f2:	409a      	lsls	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0216 	orr.w	r2, r2, #22
 8003a06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0208 	orr.w	r2, r2, #8
 8003a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e005      	b.n	8003a3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d004      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2280      	movs	r2, #128	; 0x80
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e00c      	b.n	8003a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2205      	movs	r2, #5
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a98:	4b8e      	ldr	r3, [pc, #568]	; (8003cd4 <HAL_DMA_IRQHandler+0x248>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a8e      	ldr	r2, [pc, #568]	; (8003cd8 <HAL_DMA_IRQHandler+0x24c>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0a9b      	lsrs	r3, r3, #10
 8003aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01a      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	2201      	movs	r2, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	f043 0202 	orr.w	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	2204      	movs	r2, #4
 8003b34:	409a      	lsls	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d012      	beq.n	8003b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	2204      	movs	r2, #4
 8003b52:	409a      	lsls	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f043 0204 	orr.w	r2, r3, #4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	2210      	movs	r2, #16
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d043      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03c      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	2210      	movs	r2, #16
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d018      	beq.n	8003bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d024      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
 8003bba:	e01f      	b.n	8003bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e016      	b.n	8003bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0208 	bic.w	r2, r2, #8
 8003bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	2220      	movs	r2, #32
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 808f 	beq.w	8003d2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8087 	beq.w	8003d2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	2220      	movs	r2, #32
 8003c24:	409a      	lsls	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d136      	bne.n	8003ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0216 	bic.w	r2, r2, #22
 8003c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_DMA_IRQHandler+0x1da>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0208 	bic.w	r2, r2, #8
 8003c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	223f      	movs	r2, #63	; 0x3f
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d07e      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
        }
        return;
 8003ca2:	e079      	b.n	8003d98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01d      	beq.n	8003cee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10d      	bne.n	8003cdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d031      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4798      	blx	r3
 8003cd0:	e02c      	b.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
 8003cd2:	bf00      	nop
 8003cd4:	20000038 	.word	0x20000038
 8003cd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d023      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
 8003cec:	e01e      	b.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10f      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0210 	bic.w	r2, r2, #16
 8003d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d032      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d022      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2205      	movs	r2, #5
 8003d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d307      	bcc.n	8003d74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f2      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x2cc>
 8003d72:	e000      	b.n	8003d76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
 8003d96:	e000      	b.n	8003d9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d98:	bf00      	nop
    }
  }
}
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d108      	bne.n	8003de0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dde:	e007      	b.n	8003df0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	3b10      	subs	r3, #16
 8003e0c:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <DMA_CalcBaseAndBitshift+0x64>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e16:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <DMA_CalcBaseAndBitshift+0x68>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d909      	bls.n	8003e3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	1d1a      	adds	r2, r3, #4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e3c:	e007      	b.n	8003e4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	aaaaaaab 	.word	0xaaaaaaab
 8003e64:	08011680 	.word	0x08011680

08003e68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11f      	bne.n	8003ec2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d856      	bhi.n	8003f36 <DMA_CheckFifoParam+0xce>
 8003e88:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <DMA_CheckFifoParam+0x28>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003eb3 	.word	0x08003eb3
 8003e98:	08003ea1 	.word	0x08003ea1
 8003e9c:	08003f37 	.word	0x08003f37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d046      	beq.n	8003f3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb0:	e043      	b.n	8003f3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eba:	d140      	bne.n	8003f3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec0:	e03d      	b.n	8003f3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eca:	d121      	bne.n	8003f10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d837      	bhi.n	8003f42 <DMA_CheckFifoParam+0xda>
 8003ed2:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <DMA_CheckFifoParam+0x70>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003ee9 	.word	0x08003ee9
 8003edc:	08003eef 	.word	0x08003eef
 8003ee0:	08003ee9 	.word	0x08003ee9
 8003ee4:	08003f01 	.word	0x08003f01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      break;
 8003eec:	e030      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d025      	beq.n	8003f46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efe:	e022      	b.n	8003f46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f08:	d11f      	bne.n	8003f4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f0e:	e01c      	b.n	8003f4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d903      	bls.n	8003f1e <DMA_CheckFifoParam+0xb6>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d003      	beq.n	8003f24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f1c:	e018      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
      break;
 8003f22:	e015      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00e      	beq.n	8003f4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      break;
 8003f34:	e00b      	b.n	8003f4e <DMA_CheckFifoParam+0xe6>
      break;
 8003f36:	bf00      	nop
 8003f38:	e00a      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e008      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e006      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f42:	bf00      	nop
 8003f44:	e004      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f46:	bf00      	nop
 8003f48:	e002      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f4e:	bf00      	nop
    }
  } 
  
  return status; 
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop

08003f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b089      	sub	sp, #36	; 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e159      	b.n	8004230 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 8148 	bne.w	800422a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d005      	beq.n	8003fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d130      	bne.n	8004014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 0201 	and.w	r2, r3, #1
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d017      	beq.n	8004050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2203      	movs	r2, #3
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d123      	bne.n	80040a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	08da      	lsrs	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3208      	adds	r2, #8
 8004064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	220f      	movs	r2, #15
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	08da      	lsrs	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0203 	and.w	r2, r3, #3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80a2 	beq.w	800422a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b57      	ldr	r3, [pc, #348]	; (8004248 <HAL_GPIO_Init+0x2e8>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	4a56      	ldr	r2, [pc, #344]	; (8004248 <HAL_GPIO_Init+0x2e8>)
 80040f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f4:	6453      	str	r3, [r2, #68]	; 0x44
 80040f6:	4b54      	ldr	r3, [pc, #336]	; (8004248 <HAL_GPIO_Init+0x2e8>)
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004102:	4a52      	ldr	r2, [pc, #328]	; (800424c <HAL_GPIO_Init+0x2ec>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	3302      	adds	r3, #2
 800410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	220f      	movs	r2, #15
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a49      	ldr	r2, [pc, #292]	; (8004250 <HAL_GPIO_Init+0x2f0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d019      	beq.n	8004162 <HAL_GPIO_Init+0x202>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a48      	ldr	r2, [pc, #288]	; (8004254 <HAL_GPIO_Init+0x2f4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_GPIO_Init+0x1fe>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a47      	ldr	r2, [pc, #284]	; (8004258 <HAL_GPIO_Init+0x2f8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00d      	beq.n	800415a <HAL_GPIO_Init+0x1fa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a46      	ldr	r2, [pc, #280]	; (800425c <HAL_GPIO_Init+0x2fc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <HAL_GPIO_Init+0x1f6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a45      	ldr	r2, [pc, #276]	; (8004260 <HAL_GPIO_Init+0x300>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_GPIO_Init+0x1f2>
 800414e:	2304      	movs	r3, #4
 8004150:	e008      	b.n	8004164 <HAL_GPIO_Init+0x204>
 8004152:	2307      	movs	r3, #7
 8004154:	e006      	b.n	8004164 <HAL_GPIO_Init+0x204>
 8004156:	2303      	movs	r3, #3
 8004158:	e004      	b.n	8004164 <HAL_GPIO_Init+0x204>
 800415a:	2302      	movs	r3, #2
 800415c:	e002      	b.n	8004164 <HAL_GPIO_Init+0x204>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_GPIO_Init+0x204>
 8004162:	2300      	movs	r3, #0
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	f002 0203 	and.w	r2, r2, #3
 800416a:	0092      	lsls	r2, r2, #2
 800416c:	4093      	lsls	r3, r2
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004174:	4935      	ldr	r1, [pc, #212]	; (800424c <HAL_GPIO_Init+0x2ec>)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	3302      	adds	r3, #2
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004182:	4b38      	ldr	r3, [pc, #224]	; (8004264 <HAL_GPIO_Init+0x304>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041a6:	4a2f      	ldr	r2, [pc, #188]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041d0:	4a24      	ldr	r2, [pc, #144]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041d6:	4b23      	ldr	r3, [pc, #140]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041fa:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_GPIO_Init+0x304>)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004200:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_GPIO_Init+0x304>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004224:	4a0f      	ldr	r2, [pc, #60]	; (8004264 <HAL_GPIO_Init+0x304>)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3301      	adds	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b0f      	cmp	r3, #15
 8004234:	f67f aea2 	bls.w	8003f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	3724      	adds	r7, #36	; 0x24
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800
 800424c:	40013800 	.word	0x40013800
 8004250:	40020000 	.word	0x40020000
 8004254:	40020400 	.word	0x40020400
 8004258:	40020800 	.word	0x40020800
 800425c:	40020c00 	.word	0x40020c00
 8004260:	40021000 	.word	0x40021000
 8004264:	40013c00 	.word	0x40013c00

08004268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	887b      	ldrh	r3, [r7, #2]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
 8004284:	e001      	b.n	800428a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	807b      	strh	r3, [r7, #2]
 80042a4:	4613      	mov	r3, r2
 80042a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042a8:	787b      	ldrb	r3, [r7, #1]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042b4:	e003      	b.n	80042be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	041a      	lsls	r2, r3, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	619a      	str	r2, [r3, #24]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042e2:	4a05      	ldr	r2, [pc, #20]	; (80042f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fc96 	bl	8002c1c <HAL_GPIO_EXTI_Callback>
  }
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40013c00 	.word	0x40013c00

080042fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e12b      	b.n	8004566 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fe fd34 	bl	8002d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	; 0x24
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800434e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800435e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004360:	f003 fbda 	bl	8007b18 <HAL_RCC_GetPCLK1Freq>
 8004364:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4a81      	ldr	r2, [pc, #516]	; (8004570 <HAL_I2C_Init+0x274>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d807      	bhi.n	8004380 <HAL_I2C_Init+0x84>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a80      	ldr	r2, [pc, #512]	; (8004574 <HAL_I2C_Init+0x278>)
 8004374:	4293      	cmp	r3, r2
 8004376:	bf94      	ite	ls
 8004378:	2301      	movls	r3, #1
 800437a:	2300      	movhi	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e006      	b.n	800438e <HAL_I2C_Init+0x92>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a7d      	ldr	r2, [pc, #500]	; (8004578 <HAL_I2C_Init+0x27c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	bf94      	ite	ls
 8004388:	2301      	movls	r3, #1
 800438a:	2300      	movhi	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0e7      	b.n	8004566 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a78      	ldr	r2, [pc, #480]	; (800457c <HAL_I2C_Init+0x280>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	0c9b      	lsrs	r3, r3, #18
 80043a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a6a      	ldr	r2, [pc, #424]	; (8004570 <HAL_I2C_Init+0x274>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d802      	bhi.n	80043d0 <HAL_I2C_Init+0xd4>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	3301      	adds	r3, #1
 80043ce:	e009      	b.n	80043e4 <HAL_I2C_Init+0xe8>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	4a69      	ldr	r2, [pc, #420]	; (8004580 <HAL_I2C_Init+0x284>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	3301      	adds	r3, #1
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	495c      	ldr	r1, [pc, #368]	; (8004570 <HAL_I2C_Init+0x274>)
 8004400:	428b      	cmp	r3, r1
 8004402:	d819      	bhi.n	8004438 <HAL_I2C_Init+0x13c>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e59      	subs	r1, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004412:	1c59      	adds	r1, r3, #1
 8004414:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004418:	400b      	ands	r3, r1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_I2C_Init+0x138>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1e59      	subs	r1, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	fbb1 f3f3 	udiv	r3, r1, r3
 800442c:	3301      	adds	r3, #1
 800442e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004432:	e051      	b.n	80044d8 <HAL_I2C_Init+0x1dc>
 8004434:	2304      	movs	r3, #4
 8004436:	e04f      	b.n	80044d8 <HAL_I2C_Init+0x1dc>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d111      	bne.n	8004464 <HAL_I2C_Init+0x168>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1e58      	subs	r0, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	440b      	add	r3, r1
 800444e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004452:	3301      	adds	r3, #1
 8004454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	e012      	b.n	800448a <HAL_I2C_Init+0x18e>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1e58      	subs	r0, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	0099      	lsls	r1, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	fbb0 f3f3 	udiv	r3, r0, r3
 800447a:	3301      	adds	r3, #1
 800447c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_Init+0x196>
 800448e:	2301      	movs	r3, #1
 8004490:	e022      	b.n	80044d8 <HAL_I2C_Init+0x1dc>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10e      	bne.n	80044b8 <HAL_I2C_Init+0x1bc>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1e58      	subs	r0, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	440b      	add	r3, r1
 80044a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ac:	3301      	adds	r3, #1
 80044ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b6:	e00f      	b.n	80044d8 <HAL_I2C_Init+0x1dc>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1e58      	subs	r0, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6859      	ldr	r1, [r3, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	0099      	lsls	r1, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ce:	3301      	adds	r3, #1
 80044d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	6809      	ldr	r1, [r1, #0]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69da      	ldr	r2, [r3, #28]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004506:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6911      	ldr	r1, [r2, #16]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68d2      	ldr	r2, [r2, #12]
 8004512:	4311      	orrs	r1, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	430b      	orrs	r3, r1
 800451a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	000186a0 	.word	0x000186a0
 8004574:	001e847f 	.word	0x001e847f
 8004578:	003d08ff 	.word	0x003d08ff
 800457c:	431bde83 	.word	0x431bde83
 8004580:	10624dd3 	.word	0x10624dd3

08004584 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	461a      	mov	r2, r3
 8004590:	460b      	mov	r3, r1
 8004592:	817b      	strh	r3, [r7, #10]
 8004594:	4613      	mov	r3, r2
 8004596:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004598:	f7ff f83e 	bl	8003618 <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	f040 80e0 	bne.w	800476c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2319      	movs	r3, #25
 80045b2:	2201      	movs	r2, #1
 80045b4:	4970      	ldr	r1, [pc, #448]	; (8004778 <HAL_I2C_Master_Transmit+0x1f4>)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f001 fa24 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	e0d3      	b.n	800476e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_I2C_Master_Transmit+0x50>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e0cc      	b.n	800476e <HAL_I2C_Master_Transmit+0x1ea>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d007      	beq.n	80045fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004608:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2221      	movs	r2, #33	; 0x21
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2210      	movs	r2, #16
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	893a      	ldrh	r2, [r7, #8]
 800462a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4a50      	ldr	r2, [pc, #320]	; (800477c <HAL_I2C_Master_Transmit+0x1f8>)
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800463c:	8979      	ldrh	r1, [r7, #10]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 ff10 	bl	8005468 <I2C_MasterRequestWrite>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e08d      	b.n	800476e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004668:	e066      	b.n	8004738 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	6a39      	ldr	r1, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f001 fa9e 	bl	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d107      	bne.n	8004692 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004690:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e06b      	b.n	800476e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	781a      	ldrb	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d11b      	bne.n	800470c <HAL_I2C_Master_Transmit+0x188>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d017      	beq.n	800470c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	6a39      	ldr	r1, [r7, #32]
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f001 fa8e 	bl	8005c32 <I2C_WaitOnBTFFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	2b04      	cmp	r3, #4
 8004722:	d107      	bne.n	8004734 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004732:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e01a      	b.n	800476e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d194      	bne.n	800466a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	00100002 	.word	0x00100002
 800477c:	ffff0000 	.word	0xffff0000

08004780 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08c      	sub	sp, #48	; 0x30
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	461a      	mov	r2, r3
 800478c:	460b      	mov	r3, r1
 800478e:	817b      	strh	r3, [r7, #10]
 8004790:	4613      	mov	r3, r2
 8004792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004794:	f7fe ff40 	bl	8003618 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	f040 820b 	bne.w	8004bbe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2319      	movs	r3, #25
 80047ae:	2201      	movs	r2, #1
 80047b0:	497c      	ldr	r1, [pc, #496]	; (80049a4 <HAL_I2C_Master_Receive+0x224>)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f001 f926 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
 80047c0:	e1fe      	b.n	8004bc0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_I2C_Master_Receive+0x50>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e1f7      	b.n	8004bc0 <HAL_I2C_Master_Receive+0x440>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d007      	beq.n	80047f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2222      	movs	r2, #34	; 0x22
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2210      	movs	r2, #16
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	893a      	ldrh	r2, [r7, #8]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a5c      	ldr	r2, [pc, #368]	; (80049a8 <HAL_I2C_Master_Receive+0x228>)
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004838:	8979      	ldrh	r1, [r7, #10]
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fe94 	bl	800556c <I2C_MasterRequestRead>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e1b8      	b.n	8004bc0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	2b00      	cmp	r3, #0
 8004854:	d113      	bne.n	800487e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	623b      	str	r3, [r7, #32]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	623b      	str	r3, [r7, #32]
 800486a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e18c      	b.n	8004b98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004882:	2b01      	cmp	r3, #1
 8004884:	d11b      	bne.n	80048be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004894:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e16c      	b.n	8004b98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d11b      	bne.n	80048fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	e14c      	b.n	8004b98 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800490c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004924:	e138      	b.n	8004b98 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492a:	2b03      	cmp	r3, #3
 800492c:	f200 80f1 	bhi.w	8004b12 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004934:	2b01      	cmp	r3, #1
 8004936:	d123      	bne.n	8004980 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f001 f9b9 	bl	8005cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e139      	b.n	8004bc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800497e:	e10b      	b.n	8004b98 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	2b02      	cmp	r3, #2
 8004986:	d14e      	bne.n	8004a26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	2200      	movs	r2, #0
 8004990:	4906      	ldr	r1, [pc, #24]	; (80049ac <HAL_I2C_Master_Receive+0x22c>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f001 f836 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e10e      	b.n	8004bc0 <HAL_I2C_Master_Receive+0x440>
 80049a2:	bf00      	nop
 80049a4:	00100002 	.word	0x00100002
 80049a8:	ffff0000 	.word	0xffff0000
 80049ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a24:	e0b8      	b.n	8004b98 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4966      	ldr	r1, [pc, #408]	; (8004bc8 <HAL_I2C_Master_Receive+0x448>)
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 ffe7 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0bf      	b.n	8004bc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	2200      	movs	r2, #0
 8004a8a:	494f      	ldr	r1, [pc, #316]	; (8004bc8 <HAL_I2C_Master_Receive+0x448>)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 ffb9 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e091      	b.n	8004bc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b10:	e042      	b.n	8004b98 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f001 f8cc 	bl	8005cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e04c      	b.n	8004bc0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d118      	bne.n	8004b98 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f47f aec2 	bne.w	8004926 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e000      	b.n	8004bc0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
  }
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3728      	adds	r7, #40	; 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	00010004 	.word	0x00010004

08004bcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	817b      	strh	r3, [r7, #10]
 8004bde:	460b      	mov	r3, r1
 8004be0:	813b      	strh	r3, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be6:	f7fe fd17 	bl	8003618 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	f040 80d9 	bne.w	8004dac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2319      	movs	r3, #25
 8004c00:	2201      	movs	r2, #1
 8004c02:	496d      	ldr	r1, [pc, #436]	; (8004db8 <HAL_I2C_Mem_Write+0x1ec>)
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fefd 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
 8004c12:	e0cc      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2C_Mem_Write+0x56>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0c5      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d007      	beq.n	8004c48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2221      	movs	r2, #33	; 0x21
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2240      	movs	r2, #64	; 0x40
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a4d      	ldr	r2, [pc, #308]	; (8004dbc <HAL_I2C_Mem_Write+0x1f0>)
 8004c88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c8a:	88f8      	ldrh	r0, [r7, #6]
 8004c8c:	893a      	ldrh	r2, [r7, #8]
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	4603      	mov	r3, r0
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 fd34 	bl	8005708 <I2C_RequestMemoryWrite>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d052      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e081      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 ff7e 	bl	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d107      	bne.n	8004cd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06b      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d11b      	bne.n	8004d4c <HAL_I2C_Mem_Write+0x180>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1aa      	bne.n	8004caa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 ff6a 	bl	8005c32 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d107      	bne.n	8004d7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e016      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	00100002 	.word	0x00100002
 8004dbc:	ffff0000 	.word	0xffff0000

08004dc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	; 0x30
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	4608      	mov	r0, r1
 8004dca:	4611      	mov	r1, r2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4603      	mov	r3, r0
 8004dd0:	817b      	strh	r3, [r7, #10]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	813b      	strh	r3, [r7, #8]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dda:	f7fe fc1d 	bl	8003618 <HAL_GetTick>
 8004dde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	f040 8208 	bne.w	80051fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	2319      	movs	r3, #25
 8004df4:	2201      	movs	r2, #1
 8004df6:	497b      	ldr	r1, [pc, #492]	; (8004fe4 <HAL_I2C_Mem_Read+0x224>)
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fe03 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
 8004e06:	e1fb      	b.n	8005200 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_I2C_Mem_Read+0x56>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e1f4      	b.n	8005200 <HAL_I2C_Mem_Read+0x440>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d007      	beq.n	8004e3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2222      	movs	r2, #34	; 0x22
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2240      	movs	r2, #64	; 0x40
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a5b      	ldr	r2, [pc, #364]	; (8004fe8 <HAL_I2C_Mem_Read+0x228>)
 8004e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e7e:	88f8      	ldrh	r0, [r7, #6]
 8004e80:	893a      	ldrh	r2, [r7, #8]
 8004e82:	8979      	ldrh	r1, [r7, #10]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fcd0 	bl	8005834 <I2C_RequestMemoryRead>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e1b0      	b.n	8005200 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d113      	bne.n	8004ece <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	623b      	str	r3, [r7, #32]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	623b      	str	r3, [r7, #32]
 8004eba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e184      	b.n	80051d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d11b      	bne.n	8004f0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e164      	b.n	80051d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d11b      	bne.n	8004f4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	e144      	b.n	80051d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f64:	e138      	b.n	80051d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	f200 80f1 	bhi.w	8005152 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d123      	bne.n	8004fc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fe99 	bl	8005cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e139      	b.n	8005200 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fbe:	e10b      	b.n	80051d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d14e      	bne.n	8005066 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	2200      	movs	r2, #0
 8004fd0:	4906      	ldr	r1, [pc, #24]	; (8004fec <HAL_I2C_Mem_Read+0x22c>)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fd16 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d008      	beq.n	8004ff0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e10e      	b.n	8005200 <HAL_I2C_Mem_Read+0x440>
 8004fe2:	bf00      	nop
 8004fe4:	00100002 	.word	0x00100002
 8004fe8:	ffff0000 	.word	0xffff0000
 8004fec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005064:	e0b8      	b.n	80051d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	2200      	movs	r2, #0
 800506e:	4966      	ldr	r1, [pc, #408]	; (8005208 <HAL_I2C_Mem_Read+0x448>)
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 fcc7 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0bf      	b.n	8005200 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	2200      	movs	r2, #0
 80050ca:	494f      	ldr	r1, [pc, #316]	; (8005208 <HAL_I2C_Mem_Read+0x448>)
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fc99 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e091      	b.n	8005200 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005150:	e042      	b.n	80051d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fdac 	bl	8005cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e04c      	b.n	8005200 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d118      	bne.n	80051d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f47f aec2 	bne.w	8004f66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e000      	b.n	8005200 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80051fe:	2302      	movs	r3, #2
  }
}
 8005200:	4618      	mov	r0, r3
 8005202:	3728      	adds	r7, #40	; 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	00010004 	.word	0x00010004

0800520c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	; 0x28
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	460b      	mov	r3, r1
 800521a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800521c:	f7fe f9fc 	bl	8003618 <HAL_GetTick>
 8005220:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b20      	cmp	r3, #32
 8005230:	f040 8111 	bne.w	8005456 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	2319      	movs	r3, #25
 800523a:	2201      	movs	r2, #1
 800523c:	4988      	ldr	r1, [pc, #544]	; (8005460 <HAL_I2C_IsDeviceReady+0x254>)
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fbe0 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
 800524c:	e104      	b.n	8005458 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_I2C_IsDeviceReady+0x50>
 8005258:	2302      	movs	r3, #2
 800525a:	e0fd      	b.n	8005458 <HAL_I2C_IsDeviceReady+0x24c>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b01      	cmp	r3, #1
 8005270:	d007      	beq.n	8005282 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0201 	orr.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005290:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2224      	movs	r2, #36	; 0x24
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a70      	ldr	r2, [pc, #448]	; (8005464 <HAL_I2C_IsDeviceReady+0x258>)
 80052a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2200      	movs	r2, #0
 80052be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fb9e 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052dc:	d103      	bne.n	80052e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e0b6      	b.n	8005458 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ea:	897b      	ldrh	r3, [r7, #10]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80052fa:	f7fe f98d 	bl	8003618 <HAL_GetTick>
 80052fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	bf0c      	ite	eq
 8005326:	2301      	moveq	r3, #1
 8005328:	2300      	movne	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800532e:	e025      	b.n	800537c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005330:	f7fe f972 	bl	8003618 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d302      	bcc.n	8005346 <HAL_I2C_IsDeviceReady+0x13a>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	22a0      	movs	r2, #160	; 0xa0
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b02      	cmp	r3, #2
 800535a:	bf0c      	ite	eq
 800535c:	2301      	moveq	r3, #1
 800535e:	2300      	movne	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2ba0      	cmp	r3, #160	; 0xa0
 8005386:	d005      	beq.n	8005394 <HAL_I2C_IsDeviceReady+0x188>
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <HAL_I2C_IsDeviceReady+0x188>
 800538e:	7dbb      	ldrb	r3, [r7, #22]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0cd      	beq.n	8005330 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d129      	bne.n	80053fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	2319      	movs	r3, #25
 80053d6:	2201      	movs	r2, #1
 80053d8:	4921      	ldr	r1, [pc, #132]	; (8005460 <HAL_I2C_IsDeviceReady+0x254>)
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fb12 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e036      	b.n	8005458 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e02c      	b.n	8005458 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005416:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	2319      	movs	r3, #25
 800541e:	2201      	movs	r2, #1
 8005420:	490f      	ldr	r1, [pc, #60]	; (8005460 <HAL_I2C_IsDeviceReady+0x254>)
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 faee 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e012      	b.n	8005458 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	3301      	adds	r3, #1
 8005436:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	f4ff af32 	bcc.w	80052a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005456:	2302      	movs	r3, #2
  }
}
 8005458:	4618      	mov	r0, r3
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	00100002 	.word	0x00100002
 8005464:	ffff0000 	.word	0xffff0000

08005468 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	460b      	mov	r3, r1
 8005476:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b08      	cmp	r3, #8
 8005482:	d006      	beq.n	8005492 <I2C_MasterRequestWrite+0x2a>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d003      	beq.n	8005492 <I2C_MasterRequestWrite+0x2a>
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005490:	d108      	bne.n	80054a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e00b      	b.n	80054bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	2b12      	cmp	r3, #18
 80054aa:	d107      	bne.n	80054bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fa9b 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e2:	d103      	bne.n	80054ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e035      	b.n	800555c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f8:	d108      	bne.n	800550c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054fa:	897b      	ldrh	r3, [r7, #10]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005508:	611a      	str	r2, [r3, #16]
 800550a:	e01b      	b.n	8005544 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800550c:	897b      	ldrh	r3, [r7, #10]
 800550e:	11db      	asrs	r3, r3, #7
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0306 	and.w	r3, r3, #6
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f063 030f 	orn	r3, r3, #15
 800551c:	b2da      	uxtb	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	490e      	ldr	r1, [pc, #56]	; (8005564 <I2C_MasterRequestWrite+0xfc>)
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fac1 	bl	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e010      	b.n	800555c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4907      	ldr	r1, [pc, #28]	; (8005568 <I2C_MasterRequestWrite+0x100>)
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 fab1 	bl	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	00010008 	.word	0x00010008
 8005568:	00010002 	.word	0x00010002

0800556c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	460b      	mov	r3, r1
 800557a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005590:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d006      	beq.n	80055a6 <I2C_MasterRequestRead+0x3a>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d003      	beq.n	80055a6 <I2C_MasterRequestRead+0x3a>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055a4:	d108      	bne.n	80055b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e00b      	b.n	80055d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	2b11      	cmp	r3, #17
 80055be:	d107      	bne.n	80055d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fa11 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00d      	beq.n	8005604 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f6:	d103      	bne.n	8005600 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e079      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800560c:	d108      	bne.n	8005620 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	611a      	str	r2, [r3, #16]
 800561e:	e05f      	b.n	80056e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005620:	897b      	ldrh	r3, [r7, #10]
 8005622:	11db      	asrs	r3, r3, #7
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 0306 	and.w	r3, r3, #6
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f063 030f 	orn	r3, r3, #15
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	4930      	ldr	r1, [pc, #192]	; (8005700 <I2C_MasterRequestRead+0x194>)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fa37 	bl	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e054      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4929      	ldr	r1, [pc, #164]	; (8005704 <I2C_MasterRequestRead+0x198>)
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fa27 	bl	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e044      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005692:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f9af 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00d      	beq.n	80056c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ba:	d103      	bne.n	80056c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e017      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80056c8:	897b      	ldrh	r3, [r7, #10]
 80056ca:	11db      	asrs	r3, r3, #7
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 0306 	and.w	r3, r3, #6
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f063 030e 	orn	r3, r3, #14
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4907      	ldr	r1, [pc, #28]	; (8005704 <I2C_MasterRequestRead+0x198>)
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f9e3 	bl	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	00010008 	.word	0x00010008
 8005704:	00010002 	.word	0x00010002

08005708 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	4608      	mov	r0, r1
 8005712:	4611      	mov	r1, r2
 8005714:	461a      	mov	r2, r3
 8005716:	4603      	mov	r3, r0
 8005718:	817b      	strh	r3, [r7, #10]
 800571a:	460b      	mov	r3, r1
 800571c:	813b      	strh	r3, [r7, #8]
 800571e:	4613      	mov	r3, r2
 8005720:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005730:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	2200      	movs	r2, #0
 800573a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f960 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00d      	beq.n	8005766 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005758:	d103      	bne.n	8005762 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005760:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e05f      	b.n	8005826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005766:	897b      	ldrh	r3, [r7, #10]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005774:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	6a3a      	ldr	r2, [r7, #32]
 800577a:	492d      	ldr	r1, [pc, #180]	; (8005830 <I2C_RequestMemoryWrite+0x128>)
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f998 	bl	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e04c      	b.n	8005826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a4:	6a39      	ldr	r1, [r7, #32]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fa02 	bl	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d107      	bne.n	80057ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e02b      	b.n	8005826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d105      	bne.n	80057e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057d4:	893b      	ldrh	r3, [r7, #8]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	611a      	str	r2, [r3, #16]
 80057de:	e021      	b.n	8005824 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057e0:	893b      	ldrh	r3, [r7, #8]
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f0:	6a39      	ldr	r1, [r7, #32]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f9dc 	bl	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00d      	beq.n	800581a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	2b04      	cmp	r3, #4
 8005804:	d107      	bne.n	8005816 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005814:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e005      	b.n	8005826 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800581a:	893b      	ldrh	r3, [r7, #8]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	00010002 	.word	0x00010002

08005834 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	461a      	mov	r2, r3
 8005842:	4603      	mov	r3, r0
 8005844:	817b      	strh	r3, [r7, #10]
 8005846:	460b      	mov	r3, r1
 8005848:	813b      	strh	r3, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800585c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800586c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	2200      	movs	r2, #0
 8005876:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f8c2 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00d      	beq.n	80058a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005894:	d103      	bne.n	800589e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e0aa      	b.n	80059f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058a2:	897b      	ldrh	r3, [r7, #10]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	4952      	ldr	r1, [pc, #328]	; (8005a00 <I2C_RequestMemoryRead+0x1cc>)
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f8fa 	bl	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e097      	b.n	80059f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e0:	6a39      	ldr	r1, [r7, #32]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f964 	bl	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d107      	bne.n	8005906 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e076      	b.n	80059f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d105      	bne.n	800591c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005910:	893b      	ldrh	r3, [r7, #8]
 8005912:	b2da      	uxtb	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	611a      	str	r2, [r3, #16]
 800591a:	e021      	b.n	8005960 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800591c:	893b      	ldrh	r3, [r7, #8]
 800591e:	0a1b      	lsrs	r3, r3, #8
 8005920:	b29b      	uxth	r3, r3
 8005922:	b2da      	uxtb	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592c:	6a39      	ldr	r1, [r7, #32]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f93e 	bl	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00d      	beq.n	8005956 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	2b04      	cmp	r3, #4
 8005940:	d107      	bne.n	8005952 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e050      	b.n	80059f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005956:	893b      	ldrh	r3, [r7, #8]
 8005958:	b2da      	uxtb	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005962:	6a39      	ldr	r1, [r7, #32]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f923 	bl	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00d      	beq.n	800598c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	2b04      	cmp	r3, #4
 8005976:	d107      	bne.n	8005988 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005986:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e035      	b.n	80059f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800599a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f82b 	bl	8005a04 <I2C_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00d      	beq.n	80059d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c2:	d103      	bne.n	80059cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e013      	b.n	80059f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059d0:	897b      	ldrh	r3, [r7, #10]
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	6a3a      	ldr	r2, [r7, #32]
 80059e4:	4906      	ldr	r1, [pc, #24]	; (8005a00 <I2C_RequestMemoryRead+0x1cc>)
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f863 	bl	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	00010002 	.word	0x00010002

08005a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a14:	e025      	b.n	8005a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d021      	beq.n	8005a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1e:	f7fd fdfb 	bl	8003618 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d302      	bcc.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d116      	bne.n	8005a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f043 0220 	orr.w	r2, r3, #32
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e023      	b.n	8005aaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	0c1b      	lsrs	r3, r3, #16
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10d      	bne.n	8005a88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	43da      	mvns	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4013      	ands	r3, r2
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bf0c      	ite	eq
 8005a7e:	2301      	moveq	r3, #1
 8005a80:	2300      	movne	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	e00c      	b.n	8005aa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	43da      	mvns	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4013      	ands	r3, r2
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d0b6      	beq.n	8005a16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ac0:	e051      	b.n	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad0:	d123      	bne.n	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0204 	orr.w	r2, r3, #4
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e046      	b.n	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b20:	d021      	beq.n	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7fd fd79 	bl	8003618 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d116      	bne.n	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e020      	b.n	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	0c1b      	lsrs	r3, r3, #16
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d10c      	bne.n	8005b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	43da      	mvns	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bf14      	ite	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	2300      	moveq	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	e00b      	b.n	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	43da      	mvns	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4013      	ands	r3, r2
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bf14      	ite	ne
 8005b9c:	2301      	movne	r3, #1
 8005b9e:	2300      	moveq	r3, #0
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d18d      	bne.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bbc:	e02d      	b.n	8005c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f8ce 	bl	8005d60 <I2C_IsAcknowledgeFailed>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e02d      	b.n	8005c2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d021      	beq.n	8005c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd6:	f7fd fd1f 	bl	8003618 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d116      	bne.n	8005c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f043 0220 	orr.w	r2, r3, #32
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e007      	b.n	8005c2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d1ca      	bne.n	8005bbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c3e:	e02d      	b.n	8005c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f88d 	bl	8005d60 <I2C_IsAcknowledgeFailed>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e02d      	b.n	8005cac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d021      	beq.n	8005c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c58:	f7fd fcde 	bl	8003618 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d302      	bcc.n	8005c6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d116      	bne.n	8005c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	f043 0220 	orr.w	r2, r3, #32
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e007      	b.n	8005cac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d1ca      	bne.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cc0:	e042      	b.n	8005d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b10      	cmp	r3, #16
 8005cce:	d119      	bne.n	8005d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0210 	mvn.w	r2, #16
 8005cd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e029      	b.n	8005d58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d04:	f7fd fc88 	bl	8003618 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d302      	bcc.n	8005d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d116      	bne.n	8005d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e007      	b.n	8005d58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d1b5      	bne.n	8005cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d76:	d11b      	bne.n	8005db0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f043 0204 	orr.w	r2, r3, #4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc0:	b08f      	sub	sp, #60	; 0x3c
 8005dc2:	af0a      	add	r7, sp, #40	; 0x28
 8005dc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e10f      	b.n	8005ff0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f009 fee6 	bl	800fbbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2203      	movs	r2, #3
 8005df4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f002 ffdf 	bl	8008dd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	603b      	str	r3, [r7, #0]
 8005e1a:	687e      	ldr	r6, [r7, #4]
 8005e1c:	466d      	mov	r5, sp
 8005e1e:	f106 0410 	add.w	r4, r6, #16
 8005e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e32:	1d33      	adds	r3, r6, #4
 8005e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e36:	6838      	ldr	r0, [r7, #0]
 8005e38:	f002 feb6 	bl	8008ba8 <USB_CoreInit>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e0d0      	b.n	8005ff0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f002 ffcd 	bl	8008df4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
 8005e5e:	e04a      	b.n	8005ef6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e60:	7bfa      	ldrb	r2, [r7, #15]
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	333d      	adds	r3, #61	; 0x3d
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e74:	7bfa      	ldrb	r2, [r7, #15]
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	333c      	adds	r3, #60	; 0x3c
 8005e84:	7bfa      	ldrb	r2, [r7, #15]
 8005e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e88:	7bfa      	ldrb	r2, [r7, #15]
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	b298      	uxth	r0, r3
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	3344      	adds	r3, #68	; 0x44
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ea0:	7bfa      	ldrb	r2, [r7, #15]
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	3340      	adds	r3, #64	; 0x40
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005eb4:	7bfa      	ldrb	r2, [r7, #15]
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	3348      	adds	r3, #72	; 0x48
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ec8:	7bfa      	ldrb	r2, [r7, #15]
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	334c      	adds	r3, #76	; 0x4c
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005edc:	7bfa      	ldrb	r2, [r7, #15]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	3354      	adds	r3, #84	; 0x54
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	73fb      	strb	r3, [r7, #15]
 8005ef6:	7bfa      	ldrb	r2, [r7, #15]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d3af      	bcc.n	8005e60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f00:	2300      	movs	r3, #0
 8005f02:	73fb      	strb	r3, [r7, #15]
 8005f04:	e044      	b.n	8005f90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f06:	7bfa      	ldrb	r2, [r7, #15]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f1c:	7bfa      	ldrb	r2, [r7, #15]
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005f2e:	7bfa      	ldrb	r2, [r7, #15]
 8005f30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f32:	7bfa      	ldrb	r2, [r7, #15]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f48:	7bfa      	ldrb	r2, [r7, #15]
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f5e:	7bfa      	ldrb	r2, [r7, #15]
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f74:	7bfa      	ldrb	r2, [r7, #15]
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	440b      	add	r3, r1
 8005f82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
 8005f90:	7bfa      	ldrb	r2, [r7, #15]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d3b5      	bcc.n	8005f06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	687e      	ldr	r6, [r7, #4]
 8005fa2:	466d      	mov	r5, sp
 8005fa4:	f106 0410 	add.w	r4, r6, #16
 8005fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fb8:	1d33      	adds	r3, r6, #4
 8005fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fbc:	6838      	ldr	r0, [r7, #0]
 8005fbe:	f002 ff65 	bl	8008e8c <USB_DevInit>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e00d      	b.n	8005ff0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f004 f8b4 	bl	800a156 <USB_DevDisconnect>

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ff8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_PCD_Start+0x1c>
 8006010:	2302      	movs	r3, #2
 8006012:	e020      	b.n	8006056 <HAL_PCD_Start+0x5e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	2b01      	cmp	r3, #1
 8006022:	d109      	bne.n	8006038 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006028:	2b01      	cmp	r3, #1
 800602a:	d005      	beq.n	8006038 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f002 feb7 	bl	8008db0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f004 f864 	bl	800a114 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800605e:	b590      	push	{r4, r7, lr}
 8006060:	b08d      	sub	sp, #52	; 0x34
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f004 f922 	bl	800a2be <USB_GetMode>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 848a 	bne.w	8006996 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f004 f886 	bl	800a198 <USB_ReadInterrupts>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 8480 	beq.w	8006994 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	0a1b      	lsrs	r3, r3, #8
 800609e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f004 f873 	bl	800a198 <USB_ReadInterrupts>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d107      	bne.n	80060cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f002 0202 	and.w	r2, r2, #2
 80060ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f004 f861 	bl	800a198 <USB_ReadInterrupts>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d161      	bne.n	80061a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0210 	bic.w	r2, r2, #16
 80060ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	3304      	adds	r3, #4
 800610e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	0c5b      	lsrs	r3, r3, #17
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	2b02      	cmp	r3, #2
 800611a:	d124      	bne.n	8006166 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006122:	4013      	ands	r3, r2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d035      	beq.n	8006194 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	091b      	lsrs	r3, r3, #4
 8006130:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	6a38      	ldr	r0, [r7, #32]
 800613c:	f003 fe98 	bl	8009e70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800614c:	441a      	add	r2, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800615e:	441a      	add	r2, r3
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	621a      	str	r2, [r3, #32]
 8006164:	e016      	b.n	8006194 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	0c5b      	lsrs	r3, r3, #17
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	2b06      	cmp	r3, #6
 8006170:	d110      	bne.n	8006194 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006178:	2208      	movs	r2, #8
 800617a:	4619      	mov	r1, r3
 800617c:	6a38      	ldr	r0, [r7, #32]
 800617e:	f003 fe77 	bl	8009e70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6a1a      	ldr	r2, [r3, #32]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800618e:	441a      	add	r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0210 	orr.w	r2, r2, #16
 80061a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f003 fff5 	bl	800a198 <USB_ReadInterrupts>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061b8:	f040 80a7 	bne.w	800630a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f003 fffa 	bl	800a1be <USB_ReadDevAllOutEpInterrupt>
 80061ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80061cc:	e099      	b.n	8006302 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 808e 	beq.w	80062f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	4611      	mov	r1, r2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f004 f81e 	bl	800a226 <USB_ReadDevOutEPInterrupt>
 80061ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00c      	beq.n	8006210 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	461a      	mov	r2, r3
 8006204:	2301      	movs	r3, #1
 8006206:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fec2 	bl	8006f94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006226:	461a      	mov	r2, r3
 8006228:	2308      	movs	r3, #8
 800622a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800622c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 ff98 	bl	8007164 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624a:	461a      	mov	r2, r3
 800624c:	2310      	movs	r3, #16
 800624e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d030      	beq.n	80062bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b80      	cmp	r3, #128	; 0x80
 8006264:	d109      	bne.n	800627a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006274:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006278:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627c:	4613      	mov	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	4413      	add	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	4413      	add	r3, r2
 800628c:	3304      	adds	r3, #4
 800628e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	78db      	ldrb	r3, [r3, #3]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d108      	bne.n	80062aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2200      	movs	r2, #0
 800629c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f009 fd85 	bl	800fdb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	461a      	mov	r2, r3
 80062b8:	2302      	movs	r3, #2
 80062ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d2:	461a      	mov	r2, r3
 80062d4:	2320      	movs	r3, #32
 80062d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	461a      	mov	r2, r3
 80062f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	3301      	adds	r3, #1
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	2b00      	cmp	r3, #0
 8006306:	f47f af62 	bne.w	80061ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f003 ff42 	bl	800a198 <USB_ReadInterrupts>
 8006314:	4603      	mov	r3, r0
 8006316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800631a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800631e:	f040 80db 	bne.w	80064d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f003 ff63 	bl	800a1f2 <USB_ReadDevAllInEpInterrupt>
 800632c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006332:	e0cd      	b.n	80064d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 80c2 	beq.w	80064c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f003 ff89 	bl	800a262 <USB_ReadDevInEPInterrupt>
 8006350:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d057      	beq.n	800640c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	2201      	movs	r2, #1
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	43db      	mvns	r3, r3
 8006376:	69f9      	ldr	r1, [r7, #28]
 8006378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800637c:	4013      	ands	r3, r2
 800637e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638c:	461a      	mov	r2, r3
 800638e:	2301      	movs	r3, #1
 8006390:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d132      	bne.n	8006400 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	334c      	adds	r3, #76	; 0x4c
 80063aa:	6819      	ldr	r1, [r3, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b0:	4613      	mov	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4403      	add	r3, r0
 80063ba:	3348      	adds	r3, #72	; 0x48
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4419      	add	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c4:	4613      	mov	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4403      	add	r3, r0
 80063ce:	334c      	adds	r3, #76	; 0x4c
 80063d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d113      	bne.n	8006400 <HAL_PCD_IRQHandler+0x3a2>
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063dc:	4613      	mov	r3, r2
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	3354      	adds	r3, #84	; 0x54
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d108      	bne.n	8006400 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063f8:	461a      	mov	r2, r3
 80063fa:	2101      	movs	r1, #1
 80063fc:	f003 ff90 	bl	800a320 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	b2db      	uxtb	r3, r3
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f009 fc59 	bl	800fcbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d008      	beq.n	8006428 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	461a      	mov	r2, r3
 8006424:	2308      	movs	r3, #8
 8006426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	461a      	mov	r2, r3
 8006440:	2310      	movs	r3, #16
 8006442:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645a:	461a      	mov	r2, r3
 800645c:	2340      	movs	r3, #64	; 0x40
 800645e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d023      	beq.n	80064b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800646a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800646c:	6a38      	ldr	r0, [r7, #32]
 800646e:	f002 fe71 	bl	8009154 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006474:	4613      	mov	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	3338      	adds	r3, #56	; 0x38
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	4413      	add	r3, r2
 8006482:	3304      	adds	r3, #4
 8006484:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	78db      	ldrb	r3, [r3, #3]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d108      	bne.n	80064a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2200      	movs	r2, #0
 8006492:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	b2db      	uxtb	r3, r3
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f009 fc9c 	bl	800fdd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	461a      	mov	r2, r3
 80064ae:	2302      	movs	r3, #2
 80064b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80064bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fcdb 	bl	8006e7a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	3301      	adds	r3, #1
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f47f af2e 	bne.w	8006334 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f003 fe5b 	bl	800a198 <USB_ReadInterrupts>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ec:	d122      	bne.n	8006534 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064fc:	f023 0301 	bic.w	r3, r3, #1
 8006500:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006508:	2b01      	cmp	r3, #1
 800650a:	d108      	bne.n	800651e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006514:	2100      	movs	r1, #0
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fec2 	bl	80072a0 <HAL_PCDEx_LPM_Callback>
 800651c:	e002      	b.n	8006524 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f009 fc3a 	bl	800fd98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f003 fe2d 	bl	800a198 <USB_ReadInterrupts>
 800653e:	4603      	mov	r3, r0
 8006540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006548:	d112      	bne.n	8006570 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b01      	cmp	r3, #1
 8006558:	d102      	bne.n	8006560 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f009 fbf6 	bl	800fd4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695a      	ldr	r2, [r3, #20]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800656e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f003 fe0f 	bl	800a198 <USB_ReadInterrupts>
 800657a:	4603      	mov	r3, r0
 800657c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006584:	f040 80b7 	bne.w	80066f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006596:	f023 0301 	bic.w	r3, r3, #1
 800659a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2110      	movs	r1, #16
 80065a2:	4618      	mov	r0, r3
 80065a4:	f002 fdd6 	bl	8009154 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065a8:	2300      	movs	r3, #0
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ac:	e046      	b.n	800663c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ba:	461a      	mov	r2, r3
 80065bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ee:	461a      	mov	r2, r3
 80065f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006614:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	440a      	add	r2, r1
 800662c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006634:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	3301      	adds	r3, #1
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006642:	429a      	cmp	r2, r3
 8006644:	d3b3      	bcc.n	80065ae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006654:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006658:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	2b00      	cmp	r3, #0
 8006660:	d016      	beq.n	8006690 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006672:	f043 030b 	orr.w	r3, r3, #11
 8006676:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006688:	f043 030b 	orr.w	r3, r3, #11
 800668c:	6453      	str	r3, [r2, #68]	; 0x44
 800668e:	e015      	b.n	80066bc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800669e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80066a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80066a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b6:	f043 030b 	orr.w	r3, r3, #11
 80066ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80066e0:	461a      	mov	r2, r3
 80066e2:	f003 fe1d 	bl	800a320 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695a      	ldr	r2, [r3, #20]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80066f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f003 fd4c 	bl	800a198 <USB_ReadInterrupts>
 8006700:	4603      	mov	r3, r0
 8006702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670a:	d124      	bne.n	8006756 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f003 fde2 	bl	800a2da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f002 fd97 	bl	800924e <USB_GetDevSpeed>
 8006720:	4603      	mov	r3, r0
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681c      	ldr	r4, [r3, #0]
 800672c:	f001 f9e8 	bl	8007b00 <HAL_RCC_GetHCLKFreq>
 8006730:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	4620      	mov	r0, r4
 800673c:	f002 fa96 	bl	8008c6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f009 fae4 	bl	800fd0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695a      	ldr	r2, [r3, #20]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006754:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f003 fd1c 	bl	800a198 <USB_ReadInterrupts>
 8006760:	4603      	mov	r3, r0
 8006762:	f003 0308 	and.w	r3, r3, #8
 8006766:	2b08      	cmp	r3, #8
 8006768:	d10a      	bne.n	8006780 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f009 fac1 	bl	800fcf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f002 0208 	and.w	r2, r2, #8
 800677e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f003 fd07 	bl	800a198 <USB_ReadInterrupts>
 800678a:	4603      	mov	r3, r0
 800678c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006790:	2b80      	cmp	r3, #128	; 0x80
 8006792:	d122      	bne.n	80067da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067a0:	2301      	movs	r3, #1
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
 80067a4:	e014      	b.n	80067d0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	4613      	mov	r3, r2
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d105      	bne.n	80067ca <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fb27 	bl	8006e18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	3301      	adds	r3, #1
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d3e5      	bcc.n	80067a6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f003 fcda 	bl	800a198 <USB_ReadInterrupts>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ee:	d13b      	bne.n	8006868 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067f0:	2301      	movs	r3, #1
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
 80067f4:	e02b      	b.n	800684e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680a:	4613      	mov	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	3340      	adds	r3, #64	; 0x40
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d115      	bne.n	8006848 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800681c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800681e:	2b00      	cmp	r3, #0
 8006820:	da12      	bge.n	8006848 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006826:	4613      	mov	r3, r2
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	333f      	adds	r3, #63	; 0x3f
 8006832:	2201      	movs	r2, #1
 8006834:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	b2db      	uxtb	r3, r3
 800683a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800683e:	b2db      	uxtb	r3, r3
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fae8 	bl	8006e18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	3301      	adds	r3, #1
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006854:	429a      	cmp	r2, r3
 8006856:	d3ce      	bcc.n	80067f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695a      	ldr	r2, [r3, #20]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4618      	mov	r0, r3
 800686e:	f003 fc93 	bl	800a198 <USB_ReadInterrupts>
 8006872:	4603      	mov	r3, r0
 8006874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800687c:	d155      	bne.n	800692a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800687e:	2301      	movs	r3, #1
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
 8006882:	e045      	b.n	8006910 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d12e      	bne.n	800690a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	da2b      	bge.n	800690a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80068be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d121      	bne.n	800690a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	4613      	mov	r3, r2
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80068d8:	2201      	movs	r2, #1
 80068da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006906:	6053      	str	r3, [r2, #4]
            break;
 8006908:	e007      	b.n	800691a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	3301      	adds	r3, #1
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006916:	429a      	cmp	r2, r3
 8006918:	d3b4      	bcc.n	8006884 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695a      	ldr	r2, [r3, #20]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f003 fc32 	bl	800a198 <USB_ReadInterrupts>
 8006934:	4603      	mov	r3, r0
 8006936:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800693a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693e:	d10a      	bne.n	8006956 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f009 fa5b 	bl	800fdfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f003 fc1c 	bl	800a198 <USB_ReadInterrupts>
 8006960:	4603      	mov	r3, r0
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b04      	cmp	r3, #4
 8006968:	d115      	bne.n	8006996 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f009 fa4b 	bl	800fe18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6859      	ldr	r1, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
 8006992:	e000      	b.n	8006996 <HAL_PCD_IRQHandler+0x938>
      return;
 8006994:	bf00      	nop
    }
  }
}
 8006996:	3734      	adds	r7, #52	; 0x34
 8006998:	46bd      	mov	sp, r7
 800699a:	bd90      	pop	{r4, r7, pc}

0800699c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d101      	bne.n	80069b6 <HAL_PCD_SetAddress+0x1a>
 80069b2:	2302      	movs	r3, #2
 80069b4:	e013      	b.n	80069de <HAL_PCD_SetAddress+0x42>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	78fa      	ldrb	r2, [r7, #3]
 80069c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	78fa      	ldrb	r2, [r7, #3]
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f003 fb7a 	bl	800a0c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	4608      	mov	r0, r1
 80069f0:	4611      	mov	r1, r2
 80069f2:	461a      	mov	r2, r3
 80069f4:	4603      	mov	r3, r0
 80069f6:	70fb      	strb	r3, [r7, #3]
 80069f8:	460b      	mov	r3, r1
 80069fa:	803b      	strh	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	da0f      	bge.n	8006a2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	f003 020f 	and.w	r2, r3, #15
 8006a12:	4613      	mov	r3, r2
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	3338      	adds	r3, #56	; 0x38
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	4413      	add	r3, r2
 8006a20:	3304      	adds	r3, #4
 8006a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	705a      	strb	r2, [r3, #1]
 8006a2a:	e00f      	b.n	8006a4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	f003 020f 	and.w	r2, r3, #15
 8006a32:	4613      	mov	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4413      	add	r3, r2
 8006a42:	3304      	adds	r3, #4
 8006a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006a58:	883a      	ldrh	r2, [r7, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	78ba      	ldrb	r2, [r7, #2]
 8006a62:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d004      	beq.n	8006a76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a76:	78bb      	ldrb	r3, [r7, #2]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d102      	bne.n	8006a82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_PCD_EP_Open+0xaa>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e00e      	b.n	8006aae <HAL_PCD_EP_Open+0xc8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68f9      	ldr	r1, [r7, #12]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f002 fbfa 	bl	8009298 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006aac:	7afb      	ldrb	r3, [r7, #11]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da0f      	bge.n	8006aea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	f003 020f 	and.w	r2, r3, #15
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	3338      	adds	r3, #56	; 0x38
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	4413      	add	r3, r2
 8006ade:	3304      	adds	r3, #4
 8006ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	705a      	strb	r2, [r3, #1]
 8006ae8:	e00f      	b.n	8006b0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	f003 020f 	and.w	r2, r3, #15
 8006af0:	4613      	mov	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	3304      	adds	r3, #4
 8006b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_PCD_EP_Close+0x6e>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e00e      	b.n	8006b42 <HAL_PCD_EP_Close+0x8c>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68f9      	ldr	r1, [r7, #12]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f002 fc38 	bl	80093a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b086      	sub	sp, #24
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
 8006b56:	460b      	mov	r3, r1
 8006b58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	f003 020f 	and.w	r2, r3, #15
 8006b60:	4613      	mov	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	3304      	adds	r3, #4
 8006b72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2200      	movs	r2, #0
 8006b84:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b8c:	7afb      	ldrb	r3, [r7, #11]
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d102      	bne.n	8006ba6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d109      	bne.n	8006bc4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6979      	ldr	r1, [r7, #20]
 8006bbe:	f002 ff17 	bl	80099f0 <USB_EP0StartXfer>
 8006bc2:	e008      	b.n	8006bd6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6979      	ldr	r1, [r7, #20]
 8006bd2:	f002 fcc5 	bl	8009560 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	f003 020f 	and.w	r2, r3, #15
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006c02:	681b      	ldr	r3, [r3, #0]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c20:	7afb      	ldrb	r3, [r7, #11]
 8006c22:	f003 020f 	and.w	r2, r3, #15
 8006c26:	4613      	mov	r3, r2
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	3338      	adds	r3, #56	; 0x38
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	3304      	adds	r3, #4
 8006c36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2200      	movs	r2, #0
 8006c48:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d102      	bne.n	8006c6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c6a:	7afb      	ldrb	r3, [r7, #11]
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d109      	bne.n	8006c88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6979      	ldr	r1, [r7, #20]
 8006c82:	f002 feb5 	bl	80099f0 <USB_EP0StartXfer>
 8006c86:	e008      	b.n	8006c9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	6979      	ldr	r1, [r7, #20]
 8006c96:	f002 fc63 	bl	8009560 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	f003 020f 	and.w	r2, r3, #15
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d901      	bls.n	8006cc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e050      	b.n	8006d64 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	da0f      	bge.n	8006cea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	f003 020f 	and.w	r2, r3, #15
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	3338      	adds	r3, #56	; 0x38
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	3304      	adds	r3, #4
 8006ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	705a      	strb	r2, [r3, #1]
 8006ce8:	e00d      	b.n	8006d06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cea:	78fa      	ldrb	r2, [r7, #3]
 8006cec:	4613      	mov	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <HAL_PCD_EP_SetStall+0x82>
 8006d22:	2302      	movs	r3, #2
 8006d24:	e01e      	b.n	8006d64 <HAL_PCD_EP_SetStall+0xc0>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f003 f8f3 	bl	8009f20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	b2d9      	uxtb	r1, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d54:	461a      	mov	r2, r3
 8006d56:	f003 fae3 	bl	800a320 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	f003 020f 	and.w	r2, r3, #15
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d901      	bls.n	8006d8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e042      	b.n	8006e10 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	da0f      	bge.n	8006db2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	f003 020f 	and.w	r2, r3, #15
 8006d98:	4613      	mov	r3, r2
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	3338      	adds	r3, #56	; 0x38
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	4413      	add	r3, r2
 8006da6:	3304      	adds	r3, #4
 8006da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	705a      	strb	r2, [r3, #1]
 8006db0:	e00f      	b.n	8006dd2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	f003 020f 	and.w	r2, r3, #15
 8006db8:	4613      	mov	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3304      	adds	r3, #4
 8006dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_PCD_EP_ClrStall+0x86>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e00e      	b.n	8006e10 <HAL_PCD_EP_ClrStall+0xa4>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f003 f8fb 	bl	8009ffc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da0c      	bge.n	8006e46 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	f003 020f 	and.w	r2, r3, #15
 8006e32:	4613      	mov	r3, r2
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	3338      	adds	r3, #56	; 0x38
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	4413      	add	r3, r2
 8006e40:	3304      	adds	r3, #4
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e00c      	b.n	8006e60 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	f003 020f 	and.w	r2, r3, #15
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f002 ff1a 	bl	8009ca0 <USB_EPStopXfer>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b08a      	sub	sp, #40	; 0x28
 8006e7e:	af02      	add	r7, sp, #8
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	4613      	mov	r3, r2
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	3338      	adds	r3, #56	; 0x38
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a1a      	ldr	r2, [r3, #32]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d901      	bls.n	8006eb2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e06c      	b.n	8006f8c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d902      	bls.n	8006ece <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	3303      	adds	r3, #3
 8006ed2:	089b      	lsrs	r3, r3, #2
 8006ed4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ed6:	e02b      	b.n	8006f30 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d902      	bls.n	8006ef4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	3303      	adds	r3, #3
 8006ef8:	089b      	lsrs	r3, r3, #2
 8006efa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6919      	ldr	r1, [r3, #16]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	4603      	mov	r3, r0
 8006f12:	6978      	ldr	r0, [r7, #20]
 8006f14:	f002 ff6e 	bl	8009df4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	441a      	add	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1a      	ldr	r2, [r3, #32]
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	441a      	add	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d809      	bhi.n	8006f5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a1a      	ldr	r2, [r3, #32]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d203      	bcs.n	8006f5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1be      	bne.n	8006ed8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d811      	bhi.n	8006f8a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	43db      	mvns	r3, r3
 8006f80:	6939      	ldr	r1, [r7, #16]
 8006f82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f86:	4013      	ands	r3, r2
 8006f88:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	333c      	adds	r3, #60	; 0x3c
 8006fac:	3304      	adds	r3, #4
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d17b      	bne.n	80070c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d015      	beq.n	8007000 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	4a61      	ldr	r2, [pc, #388]	; (800715c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	f240 80b9 	bls.w	8007150 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80b3 	beq.w	8007150 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffc:	6093      	str	r3, [r2, #8]
 8006ffe:	e0a7      	b.n	8007150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007016:	461a      	mov	r2, r3
 8007018:	2320      	movs	r3, #32
 800701a:	6093      	str	r3, [r2, #8]
 800701c:	e098      	b.n	8007150 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 8093 	bne.w	8007150 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	4a4b      	ldr	r2, [pc, #300]	; (800715c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d90f      	bls.n	8007052 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007048:	461a      	mov	r2, r3
 800704a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704e:	6093      	str	r3, [r2, #8]
 8007050:	e07e      	b.n	8007150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	4413      	add	r3, r2
 8007064:	3304      	adds	r3, #4
 8007066:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	0159      	lsls	r1, r3, #5
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	440b      	add	r3, r1
 8007074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800707e:	1ad2      	subs	r2, r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d114      	bne.n	80070b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800709c:	461a      	mov	r2, r3
 800709e:	2101      	movs	r1, #1
 80070a0:	f003 f93e 	bl	800a320 <USB_EP0_OutStart>
 80070a4:	e006      	b.n	80070b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	441a      	add	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f008 fde4 	bl	800fc88 <HAL_PCD_DataOutStageCallback>
 80070c0:	e046      	b.n	8007150 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	4a26      	ldr	r2, [pc, #152]	; (8007160 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d124      	bne.n	8007114 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	461a      	mov	r2, r3
 80070e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e6:	6093      	str	r3, [r2, #8]
 80070e8:	e032      	b.n	8007150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	461a      	mov	r2, r3
 8007102:	2320      	movs	r3, #32
 8007104:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f008 fdbb 	bl	800fc88 <HAL_PCD_DataOutStageCallback>
 8007112:	e01d      	b.n	8007150 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d114      	bne.n	8007144 <PCD_EP_OutXfrComplete_int+0x1b0>
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	4613      	mov	r3, r2
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d108      	bne.n	8007144 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800713c:	461a      	mov	r2, r3
 800713e:	2100      	movs	r1, #0
 8007140:	f003 f8ee 	bl	800a320 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f008 fd9c 	bl	800fc88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3720      	adds	r7, #32
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	4f54300a 	.word	0x4f54300a
 8007160:	4f54310a 	.word	0x4f54310a

08007164 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	333c      	adds	r3, #60	; 0x3c
 800717c:	3304      	adds	r3, #4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4a15      	ldr	r2, [pc, #84]	; (80071ec <PCD_EP_OutSetupPacket_int+0x88>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d90e      	bls.n	80071b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	461a      	mov	r2, r3
 80071b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f008 fd53 	bl	800fc64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a0a      	ldr	r2, [pc, #40]	; (80071ec <PCD_EP_OutSetupPacket_int+0x88>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d90c      	bls.n	80071e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d108      	bne.n	80071e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071d8:	461a      	mov	r2, r3
 80071da:	2101      	movs	r1, #1
 80071dc:	f003 f8a0 	bl	800a320 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	4f54300a 	.word	0x4f54300a

080071f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
 80071fc:	4613      	mov	r3, r2
 80071fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d107      	bne.n	800721e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800720e:	883b      	ldrh	r3, [r7, #0]
 8007210:	0419      	lsls	r1, r3, #16
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	430a      	orrs	r2, r1
 800721a:	629a      	str	r2, [r3, #40]	; 0x28
 800721c:	e028      	b.n	8007270 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	0c1b      	lsrs	r3, r3, #16
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	4413      	add	r3, r2
 800722a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
 8007230:	e00d      	b.n	800724e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	3340      	adds	r3, #64	; 0x40
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	0c1b      	lsrs	r3, r3, #16
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	4413      	add	r3, r2
 8007246:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	3301      	adds	r3, #1
 800724c:	73fb      	strb	r3, [r7, #15]
 800724e:	7bfa      	ldrb	r2, [r7, #15]
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	3b01      	subs	r3, #1
 8007254:	429a      	cmp	r2, r3
 8007256:	d3ec      	bcc.n	8007232 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007258:	883b      	ldrh	r3, [r7, #0]
 800725a:	0418      	lsls	r0, r3, #16
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6819      	ldr	r1, [r3, #0]
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	3b01      	subs	r3, #1
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	4302      	orrs	r2, r0
 8007268:	3340      	adds	r3, #64	; 0x40
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	887a      	ldrh	r2, [r7, #2]
 8007290:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e267      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d075      	beq.n	80073c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072d6:	4b88      	ldr	r3, [pc, #544]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 030c 	and.w	r3, r3, #12
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d00c      	beq.n	80072fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072e2:	4b85      	ldr	r3, [pc, #532]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d112      	bne.n	8007314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ee:	4b82      	ldr	r3, [pc, #520]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072fa:	d10b      	bne.n	8007314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072fc:	4b7e      	ldr	r3, [pc, #504]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d05b      	beq.n	80073c0 <HAL_RCC_OscConfig+0x108>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d157      	bne.n	80073c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e242      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731c:	d106      	bne.n	800732c <HAL_RCC_OscConfig+0x74>
 800731e:	4b76      	ldr	r3, [pc, #472]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a75      	ldr	r2, [pc, #468]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	e01d      	b.n	8007368 <HAL_RCC_OscConfig+0xb0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007334:	d10c      	bne.n	8007350 <HAL_RCC_OscConfig+0x98>
 8007336:	4b70      	ldr	r3, [pc, #448]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a6f      	ldr	r2, [pc, #444]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 800733c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	4b6d      	ldr	r3, [pc, #436]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a6c      	ldr	r2, [pc, #432]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	e00b      	b.n	8007368 <HAL_RCC_OscConfig+0xb0>
 8007350:	4b69      	ldr	r3, [pc, #420]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a68      	ldr	r2, [pc, #416]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	4b66      	ldr	r3, [pc, #408]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a65      	ldr	r2, [pc, #404]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d013      	beq.n	8007398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007370:	f7fc f952 	bl	8003618 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007378:	f7fc f94e 	bl	8003618 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b64      	cmp	r3, #100	; 0x64
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e207      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800738a:	4b5b      	ldr	r3, [pc, #364]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0f0      	beq.n	8007378 <HAL_RCC_OscConfig+0xc0>
 8007396:	e014      	b.n	80073c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fc f93e 	bl	8003618 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073a0:	f7fc f93a 	bl	8003618 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b64      	cmp	r3, #100	; 0x64
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e1f3      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073b2:	4b51      	ldr	r3, [pc, #324]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f0      	bne.n	80073a0 <HAL_RCC_OscConfig+0xe8>
 80073be:	e000      	b.n	80073c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d063      	beq.n	8007496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073ce:	4b4a      	ldr	r3, [pc, #296]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f003 030c 	and.w	r3, r3, #12
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073da:	4b47      	ldr	r3, [pc, #284]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d11c      	bne.n	8007420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073e6:	4b44      	ldr	r3, [pc, #272]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d116      	bne.n	8007420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073f2:	4b41      	ldr	r3, [pc, #260]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <HAL_RCC_OscConfig+0x152>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d001      	beq.n	800740a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e1c7      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800740a:	4b3b      	ldr	r3, [pc, #236]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4937      	ldr	r1, [pc, #220]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 800741a:	4313      	orrs	r3, r2
 800741c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800741e:	e03a      	b.n	8007496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d020      	beq.n	800746a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007428:	4b34      	ldr	r3, [pc, #208]	; (80074fc <HAL_RCC_OscConfig+0x244>)
 800742a:	2201      	movs	r2, #1
 800742c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742e:	f7fc f8f3 	bl	8003618 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007434:	e008      	b.n	8007448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007436:	f7fc f8ef 	bl	8003618 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e1a8      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007448:	4b2b      	ldr	r3, [pc, #172]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0f0      	beq.n	8007436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007454:	4b28      	ldr	r3, [pc, #160]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	4925      	ldr	r1, [pc, #148]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 8007464:	4313      	orrs	r3, r2
 8007466:	600b      	str	r3, [r1, #0]
 8007468:	e015      	b.n	8007496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800746a:	4b24      	ldr	r3, [pc, #144]	; (80074fc <HAL_RCC_OscConfig+0x244>)
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007470:	f7fc f8d2 	bl	8003618 <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007478:	f7fc f8ce 	bl	8003618 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e187      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800748a:	4b1b      	ldr	r3, [pc, #108]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f0      	bne.n	8007478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d036      	beq.n	8007510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d016      	beq.n	80074d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074aa:	4b15      	ldr	r3, [pc, #84]	; (8007500 <HAL_RCC_OscConfig+0x248>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b0:	f7fc f8b2 	bl	8003618 <HAL_GetTick>
 80074b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b6:	e008      	b.n	80074ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074b8:	f7fc f8ae 	bl	8003618 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e167      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ca:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <HAL_RCC_OscConfig+0x240>)
 80074cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0f0      	beq.n	80074b8 <HAL_RCC_OscConfig+0x200>
 80074d6:	e01b      	b.n	8007510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074d8:	4b09      	ldr	r3, [pc, #36]	; (8007500 <HAL_RCC_OscConfig+0x248>)
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074de:	f7fc f89b 	bl	8003618 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e4:	e00e      	b.n	8007504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074e6:	f7fc f897 	bl	8003618 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d907      	bls.n	8007504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e150      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
 80074f8:	40023800 	.word	0x40023800
 80074fc:	42470000 	.word	0x42470000
 8007500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007504:	4b88      	ldr	r3, [pc, #544]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1ea      	bne.n	80074e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 8097 	beq.w	800764c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800751e:	2300      	movs	r3, #0
 8007520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007522:	4b81      	ldr	r3, [pc, #516]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10f      	bne.n	800754e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800752e:	2300      	movs	r3, #0
 8007530:	60bb      	str	r3, [r7, #8]
 8007532:	4b7d      	ldr	r3, [pc, #500]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	4a7c      	ldr	r2, [pc, #496]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800753c:	6413      	str	r3, [r2, #64]	; 0x40
 800753e:	4b7a      	ldr	r3, [pc, #488]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007546:	60bb      	str	r3, [r7, #8]
 8007548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800754e:	4b77      	ldr	r3, [pc, #476]	; (800772c <HAL_RCC_OscConfig+0x474>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007556:	2b00      	cmp	r3, #0
 8007558:	d118      	bne.n	800758c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800755a:	4b74      	ldr	r3, [pc, #464]	; (800772c <HAL_RCC_OscConfig+0x474>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a73      	ldr	r2, [pc, #460]	; (800772c <HAL_RCC_OscConfig+0x474>)
 8007560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007566:	f7fc f857 	bl	8003618 <HAL_GetTick>
 800756a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800756c:	e008      	b.n	8007580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800756e:	f7fc f853 	bl	8003618 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d901      	bls.n	8007580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e10c      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007580:	4b6a      	ldr	r3, [pc, #424]	; (800772c <HAL_RCC_OscConfig+0x474>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0f0      	beq.n	800756e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d106      	bne.n	80075a2 <HAL_RCC_OscConfig+0x2ea>
 8007594:	4b64      	ldr	r3, [pc, #400]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007598:	4a63      	ldr	r2, [pc, #396]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 800759a:	f043 0301 	orr.w	r3, r3, #1
 800759e:	6713      	str	r3, [r2, #112]	; 0x70
 80075a0:	e01c      	b.n	80075dc <HAL_RCC_OscConfig+0x324>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b05      	cmp	r3, #5
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCC_OscConfig+0x30c>
 80075aa:	4b5f      	ldr	r3, [pc, #380]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	4a5e      	ldr	r2, [pc, #376]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80075b0:	f043 0304 	orr.w	r3, r3, #4
 80075b4:	6713      	str	r3, [r2, #112]	; 0x70
 80075b6:	4b5c      	ldr	r3, [pc, #368]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ba:	4a5b      	ldr	r2, [pc, #364]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80075bc:	f043 0301 	orr.w	r3, r3, #1
 80075c0:	6713      	str	r3, [r2, #112]	; 0x70
 80075c2:	e00b      	b.n	80075dc <HAL_RCC_OscConfig+0x324>
 80075c4:	4b58      	ldr	r3, [pc, #352]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80075c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c8:	4a57      	ldr	r2, [pc, #348]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80075ca:	f023 0301 	bic.w	r3, r3, #1
 80075ce:	6713      	str	r3, [r2, #112]	; 0x70
 80075d0:	4b55      	ldr	r3, [pc, #340]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80075d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d4:	4a54      	ldr	r2, [pc, #336]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80075d6:	f023 0304 	bic.w	r3, r3, #4
 80075da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d015      	beq.n	8007610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e4:	f7fc f818 	bl	8003618 <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ea:	e00a      	b.n	8007602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ec:	f7fc f814 	bl	8003618 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e0cb      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007602:	4b49      	ldr	r3, [pc, #292]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0ee      	beq.n	80075ec <HAL_RCC_OscConfig+0x334>
 800760e:	e014      	b.n	800763a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007610:	f7fc f802 	bl	8003618 <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007616:	e00a      	b.n	800762e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007618:	f7fb fffe 	bl	8003618 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	f241 3288 	movw	r2, #5000	; 0x1388
 8007626:	4293      	cmp	r3, r2
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e0b5      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800762e:	4b3e      	ldr	r3, [pc, #248]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1ee      	bne.n	8007618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d105      	bne.n	800764c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007640:	4b39      	ldr	r3, [pc, #228]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007644:	4a38      	ldr	r2, [pc, #224]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800764a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 80a1 	beq.w	8007798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007656:	4b34      	ldr	r3, [pc, #208]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 030c 	and.w	r3, r3, #12
 800765e:	2b08      	cmp	r3, #8
 8007660:	d05c      	beq.n	800771c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d141      	bne.n	80076ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800766a:	4b31      	ldr	r3, [pc, #196]	; (8007730 <HAL_RCC_OscConfig+0x478>)
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007670:	f7fb ffd2 	bl	8003618 <HAL_GetTick>
 8007674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007676:	e008      	b.n	800768a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007678:	f7fb ffce 	bl	8003618 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b02      	cmp	r3, #2
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e087      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768a:	4b27      	ldr	r3, [pc, #156]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f0      	bne.n	8007678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	019b      	lsls	r3, r3, #6
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	3b01      	subs	r3, #1
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	061b      	lsls	r3, r3, #24
 80076ba:	491b      	ldr	r1, [pc, #108]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076c0:	4b1b      	ldr	r3, [pc, #108]	; (8007730 <HAL_RCC_OscConfig+0x478>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c6:	f7fb ffa7 	bl	8003618 <HAL_GetTick>
 80076ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076cc:	e008      	b.n	80076e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076ce:	f7fb ffa3 	bl	8003618 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d901      	bls.n	80076e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e05c      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076e0:	4b11      	ldr	r3, [pc, #68]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0f0      	beq.n	80076ce <HAL_RCC_OscConfig+0x416>
 80076ec:	e054      	b.n	8007798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ee:	4b10      	ldr	r3, [pc, #64]	; (8007730 <HAL_RCC_OscConfig+0x478>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f4:	f7fb ff90 	bl	8003618 <HAL_GetTick>
 80076f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076fa:	e008      	b.n	800770e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076fc:	f7fb ff8c 	bl	8003618 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e045      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <HAL_RCC_OscConfig+0x470>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1f0      	bne.n	80076fc <HAL_RCC_OscConfig+0x444>
 800771a:	e03d      	b.n	8007798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d107      	bne.n	8007734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e038      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
 8007728:	40023800 	.word	0x40023800
 800772c:	40007000 	.word	0x40007000
 8007730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007734:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <HAL_RCC_OscConfig+0x4ec>)
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d028      	beq.n	8007794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800774c:	429a      	cmp	r2, r3
 800774e:	d121      	bne.n	8007794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800775a:	429a      	cmp	r2, r3
 800775c:	d11a      	bne.n	8007794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007764:	4013      	ands	r3, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800776a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800776c:	4293      	cmp	r3, r2
 800776e:	d111      	bne.n	8007794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	3b01      	subs	r3, #1
 800777e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007780:	429a      	cmp	r2, r3
 8007782:	d107      	bne.n	8007794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007790:	429a      	cmp	r2, r3
 8007792:	d001      	beq.n	8007798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40023800 	.word	0x40023800

080077a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0cc      	b.n	8007956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077bc:	4b68      	ldr	r3, [pc, #416]	; (8007960 <HAL_RCC_ClockConfig+0x1b8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d90c      	bls.n	80077e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ca:	4b65      	ldr	r3, [pc, #404]	; (8007960 <HAL_RCC_ClockConfig+0x1b8>)
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d2:	4b63      	ldr	r3, [pc, #396]	; (8007960 <HAL_RCC_ClockConfig+0x1b8>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d001      	beq.n	80077e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0b8      	b.n	8007956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d020      	beq.n	8007832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077fc:	4b59      	ldr	r3, [pc, #356]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	4a58      	ldr	r2, [pc, #352]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 8007802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007814:	4b53      	ldr	r3, [pc, #332]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	4a52      	ldr	r2, [pc, #328]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 800781a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800781e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007820:	4b50      	ldr	r3, [pc, #320]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	494d      	ldr	r1, [pc, #308]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 800782e:	4313      	orrs	r3, r2
 8007830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d044      	beq.n	80078c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d107      	bne.n	8007856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007846:	4b47      	ldr	r3, [pc, #284]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d119      	bne.n	8007886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e07f      	b.n	8007956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d003      	beq.n	8007866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007862:	2b03      	cmp	r3, #3
 8007864:	d107      	bne.n	8007876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007866:	4b3f      	ldr	r3, [pc, #252]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e06f      	b.n	8007956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007876:	4b3b      	ldr	r3, [pc, #236]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e067      	b.n	8007956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007886:	4b37      	ldr	r3, [pc, #220]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f023 0203 	bic.w	r2, r3, #3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	4934      	ldr	r1, [pc, #208]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 8007894:	4313      	orrs	r3, r2
 8007896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007898:	f7fb febe 	bl	8003618 <HAL_GetTick>
 800789c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789e:	e00a      	b.n	80078b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078a0:	f7fb feba 	bl	8003618 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e04f      	b.n	8007956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b6:	4b2b      	ldr	r3, [pc, #172]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 020c 	and.w	r2, r3, #12
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d1eb      	bne.n	80078a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078c8:	4b25      	ldr	r3, [pc, #148]	; (8007960 <HAL_RCC_ClockConfig+0x1b8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d20c      	bcs.n	80078f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d6:	4b22      	ldr	r3, [pc, #136]	; (8007960 <HAL_RCC_ClockConfig+0x1b8>)
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	b2d2      	uxtb	r2, r2
 80078dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078de:	4b20      	ldr	r3, [pc, #128]	; (8007960 <HAL_RCC_ClockConfig+0x1b8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d001      	beq.n	80078f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e032      	b.n	8007956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d008      	beq.n	800790e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	4916      	ldr	r1, [pc, #88]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 800790a:	4313      	orrs	r3, r2
 800790c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d009      	beq.n	800792e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	490e      	ldr	r1, [pc, #56]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	4313      	orrs	r3, r2
 800792c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800792e:	f000 f821 	bl	8007974 <HAL_RCC_GetSysClockFreq>
 8007932:	4602      	mov	r2, r0
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	091b      	lsrs	r3, r3, #4
 800793a:	f003 030f 	and.w	r3, r3, #15
 800793e:	490a      	ldr	r1, [pc, #40]	; (8007968 <HAL_RCC_ClockConfig+0x1c0>)
 8007940:	5ccb      	ldrb	r3, [r1, r3]
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	4a09      	ldr	r2, [pc, #36]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800794a:	4b09      	ldr	r3, [pc, #36]	; (8007970 <HAL_RCC_ClockConfig+0x1c8>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7fb fb46 	bl	8002fe0 <HAL_InitTick>

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40023c00 	.word	0x40023c00
 8007964:	40023800 	.word	0x40023800
 8007968:	080115fc 	.word	0x080115fc
 800796c:	20000038 	.word	0x20000038
 8007970:	2000003c 	.word	0x2000003c

08007974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007978:	b090      	sub	sp, #64	; 0x40
 800797a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
 8007980:	2300      	movs	r3, #0
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007984:	2300      	movs	r3, #0
 8007986:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800798c:	4b59      	ldr	r3, [pc, #356]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x180>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 030c 	and.w	r3, r3, #12
 8007994:	2b08      	cmp	r3, #8
 8007996:	d00d      	beq.n	80079b4 <HAL_RCC_GetSysClockFreq+0x40>
 8007998:	2b08      	cmp	r3, #8
 800799a:	f200 80a1 	bhi.w	8007ae0 <HAL_RCC_GetSysClockFreq+0x16c>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_RCC_GetSysClockFreq+0x34>
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d003      	beq.n	80079ae <HAL_RCC_GetSysClockFreq+0x3a>
 80079a6:	e09b      	b.n	8007ae0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079a8:	4b53      	ldr	r3, [pc, #332]	; (8007af8 <HAL_RCC_GetSysClockFreq+0x184>)
 80079aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80079ac:	e09b      	b.n	8007ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079ae:	4b53      	ldr	r3, [pc, #332]	; (8007afc <HAL_RCC_GetSysClockFreq+0x188>)
 80079b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079b2:	e098      	b.n	8007ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079b4:	4b4f      	ldr	r3, [pc, #316]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079be:	4b4d      	ldr	r3, [pc, #308]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d028      	beq.n	8007a1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ca:	4b4a      	ldr	r3, [pc, #296]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	099b      	lsrs	r3, r3, #6
 80079d0:	2200      	movs	r2, #0
 80079d2:	623b      	str	r3, [r7, #32]
 80079d4:	627a      	str	r2, [r7, #36]	; 0x24
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80079dc:	2100      	movs	r1, #0
 80079de:	4b47      	ldr	r3, [pc, #284]	; (8007afc <HAL_RCC_GetSysClockFreq+0x188>)
 80079e0:	fb03 f201 	mul.w	r2, r3, r1
 80079e4:	2300      	movs	r3, #0
 80079e6:	fb00 f303 	mul.w	r3, r0, r3
 80079ea:	4413      	add	r3, r2
 80079ec:	4a43      	ldr	r2, [pc, #268]	; (8007afc <HAL_RCC_GetSysClockFreq+0x188>)
 80079ee:	fba0 1202 	umull	r1, r2, r0, r2
 80079f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079f4:	460a      	mov	r2, r1
 80079f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80079f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fa:	4413      	add	r3, r2
 80079fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a00:	2200      	movs	r2, #0
 8007a02:	61bb      	str	r3, [r7, #24]
 8007a04:	61fa      	str	r2, [r7, #28]
 8007a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a0e:	f7f8 ffd5 	bl	80009bc <__aeabi_uldivmod>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4613      	mov	r3, r2
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a1a:	e053      	b.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a1c:	4b35      	ldr	r3, [pc, #212]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	099b      	lsrs	r3, r3, #6
 8007a22:	2200      	movs	r2, #0
 8007a24:	613b      	str	r3, [r7, #16]
 8007a26:	617a      	str	r2, [r7, #20]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a2e:	f04f 0b00 	mov.w	fp, #0
 8007a32:	4652      	mov	r2, sl
 8007a34:	465b      	mov	r3, fp
 8007a36:	f04f 0000 	mov.w	r0, #0
 8007a3a:	f04f 0100 	mov.w	r1, #0
 8007a3e:	0159      	lsls	r1, r3, #5
 8007a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a44:	0150      	lsls	r0, r2, #5
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	ebb2 080a 	subs.w	r8, r2, sl
 8007a4e:	eb63 090b 	sbc.w	r9, r3, fp
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	f04f 0300 	mov.w	r3, #0
 8007a5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a66:	ebb2 0408 	subs.w	r4, r2, r8
 8007a6a:	eb63 0509 	sbc.w	r5, r3, r9
 8007a6e:	f04f 0200 	mov.w	r2, #0
 8007a72:	f04f 0300 	mov.w	r3, #0
 8007a76:	00eb      	lsls	r3, r5, #3
 8007a78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a7c:	00e2      	lsls	r2, r4, #3
 8007a7e:	4614      	mov	r4, r2
 8007a80:	461d      	mov	r5, r3
 8007a82:	eb14 030a 	adds.w	r3, r4, sl
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	eb45 030b 	adc.w	r3, r5, fp
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	028b      	lsls	r3, r1, #10
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	028a      	lsls	r2, r1, #10
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aae:	2200      	movs	r2, #0
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	60fa      	str	r2, [r7, #12]
 8007ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ab8:	f7f8 ff80 	bl	80009bc <__aeabi_uldivmod>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ac4:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	0c1b      	lsrs	r3, r3, #16
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	3301      	adds	r3, #1
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ade:	e002      	b.n	8007ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ae2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3740      	adds	r7, #64	; 0x40
 8007aec:	46bd      	mov	sp, r7
 8007aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007af2:	bf00      	nop
 8007af4:	40023800 	.word	0x40023800
 8007af8:	00f42400 	.word	0x00f42400
 8007afc:	017d7840 	.word	0x017d7840

08007b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b04:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b06:	681b      	ldr	r3, [r3, #0]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	20000038 	.word	0x20000038

08007b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b1c:	f7ff fff0 	bl	8007b00 <HAL_RCC_GetHCLKFreq>
 8007b20:	4602      	mov	r2, r0
 8007b22:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	0a9b      	lsrs	r3, r3, #10
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	4903      	ldr	r1, [pc, #12]	; (8007b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b2e:	5ccb      	ldrb	r3, [r1, r3]
 8007b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	0801160c 	.word	0x0801160c

08007b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b44:	f7ff ffdc 	bl	8007b00 <HAL_RCC_GetHCLKFreq>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	0b5b      	lsrs	r3, r3, #13
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	4903      	ldr	r1, [pc, #12]	; (8007b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b56:	5ccb      	ldrb	r3, [r1, r3]
 8007b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	40023800 	.word	0x40023800
 8007b64:	0801160c 	.word	0x0801160c

08007b68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	220f      	movs	r2, #15
 8007b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b78:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 0203 	and.w	r2, r3, #3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b84:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b90:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	08db      	lsrs	r3, r3, #3
 8007ba2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <HAL_RCC_GetClockConfig+0x60>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0207 	and.w	r2, r3, #7
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	601a      	str	r2, [r3, #0]
}
 8007bb6:	bf00      	nop
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40023800 	.word	0x40023800
 8007bc8:	40023c00 	.word	0x40023c00

08007bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e07b      	b.n	8007cd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d108      	bne.n	8007bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bee:	d009      	beq.n	8007c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	61da      	str	r2, [r3, #28]
 8007bf6:	e005      	b.n	8007c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fb f8fe 	bl	8002e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c88:	ea42 0103 	orr.w	r1, r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	0c1b      	lsrs	r3, r3, #16
 8007ca2:	f003 0104 	and.w	r1, r3, #4
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	f003 0210 	and.w	r2, r3, #16
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69da      	ldr	r2, [r3, #28]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e041      	b.n	8007d74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d106      	bne.n	8007d0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7fb f8d3 	bl	8002eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	f000 fbf5 	bl	800850c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d001      	beq.n	8007d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e044      	b.n	8007e1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a1e      	ldr	r2, [pc, #120]	; (8007e2c <HAL_TIM_Base_Start_IT+0xb0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d018      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x6c>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbe:	d013      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x6c>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a1a      	ldr	r2, [pc, #104]	; (8007e30 <HAL_TIM_Base_Start_IT+0xb4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00e      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x6c>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a19      	ldr	r2, [pc, #100]	; (8007e34 <HAL_TIM_Base_Start_IT+0xb8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d009      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x6c>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_TIM_Base_Start_IT+0xbc>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x6c>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <HAL_TIM_Base_Start_IT+0xc0>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d111      	bne.n	8007e0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b06      	cmp	r3, #6
 8007df8:	d010      	beq.n	8007e1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0201 	orr.w	r2, r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0a:	e007      	b.n	8007e1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40000400 	.word	0x40000400
 8007e34:	40000800 	.word	0x40000800
 8007e38:	40000c00 	.word	0x40000c00
 8007e3c:	40014000 	.word	0x40014000

08007e40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e041      	b.n	8007ed6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f839 	bl	8007ede <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	f000 fb44 	bl	800850c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d122      	bne.n	8007f4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d11b      	bne.n	8007f4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f06f 0202 	mvn.w	r2, #2
 8007f1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	f003 0303 	and.w	r3, r3, #3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fa78 	bl	800842a <HAL_TIM_IC_CaptureCallback>
 8007f3a:	e005      	b.n	8007f48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fa6a 	bl	8008416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa7b 	bl	800843e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d122      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d11b      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f06f 0204 	mvn.w	r2, #4
 8007f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa4e 	bl	800842a <HAL_TIM_IC_CaptureCallback>
 8007f8e:	e005      	b.n	8007f9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fa40 	bl	8008416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa51 	bl	800843e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d122      	bne.n	8007ff6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d11b      	bne.n	8007ff6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f06f 0208 	mvn.w	r2, #8
 8007fc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2204      	movs	r2, #4
 8007fcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fa24 	bl	800842a <HAL_TIM_IC_CaptureCallback>
 8007fe2:	e005      	b.n	8007ff0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fa16 	bl	8008416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa27 	bl	800843e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b10      	cmp	r3, #16
 8008002:	d122      	bne.n	800804a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b10      	cmp	r3, #16
 8008010:	d11b      	bne.n	800804a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f06f 0210 	mvn.w	r2, #16
 800801a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2208      	movs	r2, #8
 8008020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800802c:	2b00      	cmp	r3, #0
 800802e:	d003      	beq.n	8008038 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f9fa 	bl	800842a <HAL_TIM_IC_CaptureCallback>
 8008036:	e005      	b.n	8008044 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f9ec 	bl	8008416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9fd 	bl	800843e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b01      	cmp	r3, #1
 8008056:	d10e      	bne.n	8008076 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b01      	cmp	r3, #1
 8008064:	d107      	bne.n	8008076 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f06f 0201 	mvn.w	r2, #1
 800806e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fa fe49 	bl	8002d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008080:	2b80      	cmp	r3, #128	; 0x80
 8008082:	d10e      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808e:	2b80      	cmp	r3, #128	; 0x80
 8008090:	d107      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800809a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fd79 	bl	8008b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b40      	cmp	r3, #64	; 0x40
 80080ae:	d10e      	bne.n	80080ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d107      	bne.n	80080ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f9c2 	bl	8008452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d10e      	bne.n	80080fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	d107      	bne.n	80080fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f06f 0220 	mvn.w	r2, #32
 80080f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fd43 	bl	8008b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800811e:	2302      	movs	r3, #2
 8008120:	e0ae      	b.n	8008280 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b0c      	cmp	r3, #12
 800812e:	f200 809f 	bhi.w	8008270 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	0800816d 	.word	0x0800816d
 800813c:	08008271 	.word	0x08008271
 8008140:	08008271 	.word	0x08008271
 8008144:	08008271 	.word	0x08008271
 8008148:	080081ad 	.word	0x080081ad
 800814c:	08008271 	.word	0x08008271
 8008150:	08008271 	.word	0x08008271
 8008154:	08008271 	.word	0x08008271
 8008158:	080081ef 	.word	0x080081ef
 800815c:	08008271 	.word	0x08008271
 8008160:	08008271 	.word	0x08008271
 8008164:	08008271 	.word	0x08008271
 8008168:	0800822f 	.word	0x0800822f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fa4a 	bl	800860c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0208 	orr.w	r2, r2, #8
 8008186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	699a      	ldr	r2, [r3, #24]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 0204 	bic.w	r2, r2, #4
 8008196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6999      	ldr	r1, [r3, #24]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	691a      	ldr	r2, [r3, #16]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	619a      	str	r2, [r3, #24]
      break;
 80081aa:	e064      	b.n	8008276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fa90 	bl	80086d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	699a      	ldr	r2, [r3, #24]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699a      	ldr	r2, [r3, #24]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6999      	ldr	r1, [r3, #24]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	021a      	lsls	r2, r3, #8
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	619a      	str	r2, [r3, #24]
      break;
 80081ec:	e043      	b.n	8008276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fadb 	bl	80087b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	69da      	ldr	r2, [r3, #28]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f042 0208 	orr.w	r2, r2, #8
 8008208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0204 	bic.w	r2, r2, #4
 8008218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69d9      	ldr	r1, [r3, #28]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	691a      	ldr	r2, [r3, #16]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	61da      	str	r2, [r3, #28]
      break;
 800822c:	e023      	b.n	8008276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	4618      	mov	r0, r3
 8008236:	f000 fb25 	bl	8008884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69da      	ldr	r2, [r3, #28]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	69da      	ldr	r2, [r3, #28]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69d9      	ldr	r1, [r3, #28]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	021a      	lsls	r2, r3, #8
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	61da      	str	r2, [r3, #28]
      break;
 800826e:	e002      	b.n	8008276 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	75fb      	strb	r3, [r7, #23]
      break;
 8008274:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_TIM_ConfigClockSource+0x1c>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e0b4      	b.n	800840e <HAL_TIM_ConfigClockSource+0x186>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082dc:	d03e      	beq.n	800835c <HAL_TIM_ConfigClockSource+0xd4>
 80082de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082e2:	f200 8087 	bhi.w	80083f4 <HAL_TIM_ConfigClockSource+0x16c>
 80082e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ea:	f000 8086 	beq.w	80083fa <HAL_TIM_ConfigClockSource+0x172>
 80082ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f2:	d87f      	bhi.n	80083f4 <HAL_TIM_ConfigClockSource+0x16c>
 80082f4:	2b70      	cmp	r3, #112	; 0x70
 80082f6:	d01a      	beq.n	800832e <HAL_TIM_ConfigClockSource+0xa6>
 80082f8:	2b70      	cmp	r3, #112	; 0x70
 80082fa:	d87b      	bhi.n	80083f4 <HAL_TIM_ConfigClockSource+0x16c>
 80082fc:	2b60      	cmp	r3, #96	; 0x60
 80082fe:	d050      	beq.n	80083a2 <HAL_TIM_ConfigClockSource+0x11a>
 8008300:	2b60      	cmp	r3, #96	; 0x60
 8008302:	d877      	bhi.n	80083f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008304:	2b50      	cmp	r3, #80	; 0x50
 8008306:	d03c      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0xfa>
 8008308:	2b50      	cmp	r3, #80	; 0x50
 800830a:	d873      	bhi.n	80083f4 <HAL_TIM_ConfigClockSource+0x16c>
 800830c:	2b40      	cmp	r3, #64	; 0x40
 800830e:	d058      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0x13a>
 8008310:	2b40      	cmp	r3, #64	; 0x40
 8008312:	d86f      	bhi.n	80083f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008314:	2b30      	cmp	r3, #48	; 0x30
 8008316:	d064      	beq.n	80083e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008318:	2b30      	cmp	r3, #48	; 0x30
 800831a:	d86b      	bhi.n	80083f4 <HAL_TIM_ConfigClockSource+0x16c>
 800831c:	2b20      	cmp	r3, #32
 800831e:	d060      	beq.n	80083e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008320:	2b20      	cmp	r3, #32
 8008322:	d867      	bhi.n	80083f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008324:	2b00      	cmp	r3, #0
 8008326:	d05c      	beq.n	80083e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008328:	2b10      	cmp	r3, #16
 800832a:	d05a      	beq.n	80083e2 <HAL_TIM_ConfigClockSource+0x15a>
 800832c:	e062      	b.n	80083f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6899      	ldr	r1, [r3, #8]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f000 fb6b 	bl	8008a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	609a      	str	r2, [r3, #8]
      break;
 800835a:	e04f      	b.n	80083fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	6899      	ldr	r1, [r3, #8]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	f000 fb54 	bl	8008a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689a      	ldr	r2, [r3, #8]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800837e:	609a      	str	r2, [r3, #8]
      break;
 8008380:	e03c      	b.n	80083fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	6859      	ldr	r1, [r3, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	461a      	mov	r2, r3
 8008390:	f000 fac8 	bl	8008924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2150      	movs	r1, #80	; 0x50
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fb21 	bl	80089e2 <TIM_ITRx_SetConfig>
      break;
 80083a0:	e02c      	b.n	80083fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6859      	ldr	r1, [r3, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f000 fae7 	bl	8008982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2160      	movs	r1, #96	; 0x60
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fb11 	bl	80089e2 <TIM_ITRx_SetConfig>
      break;
 80083c0:	e01c      	b.n	80083fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	6859      	ldr	r1, [r3, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	461a      	mov	r2, r3
 80083d0:	f000 faa8 	bl	8008924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2140      	movs	r1, #64	; 0x40
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fb01 	bl	80089e2 <TIM_ITRx_SetConfig>
      break;
 80083e0:	e00c      	b.n	80083fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4619      	mov	r1, r3
 80083ec:	4610      	mov	r0, r2
 80083ee:	f000 faf8 	bl	80089e2 <TIM_ITRx_SetConfig>
      break;
 80083f2:	e003      	b.n	80083fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
      break;
 80083f8:	e000      	b.n	80083fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008432:	bf00      	nop
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	429a      	cmp	r2, r3
 8008490:	d107      	bne.n	80084a2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084a0:	e02a      	b.n	80084f8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d107      	bne.n	80084bc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2202      	movs	r2, #2
 80084b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084ba:	e01d      	b.n	80084f8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d107      	bne.n	80084d6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2204      	movs	r2, #4
 80084ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084d4:	e010      	b.n	80084f8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d107      	bne.n	80084f0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2208      	movs	r2, #8
 80084e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084ee:	e003      	b.n	80084f8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff ffb4 	bl	8008466 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	771a      	strb	r2, [r3, #28]
}
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a34      	ldr	r2, [pc, #208]	; (80085f0 <TIM_Base_SetConfig+0xe4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00f      	beq.n	8008544 <TIM_Base_SetConfig+0x38>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800852a:	d00b      	beq.n	8008544 <TIM_Base_SetConfig+0x38>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a31      	ldr	r2, [pc, #196]	; (80085f4 <TIM_Base_SetConfig+0xe8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d007      	beq.n	8008544 <TIM_Base_SetConfig+0x38>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a30      	ldr	r2, [pc, #192]	; (80085f8 <TIM_Base_SetConfig+0xec>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d003      	beq.n	8008544 <TIM_Base_SetConfig+0x38>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a2f      	ldr	r2, [pc, #188]	; (80085fc <TIM_Base_SetConfig+0xf0>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d108      	bne.n	8008556 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a25      	ldr	r2, [pc, #148]	; (80085f0 <TIM_Base_SetConfig+0xe4>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d01b      	beq.n	8008596 <TIM_Base_SetConfig+0x8a>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008564:	d017      	beq.n	8008596 <TIM_Base_SetConfig+0x8a>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a22      	ldr	r2, [pc, #136]	; (80085f4 <TIM_Base_SetConfig+0xe8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <TIM_Base_SetConfig+0x8a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a21      	ldr	r2, [pc, #132]	; (80085f8 <TIM_Base_SetConfig+0xec>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00f      	beq.n	8008596 <TIM_Base_SetConfig+0x8a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a20      	ldr	r2, [pc, #128]	; (80085fc <TIM_Base_SetConfig+0xf0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00b      	beq.n	8008596 <TIM_Base_SetConfig+0x8a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a1f      	ldr	r2, [pc, #124]	; (8008600 <TIM_Base_SetConfig+0xf4>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <TIM_Base_SetConfig+0x8a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1e      	ldr	r2, [pc, #120]	; (8008604 <TIM_Base_SetConfig+0xf8>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_Base_SetConfig+0x8a>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a1d      	ldr	r2, [pc, #116]	; (8008608 <TIM_Base_SetConfig+0xfc>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d108      	bne.n	80085a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a08      	ldr	r2, [pc, #32]	; (80085f0 <TIM_Base_SetConfig+0xe4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d103      	bne.n	80085dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	691a      	ldr	r2, [r3, #16]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	615a      	str	r2, [r3, #20]
}
 80085e2:	bf00      	nop
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	40010000 	.word	0x40010000
 80085f4:	40000400 	.word	0x40000400
 80085f8:	40000800 	.word	0x40000800
 80085fc:	40000c00 	.word	0x40000c00
 8008600:	40014000 	.word	0x40014000
 8008604:	40014400 	.word	0x40014400
 8008608:	40014800 	.word	0x40014800

0800860c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f023 0201 	bic.w	r2, r3, #1
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0303 	bic.w	r3, r3, #3
 8008642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f023 0302 	bic.w	r3, r3, #2
 8008654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a1c      	ldr	r2, [pc, #112]	; (80086d4 <TIM_OC1_SetConfig+0xc8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d10c      	bne.n	8008682 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f023 0308 	bic.w	r3, r3, #8
 800866e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	4313      	orrs	r3, r2
 8008678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f023 0304 	bic.w	r3, r3, #4
 8008680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a13      	ldr	r2, [pc, #76]	; (80086d4 <TIM_OC1_SetConfig+0xc8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d111      	bne.n	80086ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	621a      	str	r2, [r3, #32]
}
 80086c8:	bf00      	nop
 80086ca:	371c      	adds	r7, #28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	40010000 	.word	0x40010000

080086d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	f023 0210 	bic.w	r2, r3, #16
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800870e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	021b      	lsls	r3, r3, #8
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	4313      	orrs	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f023 0320 	bic.w	r3, r3, #32
 8008722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	4313      	orrs	r3, r2
 800872e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a1e      	ldr	r2, [pc, #120]	; (80087ac <TIM_OC2_SetConfig+0xd4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d10d      	bne.n	8008754 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800873e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a15      	ldr	r2, [pc, #84]	; (80087ac <TIM_OC2_SetConfig+0xd4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d113      	bne.n	8008784 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800876a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	621a      	str	r2, [r3, #32]
}
 800879e:	bf00      	nop
 80087a0:	371c      	adds	r7, #28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	40010000 	.word	0x40010000

080087b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0303 	bic.w	r3, r3, #3
 80087e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a1d      	ldr	r2, [pc, #116]	; (8008880 <TIM_OC3_SetConfig+0xd0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d10d      	bne.n	800882a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	4313      	orrs	r3, r2
 8008820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a14      	ldr	r2, [pc, #80]	; (8008880 <TIM_OC3_SetConfig+0xd0>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d113      	bne.n	800885a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	4313      	orrs	r3, r2
 8008858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	621a      	str	r2, [r3, #32]
}
 8008874:	bf00      	nop
 8008876:	371c      	adds	r7, #28
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	40010000 	.word	0x40010000

08008884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	021b      	lsls	r3, r3, #8
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	031b      	lsls	r3, r3, #12
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4313      	orrs	r3, r2
 80088da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a10      	ldr	r2, [pc, #64]	; (8008920 <TIM_OC4_SetConfig+0x9c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d109      	bne.n	80088f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	019b      	lsls	r3, r3, #6
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	621a      	str	r2, [r3, #32]
}
 8008912:	bf00      	nop
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	40010000 	.word	0x40010000

08008924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	f023 0201 	bic.w	r2, r3, #1
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800894e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	011b      	lsls	r3, r3, #4
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	4313      	orrs	r3, r2
 8008958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f023 030a 	bic.w	r3, r3, #10
 8008960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4313      	orrs	r3, r2
 8008968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	621a      	str	r2, [r3, #32]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008982:	b480      	push	{r7}
 8008984:	b087      	sub	sp, #28
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	f023 0210 	bic.w	r2, r3, #16
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	031b      	lsls	r3, r3, #12
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	621a      	str	r2, [r3, #32]
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b085      	sub	sp, #20
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	f043 0307 	orr.w	r3, r3, #7
 8008a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	609a      	str	r2, [r3, #8]
}
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	021a      	lsls	r2, r3, #8
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	609a      	str	r2, [r3, #8]
}
 8008a4c:	bf00      	nop
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6a1a      	ldr	r2, [r3, #32]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	401a      	ands	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6a1a      	ldr	r2, [r3, #32]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f003 031f 	and.w	r3, r3, #31
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a90:	431a      	orrs	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	621a      	str	r2, [r3, #32]
}
 8008a96:	bf00      	nop
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
	...

08008aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e050      	b.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1c      	ldr	r2, [pc, #112]	; (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d018      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b08:	d013      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a18      	ldr	r2, [pc, #96]	; (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d00e      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a16      	ldr	r2, [pc, #88]	; (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d009      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a15      	ldr	r2, [pc, #84]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d004      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a13      	ldr	r2, [pc, #76]	; (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d10c      	bne.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	40010000 	.word	0x40010000
 8008b70:	40000400 	.word	0x40000400
 8008b74:	40000800 	.word	0x40000800
 8008b78:	40000c00 	.word	0x40000c00
 8008b7c:	40014000 	.word	0x40014000

08008b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ba8:	b084      	sub	sp, #16
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	f107 001c 	add.w	r0, r7, #28
 8008bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d122      	bne.n	8008c06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d105      	bne.n	8008bfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f001 fbee 	bl	800a3dc <USB_CoreReset>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73fb      	strb	r3, [r7, #15]
 8008c04:	e01a      	b.n	8008c3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 fbe2 	bl	800a3dc <USB_CoreReset>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8008c2e:	e005      	b.n	8008c3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d10b      	bne.n	8008c5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f043 0206 	orr.w	r2, r3, #6
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f043 0220 	orr.w	r2, r3, #32
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c66:	b004      	add	sp, #16
 8008c68:	4770      	bx	lr
	...

08008c6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	4613      	mov	r3, r2
 8008c78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d165      	bne.n	8008d4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4a41      	ldr	r2, [pc, #260]	; (8008d88 <USB_SetTurnaroundTime+0x11c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d906      	bls.n	8008c96 <USB_SetTurnaroundTime+0x2a>
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	4a40      	ldr	r2, [pc, #256]	; (8008d8c <USB_SetTurnaroundTime+0x120>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d202      	bcs.n	8008c96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c90:	230f      	movs	r3, #15
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	e062      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	4a3c      	ldr	r2, [pc, #240]	; (8008d8c <USB_SetTurnaroundTime+0x120>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d306      	bcc.n	8008cac <USB_SetTurnaroundTime+0x40>
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	4a3b      	ldr	r2, [pc, #236]	; (8008d90 <USB_SetTurnaroundTime+0x124>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d202      	bcs.n	8008cac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008ca6:	230e      	movs	r3, #14
 8008ca8:	617b      	str	r3, [r7, #20]
 8008caa:	e057      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	4a38      	ldr	r2, [pc, #224]	; (8008d90 <USB_SetTurnaroundTime+0x124>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d306      	bcc.n	8008cc2 <USB_SetTurnaroundTime+0x56>
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	4a37      	ldr	r2, [pc, #220]	; (8008d94 <USB_SetTurnaroundTime+0x128>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d202      	bcs.n	8008cc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008cbc:	230d      	movs	r3, #13
 8008cbe:	617b      	str	r3, [r7, #20]
 8008cc0:	e04c      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	4a33      	ldr	r2, [pc, #204]	; (8008d94 <USB_SetTurnaroundTime+0x128>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d306      	bcc.n	8008cd8 <USB_SetTurnaroundTime+0x6c>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4a32      	ldr	r2, [pc, #200]	; (8008d98 <USB_SetTurnaroundTime+0x12c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d802      	bhi.n	8008cd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	e041      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	4a2f      	ldr	r2, [pc, #188]	; (8008d98 <USB_SetTurnaroundTime+0x12c>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d906      	bls.n	8008cee <USB_SetTurnaroundTime+0x82>
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	4a2e      	ldr	r2, [pc, #184]	; (8008d9c <USB_SetTurnaroundTime+0x130>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d802      	bhi.n	8008cee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ce8:	230b      	movs	r3, #11
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	e036      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	4a2a      	ldr	r2, [pc, #168]	; (8008d9c <USB_SetTurnaroundTime+0x130>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d906      	bls.n	8008d04 <USB_SetTurnaroundTime+0x98>
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	4a29      	ldr	r2, [pc, #164]	; (8008da0 <USB_SetTurnaroundTime+0x134>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d802      	bhi.n	8008d04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008cfe:	230a      	movs	r3, #10
 8008d00:	617b      	str	r3, [r7, #20]
 8008d02:	e02b      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	4a26      	ldr	r2, [pc, #152]	; (8008da0 <USB_SetTurnaroundTime+0x134>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d906      	bls.n	8008d1a <USB_SetTurnaroundTime+0xae>
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4a25      	ldr	r2, [pc, #148]	; (8008da4 <USB_SetTurnaroundTime+0x138>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d202      	bcs.n	8008d1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008d14:	2309      	movs	r3, #9
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	e020      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	4a21      	ldr	r2, [pc, #132]	; (8008da4 <USB_SetTurnaroundTime+0x138>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d306      	bcc.n	8008d30 <USB_SetTurnaroundTime+0xc4>
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	4a20      	ldr	r2, [pc, #128]	; (8008da8 <USB_SetTurnaroundTime+0x13c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d802      	bhi.n	8008d30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008d2a:	2308      	movs	r3, #8
 8008d2c:	617b      	str	r3, [r7, #20]
 8008d2e:	e015      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4a1d      	ldr	r2, [pc, #116]	; (8008da8 <USB_SetTurnaroundTime+0x13c>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d906      	bls.n	8008d46 <USB_SetTurnaroundTime+0xda>
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	4a1c      	ldr	r2, [pc, #112]	; (8008dac <USB_SetTurnaroundTime+0x140>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d202      	bcs.n	8008d46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d40:	2307      	movs	r3, #7
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e00a      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d46:	2306      	movs	r3, #6
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	e007      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d102      	bne.n	8008d58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008d52:	2309      	movs	r3, #9
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	e001      	b.n	8008d5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d58:	2309      	movs	r3, #9
 8008d5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	029b      	lsls	r3, r3, #10
 8008d70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008d74:	431a      	orrs	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	371c      	adds	r7, #28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	00d8acbf 	.word	0x00d8acbf
 8008d8c:	00e4e1c0 	.word	0x00e4e1c0
 8008d90:	00f42400 	.word	0x00f42400
 8008d94:	01067380 	.word	0x01067380
 8008d98:	011a499f 	.word	0x011a499f
 8008d9c:	01312cff 	.word	0x01312cff
 8008da0:	014ca43f 	.word	0x014ca43f
 8008da4:	016e3600 	.word	0x016e3600
 8008da8:	01a6ab1f 	.word	0x01a6ab1f
 8008dac:	01e84800 	.word	0x01e84800

08008db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f043 0201 	orr.w	r2, r3, #1
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f023 0201 	bic.w	r2, r3, #1
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d115      	bne.n	8008e42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e22:	2001      	movs	r0, #1
 8008e24:	f7fa fc04 	bl	8003630 <HAL_Delay>
      ms++;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f001 fa45 	bl	800a2be <USB_GetMode>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d01e      	beq.n	8008e78 <USB_SetCurrentMode+0x84>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b31      	cmp	r3, #49	; 0x31
 8008e3e:	d9f0      	bls.n	8008e22 <USB_SetCurrentMode+0x2e>
 8008e40:	e01a      	b.n	8008e78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d115      	bne.n	8008e74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e54:	2001      	movs	r0, #1
 8008e56:	f7fa fbeb 	bl	8003630 <HAL_Delay>
      ms++;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 fa2c 	bl	800a2be <USB_GetMode>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <USB_SetCurrentMode+0x84>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b31      	cmp	r3, #49	; 0x31
 8008e70:	d9f0      	bls.n	8008e54 <USB_SetCurrentMode+0x60>
 8008e72:	e001      	b.n	8008e78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e005      	b.n	8008e84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b32      	cmp	r3, #50	; 0x32
 8008e7c:	d101      	bne.n	8008e82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e000      	b.n	8008e84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b086      	sub	sp, #24
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	e009      	b.n	8008ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	3340      	adds	r3, #64	; 0x40
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	613b      	str	r3, [r7, #16]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b0e      	cmp	r3, #14
 8008ec4:	d9f2      	bls.n	8008eac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d11c      	bne.n	8008f06 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eda:	f043 0302 	orr.w	r3, r3, #2
 8008ede:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	639a      	str	r2, [r3, #56]	; 0x38
 8008f04:	e00b      	b.n	8008f1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f24:	461a      	mov	r2, r3
 8008f26:	2300      	movs	r3, #0
 8008f28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f30:	4619      	mov	r1, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f38:	461a      	mov	r2, r3
 8008f3a:	680b      	ldr	r3, [r1, #0]
 8008f3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d10c      	bne.n	8008f5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f965 	bl	800921c <USB_SetDevSpeed>
 8008f52:	e008      	b.n	8008f66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f54:	2101      	movs	r1, #1
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f960 	bl	800921c <USB_SetDevSpeed>
 8008f5c:	e003      	b.n	8008f66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f5e:	2103      	movs	r1, #3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f95b 	bl	800921c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f66:	2110      	movs	r1, #16
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f8f3 	bl	8009154 <USB_FlushTxFifo>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f91f 	bl	80091bc <USB_FlushRxFifo>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f8e:	461a      	mov	r2, r3
 8008f90:	2300      	movs	r3, #0
 8008f92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	2300      	movs	r3, #0
 8008faa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fac:	2300      	movs	r3, #0
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	e043      	b.n	800903a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fc8:	d118      	bne.n	8008ffc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	e013      	b.n	800900e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	e008      	b.n	800900e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	461a      	mov	r2, r3
 800900a:	2300      	movs	r3, #0
 800900c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4413      	add	r3, r2
 8009016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901a:	461a      	mov	r2, r3
 800901c:	2300      	movs	r3, #0
 800901e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4413      	add	r3, r2
 8009028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902c:	461a      	mov	r2, r3
 800902e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009032:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	3301      	adds	r3, #1
 8009038:	613b      	str	r3, [r7, #16]
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	429a      	cmp	r2, r3
 8009040:	d3b7      	bcc.n	8008fb2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009042:	2300      	movs	r3, #0
 8009044:	613b      	str	r3, [r7, #16]
 8009046:	e043      	b.n	80090d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800905a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800905e:	d118      	bne.n	8009092 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10a      	bne.n	800907c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009072:	461a      	mov	r2, r3
 8009074:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	e013      	b.n	80090a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009088:	461a      	mov	r2, r3
 800908a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	e008      	b.n	80090a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909e:	461a      	mov	r2, r3
 80090a0:	2300      	movs	r3, #0
 80090a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b0:	461a      	mov	r2, r3
 80090b2:	2300      	movs	r3, #0
 80090b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c2:	461a      	mov	r2, r3
 80090c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	3301      	adds	r3, #1
 80090ce:	613b      	str	r3, [r7, #16]
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d3b7      	bcc.n	8009048 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80090f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d105      	bne.n	800910c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	f043 0210 	orr.w	r2, r3, #16
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	699a      	ldr	r2, [r3, #24]
 8009110:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <USB_DevInit+0x2c4>)
 8009112:	4313      	orrs	r3, r2
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d005      	beq.n	800912a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	f043 0208 	orr.w	r2, r3, #8
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800912a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d107      	bne.n	8009140 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009138:	f043 0304 	orr.w	r3, r3, #4
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009140:	7dfb      	ldrb	r3, [r7, #23]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800914c:	b004      	add	sp, #16
 800914e:	4770      	bx	lr
 8009150:	803c3800 	.word	0x803c3800

08009154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4a13      	ldr	r2, [pc, #76]	; (80091b8 <USB_FlushTxFifo+0x64>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d901      	bls.n	8009174 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e01b      	b.n	80091ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	daf2      	bge.n	8009162 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	019b      	lsls	r3, r3, #6
 8009184:	f043 0220 	orr.w	r2, r3, #32
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4a08      	ldr	r2, [pc, #32]	; (80091b8 <USB_FlushTxFifo+0x64>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d901      	bls.n	800919e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e006      	b.n	80091ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b20      	cmp	r3, #32
 80091a8:	d0f0      	beq.n	800918c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	00030d40 	.word	0x00030d40

080091bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4a11      	ldr	r2, [pc, #68]	; (8009218 <USB_FlushRxFifo+0x5c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d901      	bls.n	80091da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e018      	b.n	800920c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	daf2      	bge.n	80091c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2210      	movs	r2, #16
 80091ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3301      	adds	r3, #1
 80091f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4a08      	ldr	r2, [pc, #32]	; (8009218 <USB_FlushRxFifo+0x5c>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d901      	bls.n	80091fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e006      	b.n	800920c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f003 0310 	and.w	r3, r3, #16
 8009206:	2b10      	cmp	r3, #16
 8009208:	d0f0      	beq.n	80091ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	00030d40 	.word	0x00030d40

0800921c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	68f9      	ldr	r1, [r7, #12]
 8009238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800923c:	4313      	orrs	r3, r2
 800923e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800924e:	b480      	push	{r7}
 8009250:	b087      	sub	sp, #28
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f003 0306 	and.w	r3, r3, #6
 8009266:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800926e:	2300      	movs	r3, #0
 8009270:	75fb      	strb	r3, [r7, #23]
 8009272:	e00a      	b.n	800928a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d002      	beq.n	8009280 <USB_GetDevSpeed+0x32>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b06      	cmp	r3, #6
 800927e:	d102      	bne.n	8009286 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009280:	2302      	movs	r3, #2
 8009282:	75fb      	strb	r3, [r7, #23]
 8009284:	e001      	b.n	800928a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009286:	230f      	movs	r3, #15
 8009288:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800928a:	7dfb      	ldrb	r3, [r7, #23]
}
 800928c:	4618      	mov	r0, r3
 800928e:	371c      	adds	r7, #28
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	785b      	ldrb	r3, [r3, #1]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d13a      	bne.n	800932a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ba:	69da      	ldr	r2, [r3, #28]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	2101      	movs	r1, #1
 80092c6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	68f9      	ldr	r1, [r7, #12]
 80092ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d2:	4313      	orrs	r3, r2
 80092d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d155      	bne.n	8009398 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	791b      	ldrb	r3, [r3, #4]
 8009306:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009308:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	059b      	lsls	r3, r3, #22
 800930e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009310:	4313      	orrs	r3, r2
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	e036      	b.n	8009398 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009330:	69da      	ldr	r2, [r3, #28]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 030f 	and.w	r3, r3, #15
 800933a:	2101      	movs	r1, #1
 800933c:	fa01 f303 	lsl.w	r3, r1, r3
 8009340:	041b      	lsls	r3, r3, #16
 8009342:	68f9      	ldr	r1, [r7, #12]
 8009344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009348:	4313      	orrs	r3, r2
 800934a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d11a      	bne.n	8009398 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	791b      	ldrb	r3, [r3, #4]
 800937c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800937e:	430b      	orrs	r3, r1
 8009380:	4313      	orrs	r3, r2
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	0151      	lsls	r1, r2, #5
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	440a      	add	r2, r1
 800938a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800938e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009396:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	785b      	ldrb	r3, [r3, #1]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d161      	bne.n	8009488 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093da:	d11f      	bne.n	800941c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	0151      	lsls	r1, r2, #5
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	440a      	add	r2, r1
 80093f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	0151      	lsls	r1, r2, #5
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	440a      	add	r2, r1
 8009412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800941a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	f003 030f 	and.w	r3, r3, #15
 800942c:	2101      	movs	r1, #1
 800942e:	fa01 f303 	lsl.w	r3, r1, r3
 8009432:	b29b      	uxth	r3, r3
 8009434:	43db      	mvns	r3, r3
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800943c:	4013      	ands	r3, r2
 800943e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009446:	69da      	ldr	r2, [r3, #28]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 030f 	and.w	r3, r3, #15
 8009450:	2101      	movs	r1, #1
 8009452:	fa01 f303 	lsl.w	r3, r1, r3
 8009456:	b29b      	uxth	r3, r3
 8009458:	43db      	mvns	r3, r3
 800945a:	68f9      	ldr	r1, [r7, #12]
 800945c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009460:	4013      	ands	r3, r2
 8009462:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	0159      	lsls	r1, r3, #5
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	440b      	add	r3, r1
 800947a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947e:	4619      	mov	r1, r3
 8009480:	4b35      	ldr	r3, [pc, #212]	; (8009558 <USB_DeactivateEndpoint+0x1b0>)
 8009482:	4013      	ands	r3, r2
 8009484:	600b      	str	r3, [r1, #0]
 8009486:	e060      	b.n	800954a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800949a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800949e:	d11f      	bne.n	80094e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	0151      	lsls	r1, r2, #5
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	440a      	add	r2, r1
 80094b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	0151      	lsls	r1, r2, #5
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	440a      	add	r2, r1
 80094d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	f003 030f 	and.w	r3, r3, #15
 80094f0:	2101      	movs	r1, #1
 80094f2:	fa01 f303 	lsl.w	r3, r1, r3
 80094f6:	041b      	lsls	r3, r3, #16
 80094f8:	43db      	mvns	r3, r3
 80094fa:	68f9      	ldr	r1, [r7, #12]
 80094fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009500:	4013      	ands	r3, r2
 8009502:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950a:	69da      	ldr	r2, [r3, #28]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	2101      	movs	r1, #1
 8009516:	fa01 f303 	lsl.w	r3, r1, r3
 800951a:	041b      	lsls	r3, r3, #16
 800951c:	43db      	mvns	r3, r3
 800951e:	68f9      	ldr	r1, [r7, #12]
 8009520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009524:	4013      	ands	r3, r2
 8009526:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	0159      	lsls	r1, r3, #5
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	440b      	add	r3, r1
 800953e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009542:	4619      	mov	r1, r3
 8009544:	4b05      	ldr	r3, [pc, #20]	; (800955c <USB_DeactivateEndpoint+0x1b4>)
 8009546:	4013      	ands	r3, r2
 8009548:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	ec337800 	.word	0xec337800
 800955c:	eff37800 	.word	0xeff37800

08009560 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08a      	sub	sp, #40	; 0x28
 8009564:	af02      	add	r7, sp, #8
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	2b01      	cmp	r3, #1
 800957e:	f040 815c 	bne.w	800983a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d132      	bne.n	80095f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	0151      	lsls	r1, r2, #5
 800959c:	69fa      	ldr	r2, [r7, #28]
 800959e:	440a      	add	r2, r1
 80095a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	69fa      	ldr	r2, [r7, #28]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	0cdb      	lsrs	r3, r3, #19
 80095ea:	04db      	lsls	r3, r3, #19
 80095ec:	6113      	str	r3, [r2, #16]
 80095ee:	e074      	b.n	80096da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	0151      	lsls	r1, r2, #5
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	440a      	add	r2, r1
 8009606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800960a:	0cdb      	lsrs	r3, r3, #19
 800960c:	04db      	lsls	r3, r3, #19
 800960e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	0151      	lsls	r1, r2, #5
 8009622:	69fa      	ldr	r2, [r7, #28]
 8009624:	440a      	add	r2, r1
 8009626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800962a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800962e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009640:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6999      	ldr	r1, [r3, #24]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	440b      	add	r3, r1
 800964c:	1e59      	subs	r1, r3, #1
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	fbb1 f3f3 	udiv	r3, r1, r3
 8009656:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009658:	4b9d      	ldr	r3, [pc, #628]	; (80098d0 <USB_EPStartXfer+0x370>)
 800965a:	400b      	ands	r3, r1
 800965c:	69b9      	ldr	r1, [r7, #24]
 800965e:	0148      	lsls	r0, r1, #5
 8009660:	69f9      	ldr	r1, [r7, #28]
 8009662:	4401      	add	r1, r0
 8009664:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009668:	4313      	orrs	r3, r2
 800966a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009682:	69b9      	ldr	r1, [r7, #24]
 8009684:	0148      	lsls	r0, r1, #5
 8009686:	69f9      	ldr	r1, [r7, #28]
 8009688:	4401      	add	r1, r0
 800968a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800968e:	4313      	orrs	r3, r2
 8009690:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	791b      	ldrb	r3, [r3, #4]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d11f      	bne.n	80096da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	0151      	lsls	r1, r2, #5
 80096ac:	69fa      	ldr	r2, [r7, #28]
 80096ae:	440a      	add	r2, r1
 80096b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80096b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	69ba      	ldr	r2, [r7, #24]
 80096ca:	0151      	lsls	r1, r2, #5
 80096cc:	69fa      	ldr	r2, [r7, #28]
 80096ce:	440a      	add	r2, r1
 80096d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d14b      	bne.n	8009778 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d009      	beq.n	80096fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f4:	461a      	mov	r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	791b      	ldrb	r3, [r3, #4]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d128      	bne.n	8009756 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009710:	2b00      	cmp	r3, #0
 8009712:	d110      	bne.n	8009736 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	69fa      	ldr	r2, [r7, #28]
 8009728:	440a      	add	r2, r1
 800972a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800972e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	e00f      	b.n	8009756 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	0151      	lsls	r1, r2, #5
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	440a      	add	r2, r1
 800974c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009754:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	0151      	lsls	r1, r2, #5
 8009768:	69fa      	ldr	r2, [r7, #28]
 800976a:	440a      	add	r2, r1
 800976c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009770:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	e133      	b.n	80099e0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	69ba      	ldr	r2, [r7, #24]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009796:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	791b      	ldrb	r3, [r3, #4]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d015      	beq.n	80097cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 811b 	beq.w	80099e0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	f003 030f 	and.w	r3, r3, #15
 80097ba:	2101      	movs	r1, #1
 80097bc:	fa01 f303 	lsl.w	r3, r1, r3
 80097c0:	69f9      	ldr	r1, [r7, #28]
 80097c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097c6:	4313      	orrs	r3, r2
 80097c8:	634b      	str	r3, [r1, #52]	; 0x34
 80097ca:	e109      	b.n	80099e0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d110      	bne.n	80097fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	0151      	lsls	r1, r2, #5
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	440a      	add	r2, r1
 80097f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	e00f      	b.n	800981e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	0151      	lsls	r1, r2, #5
 8009810:	69fa      	ldr	r2, [r7, #28]
 8009812:	440a      	add	r2, r1
 8009814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800981c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6919      	ldr	r1, [r3, #16]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	781a      	ldrb	r2, [r3, #0]
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	b298      	uxth	r0, r3
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	4603      	mov	r3, r0
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fade 	bl	8009df4 <USB_WritePacket>
 8009838:	e0d2      	b.n	80099e0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	015a      	lsls	r2, r3, #5
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	4413      	add	r3, r2
 8009842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	0151      	lsls	r1, r2, #5
 800984c:	69fa      	ldr	r2, [r7, #28]
 800984e:	440a      	add	r2, r1
 8009850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009854:	0cdb      	lsrs	r3, r3, #19
 8009856:	04db      	lsls	r3, r3, #19
 8009858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	69ba      	ldr	r2, [r7, #24]
 800986a:	0151      	lsls	r1, r2, #5
 800986c:	69fa      	ldr	r2, [r7, #28]
 800986e:	440a      	add	r2, r1
 8009870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009874:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009878:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800987c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d126      	bne.n	80098d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009892:	691a      	ldr	r2, [r3, #16]
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800989c:	69b9      	ldr	r1, [r7, #24]
 800989e:	0148      	lsls	r0, r1, #5
 80098a0:	69f9      	ldr	r1, [r7, #28]
 80098a2:	4401      	add	r1, r0
 80098a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098a8:	4313      	orrs	r3, r2
 80098aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	0151      	lsls	r1, r2, #5
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	440a      	add	r2, r1
 80098c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098ca:	6113      	str	r3, [r2, #16]
 80098cc:	e03a      	b.n	8009944 <USB_EPStartXfer+0x3e4>
 80098ce:	bf00      	nop
 80098d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	699a      	ldr	r2, [r3, #24]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	4413      	add	r3, r2
 80098de:	1e5a      	subs	r2, r3, #1
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	8afa      	ldrh	r2, [r7, #22]
 80098f0:	fb03 f202 	mul.w	r2, r3, r2
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009904:	691a      	ldr	r2, [r3, #16]
 8009906:	8afb      	ldrh	r3, [r7, #22]
 8009908:	04d9      	lsls	r1, r3, #19
 800990a:	4b38      	ldr	r3, [pc, #224]	; (80099ec <USB_EPStartXfer+0x48c>)
 800990c:	400b      	ands	r3, r1
 800990e:	69b9      	ldr	r1, [r7, #24]
 8009910:	0148      	lsls	r0, r1, #5
 8009912:	69f9      	ldr	r1, [r7, #28]
 8009914:	4401      	add	r1, r0
 8009916:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800991a:	4313      	orrs	r3, r2
 800991c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992a:	691a      	ldr	r2, [r3, #16]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009934:	69b9      	ldr	r1, [r7, #24]
 8009936:	0148      	lsls	r0, r1, #5
 8009938:	69f9      	ldr	r1, [r7, #28]
 800993a:	4401      	add	r1, r0
 800993c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009940:	4313      	orrs	r3, r2
 8009942:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d10d      	bne.n	8009966 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d009      	beq.n	8009966 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	6919      	ldr	r1, [r3, #16]
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009962:	460a      	mov	r2, r1
 8009964:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	791b      	ldrb	r3, [r3, #4]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d128      	bne.n	80099c0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997a:	2b00      	cmp	r3, #0
 800997c:	d110      	bne.n	80099a0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	0151      	lsls	r1, r2, #5
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	440a      	add	r2, r1
 8009994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009998:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	e00f      	b.n	80099c0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	69ba      	ldr	r2, [r7, #24]
 80099b0:	0151      	lsls	r1, r2, #5
 80099b2:	69fa      	ldr	r2, [r7, #28]
 80099b4:	440a      	add	r2, r1
 80099b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69ba      	ldr	r2, [r7, #24]
 80099d0:	0151      	lsls	r1, r2, #5
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	440a      	add	r2, r1
 80099d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3720      	adds	r7, #32
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	1ff80000 	.word	0x1ff80000

080099f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	4613      	mov	r3, r2
 80099fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	785b      	ldrb	r3, [r3, #1]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	f040 80ce 	bne.w	8009bae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d132      	bne.n	8009a80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	0151      	lsls	r1, r2, #5
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	440a      	add	r2, r1
 8009a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	0151      	lsls	r1, r2, #5
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	440a      	add	r2, r1
 8009a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	0151      	lsls	r1, r2, #5
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	440a      	add	r2, r1
 8009a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a78:	0cdb      	lsrs	r3, r3, #19
 8009a7a:	04db      	lsls	r3, r3, #19
 8009a7c:	6113      	str	r3, [r2, #16]
 8009a7e:	e04e      	b.n	8009b1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	0151      	lsls	r1, r2, #5
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	440a      	add	r2, r1
 8009a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a9a:	0cdb      	lsrs	r3, r3, #19
 8009a9c:	04db      	lsls	r3, r3, #19
 8009a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	0151      	lsls	r1, r2, #5
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009abe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ac2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	699a      	ldr	r2, [r3, #24]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d903      	bls.n	8009ad8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	0151      	lsls	r1, r2, #5
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	440a      	add	r2, r1
 8009aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009af2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009af6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b0e:	6939      	ldr	r1, [r7, #16]
 8009b10:	0148      	lsls	r0, r1, #5
 8009b12:	6979      	ldr	r1, [r7, #20]
 8009b14:	4401      	add	r1, r0
 8009b16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d11e      	bne.n	8009b62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d009      	beq.n	8009b40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	015a      	lsls	r2, r3, #5
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b38:	461a      	mov	r2, r3
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	0151      	lsls	r1, r2, #5
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	440a      	add	r2, r1
 8009b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	e097      	b.n	8009c92 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	0151      	lsls	r1, r2, #5
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	440a      	add	r2, r1
 8009b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 8083 	beq.w	8009c92 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	f003 030f 	and.w	r3, r3, #15
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba2:	6979      	ldr	r1, [r7, #20]
 8009ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	634b      	str	r3, [r1, #52]	; 0x34
 8009bac:	e071      	b.n	8009c92 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	0151      	lsls	r1, r2, #5
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	440a      	add	r2, r1
 8009bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bc8:	0cdb      	lsrs	r3, r3, #19
 8009bca:	04db      	lsls	r3, r3, #19
 8009bcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	0151      	lsls	r1, r2, #5
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	440a      	add	r2, r1
 8009be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bf0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d003      	beq.n	8009c02 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	0151      	lsls	r1, r2, #5
 8009c1c:	697a      	ldr	r2, [r7, #20]
 8009c1e:	440a      	add	r2, r1
 8009c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c36:	691a      	ldr	r2, [r3, #16]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c40:	6939      	ldr	r1, [r7, #16]
 8009c42:	0148      	lsls	r0, r1, #5
 8009c44:	6979      	ldr	r1, [r7, #20]
 8009c46:	4401      	add	r1, r0
 8009c48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d10d      	bne.n	8009c72 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d009      	beq.n	8009c72 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	6919      	ldr	r1, [r3, #16]
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6e:	460a      	mov	r2, r1
 8009c70:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	0151      	lsls	r1, r2, #5
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	440a      	add	r2, r1
 8009c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	371c      	adds	r7, #28
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	785b      	ldrb	r3, [r3, #1]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d14a      	bne.n	8009d54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cd6:	f040 8086 	bne.w	8009de6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	7812      	ldrb	r2, [r2, #0]
 8009cee:	0151      	lsls	r1, r2, #5
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	440a      	add	r2, r1
 8009cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cfc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	7812      	ldrb	r2, [r2, #0]
 8009d12:	0151      	lsls	r1, r2, #5
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	440a      	add	r2, r1
 8009d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3301      	adds	r3, #1
 8009d26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d902      	bls.n	8009d38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	75fb      	strb	r3, [r7, #23]
          break;
 8009d36:	e056      	b.n	8009de6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d50:	d0e7      	beq.n	8009d22 <USB_EPStopXfer+0x82>
 8009d52:	e048      	b.n	8009de6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d6c:	d13b      	bne.n	8009de6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	015a      	lsls	r2, r3, #5
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	4413      	add	r3, r2
 8009d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	7812      	ldrb	r2, [r2, #0]
 8009d82:	0151      	lsls	r1, r2, #5
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	440a      	add	r2, r1
 8009d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	7812      	ldrb	r2, [r2, #0]
 8009da6:	0151      	lsls	r1, r2, #5
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	440a      	add	r2, r1
 8009dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009db4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3301      	adds	r3, #1
 8009dba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d902      	bls.n	8009dcc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8009dca:	e00c      	b.n	8009de6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009de4:	d0e7      	beq.n	8009db6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	371c      	adds	r7, #28
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b089      	sub	sp, #36	; 0x24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	4611      	mov	r1, r2
 8009e00:	461a      	mov	r2, r3
 8009e02:	460b      	mov	r3, r1
 8009e04:	71fb      	strb	r3, [r7, #7]
 8009e06:	4613      	mov	r3, r2
 8009e08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d123      	bne.n	8009e62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e1a:	88bb      	ldrh	r3, [r7, #4]
 8009e1c:	3303      	adds	r3, #3
 8009e1e:	089b      	lsrs	r3, r3, #2
 8009e20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e22:	2300      	movs	r3, #0
 8009e24:	61bb      	str	r3, [r7, #24]
 8009e26:	e018      	b.n	8009e5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	031a      	lsls	r2, r3, #12
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e34:	461a      	mov	r2, r3
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	3301      	adds	r3, #1
 8009e46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	3301      	adds	r3, #1
 8009e52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	3301      	adds	r3, #1
 8009e58:	61bb      	str	r3, [r7, #24]
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d3e2      	bcc.n	8009e28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3724      	adds	r7, #36	; 0x24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b08b      	sub	sp, #44	; 0x2c
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	089b      	lsrs	r3, r3, #2
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009e8e:	88fb      	ldrh	r3, [r7, #6]
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009e96:	2300      	movs	r3, #0
 8009e98:	623b      	str	r3, [r7, #32]
 8009e9a:	e014      	b.n	8009ec6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	3301      	adds	r3, #1
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	623b      	str	r3, [r7, #32]
 8009ec6:	6a3a      	ldr	r2, [r7, #32]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d3e6      	bcc.n	8009e9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009ece:	8bfb      	ldrh	r3, [r7, #30]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01e      	beq.n	8009f12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f107 0310 	add.w	r3, r7, #16
 8009ee4:	6812      	ldr	r2, [r2, #0]
 8009ee6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	701a      	strb	r2, [r3, #0]
      i++;
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	3301      	adds	r3, #1
 8009efe:	623b      	str	r3, [r7, #32]
      pDest++;
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	3301      	adds	r3, #1
 8009f04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009f06:	8bfb      	ldrh	r3, [r7, #30]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009f0c:	8bfb      	ldrh	r3, [r7, #30]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1ea      	bne.n	8009ee8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	372c      	adds	r7, #44	; 0x2c
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	785b      	ldrb	r3, [r3, #1]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d12c      	bne.n	8009f96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	db12      	blt.n	8009f74 <USB_EPSetStall+0x54>
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00f      	beq.n	8009f74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	0151      	lsls	r1, r2, #5
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	440a      	add	r2, r1
 8009f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	e02b      	b.n	8009fee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	db12      	blt.n	8009fce <USB_EPSetStall+0xae>
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00f      	beq.n	8009fce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009fcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	0151      	lsls	r1, r2, #5
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d128      	bne.n	800a06a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	0151      	lsls	r1, r2, #5
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	440a      	add	r2, r1
 800a02e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a036:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	791b      	ldrb	r3, [r3, #4]
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d003      	beq.n	800a048 <USB_EPClearStall+0x4c>
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	791b      	ldrb	r3, [r3, #4]
 800a044:	2b02      	cmp	r3, #2
 800a046:	d138      	bne.n	800a0ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	0151      	lsls	r1, r2, #5
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	440a      	add	r2, r1
 800a05e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	e027      	b.n	800a0ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4413      	add	r3, r2
 800a072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	0151      	lsls	r1, r2, #5
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	440a      	add	r2, r1
 800a080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a088:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	791b      	ldrb	r3, [r3, #4]
 800a08e:	2b03      	cmp	r3, #3
 800a090:	d003      	beq.n	800a09a <USB_EPClearStall+0x9e>
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	791b      	ldrb	r3, [r3, #4]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d10f      	bne.n	800a0ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	0151      	lsls	r1, r2, #5
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	440a      	add	r2, r1
 800a0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a0ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a0fc:	68f9      	ldr	r1, [r7, #12]
 800a0fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a102:	4313      	orrs	r3, r2
 800a104:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a12e:	f023 0303 	bic.w	r3, r3, #3
 800a132:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a142:	f023 0302 	bic.w	r3, r3, #2
 800a146:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a156:	b480      	push	{r7}
 800a158:	b085      	sub	sp, #20
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a170:	f023 0303 	bic.w	r3, r3, #3
 800a174:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a184:	f043 0302 	orr.w	r3, r3, #2
 800a188:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b085      	sub	sp, #20
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1da:	69db      	ldr	r3, [r3, #28]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	4013      	ands	r3, r2
 800a1e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	0c1b      	lsrs	r3, r3, #16
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b085      	sub	sp, #20
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	4013      	ands	r3, r2
 800a214:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	b29b      	uxth	r3, r3
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	460b      	mov	r3, r1
 800a230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a236:	78fb      	ldrb	r3, [r7, #3]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	4013      	ands	r3, r2
 800a252:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a254:	68bb      	ldr	r3, [r7, #8]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a262:	b480      	push	{r7}
 800a264:	b087      	sub	sp, #28
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a284:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a286:	78fb      	ldrb	r3, [r7, #3]
 800a288:	f003 030f 	and.w	r3, r3, #15
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	fa22 f303 	lsr.w	r3, r2, r3
 800a292:	01db      	lsls	r3, r3, #7
 800a294:	b2db      	uxtb	r3, r3
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	4313      	orrs	r3, r2
 800a29a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a29c:	78fb      	ldrb	r3, [r7, #3]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	f003 0301 	and.w	r3, r3, #1
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b085      	sub	sp, #20
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a2f8:	f023 0307 	bic.w	r3, r3, #7
 800a2fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a30c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a310:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	460b      	mov	r3, r1
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	333c      	adds	r3, #60	; 0x3c
 800a336:	3304      	adds	r3, #4
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	4a26      	ldr	r2, [pc, #152]	; (800a3d8 <USB_EP0_OutStart+0xb8>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d90a      	bls.n	800a35a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a354:	d101      	bne.n	800a35a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	e037      	b.n	800a3ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a360:	461a      	mov	r2, r3
 800a362:	2300      	movs	r3, #0
 800a364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a388:	f043 0318 	orr.w	r3, r3, #24
 800a38c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a3a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3a2:	7afb      	ldrb	r3, [r7, #11]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d10f      	bne.n	800a3c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a3c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	4f54300a 	.word	0x4f54300a

0800a3dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	4a13      	ldr	r2, [pc, #76]	; (800a440 <USB_CoreReset+0x64>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d901      	bls.n	800a3fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e01b      	b.n	800a432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	daf2      	bge.n	800a3e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	f043 0201 	orr.w	r2, r3, #1
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3301      	adds	r3, #1
 800a416:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	4a09      	ldr	r2, [pc, #36]	; (800a440 <USB_CoreReset+0x64>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d901      	bls.n	800a424 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e006      	b.n	800a432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d0f0      	beq.n	800a412 <USB_CoreReset+0x36>

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	00030d40 	.word	0x00030d40

0800a444 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a450:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a454:	f005 fe78 	bl	8010148 <USBD_static_malloc>
 800a458:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d109      	bne.n	800a474 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	32b0      	adds	r2, #176	; 0xb0
 800a46a:	2100      	movs	r1, #0
 800a46c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a470:	2302      	movs	r3, #2
 800a472:	e0d4      	b.n	800a61e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a474:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a478:	2100      	movs	r1, #0
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f005 ff04 	bl	8010288 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	32b0      	adds	r2, #176	; 0xb0
 800a48a:	68f9      	ldr	r1, [r7, #12]
 800a48c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	32b0      	adds	r2, #176	; 0xb0
 800a49a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7c1b      	ldrb	r3, [r3, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d138      	bne.n	800a51e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a4ac:	4b5e      	ldr	r3, [pc, #376]	; (800a628 <USBD_CDC_Init+0x1e4>)
 800a4ae:	7819      	ldrb	r1, [r3, #0]
 800a4b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f005 fd23 	bl	800ff02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a4bc:	4b5a      	ldr	r3, [pc, #360]	; (800a628 <USBD_CDC_Init+0x1e4>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	f003 020f 	and.w	r2, r3, #15
 800a4c4:	6879      	ldr	r1, [r7, #4]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	440b      	add	r3, r1
 800a4d0:	3324      	adds	r3, #36	; 0x24
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a4d6:	4b55      	ldr	r3, [pc, #340]	; (800a62c <USBD_CDC_Init+0x1e8>)
 800a4d8:	7819      	ldrb	r1, [r3, #0]
 800a4da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4de:	2202      	movs	r2, #2
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f005 fd0e 	bl	800ff02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a4e6:	4b51      	ldr	r3, [pc, #324]	; (800a62c <USBD_CDC_Init+0x1e8>)
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	f003 020f 	and.w	r2, r3, #15
 800a4ee:	6879      	ldr	r1, [r7, #4]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	440b      	add	r3, r1
 800a4fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a4fe:	2201      	movs	r2, #1
 800a500:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a502:	4b4b      	ldr	r3, [pc, #300]	; (800a630 <USBD_CDC_Init+0x1ec>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	f003 020f 	and.w	r2, r3, #15
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	4613      	mov	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	440b      	add	r3, r1
 800a516:	3326      	adds	r3, #38	; 0x26
 800a518:	2210      	movs	r2, #16
 800a51a:	801a      	strh	r2, [r3, #0]
 800a51c:	e035      	b.n	800a58a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a51e:	4b42      	ldr	r3, [pc, #264]	; (800a628 <USBD_CDC_Init+0x1e4>)
 800a520:	7819      	ldrb	r1, [r3, #0]
 800a522:	2340      	movs	r3, #64	; 0x40
 800a524:	2202      	movs	r2, #2
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f005 fceb 	bl	800ff02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a52c:	4b3e      	ldr	r3, [pc, #248]	; (800a628 <USBD_CDC_Init+0x1e4>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	f003 020f 	and.w	r2, r3, #15
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	4613      	mov	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	4413      	add	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	440b      	add	r3, r1
 800a540:	3324      	adds	r3, #36	; 0x24
 800a542:	2201      	movs	r2, #1
 800a544:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a546:	4b39      	ldr	r3, [pc, #228]	; (800a62c <USBD_CDC_Init+0x1e8>)
 800a548:	7819      	ldrb	r1, [r3, #0]
 800a54a:	2340      	movs	r3, #64	; 0x40
 800a54c:	2202      	movs	r2, #2
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f005 fcd7 	bl	800ff02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a554:	4b35      	ldr	r3, [pc, #212]	; (800a62c <USBD_CDC_Init+0x1e8>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	f003 020f 	and.w	r2, r3, #15
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	4613      	mov	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	440b      	add	r3, r1
 800a568:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a56c:	2201      	movs	r2, #1
 800a56e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a570:	4b2f      	ldr	r3, [pc, #188]	; (800a630 <USBD_CDC_Init+0x1ec>)
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	f003 020f 	and.w	r2, r3, #15
 800a578:	6879      	ldr	r1, [r7, #4]
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	440b      	add	r3, r1
 800a584:	3326      	adds	r3, #38	; 0x26
 800a586:	2210      	movs	r2, #16
 800a588:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a58a:	4b29      	ldr	r3, [pc, #164]	; (800a630 <USBD_CDC_Init+0x1ec>)
 800a58c:	7819      	ldrb	r1, [r3, #0]
 800a58e:	2308      	movs	r3, #8
 800a590:	2203      	movs	r2, #3
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f005 fcb5 	bl	800ff02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a598:	4b25      	ldr	r3, [pc, #148]	; (800a630 <USBD_CDC_Init+0x1ec>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f003 020f 	and.w	r2, r3, #15
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4413      	add	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	440b      	add	r3, r1
 800a5ac:	3324      	adds	r3, #36	; 0x24
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	33b0      	adds	r3, #176	; 0xb0
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d101      	bne.n	800a5ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e018      	b.n	800a61e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	7c1b      	ldrb	r3, [r3, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10a      	bne.n	800a60a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5f4:	4b0d      	ldr	r3, [pc, #52]	; (800a62c <USBD_CDC_Init+0x1e8>)
 800a5f6:	7819      	ldrb	r1, [r3, #0]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f005 fd6c 	bl	80100e0 <USBD_LL_PrepareReceive>
 800a608:	e008      	b.n	800a61c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a60a:	4b08      	ldr	r3, [pc, #32]	; (800a62c <USBD_CDC_Init+0x1e8>)
 800a60c:	7819      	ldrb	r1, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a614:	2340      	movs	r3, #64	; 0x40
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f005 fd62 	bl	80100e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	200000cb 	.word	0x200000cb
 800a62c:	200000cc 	.word	0x200000cc
 800a630:	200000cd 	.word	0x200000cd

0800a634 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a640:	4b3a      	ldr	r3, [pc, #232]	; (800a72c <USBD_CDC_DeInit+0xf8>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f005 fc81 	bl	800ff4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a64c:	4b37      	ldr	r3, [pc, #220]	; (800a72c <USBD_CDC_DeInit+0xf8>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	f003 020f 	and.w	r2, r3, #15
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	3324      	adds	r3, #36	; 0x24
 800a662:	2200      	movs	r2, #0
 800a664:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a666:	4b32      	ldr	r3, [pc, #200]	; (800a730 <USBD_CDC_DeInit+0xfc>)
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f005 fc6e 	bl	800ff4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a672:	4b2f      	ldr	r3, [pc, #188]	; (800a730 <USBD_CDC_DeInit+0xfc>)
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	f003 020f 	and.w	r2, r3, #15
 800a67a:	6879      	ldr	r1, [r7, #4]
 800a67c:	4613      	mov	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	440b      	add	r3, r1
 800a686:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a68a:	2200      	movs	r2, #0
 800a68c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a68e:	4b29      	ldr	r3, [pc, #164]	; (800a734 <USBD_CDC_DeInit+0x100>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f005 fc5a 	bl	800ff4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a69a:	4b26      	ldr	r3, [pc, #152]	; (800a734 <USBD_CDC_DeInit+0x100>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	f003 020f 	and.w	r2, r3, #15
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	440b      	add	r3, r1
 800a6ae:	3324      	adds	r3, #36	; 0x24
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a6b4:	4b1f      	ldr	r3, [pc, #124]	; (800a734 <USBD_CDC_DeInit+0x100>)
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	f003 020f 	and.w	r2, r3, #15
 800a6bc:	6879      	ldr	r1, [r7, #4]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	3326      	adds	r3, #38	; 0x26
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	32b0      	adds	r2, #176	; 0xb0
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d01f      	beq.n	800a720 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	33b0      	adds	r3, #176	; 0xb0
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	32b0      	adds	r2, #176	; 0xb0
 800a6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a702:	4618      	mov	r0, r3
 800a704:	f005 fd2e 	bl	8010164 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	32b0      	adds	r2, #176	; 0xb0
 800a712:	2100      	movs	r1, #0
 800a714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	200000cb 	.word	0x200000cb
 800a730:	200000cc 	.word	0x200000cc
 800a734:	200000cd 	.word	0x200000cd

0800a738 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	32b0      	adds	r2, #176	; 0xb0
 800a74c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a750:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a752:	2300      	movs	r3, #0
 800a754:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a756:	2300      	movs	r3, #0
 800a758:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a764:	2303      	movs	r3, #3
 800a766:	e0bf      	b.n	800a8e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a770:	2b00      	cmp	r3, #0
 800a772:	d050      	beq.n	800a816 <USBD_CDC_Setup+0xde>
 800a774:	2b20      	cmp	r3, #32
 800a776:	f040 80af 	bne.w	800a8d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	88db      	ldrh	r3, [r3, #6]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d03a      	beq.n	800a7f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	b25b      	sxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	da1b      	bge.n	800a7c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	33b0      	adds	r3, #176	; 0xb0
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a7a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	88d2      	ldrh	r2, [r2, #6]
 800a7a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	88db      	ldrh	r3, [r3, #6]
 800a7ae:	2b07      	cmp	r3, #7
 800a7b0:	bf28      	it	cs
 800a7b2:	2307      	movcs	r3, #7
 800a7b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	89fa      	ldrh	r2, [r7, #14]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f001 fd89 	bl	800c2d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a7c2:	e090      	b.n	800a8e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	785a      	ldrb	r2, [r3, #1]
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	88db      	ldrh	r3, [r3, #6]
 800a7d2:	2b3f      	cmp	r3, #63	; 0x3f
 800a7d4:	d803      	bhi.n	800a7de <USBD_CDC_Setup+0xa6>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	88db      	ldrh	r3, [r3, #6]
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	e000      	b.n	800a7e0 <USBD_CDC_Setup+0xa8>
 800a7de:	2240      	movs	r2, #64	; 0x40
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a7e6:	6939      	ldr	r1, [r7, #16]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 fd9b 	bl	800c32c <USBD_CtlPrepareRx>
      break;
 800a7f6:	e076      	b.n	800a8e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	33b0      	adds	r3, #176	; 0xb0
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	7850      	ldrb	r0, [r2, #1]
 800a80e:	2200      	movs	r2, #0
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	4798      	blx	r3
      break;
 800a814:	e067      	b.n	800a8e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	785b      	ldrb	r3, [r3, #1]
 800a81a:	2b0b      	cmp	r3, #11
 800a81c:	d851      	bhi.n	800a8c2 <USBD_CDC_Setup+0x18a>
 800a81e:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <USBD_CDC_Setup+0xec>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800a855 	.word	0x0800a855
 800a828:	0800a8d1 	.word	0x0800a8d1
 800a82c:	0800a8c3 	.word	0x0800a8c3
 800a830:	0800a8c3 	.word	0x0800a8c3
 800a834:	0800a8c3 	.word	0x0800a8c3
 800a838:	0800a8c3 	.word	0x0800a8c3
 800a83c:	0800a8c3 	.word	0x0800a8c3
 800a840:	0800a8c3 	.word	0x0800a8c3
 800a844:	0800a8c3 	.word	0x0800a8c3
 800a848:	0800a8c3 	.word	0x0800a8c3
 800a84c:	0800a87f 	.word	0x0800a87f
 800a850:	0800a8a9 	.word	0x0800a8a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d107      	bne.n	800a870 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a860:	f107 030a 	add.w	r3, r7, #10
 800a864:	2202      	movs	r2, #2
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f001 fd33 	bl	800c2d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a86e:	e032      	b.n	800a8d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a870:	6839      	ldr	r1, [r7, #0]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f001 fcbd 	bl	800c1f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a878:	2303      	movs	r3, #3
 800a87a:	75fb      	strb	r3, [r7, #23]
          break;
 800a87c:	e02b      	b.n	800a8d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b03      	cmp	r3, #3
 800a888:	d107      	bne.n	800a89a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a88a:	f107 030d 	add.w	r3, r7, #13
 800a88e:	2201      	movs	r2, #1
 800a890:	4619      	mov	r1, r3
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f001 fd1e 	bl	800c2d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a898:	e01d      	b.n	800a8d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 fca8 	bl	800c1f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a8a6:	e016      	b.n	800a8d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d00f      	beq.n	800a8d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f001 fc9b 	bl	800c1f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a8c0:	e008      	b.n	800a8d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f001 fc94 	bl	800c1f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a8ce:	e002      	b.n	800a8d6 <USBD_CDC_Setup+0x19e>
          break;
 800a8d0:	bf00      	nop
 800a8d2:	e008      	b.n	800a8e6 <USBD_CDC_Setup+0x1ae>
          break;
 800a8d4:	bf00      	nop
      }
      break;
 800a8d6:	e006      	b.n	800a8e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f001 fc89 	bl	800c1f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3718      	adds	r7, #24
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a902:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32b0      	adds	r2, #176	; 0xb0
 800a90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a916:	2303      	movs	r3, #3
 800a918:	e065      	b.n	800a9e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	32b0      	adds	r2, #176	; 0xb0
 800a924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a928:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a92a:	78fb      	ldrb	r3, [r7, #3]
 800a92c:	f003 020f 	and.w	r2, r3, #15
 800a930:	6879      	ldr	r1, [r7, #4]
 800a932:	4613      	mov	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	440b      	add	r3, r1
 800a93c:	3318      	adds	r3, #24
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d02f      	beq.n	800a9a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	f003 020f 	and.w	r2, r3, #15
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	440b      	add	r3, r1
 800a956:	3318      	adds	r3, #24
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	f003 010f 	and.w	r1, r3, #15
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	460b      	mov	r3, r1
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	440b      	add	r3, r1
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4403      	add	r3, r0
 800a96c:	3348      	adds	r3, #72	; 0x48
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	fbb2 f1f3 	udiv	r1, r2, r3
 800a974:	fb01 f303 	mul.w	r3, r1, r3
 800a978:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d112      	bne.n	800a9a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a97e:	78fb      	ldrb	r3, [r7, #3]
 800a980:	f003 020f 	and.w	r2, r3, #15
 800a984:	6879      	ldr	r1, [r7, #4]
 800a986:	4613      	mov	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	440b      	add	r3, r1
 800a990:	3318      	adds	r3, #24
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a996:	78f9      	ldrb	r1, [r7, #3]
 800a998:	2300      	movs	r3, #0
 800a99a:	2200      	movs	r2, #0
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f005 fb7e 	bl	801009e <USBD_LL_Transmit>
 800a9a2:	e01f      	b.n	800a9e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	33b0      	adds	r3, #176	; 0xb0
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d010      	beq.n	800a9e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	33b0      	adds	r3, #176	; 0xb0
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a9e0:	78fa      	ldrb	r2, [r7, #3]
 800a9e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	32b0      	adds	r2, #176	; 0xb0
 800aa04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	32b0      	adds	r2, #176	; 0xb0
 800aa14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d101      	bne.n	800aa20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e01a      	b.n	800aa56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f005 fb7c 	bl	8010122 <USBD_LL_GetRxDataSize>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	33b0      	adds	r3, #176	; 0xb0
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa50:	4611      	mov	r1, r2
 800aa52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b084      	sub	sp, #16
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	32b0      	adds	r2, #176	; 0xb0
 800aa70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e025      	b.n	800aacc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	33b0      	adds	r3, #176	; 0xb0
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d01a      	beq.n	800aaca <USBD_CDC_EP0_RxReady+0x6c>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aa9a:	2bff      	cmp	r3, #255	; 0xff
 800aa9c:	d015      	beq.n	800aaca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	33b0      	adds	r3, #176	; 0xb0
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800aab6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aabe:	b292      	uxth	r2, r2
 800aac0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	22ff      	movs	r2, #255	; 0xff
 800aac6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aadc:	2182      	movs	r1, #130	; 0x82
 800aade:	4818      	ldr	r0, [pc, #96]	; (800ab40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aae0:	f000 fd4f 	bl	800b582 <USBD_GetEpDesc>
 800aae4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aae6:	2101      	movs	r1, #1
 800aae8:	4815      	ldr	r0, [pc, #84]	; (800ab40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aaea:	f000 fd4a 	bl	800b582 <USBD_GetEpDesc>
 800aaee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aaf0:	2181      	movs	r1, #129	; 0x81
 800aaf2:	4813      	ldr	r0, [pc, #76]	; (800ab40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aaf4:	f000 fd45 	bl	800b582 <USBD_GetEpDesc>
 800aaf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2210      	movs	r2, #16
 800ab04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d006      	beq.n	800ab1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab14:	711a      	strb	r2, [r3, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d006      	beq.n	800ab2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab28:	711a      	strb	r2, [r3, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2243      	movs	r2, #67	; 0x43
 800ab32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab34:	4b02      	ldr	r3, [pc, #8]	; (800ab40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	20000088 	.word	0x20000088

0800ab44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab4c:	2182      	movs	r1, #130	; 0x82
 800ab4e:	4818      	ldr	r0, [pc, #96]	; (800abb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab50:	f000 fd17 	bl	800b582 <USBD_GetEpDesc>
 800ab54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab56:	2101      	movs	r1, #1
 800ab58:	4815      	ldr	r0, [pc, #84]	; (800abb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab5a:	f000 fd12 	bl	800b582 <USBD_GetEpDesc>
 800ab5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab60:	2181      	movs	r1, #129	; 0x81
 800ab62:	4813      	ldr	r0, [pc, #76]	; (800abb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab64:	f000 fd0d 	bl	800b582 <USBD_GetEpDesc>
 800ab68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2210      	movs	r2, #16
 800ab74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d006      	beq.n	800ab8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	711a      	strb	r2, [r3, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f042 0202 	orr.w	r2, r2, #2
 800ab88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d006      	beq.n	800ab9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	711a      	strb	r2, [r3, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f042 0202 	orr.w	r2, r2, #2
 800ab9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2243      	movs	r2, #67	; 0x43
 800aba2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aba4:	4b02      	ldr	r3, [pc, #8]	; (800abb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3718      	adds	r7, #24
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	20000088 	.word	0x20000088

0800abb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abbc:	2182      	movs	r1, #130	; 0x82
 800abbe:	4818      	ldr	r0, [pc, #96]	; (800ac20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abc0:	f000 fcdf 	bl	800b582 <USBD_GetEpDesc>
 800abc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abc6:	2101      	movs	r1, #1
 800abc8:	4815      	ldr	r0, [pc, #84]	; (800ac20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abca:	f000 fcda 	bl	800b582 <USBD_GetEpDesc>
 800abce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abd0:	2181      	movs	r1, #129	; 0x81
 800abd2:	4813      	ldr	r0, [pc, #76]	; (800ac20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abd4:	f000 fcd5 	bl	800b582 <USBD_GetEpDesc>
 800abd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2210      	movs	r2, #16
 800abe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d006      	beq.n	800abfa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	2200      	movs	r2, #0
 800abf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abf4:	711a      	strb	r2, [r3, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d006      	beq.n	800ac0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac08:	711a      	strb	r2, [r3, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2243      	movs	r2, #67	; 0x43
 800ac12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac14:	4b02      	ldr	r3, [pc, #8]	; (800ac20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000088 	.word	0x20000088

0800ac24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	220a      	movs	r2, #10
 800ac30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac32:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	20000044 	.word	0x20000044

0800ac44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e009      	b.n	800ac6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	33b0      	adds	r3, #176	; 0xb0
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	32b0      	adds	r2, #176	; 0xb0
 800ac8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac92:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e008      	b.n	800acb0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	371c      	adds	r7, #28
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	32b0      	adds	r2, #176	; 0xb0
 800acd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800acdc:	2303      	movs	r3, #3
 800acde:	e004      	b.n	800acea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
	...

0800acf8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	32b0      	adds	r2, #176	; 0xb0
 800ad0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ad10:	2301      	movs	r3, #1
 800ad12:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	32b0      	adds	r2, #176	; 0xb0
 800ad1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e025      	b.n	800ad76 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d11f      	bne.n	800ad74 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ad3c:	4b10      	ldr	r3, [pc, #64]	; (800ad80 <USBD_CDC_TransmitPacket+0x88>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	f003 020f 	and.w	r2, r3, #15
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4403      	add	r3, r0
 800ad56:	3318      	adds	r3, #24
 800ad58:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ad5a:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <USBD_CDC_TransmitPacket+0x88>)
 800ad5c:	7819      	ldrb	r1, [r3, #0]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f005 f997 	bl	801009e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	200000cb 	.word	0x200000cb

0800ad84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	32b0      	adds	r2, #176	; 0xb0
 800ad96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	32b0      	adds	r2, #176	; 0xb0
 800ada6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800adae:	2303      	movs	r3, #3
 800adb0:	e018      	b.n	800ade4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	7c1b      	ldrb	r3, [r3, #16]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10a      	bne.n	800add0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800adba:	4b0c      	ldr	r3, [pc, #48]	; (800adec <USBD_CDC_ReceivePacket+0x68>)
 800adbc:	7819      	ldrb	r1, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f005 f989 	bl	80100e0 <USBD_LL_PrepareReceive>
 800adce:	e008      	b.n	800ade2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <USBD_CDC_ReceivePacket+0x68>)
 800add2:	7819      	ldrb	r1, [r3, #0]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adda:	2340      	movs	r3, #64	; 0x40
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f005 f97f 	bl	80100e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	200000cc 	.word	0x200000cc

0800adf0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	4613      	mov	r3, r2
 800adfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d101      	bne.n	800ae08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e01f      	b.n	800ae48 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	79fa      	ldrb	r2, [r7, #7]
 800ae3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f004 fff9 	bl	800fe34 <USBD_LL_Init>
 800ae42:	4603      	mov	r3, r0
 800ae44:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3718      	adds	r7, #24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e025      	b.n	800aeb4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	32ae      	adds	r2, #174	; 0xae
 800ae7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00f      	beq.n	800aea4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	32ae      	adds	r2, #174	; 0xae
 800ae8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	f107 020e 	add.w	r2, r7, #14
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aeaa:	1c5a      	adds	r2, r3, #1
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f005 f801 	bl	800fecc <USBD_LL_Start>
 800aeca:	4603      	mov	r3, r0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aedc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aede:	4618      	mov	r0, r3
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	460b      	mov	r3, r1
 800aef4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af00:	2b00      	cmp	r3, #0
 800af02:	d009      	beq.n	800af18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	78fa      	ldrb	r2, [r7, #3]
 800af0e:	4611      	mov	r1, r2
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	4798      	blx	r3
 800af14:	4603      	mov	r3, r0
 800af16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af18:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	78fa      	ldrb	r2, [r7, #3]
 800af3c:	4611      	mov	r1, r2
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	4798      	blx	r3
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
 800af5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f001 f908 	bl	800c17e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800af7c:	461a      	mov	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af8a:	f003 031f 	and.w	r3, r3, #31
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d01a      	beq.n	800afc8 <USBD_LL_SetupStage+0x72>
 800af92:	2b02      	cmp	r3, #2
 800af94:	d822      	bhi.n	800afdc <USBD_LL_SetupStage+0x86>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <USBD_LL_SetupStage+0x4a>
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d00a      	beq.n	800afb4 <USBD_LL_SetupStage+0x5e>
 800af9e:	e01d      	b.n	800afdc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fb5f 	bl	800b66c <USBD_StdDevReq>
 800afae:	4603      	mov	r3, r0
 800afb0:	73fb      	strb	r3, [r7, #15]
      break;
 800afb2:	e020      	b.n	800aff6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fbc7 	bl	800b750 <USBD_StdItfReq>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]
      break;
 800afc6:	e016      	b.n	800aff6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fc29 	bl	800b828 <USBD_StdEPReq>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73fb      	strb	r3, [r7, #15]
      break;
 800afda:	e00c      	b.n	800aff6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afe2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	4619      	mov	r1, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f004 ffce 	bl	800ff8c <USBD_LL_StallEP>
 800aff0:	4603      	mov	r3, r0
 800aff2:	73fb      	strb	r3, [r7, #15]
      break;
 800aff4:	bf00      	nop
  }

  return ret;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	460b      	mov	r3, r1
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b012:	7afb      	ldrb	r3, [r7, #11]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d16e      	bne.n	800b0f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b01e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b026:	2b03      	cmp	r3, #3
 800b028:	f040 8098 	bne.w	800b15c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	689a      	ldr	r2, [r3, #8]
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	429a      	cmp	r2, r3
 800b036:	d913      	bls.n	800b060 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	689a      	ldr	r2, [r3, #8]
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	1ad2      	subs	r2, r2, r3
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	4293      	cmp	r3, r2
 800b050:	bf28      	it	cs
 800b052:	4613      	movcs	r3, r2
 800b054:	461a      	mov	r2, r3
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f001 f984 	bl	800c366 <USBD_CtlContinueRx>
 800b05e:	e07d      	b.n	800b15c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b066:	f003 031f 	and.w	r3, r3, #31
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d014      	beq.n	800b098 <USBD_LL_DataOutStage+0x98>
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d81d      	bhi.n	800b0ae <USBD_LL_DataOutStage+0xae>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d002      	beq.n	800b07c <USBD_LL_DataOutStage+0x7c>
 800b076:	2b01      	cmp	r3, #1
 800b078:	d003      	beq.n	800b082 <USBD_LL_DataOutStage+0x82>
 800b07a:	e018      	b.n	800b0ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b07c:	2300      	movs	r3, #0
 800b07e:	75bb      	strb	r3, [r7, #22]
            break;
 800b080:	e018      	b.n	800b0b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	4619      	mov	r1, r3
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 fa5e 	bl	800b54e <USBD_CoreFindIF>
 800b092:	4603      	mov	r3, r0
 800b094:	75bb      	strb	r3, [r7, #22]
            break;
 800b096:	e00d      	b.n	800b0b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 fa60 	bl	800b568 <USBD_CoreFindEP>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	75bb      	strb	r3, [r7, #22]
            break;
 800b0ac:	e002      	b.n	800b0b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	75bb      	strb	r3, [r7, #22]
            break;
 800b0b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b0b4:	7dbb      	ldrb	r3, [r7, #22]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d119      	bne.n	800b0ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	d113      	bne.n	800b0ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b0c6:	7dba      	ldrb	r2, [r7, #22]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	32ae      	adds	r2, #174	; 0xae
 800b0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00b      	beq.n	800b0ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b0d6:	7dba      	ldrb	r2, [r7, #22]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b0de:	7dba      	ldrb	r2, [r7, #22]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	32ae      	adds	r2, #174	; 0xae
 800b0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f001 f94a 	bl	800c388 <USBD_CtlSendStatus>
 800b0f4:	e032      	b.n	800b15c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b0f6:	7afb      	ldrb	r3, [r7, #11]
 800b0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	4619      	mov	r1, r3
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f000 fa31 	bl	800b568 <USBD_CoreFindEP>
 800b106:	4603      	mov	r3, r0
 800b108:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b10a:	7dbb      	ldrb	r3, [r7, #22]
 800b10c:	2bff      	cmp	r3, #255	; 0xff
 800b10e:	d025      	beq.n	800b15c <USBD_LL_DataOutStage+0x15c>
 800b110:	7dbb      	ldrb	r3, [r7, #22]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d122      	bne.n	800b15c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d117      	bne.n	800b152 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b122:	7dba      	ldrb	r2, [r7, #22]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	32ae      	adds	r2, #174	; 0xae
 800b128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00f      	beq.n	800b152 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b132:	7dba      	ldrb	r2, [r7, #22]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b13a:	7dba      	ldrb	r2, [r7, #22]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	32ae      	adds	r2, #174	; 0xae
 800b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	7afa      	ldrb	r2, [r7, #11]
 800b148:	4611      	mov	r1, r2
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	4798      	blx	r3
 800b14e:	4603      	mov	r3, r0
 800b150:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b152:	7dfb      	ldrb	r3, [r7, #23]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b158:	7dfb      	ldrb	r3, [r7, #23]
 800b15a:	e000      	b.n	800b15e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b086      	sub	sp, #24
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	460b      	mov	r3, r1
 800b170:	607a      	str	r2, [r7, #4]
 800b172:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b174:	7afb      	ldrb	r3, [r7, #11]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d16f      	bne.n	800b25a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	3314      	adds	r3, #20
 800b17e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b186:	2b02      	cmp	r3, #2
 800b188:	d15a      	bne.n	800b240 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	689a      	ldr	r2, [r3, #8]
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	429a      	cmp	r2, r3
 800b194:	d914      	bls.n	800b1c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	689a      	ldr	r2, [r3, #8]
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	1ad2      	subs	r2, r2, r3
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	6879      	ldr	r1, [r7, #4]
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f001 f8ac 	bl	800c30a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f004 ff91 	bl	80100e0 <USBD_LL_PrepareReceive>
 800b1be:	e03f      	b.n	800b240 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	68da      	ldr	r2, [r3, #12]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d11c      	bne.n	800b206 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	685a      	ldr	r2, [r3, #4]
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d316      	bcc.n	800b206 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	685a      	ldr	r2, [r3, #4]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d20f      	bcs.n	800b206 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f001 f88d 	bl	800c30a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f004 ff6e 	bl	80100e0 <USBD_LL_PrepareReceive>
 800b204:	e01c      	b.n	800b240 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d10f      	bne.n	800b232 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d009      	beq.n	800b232 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b232:	2180      	movs	r1, #128	; 0x80
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f004 fea9 	bl	800ff8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f001 f8b7 	bl	800c3ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d03a      	beq.n	800b2c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7ff fe42 	bl	800aed4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b258:	e032      	b.n	800b2c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b260:	b2db      	uxtb	r3, r3
 800b262:	4619      	mov	r1, r3
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 f97f 	bl	800b568 <USBD_CoreFindEP>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	2bff      	cmp	r3, #255	; 0xff
 800b272:	d025      	beq.n	800b2c0 <USBD_LL_DataInStage+0x15a>
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d122      	bne.n	800b2c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b03      	cmp	r3, #3
 800b284:	d11c      	bne.n	800b2c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b286:	7dfa      	ldrb	r2, [r7, #23]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	32ae      	adds	r2, #174	; 0xae
 800b28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d014      	beq.n	800b2c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b296:	7dfa      	ldrb	r2, [r7, #23]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b29e:	7dfa      	ldrb	r2, [r7, #23]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	32ae      	adds	r2, #174	; 0xae
 800b2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	7afa      	ldrb	r2, [r7, #11]
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	4798      	blx	r3
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b2b6:	7dbb      	ldrb	r3, [r7, #22]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d001      	beq.n	800b2c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b2bc:	7dbb      	ldrb	r3, [r7, #22]
 800b2be:	e000      	b.n	800b2c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b084      	sub	sp, #16
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b302:	2b00      	cmp	r3, #0
 800b304:	d014      	beq.n	800b330 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00e      	beq.n	800b330 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	6852      	ldr	r2, [r2, #4]
 800b31e:	b2d2      	uxtb	r2, r2
 800b320:	4611      	mov	r1, r2
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	4798      	blx	r3
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b32c:	2303      	movs	r3, #3
 800b32e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b330:	2340      	movs	r3, #64	; 0x40
 800b332:	2200      	movs	r2, #0
 800b334:	2100      	movs	r1, #0
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f004 fde3 	bl	800ff02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2240      	movs	r2, #64	; 0x40
 800b348:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b34c:	2340      	movs	r3, #64	; 0x40
 800b34e:	2200      	movs	r2, #0
 800b350:	2180      	movs	r1, #128	; 0x80
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f004 fdd5 	bl	800ff02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2240      	movs	r2, #64	; 0x40
 800b362:	621a      	str	r2, [r3, #32]

  return ret;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b36e:	b480      	push	{r7}
 800b370:	b083      	sub	sp, #12
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	460b      	mov	r3, r1
 800b378:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	78fa      	ldrb	r2, [r7, #3]
 800b37e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2204      	movs	r2, #4
 800b3a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b04      	cmp	r3, #4
 800b3cc:	d106      	bne.n	800b3dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b03      	cmp	r3, #3
 800b3fc:	d110      	bne.n	800b420 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b41a:	69db      	ldr	r3, [r3, #28]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b082      	sub	sp, #8
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	32ae      	adds	r2, #174	; 0xae
 800b440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b448:	2303      	movs	r3, #3
 800b44a:	e01c      	b.n	800b486 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b03      	cmp	r3, #3
 800b456:	d115      	bne.n	800b484 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	32ae      	adds	r2, #174	; 0xae
 800b462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b466:	6a1b      	ldr	r3, [r3, #32]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00b      	beq.n	800b484 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	32ae      	adds	r2, #174	; 0xae
 800b476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b47a:	6a1b      	ldr	r3, [r3, #32]
 800b47c:	78fa      	ldrb	r2, [r7, #3]
 800b47e:	4611      	mov	r1, r2
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	460b      	mov	r3, r1
 800b498:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	32ae      	adds	r2, #174	; 0xae
 800b4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d101      	bne.n	800b4b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e01c      	b.n	800b4ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d115      	bne.n	800b4e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	32ae      	adds	r2, #174	; 0xae
 800b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00b      	beq.n	800b4e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	32ae      	adds	r2, #174	; 0xae
 800b4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	78fa      	ldrb	r2, [r7, #3]
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00e      	beq.n	800b544 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	6852      	ldr	r2, [r2, #4]
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	4611      	mov	r1, r2
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	4798      	blx	r3
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b540:	2303      	movs	r3, #3
 800b542:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b544:	7bfb      	ldrb	r3, [r7, #15]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	460b      	mov	r3, r1
 800b558:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b55a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b574:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b576:	4618      	mov	r0, r3
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b086      	sub	sp, #24
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
 800b58a:	460b      	mov	r3, r1
 800b58c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b596:	2300      	movs	r3, #0
 800b598:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	885b      	ldrh	r3, [r3, #2]
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d920      	bls.n	800b5ec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b5b2:	e013      	b.n	800b5dc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b5b4:	f107 030a 	add.w	r3, r7, #10
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6978      	ldr	r0, [r7, #20]
 800b5bc:	f000 f81b 	bl	800b5f6 <USBD_GetNextDesc>
 800b5c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	785b      	ldrb	r3, [r3, #1]
 800b5c6:	2b05      	cmp	r3, #5
 800b5c8:	d108      	bne.n	800b5dc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	789b      	ldrb	r3, [r3, #2]
 800b5d2:	78fa      	ldrb	r2, [r7, #3]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d008      	beq.n	800b5ea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	885b      	ldrh	r3, [r3, #2]
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	897b      	ldrh	r3, [r7, #10]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d8e5      	bhi.n	800b5b4 <USBD_GetEpDesc+0x32>
 800b5e8:	e000      	b.n	800b5ec <USBD_GetEpDesc+0x6a>
          break;
 800b5ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b5ec:	693b      	ldr	r3, [r7, #16]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b085      	sub	sp, #20
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	881a      	ldrh	r2, [r3, #0]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	4413      	add	r3, r2
 800b610:	b29a      	uxth	r2, r3
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4413      	add	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b622:	68fb      	ldr	r3, [r7, #12]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	3301      	adds	r3, #1
 800b646:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b64e:	8a3b      	ldrh	r3, [r7, #16]
 800b650:	021b      	lsls	r3, r3, #8
 800b652:	b21a      	sxth	r2, r3
 800b654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b658:	4313      	orrs	r3, r2
 800b65a:	b21b      	sxth	r3, r3
 800b65c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b65e:	89fb      	ldrh	r3, [r7, #14]
}
 800b660:	4618      	mov	r0, r3
 800b662:	371c      	adds	r7, #28
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b682:	2b40      	cmp	r3, #64	; 0x40
 800b684:	d005      	beq.n	800b692 <USBD_StdDevReq+0x26>
 800b686:	2b40      	cmp	r3, #64	; 0x40
 800b688:	d857      	bhi.n	800b73a <USBD_StdDevReq+0xce>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00f      	beq.n	800b6ae <USBD_StdDevReq+0x42>
 800b68e:	2b20      	cmp	r3, #32
 800b690:	d153      	bne.n	800b73a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	32ae      	adds	r2, #174	; 0xae
 800b69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	4798      	blx	r3
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ac:	e04a      	b.n	800b744 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	785b      	ldrb	r3, [r3, #1]
 800b6b2:	2b09      	cmp	r3, #9
 800b6b4:	d83b      	bhi.n	800b72e <USBD_StdDevReq+0xc2>
 800b6b6:	a201      	add	r2, pc, #4	; (adr r2, 800b6bc <USBD_StdDevReq+0x50>)
 800b6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6bc:	0800b711 	.word	0x0800b711
 800b6c0:	0800b725 	.word	0x0800b725
 800b6c4:	0800b72f 	.word	0x0800b72f
 800b6c8:	0800b71b 	.word	0x0800b71b
 800b6cc:	0800b72f 	.word	0x0800b72f
 800b6d0:	0800b6ef 	.word	0x0800b6ef
 800b6d4:	0800b6e5 	.word	0x0800b6e5
 800b6d8:	0800b72f 	.word	0x0800b72f
 800b6dc:	0800b707 	.word	0x0800b707
 800b6e0:	0800b6f9 	.word	0x0800b6f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fa3c 	bl	800bb64 <USBD_GetDescriptor>
          break;
 800b6ec:	e024      	b.n	800b738 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fba1 	bl	800be38 <USBD_SetAddress>
          break;
 800b6f6:	e01f      	b.n	800b738 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fbe0 	bl	800bec0 <USBD_SetConfig>
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]
          break;
 800b704:	e018      	b.n	800b738 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fc83 	bl	800c014 <USBD_GetConfig>
          break;
 800b70e:	e013      	b.n	800b738 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fcb4 	bl	800c080 <USBD_GetStatus>
          break;
 800b718:	e00e      	b.n	800b738 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fce3 	bl	800c0e8 <USBD_SetFeature>
          break;
 800b722:	e009      	b.n	800b738 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b724:	6839      	ldr	r1, [r7, #0]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fd07 	bl	800c13a <USBD_ClrFeature>
          break;
 800b72c:	e004      	b.n	800b738 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fd5e 	bl	800c1f2 <USBD_CtlError>
          break;
 800b736:	bf00      	nop
      }
      break;
 800b738:	e004      	b.n	800b744 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fd58 	bl	800c1f2 <USBD_CtlError>
      break;
 800b742:	bf00      	nop
  }

  return ret;
 800b744:	7bfb      	ldrb	r3, [r7, #15]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop

0800b750 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b75a:	2300      	movs	r3, #0
 800b75c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b766:	2b40      	cmp	r3, #64	; 0x40
 800b768:	d005      	beq.n	800b776 <USBD_StdItfReq+0x26>
 800b76a:	2b40      	cmp	r3, #64	; 0x40
 800b76c:	d852      	bhi.n	800b814 <USBD_StdItfReq+0xc4>
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <USBD_StdItfReq+0x26>
 800b772:	2b20      	cmp	r3, #32
 800b774:	d14e      	bne.n	800b814 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	3b01      	subs	r3, #1
 800b780:	2b02      	cmp	r3, #2
 800b782:	d840      	bhi.n	800b806 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	889b      	ldrh	r3, [r3, #4]
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d836      	bhi.n	800b7fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	889b      	ldrh	r3, [r3, #4]
 800b792:	b2db      	uxtb	r3, r3
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7ff fed9 	bl	800b54e <USBD_CoreFindIF>
 800b79c:	4603      	mov	r3, r0
 800b79e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7a0:	7bbb      	ldrb	r3, [r7, #14]
 800b7a2:	2bff      	cmp	r3, #255	; 0xff
 800b7a4:	d01d      	beq.n	800b7e2 <USBD_StdItfReq+0x92>
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d11a      	bne.n	800b7e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b7ac:	7bba      	ldrb	r2, [r7, #14]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	32ae      	adds	r2, #174	; 0xae
 800b7b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00f      	beq.n	800b7dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b7bc:	7bba      	ldrb	r2, [r7, #14]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b7c4:	7bba      	ldrb	r2, [r7, #14]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	32ae      	adds	r2, #174	; 0xae
 800b7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	4798      	blx	r3
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7da:	e004      	b.n	800b7e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7e0:	e001      	b.n	800b7e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	88db      	ldrh	r3, [r3, #6]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d110      	bne.n	800b810 <USBD_StdItfReq+0xc0>
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10d      	bne.n	800b810 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fdc7 	bl	800c388 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7fa:	e009      	b.n	800b810 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fcf7 	bl	800c1f2 <USBD_CtlError>
          break;
 800b804:	e004      	b.n	800b810 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fcf2 	bl	800c1f2 <USBD_CtlError>
          break;
 800b80e:	e000      	b.n	800b812 <USBD_StdItfReq+0xc2>
          break;
 800b810:	bf00      	nop
      }
      break;
 800b812:	e004      	b.n	800b81e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fceb 	bl	800c1f2 <USBD_CtlError>
      break;
 800b81c:	bf00      	nop
  }

  return ret;
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	889b      	ldrh	r3, [r3, #4]
 800b83a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b844:	2b40      	cmp	r3, #64	; 0x40
 800b846:	d007      	beq.n	800b858 <USBD_StdEPReq+0x30>
 800b848:	2b40      	cmp	r3, #64	; 0x40
 800b84a:	f200 817f 	bhi.w	800bb4c <USBD_StdEPReq+0x324>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d02a      	beq.n	800b8a8 <USBD_StdEPReq+0x80>
 800b852:	2b20      	cmp	r3, #32
 800b854:	f040 817a 	bne.w	800bb4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff fe83 	bl	800b568 <USBD_CoreFindEP>
 800b862:	4603      	mov	r3, r0
 800b864:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b866:	7b7b      	ldrb	r3, [r7, #13]
 800b868:	2bff      	cmp	r3, #255	; 0xff
 800b86a:	f000 8174 	beq.w	800bb56 <USBD_StdEPReq+0x32e>
 800b86e:	7b7b      	ldrb	r3, [r7, #13]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f040 8170 	bne.w	800bb56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b876:	7b7a      	ldrb	r2, [r7, #13]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b87e:	7b7a      	ldrb	r2, [r7, #13]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	32ae      	adds	r2, #174	; 0xae
 800b884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 8163 	beq.w	800bb56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b890:	7b7a      	ldrb	r2, [r7, #13]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	32ae      	adds	r2, #174	; 0xae
 800b896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	4798      	blx	r3
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b8a6:	e156      	b.n	800bb56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	785b      	ldrb	r3, [r3, #1]
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d008      	beq.n	800b8c2 <USBD_StdEPReq+0x9a>
 800b8b0:	2b03      	cmp	r3, #3
 800b8b2:	f300 8145 	bgt.w	800bb40 <USBD_StdEPReq+0x318>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 809b 	beq.w	800b9f2 <USBD_StdEPReq+0x1ca>
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d03c      	beq.n	800b93a <USBD_StdEPReq+0x112>
 800b8c0:	e13e      	b.n	800bb40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d002      	beq.n	800b8d4 <USBD_StdEPReq+0xac>
 800b8ce:	2b03      	cmp	r3, #3
 800b8d0:	d016      	beq.n	800b900 <USBD_StdEPReq+0xd8>
 800b8d2:	e02c      	b.n	800b92e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8d4:	7bbb      	ldrb	r3, [r7, #14]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00d      	beq.n	800b8f6 <USBD_StdEPReq+0xce>
 800b8da:	7bbb      	ldrb	r3, [r7, #14]
 800b8dc:	2b80      	cmp	r3, #128	; 0x80
 800b8de:	d00a      	beq.n	800b8f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f004 fb51 	bl	800ff8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8ea:	2180      	movs	r1, #128	; 0x80
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f004 fb4d 	bl	800ff8c <USBD_LL_StallEP>
 800b8f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8f4:	e020      	b.n	800b938 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fc7a 	bl	800c1f2 <USBD_CtlError>
              break;
 800b8fe:	e01b      	b.n	800b938 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	885b      	ldrh	r3, [r3, #2]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10e      	bne.n	800b926 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b908:	7bbb      	ldrb	r3, [r7, #14]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00b      	beq.n	800b926 <USBD_StdEPReq+0xfe>
 800b90e:	7bbb      	ldrb	r3, [r7, #14]
 800b910:	2b80      	cmp	r3, #128	; 0x80
 800b912:	d008      	beq.n	800b926 <USBD_StdEPReq+0xfe>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	88db      	ldrh	r3, [r3, #6]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d104      	bne.n	800b926 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f004 fb33 	bl	800ff8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fd2e 	bl	800c388 <USBD_CtlSendStatus>

              break;
 800b92c:	e004      	b.n	800b938 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fc5e 	bl	800c1f2 <USBD_CtlError>
              break;
 800b936:	bf00      	nop
          }
          break;
 800b938:	e107      	b.n	800bb4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b02      	cmp	r3, #2
 800b944:	d002      	beq.n	800b94c <USBD_StdEPReq+0x124>
 800b946:	2b03      	cmp	r3, #3
 800b948:	d016      	beq.n	800b978 <USBD_StdEPReq+0x150>
 800b94a:	e04b      	b.n	800b9e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b94c:	7bbb      	ldrb	r3, [r7, #14]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00d      	beq.n	800b96e <USBD_StdEPReq+0x146>
 800b952:	7bbb      	ldrb	r3, [r7, #14]
 800b954:	2b80      	cmp	r3, #128	; 0x80
 800b956:	d00a      	beq.n	800b96e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b958:	7bbb      	ldrb	r3, [r7, #14]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f004 fb15 	bl	800ff8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b962:	2180      	movs	r1, #128	; 0x80
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f004 fb11 	bl	800ff8c <USBD_LL_StallEP>
 800b96a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b96c:	e040      	b.n	800b9f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fc3e 	bl	800c1f2 <USBD_CtlError>
              break;
 800b976:	e03b      	b.n	800b9f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	885b      	ldrh	r3, [r3, #2]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d136      	bne.n	800b9ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b980:	7bbb      	ldrb	r3, [r7, #14]
 800b982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b986:	2b00      	cmp	r3, #0
 800b988:	d004      	beq.n	800b994 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b98a:	7bbb      	ldrb	r3, [r7, #14]
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f004 fb1b 	bl	800ffca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fcf7 	bl	800c388 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7ff fde2 	bl	800b568 <USBD_CoreFindEP>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9a8:	7b7b      	ldrb	r3, [r7, #13]
 800b9aa:	2bff      	cmp	r3, #255	; 0xff
 800b9ac:	d01f      	beq.n	800b9ee <USBD_StdEPReq+0x1c6>
 800b9ae:	7b7b      	ldrb	r3, [r7, #13]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d11c      	bne.n	800b9ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b9b4:	7b7a      	ldrb	r2, [r7, #13]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b9bc:	7b7a      	ldrb	r2, [r7, #13]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	32ae      	adds	r2, #174	; 0xae
 800b9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d010      	beq.n	800b9ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b9cc:	7b7a      	ldrb	r2, [r7, #13]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	32ae      	adds	r2, #174	; 0xae
 800b9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	4798      	blx	r3
 800b9de:	4603      	mov	r3, r0
 800b9e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b9e2:	e004      	b.n	800b9ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fc03 	bl	800c1f2 <USBD_CtlError>
              break;
 800b9ec:	e000      	b.n	800b9f0 <USBD_StdEPReq+0x1c8>
              break;
 800b9ee:	bf00      	nop
          }
          break;
 800b9f0:	e0ab      	b.n	800bb4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d002      	beq.n	800ba04 <USBD_StdEPReq+0x1dc>
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	d032      	beq.n	800ba68 <USBD_StdEPReq+0x240>
 800ba02:	e097      	b.n	800bb34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d007      	beq.n	800ba1a <USBD_StdEPReq+0x1f2>
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
 800ba0c:	2b80      	cmp	r3, #128	; 0x80
 800ba0e:	d004      	beq.n	800ba1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fbed 	bl	800c1f2 <USBD_CtlError>
                break;
 800ba18:	e091      	b.n	800bb3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	da0b      	bge.n	800ba3a <USBD_StdEPReq+0x212>
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba28:	4613      	mov	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	3310      	adds	r3, #16
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	4413      	add	r3, r2
 800ba36:	3304      	adds	r3, #4
 800ba38:	e00b      	b.n	800ba52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
 800ba3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba40:	4613      	mov	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	4413      	add	r3, r2
 800ba50:	3304      	adds	r3, #4
 800ba52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2200      	movs	r2, #0
 800ba58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fc37 	bl	800c2d4 <USBD_CtlSendData>
              break;
 800ba66:	e06a      	b.n	800bb3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	da11      	bge.n	800ba94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
 800ba72:	f003 020f 	and.w	r2, r3, #15
 800ba76:	6879      	ldr	r1, [r7, #4]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	440b      	add	r3, r1
 800ba82:	3324      	adds	r3, #36	; 0x24
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d117      	bne.n	800baba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fbb0 	bl	800c1f2 <USBD_CtlError>
                  break;
 800ba92:	e054      	b.n	800bb3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	f003 020f 	and.w	r2, r3, #15
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	440b      	add	r3, r1
 800baa6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800baaa:	881b      	ldrh	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d104      	bne.n	800baba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fb9d 	bl	800c1f2 <USBD_CtlError>
                  break;
 800bab8:	e041      	b.n	800bb3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	da0b      	bge.n	800bada <USBD_StdEPReq+0x2b2>
 800bac2:	7bbb      	ldrb	r3, [r7, #14]
 800bac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bac8:	4613      	mov	r3, r2
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4413      	add	r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	3310      	adds	r3, #16
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	4413      	add	r3, r2
 800bad6:	3304      	adds	r3, #4
 800bad8:	e00b      	b.n	800baf2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bae0:	4613      	mov	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	4413      	add	r3, r2
 800baf0:	3304      	adds	r3, #4
 800baf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <USBD_StdEPReq+0x2d8>
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	2b80      	cmp	r3, #128	; 0x80
 800bafe:	d103      	bne.n	800bb08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2200      	movs	r2, #0
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	e00e      	b.n	800bb26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f004 fa7b 	bl	8010008 <USBD_LL_IsStallEP>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d003      	beq.n	800bb20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	e002      	b.n	800bb26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fbd1 	bl	800c2d4 <USBD_CtlSendData>
              break;
 800bb32:	e004      	b.n	800bb3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fb5b 	bl	800c1f2 <USBD_CtlError>
              break;
 800bb3c:	bf00      	nop
          }
          break;
 800bb3e:	e004      	b.n	800bb4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fb55 	bl	800c1f2 <USBD_CtlError>
          break;
 800bb48:	bf00      	nop
      }
      break;
 800bb4a:	e005      	b.n	800bb58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fb4f 	bl	800c1f2 <USBD_CtlError>
      break;
 800bb54:	e000      	b.n	800bb58 <USBD_StdEPReq+0x330>
      break;
 800bb56:	bf00      	nop
  }

  return ret;
 800bb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
	...

0800bb64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb76:	2300      	movs	r3, #0
 800bb78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	885b      	ldrh	r3, [r3, #2]
 800bb7e:	0a1b      	lsrs	r3, r3, #8
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	3b01      	subs	r3, #1
 800bb84:	2b06      	cmp	r3, #6
 800bb86:	f200 8128 	bhi.w	800bdda <USBD_GetDescriptor+0x276>
 800bb8a:	a201      	add	r2, pc, #4	; (adr r2, 800bb90 <USBD_GetDescriptor+0x2c>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bbad 	.word	0x0800bbad
 800bb94:	0800bbc5 	.word	0x0800bbc5
 800bb98:	0800bc05 	.word	0x0800bc05
 800bb9c:	0800bddb 	.word	0x0800bddb
 800bba0:	0800bddb 	.word	0x0800bddb
 800bba4:	0800bd7b 	.word	0x0800bd7b
 800bba8:	0800bda7 	.word	0x0800bda7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	7c12      	ldrb	r2, [r2, #16]
 800bbb8:	f107 0108 	add.w	r1, r7, #8
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	4798      	blx	r3
 800bbc0:	60f8      	str	r0, [r7, #12]
      break;
 800bbc2:	e112      	b.n	800bdea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	7c1b      	ldrb	r3, [r3, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10d      	bne.n	800bbe8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd4:	f107 0208 	add.w	r2, r7, #8
 800bbd8:	4610      	mov	r0, r2
 800bbda:	4798      	blx	r3
 800bbdc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bbe6:	e100      	b.n	800bdea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf0:	f107 0208 	add.w	r2, r7, #8
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	4798      	blx	r3
 800bbf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	2202      	movs	r2, #2
 800bc00:	701a      	strb	r2, [r3, #0]
      break;
 800bc02:	e0f2      	b.n	800bdea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	885b      	ldrh	r3, [r3, #2]
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b05      	cmp	r3, #5
 800bc0c:	f200 80ac 	bhi.w	800bd68 <USBD_GetDescriptor+0x204>
 800bc10:	a201      	add	r2, pc, #4	; (adr r2, 800bc18 <USBD_GetDescriptor+0xb4>)
 800bc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc16:	bf00      	nop
 800bc18:	0800bc31 	.word	0x0800bc31
 800bc1c:	0800bc65 	.word	0x0800bc65
 800bc20:	0800bc99 	.word	0x0800bc99
 800bc24:	0800bccd 	.word	0x0800bccd
 800bc28:	0800bd01 	.word	0x0800bd01
 800bc2c:	0800bd35 	.word	0x0800bd35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00b      	beq.n	800bc54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	7c12      	ldrb	r2, [r2, #16]
 800bc48:	f107 0108 	add.w	r1, r7, #8
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	4798      	blx	r3
 800bc50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc52:	e091      	b.n	800bd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 facb 	bl	800c1f2 <USBD_CtlError>
            err++;
 800bc5c:	7afb      	ldrb	r3, [r7, #11]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	72fb      	strb	r3, [r7, #11]
          break;
 800bc62:	e089      	b.n	800bd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00b      	beq.n	800bc88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	7c12      	ldrb	r2, [r2, #16]
 800bc7c:	f107 0108 	add.w	r1, r7, #8
 800bc80:	4610      	mov	r0, r2
 800bc82:	4798      	blx	r3
 800bc84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc86:	e077      	b.n	800bd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fab1 	bl	800c1f2 <USBD_CtlError>
            err++;
 800bc90:	7afb      	ldrb	r3, [r7, #11]
 800bc92:	3301      	adds	r3, #1
 800bc94:	72fb      	strb	r3, [r7, #11]
          break;
 800bc96:	e06f      	b.n	800bd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00b      	beq.n	800bcbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	7c12      	ldrb	r2, [r2, #16]
 800bcb0:	f107 0108 	add.w	r1, r7, #8
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	4798      	blx	r3
 800bcb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcba:	e05d      	b.n	800bd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fa97 	bl	800c1f2 <USBD_CtlError>
            err++;
 800bcc4:	7afb      	ldrb	r3, [r7, #11]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcca:	e055      	b.n	800bd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00b      	beq.n	800bcf0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	7c12      	ldrb	r2, [r2, #16]
 800bce4:	f107 0108 	add.w	r1, r7, #8
 800bce8:	4610      	mov	r0, r2
 800bcea:	4798      	blx	r3
 800bcec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcee:	e043      	b.n	800bd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fa7d 	bl	800c1f2 <USBD_CtlError>
            err++;
 800bcf8:	7afb      	ldrb	r3, [r7, #11]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcfe:	e03b      	b.n	800bd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00b      	beq.n	800bd24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	7c12      	ldrb	r2, [r2, #16]
 800bd18:	f107 0108 	add.w	r1, r7, #8
 800bd1c:	4610      	mov	r0, r2
 800bd1e:	4798      	blx	r3
 800bd20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd22:	e029      	b.n	800bd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd24:	6839      	ldr	r1, [r7, #0]
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 fa63 	bl	800c1f2 <USBD_CtlError>
            err++;
 800bd2c:	7afb      	ldrb	r3, [r7, #11]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	72fb      	strb	r3, [r7, #11]
          break;
 800bd32:	e021      	b.n	800bd78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00b      	beq.n	800bd58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	7c12      	ldrb	r2, [r2, #16]
 800bd4c:	f107 0108 	add.w	r1, r7, #8
 800bd50:	4610      	mov	r0, r2
 800bd52:	4798      	blx	r3
 800bd54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd56:	e00f      	b.n	800bd78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fa49 	bl	800c1f2 <USBD_CtlError>
            err++;
 800bd60:	7afb      	ldrb	r3, [r7, #11]
 800bd62:	3301      	adds	r3, #1
 800bd64:	72fb      	strb	r3, [r7, #11]
          break;
 800bd66:	e007      	b.n	800bd78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd68:	6839      	ldr	r1, [r7, #0]
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa41 	bl	800c1f2 <USBD_CtlError>
          err++;
 800bd70:	7afb      	ldrb	r3, [r7, #11]
 800bd72:	3301      	adds	r3, #1
 800bd74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd76:	bf00      	nop
      }
      break;
 800bd78:	e037      	b.n	800bdea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	7c1b      	ldrb	r3, [r3, #16]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d109      	bne.n	800bd96 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8a:	f107 0208 	add.w	r2, r7, #8
 800bd8e:	4610      	mov	r0, r2
 800bd90:	4798      	blx	r3
 800bd92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd94:	e029      	b.n	800bdea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fa2a 	bl	800c1f2 <USBD_CtlError>
        err++;
 800bd9e:	7afb      	ldrb	r3, [r7, #11]
 800bda0:	3301      	adds	r3, #1
 800bda2:	72fb      	strb	r3, [r7, #11]
      break;
 800bda4:	e021      	b.n	800bdea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	7c1b      	ldrb	r3, [r3, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10d      	bne.n	800bdca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb6:	f107 0208 	add.w	r2, r7, #8
 800bdba:	4610      	mov	r0, r2
 800bdbc:	4798      	blx	r3
 800bdbe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	2207      	movs	r2, #7
 800bdc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdc8:	e00f      	b.n	800bdea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fa10 	bl	800c1f2 <USBD_CtlError>
        err++;
 800bdd2:	7afb      	ldrb	r3, [r7, #11]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	72fb      	strb	r3, [r7, #11]
      break;
 800bdd8:	e007      	b.n	800bdea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fa08 	bl	800c1f2 <USBD_CtlError>
      err++;
 800bde2:	7afb      	ldrb	r3, [r7, #11]
 800bde4:	3301      	adds	r3, #1
 800bde6:	72fb      	strb	r3, [r7, #11]
      break;
 800bde8:	bf00      	nop
  }

  if (err != 0U)
 800bdea:	7afb      	ldrb	r3, [r7, #11]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d11e      	bne.n	800be2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	88db      	ldrh	r3, [r3, #6]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d016      	beq.n	800be26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bdf8:	893b      	ldrh	r3, [r7, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00e      	beq.n	800be1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	88da      	ldrh	r2, [r3, #6]
 800be02:	893b      	ldrh	r3, [r7, #8]
 800be04:	4293      	cmp	r3, r2
 800be06:	bf28      	it	cs
 800be08:	4613      	movcs	r3, r2
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be0e:	893b      	ldrh	r3, [r7, #8]
 800be10:	461a      	mov	r2, r3
 800be12:	68f9      	ldr	r1, [r7, #12]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fa5d 	bl	800c2d4 <USBD_CtlSendData>
 800be1a:	e009      	b.n	800be30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f9e7 	bl	800c1f2 <USBD_CtlError>
 800be24:	e004      	b.n	800be30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 faae 	bl	800c388 <USBD_CtlSendStatus>
 800be2c:	e000      	b.n	800be30 <USBD_GetDescriptor+0x2cc>
    return;
 800be2e:	bf00      	nop
  }
}
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop

0800be38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	889b      	ldrh	r3, [r3, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d131      	bne.n	800beae <USBD_SetAddress+0x76>
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	88db      	ldrh	r3, [r3, #6]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d12d      	bne.n	800beae <USBD_SetAddress+0x76>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	885b      	ldrh	r3, [r3, #2]
 800be56:	2b7f      	cmp	r3, #127	; 0x7f
 800be58:	d829      	bhi.n	800beae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	885b      	ldrh	r3, [r3, #2]
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b03      	cmp	r3, #3
 800be70:	d104      	bne.n	800be7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f9bc 	bl	800c1f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be7a:	e01d      	b.n	800beb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	7bfa      	ldrb	r2, [r7, #15]
 800be80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be84:	7bfb      	ldrb	r3, [r7, #15]
 800be86:	4619      	mov	r1, r3
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f004 f8e9 	bl	8010060 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fa7a 	bl	800c388 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be94:	7bfb      	ldrb	r3, [r7, #15]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d004      	beq.n	800bea4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2202      	movs	r2, #2
 800be9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bea2:	e009      	b.n	800beb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beac:	e004      	b.n	800beb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f99e 	bl	800c1f2 <USBD_CtlError>
  }
}
 800beb6:	bf00      	nop
 800beb8:	bf00      	nop
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	885b      	ldrh	r3, [r3, #2]
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	4b4e      	ldr	r3, [pc, #312]	; (800c010 <USBD_SetConfig+0x150>)
 800bed6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bed8:	4b4d      	ldr	r3, [pc, #308]	; (800c010 <USBD_SetConfig+0x150>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d905      	bls.n	800beec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f985 	bl	800c1f2 <USBD_CtlError>
    return USBD_FAIL;
 800bee8:	2303      	movs	r3, #3
 800beea:	e08c      	b.n	800c006 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d002      	beq.n	800befe <USBD_SetConfig+0x3e>
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d029      	beq.n	800bf50 <USBD_SetConfig+0x90>
 800befc:	e075      	b.n	800bfea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800befe:	4b44      	ldr	r3, [pc, #272]	; (800c010 <USBD_SetConfig+0x150>)
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d020      	beq.n	800bf48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bf06:	4b42      	ldr	r3, [pc, #264]	; (800c010 <USBD_SetConfig+0x150>)
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf10:	4b3f      	ldr	r3, [pc, #252]	; (800c010 <USBD_SetConfig+0x150>)
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7fe ffe7 	bl	800aeea <USBD_SetClassConfig>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d008      	beq.n	800bf38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf26:	6839      	ldr	r1, [r7, #0]
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f962 	bl	800c1f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2202      	movs	r2, #2
 800bf32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf36:	e065      	b.n	800c004 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fa25 	bl	800c388 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2203      	movs	r2, #3
 800bf42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf46:	e05d      	b.n	800c004 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fa1d 	bl	800c388 <USBD_CtlSendStatus>
      break;
 800bf4e:	e059      	b.n	800c004 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bf50:	4b2f      	ldr	r3, [pc, #188]	; (800c010 <USBD_SetConfig+0x150>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d112      	bne.n	800bf7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bf60:	4b2b      	ldr	r3, [pc, #172]	; (800c010 <USBD_SetConfig+0x150>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	461a      	mov	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf6a:	4b29      	ldr	r3, [pc, #164]	; (800c010 <USBD_SetConfig+0x150>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7fe ffd6 	bl	800af22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fa06 	bl	800c388 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf7c:	e042      	b.n	800c004 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf7e:	4b24      	ldr	r3, [pc, #144]	; (800c010 <USBD_SetConfig+0x150>)
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	461a      	mov	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d02a      	beq.n	800bfe2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7fe ffc4 	bl	800af22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf9a:	4b1d      	ldr	r3, [pc, #116]	; (800c010 <USBD_SetConfig+0x150>)
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bfa4:	4b1a      	ldr	r3, [pc, #104]	; (800c010 <USBD_SetConfig+0x150>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7fe ff9d 	bl	800aeea <USBD_SetClassConfig>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00f      	beq.n	800bfda <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 f918 	bl	800c1f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	4619      	mov	r1, r3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7fe ffa9 	bl	800af22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bfd8:	e014      	b.n	800c004 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f9d4 	bl	800c388 <USBD_CtlSendStatus>
      break;
 800bfe0:	e010      	b.n	800c004 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f9d0 	bl	800c388 <USBD_CtlSendStatus>
      break;
 800bfe8:	e00c      	b.n	800c004 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f900 	bl	800c1f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bff2:	4b07      	ldr	r3, [pc, #28]	; (800c010 <USBD_SetConfig+0x150>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f7fe ff92 	bl	800af22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bffe:	2303      	movs	r3, #3
 800c000:	73fb      	strb	r3, [r7, #15]
      break;
 800c002:	bf00      	nop
  }

  return ret;
 800c004:	7bfb      	ldrb	r3, [r7, #15]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	200008b4 	.word	0x200008b4

0800c014 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	88db      	ldrh	r3, [r3, #6]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d004      	beq.n	800c030 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f8e2 	bl	800c1f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c02e:	e023      	b.n	800c078 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c036:	b2db      	uxtb	r3, r3
 800c038:	2b02      	cmp	r3, #2
 800c03a:	dc02      	bgt.n	800c042 <USBD_GetConfig+0x2e>
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	dc03      	bgt.n	800c048 <USBD_GetConfig+0x34>
 800c040:	e015      	b.n	800c06e <USBD_GetConfig+0x5a>
 800c042:	2b03      	cmp	r3, #3
 800c044:	d00b      	beq.n	800c05e <USBD_GetConfig+0x4a>
 800c046:	e012      	b.n	800c06e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	3308      	adds	r3, #8
 800c052:	2201      	movs	r2, #1
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f93c 	bl	800c2d4 <USBD_CtlSendData>
        break;
 800c05c:	e00c      	b.n	800c078 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3304      	adds	r3, #4
 800c062:	2201      	movs	r2, #1
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f934 	bl	800c2d4 <USBD_CtlSendData>
        break;
 800c06c:	e004      	b.n	800c078 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c06e:	6839      	ldr	r1, [r7, #0]
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 f8be 	bl	800c1f2 <USBD_CtlError>
        break;
 800c076:	bf00      	nop
}
 800c078:	bf00      	nop
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c090:	b2db      	uxtb	r3, r3
 800c092:	3b01      	subs	r3, #1
 800c094:	2b02      	cmp	r3, #2
 800c096:	d81e      	bhi.n	800c0d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	88db      	ldrh	r3, [r3, #6]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d004      	beq.n	800c0aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f8a5 	bl	800c1f2 <USBD_CtlError>
        break;
 800c0a8:	e01a      	b.n	800c0e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d005      	beq.n	800c0c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	f043 0202 	orr.w	r2, r3, #2
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f900 	bl	800c2d4 <USBD_CtlSendData>
      break;
 800c0d4:	e004      	b.n	800c0e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f88a 	bl	800c1f2 <USBD_CtlError>
      break;
 800c0de:	bf00      	nop
  }
}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	885b      	ldrh	r3, [r3, #2]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d107      	bne.n	800c10a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f940 	bl	800c388 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c108:	e013      	b.n	800c132 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	885b      	ldrh	r3, [r3, #2]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d10b      	bne.n	800c12a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	889b      	ldrh	r3, [r3, #4]
 800c116:	0a1b      	lsrs	r3, r3, #8
 800c118:	b29b      	uxth	r3, r3
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f930 	bl	800c388 <USBD_CtlSendStatus>
}
 800c128:	e003      	b.n	800c132 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f860 	bl	800c1f2 <USBD_CtlError>
}
 800c132:	bf00      	nop
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b082      	sub	sp, #8
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	3b01      	subs	r3, #1
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d80b      	bhi.n	800c16a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	885b      	ldrh	r3, [r3, #2]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d10c      	bne.n	800c174 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f910 	bl	800c388 <USBD_CtlSendStatus>
      }
      break;
 800c168:	e004      	b.n	800c174 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f840 	bl	800c1f2 <USBD_CtlError>
      break;
 800c172:	e000      	b.n	800c176 <USBD_ClrFeature+0x3c>
      break;
 800c174:	bf00      	nop
  }
}
 800c176:	bf00      	nop
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b084      	sub	sp, #16
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	781a      	ldrb	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	3301      	adds	r3, #1
 800c198:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	781a      	ldrb	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f7ff fa41 	bl	800b630 <SWAPBYTE>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7ff fa34 	bl	800b630 <SWAPBYTE>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f7ff fa27 	bl	800b630 <SWAPBYTE>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	80da      	strh	r2, [r3, #6]
}
 800c1ea:	bf00      	nop
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b082      	sub	sp, #8
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1fc:	2180      	movs	r1, #128	; 0x80
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f003 fec4 	bl	800ff8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c204:	2100      	movs	r1, #0
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f003 fec0 	bl	800ff8c <USBD_LL_StallEP>
}
 800c20c:	bf00      	nop
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c220:	2300      	movs	r3, #0
 800c222:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d036      	beq.n	800c298 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c22e:	6938      	ldr	r0, [r7, #16]
 800c230:	f000 f836 	bl	800c2a0 <USBD_GetLen>
 800c234:	4603      	mov	r3, r0
 800c236:	3301      	adds	r3, #1
 800c238:	b29b      	uxth	r3, r3
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c242:	7dfb      	ldrb	r3, [r7, #23]
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	4413      	add	r3, r2
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	7812      	ldrb	r2, [r2, #0]
 800c24c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
 800c250:	3301      	adds	r3, #1
 800c252:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c254:	7dfb      	ldrb	r3, [r7, #23]
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	4413      	add	r3, r2
 800c25a:	2203      	movs	r2, #3
 800c25c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
 800c260:	3301      	adds	r3, #1
 800c262:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c264:	e013      	b.n	800c28e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c266:	7dfb      	ldrb	r3, [r7, #23]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	4413      	add	r3, r2
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	7812      	ldrb	r2, [r2, #0]
 800c270:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	3301      	adds	r3, #1
 800c276:	613b      	str	r3, [r7, #16]
    idx++;
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	3301      	adds	r3, #1
 800c27c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c27e:	7dfb      	ldrb	r3, [r7, #23]
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	4413      	add	r3, r2
 800c284:	2200      	movs	r2, #0
 800c286:	701a      	strb	r2, [r3, #0]
    idx++;
 800c288:	7dfb      	ldrb	r3, [r7, #23]
 800c28a:	3301      	adds	r3, #1
 800c28c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e7      	bne.n	800c266 <USBD_GetString+0x52>
 800c296:	e000      	b.n	800c29a <USBD_GetString+0x86>
    return;
 800c298:	bf00      	nop
  }
}
 800c29a:	3718      	adds	r7, #24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c2b0:	e005      	b.n	800c2be <USBD_GetLen+0x1e>
  {
    len++;
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1f5      	bne.n	800c2b2 <USBD_GetLen+0x12>
  }

  return len;
 800c2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f003 fecf 	bl	801009e <USBD_LL_Transmit>

  return USBD_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b084      	sub	sp, #16
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	2100      	movs	r1, #0
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f003 febe 	bl	801009e <USBD_LL_Transmit>

  return USBD_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2203      	movs	r2, #3
 800c33c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	2100      	movs	r1, #0
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f003 fec2 	bl	80100e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	2100      	movs	r1, #0
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f003 feb1 	bl	80100e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2204      	movs	r2, #4
 800c394:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c398:	2300      	movs	r3, #0
 800c39a:	2200      	movs	r2, #0
 800c39c:	2100      	movs	r1, #0
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f003 fe7d 	bl	801009e <USBD_LL_Transmit>

  return USBD_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2205      	movs	r2, #5
 800c3ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3be:	2300      	movs	r3, #0
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f003 fe8b 	bl	80100e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <__NVIC_SetPriority>:
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	6039      	str	r1, [r7, #0]
 800c3de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	db0a      	blt.n	800c3fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	490c      	ldr	r1, [pc, #48]	; (800c420 <__NVIC_SetPriority+0x4c>)
 800c3ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3f2:	0112      	lsls	r2, r2, #4
 800c3f4:	b2d2      	uxtb	r2, r2
 800c3f6:	440b      	add	r3, r1
 800c3f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c3fc:	e00a      	b.n	800c414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	b2da      	uxtb	r2, r3
 800c402:	4908      	ldr	r1, [pc, #32]	; (800c424 <__NVIC_SetPriority+0x50>)
 800c404:	79fb      	ldrb	r3, [r7, #7]
 800c406:	f003 030f 	and.w	r3, r3, #15
 800c40a:	3b04      	subs	r3, #4
 800c40c:	0112      	lsls	r2, r2, #4
 800c40e:	b2d2      	uxtb	r2, r2
 800c410:	440b      	add	r3, r1
 800c412:	761a      	strb	r2, [r3, #24]
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	e000e100 	.word	0xe000e100
 800c424:	e000ed00 	.word	0xe000ed00

0800c428 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c428:	b580      	push	{r7, lr}
 800c42a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c42c:	4b05      	ldr	r3, [pc, #20]	; (800c444 <SysTick_Handler+0x1c>)
 800c42e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c430:	f002 f85a 	bl	800e4e8 <xTaskGetSchedulerState>
 800c434:	4603      	mov	r3, r0
 800c436:	2b01      	cmp	r3, #1
 800c438:	d001      	beq.n	800c43e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c43a:	f002 ff3d 	bl	800f2b8 <xPortSysTickHandler>
  }
}
 800c43e:	bf00      	nop
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	e000e010 	.word	0xe000e010

0800c448 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c448:	b580      	push	{r7, lr}
 800c44a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c44c:	2100      	movs	r1, #0
 800c44e:	f06f 0004 	mvn.w	r0, #4
 800c452:	f7ff ffbf 	bl	800c3d4 <__NVIC_SetPriority>
#endif
}
 800c456:	bf00      	nop
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c462:	f3ef 8305 	mrs	r3, IPSR
 800c466:	603b      	str	r3, [r7, #0]
  return(result);
 800c468:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c46e:	f06f 0305 	mvn.w	r3, #5
 800c472:	607b      	str	r3, [r7, #4]
 800c474:	e00c      	b.n	800c490 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c476:	4b0a      	ldr	r3, [pc, #40]	; (800c4a0 <osKernelInitialize+0x44>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d105      	bne.n	800c48a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c47e:	4b08      	ldr	r3, [pc, #32]	; (800c4a0 <osKernelInitialize+0x44>)
 800c480:	2201      	movs	r2, #1
 800c482:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c484:	2300      	movs	r3, #0
 800c486:	607b      	str	r3, [r7, #4]
 800c488:	e002      	b.n	800c490 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c48a:	f04f 33ff 	mov.w	r3, #4294967295
 800c48e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c490:	687b      	ldr	r3, [r7, #4]
}
 800c492:	4618      	mov	r0, r3
 800c494:	370c      	adds	r7, #12
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	200008b8 	.word	0x200008b8

0800c4a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4aa:	f3ef 8305 	mrs	r3, IPSR
 800c4ae:	603b      	str	r3, [r7, #0]
  return(result);
 800c4b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <osKernelStart+0x1a>
    stat = osErrorISR;
 800c4b6:	f06f 0305 	mvn.w	r3, #5
 800c4ba:	607b      	str	r3, [r7, #4]
 800c4bc:	e010      	b.n	800c4e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c4be:	4b0b      	ldr	r3, [pc, #44]	; (800c4ec <osKernelStart+0x48>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d109      	bne.n	800c4da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c4c6:	f7ff ffbf 	bl	800c448 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c4ca:	4b08      	ldr	r3, [pc, #32]	; (800c4ec <osKernelStart+0x48>)
 800c4cc:	2202      	movs	r2, #2
 800c4ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c4d0:	f001 fb9e 	bl	800dc10 <vTaskStartScheduler>
      stat = osOK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	607b      	str	r3, [r7, #4]
 800c4d8:	e002      	b.n	800c4e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c4da:	f04f 33ff 	mov.w	r3, #4294967295
 800c4de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c4e0:	687b      	ldr	r3, [r7, #4]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	200008b8 	.word	0x200008b8

0800c4f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08e      	sub	sp, #56	; 0x38
 800c4f4:	af04      	add	r7, sp, #16
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c500:	f3ef 8305 	mrs	r3, IPSR
 800c504:	617b      	str	r3, [r7, #20]
  return(result);
 800c506:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d17e      	bne.n	800c60a <osThreadNew+0x11a>
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d07b      	beq.n	800c60a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c512:	2380      	movs	r3, #128	; 0x80
 800c514:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c516:	2318      	movs	r3, #24
 800c518:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c51e:	f04f 33ff 	mov.w	r3, #4294967295
 800c522:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d045      	beq.n	800c5b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d002      	beq.n	800c538 <osThreadNew+0x48>
        name = attr->name;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	699b      	ldr	r3, [r3, #24]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d008      	beq.n	800c55e <osThreadNew+0x6e>
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	2b38      	cmp	r3, #56	; 0x38
 800c550:	d805      	bhi.n	800c55e <osThreadNew+0x6e>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d001      	beq.n	800c562 <osThreadNew+0x72>
        return (NULL);
 800c55e:	2300      	movs	r3, #0
 800c560:	e054      	b.n	800c60c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	695b      	ldr	r3, [r3, #20]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	089b      	lsrs	r3, r3, #2
 800c570:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00e      	beq.n	800c598 <osThreadNew+0xa8>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	2bbb      	cmp	r3, #187	; 0xbb
 800c580:	d90a      	bls.n	800c598 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c586:	2b00      	cmp	r3, #0
 800c588:	d006      	beq.n	800c598 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	695b      	ldr	r3, [r3, #20]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <osThreadNew+0xa8>
        mem = 1;
 800c592:	2301      	movs	r3, #1
 800c594:	61bb      	str	r3, [r7, #24]
 800c596:	e010      	b.n	800c5ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10c      	bne.n	800c5ba <osThreadNew+0xca>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d108      	bne.n	800c5ba <osThreadNew+0xca>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d104      	bne.n	800c5ba <osThreadNew+0xca>
          mem = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	61bb      	str	r3, [r7, #24]
 800c5b4:	e001      	b.n	800c5ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d110      	bne.n	800c5e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c5c8:	9202      	str	r2, [sp, #8]
 800c5ca:	9301      	str	r3, [sp, #4]
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	6a3a      	ldr	r2, [r7, #32]
 800c5d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f001 f92e 	bl	800d838 <xTaskCreateStatic>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	613b      	str	r3, [r7, #16]
 800c5e0:	e013      	b.n	800c60a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d110      	bne.n	800c60a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c5e8:	6a3b      	ldr	r3, [r7, #32]
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	f107 0310 	add.w	r3, r7, #16
 800c5f0:	9301      	str	r3, [sp, #4]
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f001 f979 	bl	800d8f2 <xTaskCreate>
 800c600:	4603      	mov	r3, r0
 800c602:	2b01      	cmp	r3, #1
 800c604:	d001      	beq.n	800c60a <osThreadNew+0x11a>
            hTask = NULL;
 800c606:	2300      	movs	r3, #0
 800c608:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c60a:	693b      	ldr	r3, [r7, #16]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3728      	adds	r7, #40	; 0x28
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c61c:	f3ef 8305 	mrs	r3, IPSR
 800c620:	60bb      	str	r3, [r7, #8]
  return(result);
 800c622:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c624:	2b00      	cmp	r3, #0
 800c626:	d003      	beq.n	800c630 <osDelay+0x1c>
    stat = osErrorISR;
 800c628:	f06f 0305 	mvn.w	r3, #5
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	e007      	b.n	800c640 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c630:	2300      	movs	r3, #0
 800c632:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d002      	beq.n	800c640 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f001 fab4 	bl	800dba8 <vTaskDelay>
    }
  }

  return (stat);
 800c640:	68fb      	ldr	r3, [r7, #12]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b088      	sub	sp, #32
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c652:	2300      	movs	r3, #0
 800c654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c656:	f3ef 8305 	mrs	r3, IPSR
 800c65a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c65c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d174      	bne.n	800c74c <osMutexNew+0x102>
    if (attr != NULL) {
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d003      	beq.n	800c670 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	61bb      	str	r3, [r7, #24]
 800c66e:	e001      	b.n	800c674 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c670:	2300      	movs	r3, #0
 800c672:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	f003 0301 	and.w	r3, r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d002      	beq.n	800c684 <osMutexNew+0x3a>
      rmtx = 1U;
 800c67e:	2301      	movs	r3, #1
 800c680:	617b      	str	r3, [r7, #20]
 800c682:	e001      	b.n	800c688 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	f003 0308 	and.w	r3, r3, #8
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d15c      	bne.n	800c74c <osMutexNew+0x102>
      mem = -1;
 800c692:	f04f 33ff 	mov.w	r3, #4294967295
 800c696:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d015      	beq.n	800c6ca <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d006      	beq.n	800c6b4 <osMutexNew+0x6a>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	2b4f      	cmp	r3, #79	; 0x4f
 800c6ac:	d902      	bls.n	800c6b4 <osMutexNew+0x6a>
          mem = 1;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	613b      	str	r3, [r7, #16]
 800c6b2:	e00c      	b.n	800c6ce <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d108      	bne.n	800c6ce <osMutexNew+0x84>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d104      	bne.n	800c6ce <osMutexNew+0x84>
            mem = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	613b      	str	r3, [r7, #16]
 800c6c8:	e001      	b.n	800c6ce <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d112      	bne.n	800c6fa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d007      	beq.n	800c6ea <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	2004      	movs	r0, #4
 800c6e2:	f000 fb18 	bl	800cd16 <xQueueCreateMutexStatic>
 800c6e6:	61f8      	str	r0, [r7, #28]
 800c6e8:	e016      	b.n	800c718 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	2001      	movs	r0, #1
 800c6f2:	f000 fb10 	bl	800cd16 <xQueueCreateMutexStatic>
 800c6f6:	61f8      	str	r0, [r7, #28]
 800c6f8:	e00e      	b.n	800c718 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10b      	bne.n	800c718 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d004      	beq.n	800c710 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c706:	2004      	movs	r0, #4
 800c708:	f000 faed 	bl	800cce6 <xQueueCreateMutex>
 800c70c:	61f8      	str	r0, [r7, #28]
 800c70e:	e003      	b.n	800c718 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c710:	2001      	movs	r0, #1
 800c712:	f000 fae8 	bl	800cce6 <xQueueCreateMutex>
 800c716:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00c      	beq.n	800c738 <osMutexNew+0xee>
        if (attr != NULL) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d003      	beq.n	800c72c <osMutexNew+0xe2>
          name = attr->name;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	60fb      	str	r3, [r7, #12]
 800c72a:	e001      	b.n	800c730 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c72c:	2300      	movs	r3, #0
 800c72e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c730:	68f9      	ldr	r1, [r7, #12]
 800c732:	69f8      	ldr	r0, [r7, #28]
 800c734:	f001 f822 	bl	800d77c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d006      	beq.n	800c74c <osMutexNew+0x102>
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	f043 0301 	orr.w	r3, r3, #1
 800c74a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c74c:	69fb      	ldr	r3, [r7, #28]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3720      	adds	r7, #32
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c756:	b580      	push	{r7, lr}
 800c758:	b086      	sub	sp, #24
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f023 0301 	bic.w	r3, r3, #1
 800c766:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f003 0301 	and.w	r3, r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c770:	2300      	movs	r3, #0
 800c772:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c774:	f3ef 8305 	mrs	r3, IPSR
 800c778:	60bb      	str	r3, [r7, #8]
  return(result);
 800c77a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c780:	f06f 0305 	mvn.w	r3, #5
 800c784:	617b      	str	r3, [r7, #20]
 800c786:	e02c      	b.n	800c7e2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d103      	bne.n	800c796 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c78e:	f06f 0303 	mvn.w	r3, #3
 800c792:	617b      	str	r3, [r7, #20]
 800c794:	e025      	b.n	800c7e2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d011      	beq.n	800c7c0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6938      	ldr	r0, [r7, #16]
 800c7a0:	f000 fb08 	bl	800cdb4 <xQueueTakeMutexRecursive>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d01b      	beq.n	800c7e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d003      	beq.n	800c7b8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c7b0:	f06f 0301 	mvn.w	r3, #1
 800c7b4:	617b      	str	r3, [r7, #20]
 800c7b6:	e014      	b.n	800c7e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c7b8:	f06f 0302 	mvn.w	r3, #2
 800c7bc:	617b      	str	r3, [r7, #20]
 800c7be:	e010      	b.n	800c7e2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6938      	ldr	r0, [r7, #16]
 800c7c4:	f000 fda6 	bl	800d314 <xQueueSemaphoreTake>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d009      	beq.n	800c7e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d003      	beq.n	800c7dc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c7d4:	f06f 0301 	mvn.w	r3, #1
 800c7d8:	617b      	str	r3, [r7, #20]
 800c7da:	e002      	b.n	800c7e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c7dc:	f06f 0302 	mvn.w	r3, #2
 800c7e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c7e2:	697b      	ldr	r3, [r7, #20]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f023 0301 	bic.w	r3, r3, #1
 800c7fa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c804:	2300      	movs	r3, #0
 800c806:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c808:	f3ef 8305 	mrs	r3, IPSR
 800c80c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c80e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c810:	2b00      	cmp	r3, #0
 800c812:	d003      	beq.n	800c81c <osMutexRelease+0x30>
    stat = osErrorISR;
 800c814:	f06f 0305 	mvn.w	r3, #5
 800c818:	617b      	str	r3, [r7, #20]
 800c81a:	e01f      	b.n	800c85c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d103      	bne.n	800c82a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c822:	f06f 0303 	mvn.w	r3, #3
 800c826:	617b      	str	r3, [r7, #20]
 800c828:	e018      	b.n	800c85c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d009      	beq.n	800c844 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c830:	6938      	ldr	r0, [r7, #16]
 800c832:	f000 fa8b 	bl	800cd4c <xQueueGiveMutexRecursive>
 800c836:	4603      	mov	r3, r0
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d00f      	beq.n	800c85c <osMutexRelease+0x70>
        stat = osErrorResource;
 800c83c:	f06f 0302 	mvn.w	r3, #2
 800c840:	617b      	str	r3, [r7, #20]
 800c842:	e00b      	b.n	800c85c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c844:	2300      	movs	r3, #0
 800c846:	2200      	movs	r2, #0
 800c848:	2100      	movs	r1, #0
 800c84a:	6938      	ldr	r0, [r7, #16]
 800c84c:	f000 fae8 	bl	800ce20 <xQueueGenericSend>
 800c850:	4603      	mov	r3, r0
 800c852:	2b01      	cmp	r3, #1
 800c854:	d002      	beq.n	800c85c <osMutexRelease+0x70>
        stat = osErrorResource;
 800c856:	f06f 0302 	mvn.w	r3, #2
 800c85a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c85c:	697b      	ldr	r3, [r7, #20]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	4a07      	ldr	r2, [pc, #28]	; (800c894 <vApplicationGetIdleTaskMemory+0x2c>)
 800c878:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	4a06      	ldr	r2, [pc, #24]	; (800c898 <vApplicationGetIdleTaskMemory+0x30>)
 800c87e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2280      	movs	r2, #128	; 0x80
 800c884:	601a      	str	r2, [r3, #0]
}
 800c886:	bf00      	nop
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	200008bc 	.word	0x200008bc
 800c898:	20000978 	.word	0x20000978

0800c89c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	4a07      	ldr	r2, [pc, #28]	; (800c8c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c8ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	4a06      	ldr	r2, [pc, #24]	; (800c8cc <vApplicationGetTimerTaskMemory+0x30>)
 800c8b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8ba:	601a      	str	r2, [r3, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	20000b78 	.word	0x20000b78
 800c8cc:	20000c34 	.word	0x20000c34

0800c8d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f103 0208 	add.w	r2, r3, #8
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f103 0208 	add.w	r2, r3, #8
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f103 0208 	add.w	r2, r3, #8
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c91e:	bf00      	nop
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c92a:	b480      	push	{r7}
 800c92c:	b085      	sub	sp, #20
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	689a      	ldr	r2, [r3, #8]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	1c5a      	adds	r2, r3, #1
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	601a      	str	r2, [r3, #0]
}
 800c966:	bf00      	nop
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c972:	b480      	push	{r7}
 800c974:	b085      	sub	sp, #20
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c988:	d103      	bne.n	800c992 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	e00c      	b.n	800c9ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3308      	adds	r3, #8
 800c996:	60fb      	str	r3, [r7, #12]
 800c998:	e002      	b.n	800c9a0 <vListInsert+0x2e>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d2f6      	bcs.n	800c99a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	685a      	ldr	r2, [r3, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	683a      	ldr	r2, [r7, #0]
 800c9c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	1c5a      	adds	r2, r3, #1
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	601a      	str	r2, [r3, #0]
}
 800c9d8:	bf00      	nop
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	6892      	ldr	r2, [r2, #8]
 800c9fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	6852      	ldr	r2, [r2, #4]
 800ca04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d103      	bne.n	800ca18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10a      	bne.n	800ca62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ca5e:	bf00      	nop
 800ca60:	e7fe      	b.n	800ca60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ca62:	f002 fb97 	bl	800f194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca72:	fb01 f303 	mul.w	r3, r1, r3
 800ca76:	441a      	add	r2, r3
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca92:	3b01      	subs	r3, #1
 800ca94:	68f9      	ldr	r1, [r7, #12]
 800ca96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca98:	fb01 f303 	mul.w	r3, r1, r3
 800ca9c:	441a      	add	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	22ff      	movs	r2, #255	; 0xff
 800caa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	22ff      	movs	r2, #255	; 0xff
 800caae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d114      	bne.n	800cae2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01a      	beq.n	800caf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	3310      	adds	r3, #16
 800cac4:	4618      	mov	r0, r3
 800cac6:	f001 fb3d 	bl	800e144 <xTaskRemoveFromEventList>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d012      	beq.n	800caf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cad0:	4b0c      	ldr	r3, [pc, #48]	; (800cb04 <xQueueGenericReset+0xcc>)
 800cad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	e009      	b.n	800caf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3310      	adds	r3, #16
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff fef2 	bl	800c8d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3324      	adds	r3, #36	; 0x24
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff feed 	bl	800c8d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800caf6:	f002 fb7d 	bl	800f1f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cafa:	2301      	movs	r3, #1
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	e000ed04 	.word	0xe000ed04

0800cb08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08e      	sub	sp, #56	; 0x38
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10a      	bne.n	800cb32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb2e:	bf00      	nop
 800cb30:	e7fe      	b.n	800cb30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb4a:	bf00      	nop
 800cb4c:	e7fe      	b.n	800cb4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d002      	beq.n	800cb5a <xQueueGenericCreateStatic+0x52>
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <xQueueGenericCreateStatic+0x56>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e000      	b.n	800cb60 <xQueueGenericCreateStatic+0x58>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10a      	bne.n	800cb7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	623b      	str	r3, [r7, #32]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d102      	bne.n	800cb86 <xQueueGenericCreateStatic+0x7e>
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d101      	bne.n	800cb8a <xQueueGenericCreateStatic+0x82>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e000      	b.n	800cb8c <xQueueGenericCreateStatic+0x84>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10a      	bne.n	800cba6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	61fb      	str	r3, [r7, #28]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cba6:	2350      	movs	r3, #80	; 0x50
 800cba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	2b50      	cmp	r3, #80	; 0x50
 800cbae:	d00a      	beq.n	800cbc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	61bb      	str	r3, [r7, #24]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cbc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00d      	beq.n	800cbee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	68b9      	ldr	r1, [r7, #8]
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f000 f83f 	bl	800cc6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3730      	adds	r7, #48	; 0x30
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08a      	sub	sp, #40	; 0x28
 800cbfc:	af02      	add	r7, sp, #8
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	4613      	mov	r3, r2
 800cc04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10a      	bne.n	800cc22 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	613b      	str	r3, [r7, #16]
}
 800cc1e:	bf00      	nop
 800cc20:	e7fe      	b.n	800cc20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	fb02 f303 	mul.w	r3, r2, r3
 800cc2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	3350      	adds	r3, #80	; 0x50
 800cc30:	4618      	mov	r0, r3
 800cc32:	f002 fbd1 	bl	800f3d8 <pvPortMalloc>
 800cc36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d011      	beq.n	800cc62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	3350      	adds	r3, #80	; 0x50
 800cc46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc50:	79fa      	ldrb	r2, [r7, #7]
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	4613      	mov	r3, r2
 800cc58:	697a      	ldr	r2, [r7, #20]
 800cc5a:	68b9      	ldr	r1, [r7, #8]
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f000 f805 	bl	800cc6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc62:	69bb      	ldr	r3, [r7, #24]
	}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3720      	adds	r7, #32
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
 800cc78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d103      	bne.n	800cc88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	69ba      	ldr	r2, [r7, #24]
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	e002      	b.n	800cc8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc9a:	2101      	movs	r1, #1
 800cc9c:	69b8      	ldr	r0, [r7, #24]
 800cc9e:	f7ff fecb 	bl	800ca38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	78fa      	ldrb	r2, [r7, #3]
 800cca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ccaa:	bf00      	nop
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b082      	sub	sp, #8
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00e      	beq.n	800ccde <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f8a1 	bl	800ce20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ccde:	bf00      	nop
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b086      	sub	sp, #24
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	4603      	mov	r3, r0
 800ccee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	6939      	ldr	r1, [r7, #16]
 800ccfe:	6978      	ldr	r0, [r7, #20]
 800cd00:	f7ff ff7a 	bl	800cbf8 <xQueueGenericCreate>
 800cd04:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f7ff ffd3 	bl	800ccb2 <prvInitialiseMutex>

		return xNewQueue;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
	}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3718      	adds	r7, #24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b088      	sub	sp, #32
 800cd1a:	af02      	add	r7, sp, #8
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	6039      	str	r1, [r7, #0]
 800cd20:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cd22:	2301      	movs	r3, #1
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	2300      	movs	r3, #0
 800cd28:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	2200      	movs	r2, #0
 800cd32:	6939      	ldr	r1, [r7, #16]
 800cd34:	6978      	ldr	r0, [r7, #20]
 800cd36:	f7ff fee7 	bl	800cb08 <xQueueGenericCreateStatic>
 800cd3a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f7ff ffb8 	bl	800ccb2 <prvInitialiseMutex>

		return xNewQueue;
 800cd42:	68fb      	ldr	r3, [r7, #12]
	}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3718      	adds	r7, #24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cd4c:	b590      	push	{r4, r7, lr}
 800cd4e:	b087      	sub	sp, #28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10a      	bne.n	800cd74 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	60fb      	str	r3, [r7, #12]
}
 800cd70:	bf00      	nop
 800cd72:	e7fe      	b.n	800cd72 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	689c      	ldr	r4, [r3, #8]
 800cd78:	f001 fba6 	bl	800e4c8 <xTaskGetCurrentTaskHandle>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	429c      	cmp	r4, r3
 800cd80:	d111      	bne.n	800cda6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	1e5a      	subs	r2, r3, #1
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d105      	bne.n	800cda0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cd94:	2300      	movs	r3, #0
 800cd96:	2200      	movs	r2, #0
 800cd98:	2100      	movs	r1, #0
 800cd9a:	6938      	ldr	r0, [r7, #16]
 800cd9c:	f000 f840 	bl	800ce20 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cda0:	2301      	movs	r3, #1
 800cda2:	617b      	str	r3, [r7, #20]
 800cda4:	e001      	b.n	800cdaa <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cda6:	2300      	movs	r3, #0
 800cda8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cdaa:	697b      	ldr	r3, [r7, #20]
	}
 800cdac:	4618      	mov	r0, r3
 800cdae:	371c      	adds	r7, #28
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd90      	pop	{r4, r7, pc}

0800cdb4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cdb4:	b590      	push	{r4, r7, lr}
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d10a      	bne.n	800cdde <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	60fb      	str	r3, [r7, #12]
}
 800cdda:	bf00      	nop
 800cddc:	e7fe      	b.n	800cddc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	689c      	ldr	r4, [r3, #8]
 800cde2:	f001 fb71 	bl	800e4c8 <xTaskGetCurrentTaskHandle>
 800cde6:	4603      	mov	r3, r0
 800cde8:	429c      	cmp	r4, r3
 800cdea:	d107      	bne.n	800cdfc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	1c5a      	adds	r2, r3, #1
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	617b      	str	r3, [r7, #20]
 800cdfa:	e00c      	b.n	800ce16 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cdfc:	6839      	ldr	r1, [r7, #0]
 800cdfe:	6938      	ldr	r0, [r7, #16]
 800ce00:	f000 fa88 	bl	800d314 <xQueueSemaphoreTake>
 800ce04:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d004      	beq.n	800ce16 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	1c5a      	adds	r2, r3, #1
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ce16:	697b      	ldr	r3, [r7, #20]
	}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	371c      	adds	r7, #28
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd90      	pop	{r4, r7, pc}

0800ce20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b08e      	sub	sp, #56	; 0x38
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <xQueueGenericSend+0x32>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d103      	bne.n	800ce60 <xQueueGenericSend+0x40>
 800ce58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <xQueueGenericSend+0x44>
 800ce60:	2301      	movs	r3, #1
 800ce62:	e000      	b.n	800ce66 <xQueueGenericSend+0x46>
 800ce64:	2300      	movs	r3, #0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10a      	bne.n	800ce80 <xQueueGenericSend+0x60>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce7c:	bf00      	nop
 800ce7e:	e7fe      	b.n	800ce7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d103      	bne.n	800ce8e <xQueueGenericSend+0x6e>
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d101      	bne.n	800ce92 <xQueueGenericSend+0x72>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e000      	b.n	800ce94 <xQueueGenericSend+0x74>
 800ce92:	2300      	movs	r3, #0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10a      	bne.n	800ceae <xQueueGenericSend+0x8e>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	623b      	str	r3, [r7, #32]
}
 800ceaa:	bf00      	nop
 800ceac:	e7fe      	b.n	800ceac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceae:	f001 fb1b 	bl	800e4e8 <xTaskGetSchedulerState>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d102      	bne.n	800cebe <xQueueGenericSend+0x9e>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d101      	bne.n	800cec2 <xQueueGenericSend+0xa2>
 800cebe:	2301      	movs	r3, #1
 800cec0:	e000      	b.n	800cec4 <xQueueGenericSend+0xa4>
 800cec2:	2300      	movs	r3, #0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10a      	bne.n	800cede <xQueueGenericSend+0xbe>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	f383 8811 	msr	BASEPRI, r3
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	61fb      	str	r3, [r7, #28]
}
 800ceda:	bf00      	nop
 800cedc:	e7fe      	b.n	800cedc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cede:	f002 f959 	bl	800f194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d302      	bcc.n	800cef4 <xQueueGenericSend+0xd4>
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d129      	bne.n	800cf48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	68b9      	ldr	r1, [r7, #8]
 800cef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cefa:	f000 fb2f 	bl	800d55c <prvCopyDataToQueue>
 800cefe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d010      	beq.n	800cf2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0a:	3324      	adds	r3, #36	; 0x24
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f001 f919 	bl	800e144 <xTaskRemoveFromEventList>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d013      	beq.n	800cf40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf18:	4b3f      	ldr	r3, [pc, #252]	; (800d018 <xQueueGenericSend+0x1f8>)
 800cf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	e00a      	b.n	800cf40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf30:	4b39      	ldr	r3, [pc, #228]	; (800d018 <xQueueGenericSend+0x1f8>)
 800cf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cf40:	f002 f958 	bl	800f1f4 <vPortExitCritical>
				return pdPASS;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e063      	b.n	800d010 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d103      	bne.n	800cf56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf4e:	f002 f951 	bl	800f1f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	e05c      	b.n	800d010 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf5c:	f107 0314 	add.w	r3, r7, #20
 800cf60:	4618      	mov	r0, r3
 800cf62:	f001 f953 	bl	800e20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf66:	2301      	movs	r3, #1
 800cf68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf6a:	f002 f943 	bl	800f1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf6e:	f000 febf 	bl	800dcf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf72:	f002 f90f 	bl	800f194 <vPortEnterCritical>
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf7c:	b25b      	sxtb	r3, r3
 800cf7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf82:	d103      	bne.n	800cf8c <xQueueGenericSend+0x16c>
 800cf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf92:	b25b      	sxtb	r3, r3
 800cf94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf98:	d103      	bne.n	800cfa2 <xQueueGenericSend+0x182>
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfa2:	f002 f927 	bl	800f1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfa6:	1d3a      	adds	r2, r7, #4
 800cfa8:	f107 0314 	add.w	r3, r7, #20
 800cfac:	4611      	mov	r1, r2
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f001 f942 	bl	800e238 <xTaskCheckForTimeOut>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d124      	bne.n	800d004 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cfba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfbc:	f000 fbc6 	bl	800d74c <prvIsQueueFull>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d018      	beq.n	800cff8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	3310      	adds	r3, #16
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f001 f868 	bl	800e0a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cfd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfd6:	f000 fb51 	bl	800d67c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cfda:	f000 fe97 	bl	800dd0c <xTaskResumeAll>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f47f af7c 	bne.w	800cede <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cfe6:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <xQueueGenericSend+0x1f8>)
 800cfe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfec:	601a      	str	r2, [r3, #0]
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	e772      	b.n	800cede <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cffa:	f000 fb3f 	bl	800d67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cffe:	f000 fe85 	bl	800dd0c <xTaskResumeAll>
 800d002:	e76c      	b.n	800cede <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d006:	f000 fb39 	bl	800d67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d00a:	f000 fe7f 	bl	800dd0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d00e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d010:	4618      	mov	r0, r3
 800d012:	3738      	adds	r7, #56	; 0x38
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	e000ed04 	.word	0xe000ed04

0800d01c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b090      	sub	sp, #64	; 0x40
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10a      	bne.n	800d04a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d038:	f383 8811 	msr	BASEPRI, r3
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f3bf 8f4f 	dsb	sy
 800d044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d046:	bf00      	nop
 800d048:	e7fe      	b.n	800d048 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d103      	bne.n	800d058 <xQueueGenericSendFromISR+0x3c>
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d054:	2b00      	cmp	r3, #0
 800d056:	d101      	bne.n	800d05c <xQueueGenericSendFromISR+0x40>
 800d058:	2301      	movs	r3, #1
 800d05a:	e000      	b.n	800d05e <xQueueGenericSendFromISR+0x42>
 800d05c:	2300      	movs	r3, #0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10a      	bne.n	800d078 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d074:	bf00      	nop
 800d076:	e7fe      	b.n	800d076 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d103      	bne.n	800d086 <xQueueGenericSendFromISR+0x6a>
 800d07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d082:	2b01      	cmp	r3, #1
 800d084:	d101      	bne.n	800d08a <xQueueGenericSendFromISR+0x6e>
 800d086:	2301      	movs	r3, #1
 800d088:	e000      	b.n	800d08c <xQueueGenericSendFromISR+0x70>
 800d08a:	2300      	movs	r3, #0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10a      	bne.n	800d0a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	623b      	str	r3, [r7, #32]
}
 800d0a2:	bf00      	nop
 800d0a4:	e7fe      	b.n	800d0a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0a6:	f002 f957 	bl	800f358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d0aa:	f3ef 8211 	mrs	r2, BASEPRI
 800d0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	61fa      	str	r2, [r7, #28]
 800d0c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d0c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d302      	bcc.n	800d0d8 <xQueueGenericSendFromISR+0xbc>
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d12f      	bne.n	800d138 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0e8:	683a      	ldr	r2, [r7, #0]
 800d0ea:	68b9      	ldr	r1, [r7, #8]
 800d0ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0ee:	f000 fa35 	bl	800d55c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fa:	d112      	bne.n	800d122 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d100:	2b00      	cmp	r3, #0
 800d102:	d016      	beq.n	800d132 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	3324      	adds	r3, #36	; 0x24
 800d108:	4618      	mov	r0, r3
 800d10a:	f001 f81b 	bl	800e144 <xTaskRemoveFromEventList>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00e      	beq.n	800d132 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00b      	beq.n	800d132 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2201      	movs	r2, #1
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	e007      	b.n	800d132 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d122:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d126:	3301      	adds	r3, #1
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	b25a      	sxtb	r2, r3
 800d12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d132:	2301      	movs	r3, #1
 800d134:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d136:	e001      	b.n	800d13c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d138:	2300      	movs	r3, #0
 800d13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d146:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3740      	adds	r7, #64	; 0x40
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
	...

0800d154 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b08c      	sub	sp, #48	; 0x30
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d160:	2300      	movs	r3, #0
 800d162:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10a      	bne.n	800d184 <xQueueReceive+0x30>
	__asm volatile
 800d16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d172:	f383 8811 	msr	BASEPRI, r3
 800d176:	f3bf 8f6f 	isb	sy
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	623b      	str	r3, [r7, #32]
}
 800d180:	bf00      	nop
 800d182:	e7fe      	b.n	800d182 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d103      	bne.n	800d192 <xQueueReceive+0x3e>
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d101      	bne.n	800d196 <xQueueReceive+0x42>
 800d192:	2301      	movs	r3, #1
 800d194:	e000      	b.n	800d198 <xQueueReceive+0x44>
 800d196:	2300      	movs	r3, #0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10a      	bne.n	800d1b2 <xQueueReceive+0x5e>
	__asm volatile
 800d19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a0:	f383 8811 	msr	BASEPRI, r3
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	61fb      	str	r3, [r7, #28]
}
 800d1ae:	bf00      	nop
 800d1b0:	e7fe      	b.n	800d1b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1b2:	f001 f999 	bl	800e4e8 <xTaskGetSchedulerState>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d102      	bne.n	800d1c2 <xQueueReceive+0x6e>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <xQueueReceive+0x72>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e000      	b.n	800d1c8 <xQueueReceive+0x74>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10a      	bne.n	800d1e2 <xQueueReceive+0x8e>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	61bb      	str	r3, [r7, #24]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1e2:	f001 ffd7 	bl	800f194 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d01f      	beq.n	800d232 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1f2:	68b9      	ldr	r1, [r7, #8]
 800d1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1f6:	f000 fa1b 	bl	800d630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	1e5a      	subs	r2, r3, #1
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00f      	beq.n	800d22a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20c:	3310      	adds	r3, #16
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 ff98 	bl	800e144 <xTaskRemoveFromEventList>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d007      	beq.n	800d22a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d21a:	4b3d      	ldr	r3, [pc, #244]	; (800d310 <xQueueReceive+0x1bc>)
 800d21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d220:	601a      	str	r2, [r3, #0]
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d22a:	f001 ffe3 	bl	800f1f4 <vPortExitCritical>
				return pdPASS;
 800d22e:	2301      	movs	r3, #1
 800d230:	e069      	b.n	800d306 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d103      	bne.n	800d240 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d238:	f001 ffdc 	bl	800f1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d23c:	2300      	movs	r3, #0
 800d23e:	e062      	b.n	800d306 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d242:	2b00      	cmp	r3, #0
 800d244:	d106      	bne.n	800d254 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d246:	f107 0310 	add.w	r3, r7, #16
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 ffde 	bl	800e20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d250:	2301      	movs	r3, #1
 800d252:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d254:	f001 ffce 	bl	800f1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d258:	f000 fd4a 	bl	800dcf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d25c:	f001 ff9a 	bl	800f194 <vPortEnterCritical>
 800d260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d266:	b25b      	sxtb	r3, r3
 800d268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26c:	d103      	bne.n	800d276 <xQueueReceive+0x122>
 800d26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d27c:	b25b      	sxtb	r3, r3
 800d27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d282:	d103      	bne.n	800d28c <xQueueReceive+0x138>
 800d284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d286:	2200      	movs	r2, #0
 800d288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d28c:	f001 ffb2 	bl	800f1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d290:	1d3a      	adds	r2, r7, #4
 800d292:	f107 0310 	add.w	r3, r7, #16
 800d296:	4611      	mov	r1, r2
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 ffcd 	bl	800e238 <xTaskCheckForTimeOut>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d123      	bne.n	800d2ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a6:	f000 fa3b 	bl	800d720 <prvIsQueueEmpty>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d017      	beq.n	800d2e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	3324      	adds	r3, #36	; 0x24
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 fef3 	bl	800e0a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2c0:	f000 f9dc 	bl	800d67c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2c4:	f000 fd22 	bl	800dd0c <xTaskResumeAll>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d189      	bne.n	800d1e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d2ce:	4b10      	ldr	r3, [pc, #64]	; (800d310 <xQueueReceive+0x1bc>)
 800d2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	e780      	b.n	800d1e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2e2:	f000 f9cb 	bl	800d67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2e6:	f000 fd11 	bl	800dd0c <xTaskResumeAll>
 800d2ea:	e77a      	b.n	800d1e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ee:	f000 f9c5 	bl	800d67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2f2:	f000 fd0b 	bl	800dd0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2f8:	f000 fa12 	bl	800d720 <prvIsQueueEmpty>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f43f af6f 	beq.w	800d1e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d306:	4618      	mov	r0, r3
 800d308:	3730      	adds	r7, #48	; 0x30
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08e      	sub	sp, #56	; 0x38
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d31e:	2300      	movs	r3, #0
 800d320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d326:	2300      	movs	r3, #0
 800d328:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d10a      	bne.n	800d346 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	623b      	str	r3, [r7, #32]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00a      	beq.n	800d364 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	61fb      	str	r3, [r7, #28]
}
 800d360:	bf00      	nop
 800d362:	e7fe      	b.n	800d362 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d364:	f001 f8c0 	bl	800e4e8 <xTaskGetSchedulerState>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d102      	bne.n	800d374 <xQueueSemaphoreTake+0x60>
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <xQueueSemaphoreTake+0x64>
 800d374:	2301      	movs	r3, #1
 800d376:	e000      	b.n	800d37a <xQueueSemaphoreTake+0x66>
 800d378:	2300      	movs	r3, #0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	61bb      	str	r3, [r7, #24]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d394:	f001 fefe 	bl	800f194 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d024      	beq.n	800d3ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a6:	1e5a      	subs	r2, r3, #1
 800d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d104      	bne.n	800d3be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d3b4:	f001 fa0e 	bl	800e7d4 <pvTaskIncrementMutexHeldCount>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00f      	beq.n	800d3e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c8:	3310      	adds	r3, #16
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 feba 	bl	800e144 <xTaskRemoveFromEventList>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d007      	beq.n	800d3e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d3d6:	4b54      	ldr	r3, [pc, #336]	; (800d528 <xQueueSemaphoreTake+0x214>)
 800d3d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3dc:	601a      	str	r2, [r3, #0]
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d3e6:	f001 ff05 	bl	800f1f4 <vPortExitCritical>
				return pdPASS;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e097      	b.n	800d51e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d111      	bne.n	800d418 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00a      	beq.n	800d410 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	617b      	str	r3, [r7, #20]
}
 800d40c:	bf00      	nop
 800d40e:	e7fe      	b.n	800d40e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d410:	f001 fef0 	bl	800f1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d414:	2300      	movs	r3, #0
 800d416:	e082      	b.n	800d51e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d106      	bne.n	800d42c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d41e:	f107 030c 	add.w	r3, r7, #12
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fef2 	bl	800e20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d428:	2301      	movs	r3, #1
 800d42a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d42c:	f001 fee2 	bl	800f1f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d430:	f000 fc5e 	bl	800dcf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d434:	f001 feae 	bl	800f194 <vPortEnterCritical>
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d43e:	b25b      	sxtb	r3, r3
 800d440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d444:	d103      	bne.n	800d44e <xQueueSemaphoreTake+0x13a>
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	2200      	movs	r2, #0
 800d44a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d454:	b25b      	sxtb	r3, r3
 800d456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45a:	d103      	bne.n	800d464 <xQueueSemaphoreTake+0x150>
 800d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d464:	f001 fec6 	bl	800f1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d468:	463a      	mov	r2, r7
 800d46a:	f107 030c 	add.w	r3, r7, #12
 800d46e:	4611      	mov	r1, r2
 800d470:	4618      	mov	r0, r3
 800d472:	f000 fee1 	bl	800e238 <xTaskCheckForTimeOut>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d132      	bne.n	800d4e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d47c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d47e:	f000 f94f 	bl	800d720 <prvIsQueueEmpty>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d026      	beq.n	800d4d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d109      	bne.n	800d4a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d490:	f001 fe80 	bl	800f194 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	4618      	mov	r0, r3
 800d49a:	f001 f843 	bl	800e524 <xTaskPriorityInherit>
 800d49e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d4a0:	f001 fea8 	bl	800f1f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a6:	3324      	adds	r3, #36	; 0x24
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	4611      	mov	r1, r2
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 fdf9 	bl	800e0a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4b4:	f000 f8e2 	bl	800d67c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4b8:	f000 fc28 	bl	800dd0c <xTaskResumeAll>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f47f af68 	bne.w	800d394 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d4c4:	4b18      	ldr	r3, [pc, #96]	; (800d528 <xQueueSemaphoreTake+0x214>)
 800d4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	e75e      	b.n	800d394 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d4d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4d8:	f000 f8d0 	bl	800d67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4dc:	f000 fc16 	bl	800dd0c <xTaskResumeAll>
 800d4e0:	e758      	b.n	800d394 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d4e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4e4:	f000 f8ca 	bl	800d67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4e8:	f000 fc10 	bl	800dd0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4ee:	f000 f917 	bl	800d720 <prvIsQueueEmpty>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	f43f af4d 	beq.w	800d394 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00d      	beq.n	800d51c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d500:	f001 fe48 	bl	800f194 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d506:	f000 f811 	bl	800d52c <prvGetDisinheritPriorityAfterTimeout>
 800d50a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d512:	4618      	mov	r0, r3
 800d514:	f001 f8dc 	bl	800e6d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d518:	f001 fe6c 	bl	800f1f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d51c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3738      	adds	r7, #56	; 0x38
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	e000ed04 	.word	0xe000ed04

0800d52c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d006      	beq.n	800d54a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	e001      	b.n	800d54e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d54a:	2300      	movs	r3, #0
 800d54c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d54e:	68fb      	ldr	r3, [r7, #12]
	}
 800d550:	4618      	mov	r0, r3
 800d552:	3714      	adds	r7, #20
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d568:	2300      	movs	r3, #0
 800d56a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d570:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d576:	2b00      	cmp	r3, #0
 800d578:	d10d      	bne.n	800d596 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d14d      	bne.n	800d61e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	4618      	mov	r0, r3
 800d588:	f001 f834 	bl	800e5f4 <xTaskPriorityDisinherit>
 800d58c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	609a      	str	r2, [r3, #8]
 800d594:	e043      	b.n	800d61e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d119      	bne.n	800d5d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6858      	ldr	r0, [r3, #4]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	68b9      	ldr	r1, [r7, #8]
 800d5a8:	f002 fe60 	bl	801026c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b4:	441a      	add	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d32b      	bcc.n	800d61e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	605a      	str	r2, [r3, #4]
 800d5ce:	e026      	b.n	800d61e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	68d8      	ldr	r0, [r3, #12]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d8:	461a      	mov	r2, r3
 800d5da:	68b9      	ldr	r1, [r7, #8]
 800d5dc:	f002 fe46 	bl	801026c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	68da      	ldr	r2, [r3, #12]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e8:	425b      	negs	r3, r3
 800d5ea:	441a      	add	r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68da      	ldr	r2, [r3, #12]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d207      	bcs.n	800d60c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	689a      	ldr	r2, [r3, #8]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d604:	425b      	negs	r3, r3
 800d606:	441a      	add	r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d105      	bne.n	800d61e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	3b01      	subs	r3, #1
 800d61c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d626:	697b      	ldr	r3, [r7, #20]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3718      	adds	r7, #24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d018      	beq.n	800d674 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	441a      	add	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	68da      	ldr	r2, [r3, #12]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d303      	bcc.n	800d664 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	68d9      	ldr	r1, [r3, #12]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66c:	461a      	mov	r2, r3
 800d66e:	6838      	ldr	r0, [r7, #0]
 800d670:	f002 fdfc 	bl	801026c <memcpy>
	}
}
 800d674:	bf00      	nop
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d684:	f001 fd86 	bl	800f194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d68e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d690:	e011      	b.n	800d6b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d696:	2b00      	cmp	r3, #0
 800d698:	d012      	beq.n	800d6c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	3324      	adds	r3, #36	; 0x24
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 fd50 	bl	800e144 <xTaskRemoveFromEventList>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6aa:	f000 fe27 	bl	800e2fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	dce9      	bgt.n	800d692 <prvUnlockQueue+0x16>
 800d6be:	e000      	b.n	800d6c2 <prvUnlockQueue+0x46>
					break;
 800d6c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	22ff      	movs	r2, #255	; 0xff
 800d6c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6ca:	f001 fd93 	bl	800f1f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6ce:	f001 fd61 	bl	800f194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6da:	e011      	b.n	800d700 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d012      	beq.n	800d70a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3310      	adds	r3, #16
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 fd2b 	bl	800e144 <xTaskRemoveFromEventList>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6f4:	f000 fe02 	bl	800e2fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d704:	2b00      	cmp	r3, #0
 800d706:	dce9      	bgt.n	800d6dc <prvUnlockQueue+0x60>
 800d708:	e000      	b.n	800d70c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d70a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	22ff      	movs	r2, #255	; 0xff
 800d710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d714:	f001 fd6e 	bl	800f1f4 <vPortExitCritical>
}
 800d718:	bf00      	nop
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d728:	f001 fd34 	bl	800f194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d730:	2b00      	cmp	r3, #0
 800d732:	d102      	bne.n	800d73a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d734:	2301      	movs	r3, #1
 800d736:	60fb      	str	r3, [r7, #12]
 800d738:	e001      	b.n	800d73e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d73a:	2300      	movs	r3, #0
 800d73c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d73e:	f001 fd59 	bl	800f1f4 <vPortExitCritical>

	return xReturn;
 800d742:	68fb      	ldr	r3, [r7, #12]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d754:	f001 fd1e 	bl	800f194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d760:	429a      	cmp	r2, r3
 800d762:	d102      	bne.n	800d76a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d764:	2301      	movs	r3, #1
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	e001      	b.n	800d76e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d76a:	2300      	movs	r3, #0
 800d76c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d76e:	f001 fd41 	bl	800f1f4 <vPortExitCritical>

	return xReturn;
 800d772:	68fb      	ldr	r3, [r7, #12]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d786:	2300      	movs	r3, #0
 800d788:	60fb      	str	r3, [r7, #12]
 800d78a:	e014      	b.n	800d7b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d78c:	4a0f      	ldr	r2, [pc, #60]	; (800d7cc <vQueueAddToRegistry+0x50>)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10b      	bne.n	800d7b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d798:	490c      	ldr	r1, [pc, #48]	; (800d7cc <vQueueAddToRegistry+0x50>)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d7a2:	4a0a      	ldr	r2, [pc, #40]	; (800d7cc <vQueueAddToRegistry+0x50>)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	00db      	lsls	r3, r3, #3
 800d7a8:	4413      	add	r3, r2
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d7ae:	e006      	b.n	800d7be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	60fb      	str	r3, [r7, #12]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b07      	cmp	r3, #7
 800d7ba:	d9e7      	bls.n	800d78c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7bc:	bf00      	nop
 800d7be:	bf00      	nop
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	20001034 	.word	0x20001034

0800d7d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d7e0:	f001 fcd8 	bl	800f194 <vPortEnterCritical>
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ea:	b25b      	sxtb	r3, r3
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f0:	d103      	bne.n	800d7fa <vQueueWaitForMessageRestricted+0x2a>
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d800:	b25b      	sxtb	r3, r3
 800d802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d806:	d103      	bne.n	800d810 <vQueueWaitForMessageRestricted+0x40>
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d810:	f001 fcf0 	bl	800f1f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d106      	bne.n	800d82a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	3324      	adds	r3, #36	; 0x24
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	4618      	mov	r0, r3
 800d826:	f000 fc61 	bl	800e0ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d82a:	6978      	ldr	r0, [r7, #20]
 800d82c:	f7ff ff26 	bl	800d67c <prvUnlockQueue>
	}
 800d830:	bf00      	nop
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b08e      	sub	sp, #56	; 0x38
 800d83c:	af04      	add	r7, sp, #16
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
 800d844:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10a      	bne.n	800d862 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	623b      	str	r3, [r7, #32]
}
 800d85e:	bf00      	nop
 800d860:	e7fe      	b.n	800d860 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10a      	bne.n	800d87e <xTaskCreateStatic+0x46>
	__asm volatile
 800d868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	61fb      	str	r3, [r7, #28]
}
 800d87a:	bf00      	nop
 800d87c:	e7fe      	b.n	800d87c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d87e:	23bc      	movs	r3, #188	; 0xbc
 800d880:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	2bbc      	cmp	r3, #188	; 0xbc
 800d886:	d00a      	beq.n	800d89e <xTaskCreateStatic+0x66>
	__asm volatile
 800d888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	61bb      	str	r3, [r7, #24]
}
 800d89a:	bf00      	nop
 800d89c:	e7fe      	b.n	800d89c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d89e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d01e      	beq.n	800d8e4 <xTaskCreateStatic+0xac>
 800d8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d01b      	beq.n	800d8e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d8be:	2300      	movs	r3, #0
 800d8c0:	9303      	str	r3, [sp, #12]
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	9302      	str	r3, [sp, #8]
 800d8c6:	f107 0314 	add.w	r3, r7, #20
 800d8ca:	9301      	str	r3, [sp, #4]
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	68b9      	ldr	r1, [r7, #8]
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f000 f850 	bl	800d97c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8de:	f000 f8f3 	bl	800dac8 <prvAddNewTaskToReadyList>
 800d8e2:	e001      	b.n	800d8e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8e8:	697b      	ldr	r3, [r7, #20]
	}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3728      	adds	r7, #40	; 0x28
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b08c      	sub	sp, #48	; 0x30
 800d8f6:	af04      	add	r7, sp, #16
 800d8f8:	60f8      	str	r0, [r7, #12]
 800d8fa:	60b9      	str	r1, [r7, #8]
 800d8fc:	603b      	str	r3, [r7, #0]
 800d8fe:	4613      	mov	r3, r2
 800d900:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d902:	88fb      	ldrh	r3, [r7, #6]
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4618      	mov	r0, r3
 800d908:	f001 fd66 	bl	800f3d8 <pvPortMalloc>
 800d90c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00e      	beq.n	800d932 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d914:	20bc      	movs	r0, #188	; 0xbc
 800d916:	f001 fd5f 	bl	800f3d8 <pvPortMalloc>
 800d91a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d003      	beq.n	800d92a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	697a      	ldr	r2, [r7, #20]
 800d926:	631a      	str	r2, [r3, #48]	; 0x30
 800d928:	e005      	b.n	800d936 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d92a:	6978      	ldr	r0, [r7, #20]
 800d92c:	f001 fe20 	bl	800f570 <vPortFree>
 800d930:	e001      	b.n	800d936 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d932:	2300      	movs	r3, #0
 800d934:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d017      	beq.n	800d96c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	2200      	movs	r2, #0
 800d940:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d944:	88fa      	ldrh	r2, [r7, #6]
 800d946:	2300      	movs	r3, #0
 800d948:	9303      	str	r3, [sp, #12]
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	9302      	str	r3, [sp, #8]
 800d94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	68b9      	ldr	r1, [r7, #8]
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f000 f80e 	bl	800d97c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d960:	69f8      	ldr	r0, [r7, #28]
 800d962:	f000 f8b1 	bl	800dac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d966:	2301      	movs	r3, #1
 800d968:	61bb      	str	r3, [r7, #24]
 800d96a:	e002      	b.n	800d972 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d96c:	f04f 33ff 	mov.w	r3, #4294967295
 800d970:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d972:	69bb      	ldr	r3, [r7, #24]
	}
 800d974:	4618      	mov	r0, r3
 800d976:	3720      	adds	r7, #32
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b088      	sub	sp, #32
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
 800d988:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	461a      	mov	r2, r3
 800d994:	21a5      	movs	r1, #165	; 0xa5
 800d996:	f002 fc77 	bl	8010288 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	4413      	add	r3, r2
 800d9aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	f023 0307 	bic.w	r3, r3, #7
 800d9b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	f003 0307 	and.w	r3, r3, #7
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00a      	beq.n	800d9d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	617b      	str	r3, [r7, #20]
}
 800d9d0:	bf00      	nop
 800d9d2:	e7fe      	b.n	800d9d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d01f      	beq.n	800da1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9da:	2300      	movs	r3, #0
 800d9dc:	61fb      	str	r3, [r7, #28]
 800d9de:	e012      	b.n	800da06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d9e0:	68ba      	ldr	r2, [r7, #8]
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	7819      	ldrb	r1, [r3, #0]
 800d9e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	3334      	adds	r3, #52	; 0x34
 800d9f0:	460a      	mov	r2, r1
 800d9f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d006      	beq.n	800da0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	3301      	adds	r3, #1
 800da04:	61fb      	str	r3, [r7, #28]
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	2b0f      	cmp	r3, #15
 800da0a:	d9e9      	bls.n	800d9e0 <prvInitialiseNewTask+0x64>
 800da0c:	e000      	b.n	800da10 <prvInitialiseNewTask+0x94>
			{
				break;
 800da0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da12:	2200      	movs	r2, #0
 800da14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da18:	e003      	b.n	800da22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	2b37      	cmp	r3, #55	; 0x37
 800da26:	d901      	bls.n	800da2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da28:	2337      	movs	r3, #55	; 0x37
 800da2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	2200      	movs	r2, #0
 800da3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	3304      	adds	r3, #4
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe ff64 	bl	800c910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4a:	3318      	adds	r3, #24
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fe ff5f 	bl	800c910 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6a:	2200      	movs	r2, #0
 800da6c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da72:	2200      	movs	r2, #0
 800da74:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	3354      	adds	r3, #84	; 0x54
 800da7c:	2260      	movs	r2, #96	; 0x60
 800da7e:	2100      	movs	r1, #0
 800da80:	4618      	mov	r0, r3
 800da82:	f002 fc01 	bl	8010288 <memset>
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	4a0c      	ldr	r2, [pc, #48]	; (800dabc <prvInitialiseNewTask+0x140>)
 800da8a:	659a      	str	r2, [r3, #88]	; 0x58
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	4a0c      	ldr	r2, [pc, #48]	; (800dac0 <prvInitialiseNewTask+0x144>)
 800da90:	65da      	str	r2, [r3, #92]	; 0x5c
 800da92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da94:	4a0b      	ldr	r2, [pc, #44]	; (800dac4 <prvInitialiseNewTask+0x148>)
 800da96:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	68f9      	ldr	r1, [r7, #12]
 800da9c:	69b8      	ldr	r0, [r7, #24]
 800da9e:	f001 fa4f 	bl	800ef40 <pxPortInitialiseStack>
 800daa2:	4602      	mov	r2, r0
 800daa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800daae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dab4:	bf00      	nop
 800dab6:	3720      	adds	r7, #32
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	080116a8 	.word	0x080116a8
 800dac0:	080116c8 	.word	0x080116c8
 800dac4:	08011688 	.word	0x08011688

0800dac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dad0:	f001 fb60 	bl	800f194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dad4:	4b2d      	ldr	r3, [pc, #180]	; (800db8c <prvAddNewTaskToReadyList+0xc4>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	3301      	adds	r3, #1
 800dada:	4a2c      	ldr	r2, [pc, #176]	; (800db8c <prvAddNewTaskToReadyList+0xc4>)
 800dadc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dade:	4b2c      	ldr	r3, [pc, #176]	; (800db90 <prvAddNewTaskToReadyList+0xc8>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d109      	bne.n	800dafa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dae6:	4a2a      	ldr	r2, [pc, #168]	; (800db90 <prvAddNewTaskToReadyList+0xc8>)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800daec:	4b27      	ldr	r3, [pc, #156]	; (800db8c <prvAddNewTaskToReadyList+0xc4>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d110      	bne.n	800db16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800daf4:	f000 fc26 	bl	800e344 <prvInitialiseTaskLists>
 800daf8:	e00d      	b.n	800db16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dafa:	4b26      	ldr	r3, [pc, #152]	; (800db94 <prvAddNewTaskToReadyList+0xcc>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d109      	bne.n	800db16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db02:	4b23      	ldr	r3, [pc, #140]	; (800db90 <prvAddNewTaskToReadyList+0xc8>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d802      	bhi.n	800db16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db10:	4a1f      	ldr	r2, [pc, #124]	; (800db90 <prvAddNewTaskToReadyList+0xc8>)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db16:	4b20      	ldr	r3, [pc, #128]	; (800db98 <prvAddNewTaskToReadyList+0xd0>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3301      	adds	r3, #1
 800db1c:	4a1e      	ldr	r2, [pc, #120]	; (800db98 <prvAddNewTaskToReadyList+0xd0>)
 800db1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db20:	4b1d      	ldr	r3, [pc, #116]	; (800db98 <prvAddNewTaskToReadyList+0xd0>)
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2c:	4b1b      	ldr	r3, [pc, #108]	; (800db9c <prvAddNewTaskToReadyList+0xd4>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	429a      	cmp	r2, r3
 800db32:	d903      	bls.n	800db3c <prvAddNewTaskToReadyList+0x74>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db38:	4a18      	ldr	r2, [pc, #96]	; (800db9c <prvAddNewTaskToReadyList+0xd4>)
 800db3a:	6013      	str	r3, [r2, #0]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db40:	4613      	mov	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4413      	add	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4a15      	ldr	r2, [pc, #84]	; (800dba0 <prvAddNewTaskToReadyList+0xd8>)
 800db4a:	441a      	add	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	3304      	adds	r3, #4
 800db50:	4619      	mov	r1, r3
 800db52:	4610      	mov	r0, r2
 800db54:	f7fe fee9 	bl	800c92a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db58:	f001 fb4c 	bl	800f1f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db5c:	4b0d      	ldr	r3, [pc, #52]	; (800db94 <prvAddNewTaskToReadyList+0xcc>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00e      	beq.n	800db82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db64:	4b0a      	ldr	r3, [pc, #40]	; (800db90 <prvAddNewTaskToReadyList+0xc8>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	429a      	cmp	r2, r3
 800db70:	d207      	bcs.n	800db82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db72:	4b0c      	ldr	r3, [pc, #48]	; (800dba4 <prvAddNewTaskToReadyList+0xdc>)
 800db74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db78:	601a      	str	r2, [r3, #0]
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db82:	bf00      	nop
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	20001548 	.word	0x20001548
 800db90:	20001074 	.word	0x20001074
 800db94:	20001554 	.word	0x20001554
 800db98:	20001564 	.word	0x20001564
 800db9c:	20001550 	.word	0x20001550
 800dba0:	20001078 	.word	0x20001078
 800dba4:	e000ed04 	.word	0xe000ed04

0800dba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d017      	beq.n	800dbea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dbba:	4b13      	ldr	r3, [pc, #76]	; (800dc08 <vTaskDelay+0x60>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00a      	beq.n	800dbd8 <vTaskDelay+0x30>
	__asm volatile
 800dbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	60bb      	str	r3, [r7, #8]
}
 800dbd4:	bf00      	nop
 800dbd6:	e7fe      	b.n	800dbd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dbd8:	f000 f88a 	bl	800dcf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dbdc:	2100      	movs	r1, #0
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 fe0c 	bl	800e7fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dbe4:	f000 f892 	bl	800dd0c <xTaskResumeAll>
 800dbe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d107      	bne.n	800dc00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dbf0:	4b06      	ldr	r3, [pc, #24]	; (800dc0c <vTaskDelay+0x64>)
 800dbf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbf6:	601a      	str	r2, [r3, #0]
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc00:	bf00      	nop
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	20001570 	.word	0x20001570
 800dc0c:	e000ed04 	.word	0xe000ed04

0800dc10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08a      	sub	sp, #40	; 0x28
 800dc14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc1e:	463a      	mov	r2, r7
 800dc20:	1d39      	adds	r1, r7, #4
 800dc22:	f107 0308 	add.w	r3, r7, #8
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fe fe1e 	bl	800c868 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	9202      	str	r2, [sp, #8]
 800dc34:	9301      	str	r3, [sp, #4]
 800dc36:	2300      	movs	r3, #0
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	460a      	mov	r2, r1
 800dc3e:	4924      	ldr	r1, [pc, #144]	; (800dcd0 <vTaskStartScheduler+0xc0>)
 800dc40:	4824      	ldr	r0, [pc, #144]	; (800dcd4 <vTaskStartScheduler+0xc4>)
 800dc42:	f7ff fdf9 	bl	800d838 <xTaskCreateStatic>
 800dc46:	4603      	mov	r3, r0
 800dc48:	4a23      	ldr	r2, [pc, #140]	; (800dcd8 <vTaskStartScheduler+0xc8>)
 800dc4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc4c:	4b22      	ldr	r3, [pc, #136]	; (800dcd8 <vTaskStartScheduler+0xc8>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc54:	2301      	movs	r3, #1
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	e001      	b.n	800dc5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d102      	bne.n	800dc6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dc64:	f000 fe1e 	bl	800e8a4 <xTimerCreateTimerTask>
 800dc68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d11b      	bne.n	800dca8 <vTaskStartScheduler+0x98>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	613b      	str	r3, [r7, #16]
}
 800dc82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc84:	4b15      	ldr	r3, [pc, #84]	; (800dcdc <vTaskStartScheduler+0xcc>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	3354      	adds	r3, #84	; 0x54
 800dc8a:	4a15      	ldr	r2, [pc, #84]	; (800dce0 <vTaskStartScheduler+0xd0>)
 800dc8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc8e:	4b15      	ldr	r3, [pc, #84]	; (800dce4 <vTaskStartScheduler+0xd4>)
 800dc90:	f04f 32ff 	mov.w	r2, #4294967295
 800dc94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc96:	4b14      	ldr	r3, [pc, #80]	; (800dce8 <vTaskStartScheduler+0xd8>)
 800dc98:	2201      	movs	r2, #1
 800dc9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc9c:	4b13      	ldr	r3, [pc, #76]	; (800dcec <vTaskStartScheduler+0xdc>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dca2:	f001 f9d5 	bl	800f050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dca6:	e00e      	b.n	800dcc6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcae:	d10a      	bne.n	800dcc6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800dcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	60fb      	str	r3, [r7, #12]
}
 800dcc2:	bf00      	nop
 800dcc4:	e7fe      	b.n	800dcc4 <vTaskStartScheduler+0xb4>
}
 800dcc6:	bf00      	nop
 800dcc8:	3718      	adds	r7, #24
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	0801080c 	.word	0x0801080c
 800dcd4:	0800e315 	.word	0x0800e315
 800dcd8:	2000156c 	.word	0x2000156c
 800dcdc:	20001074 	.word	0x20001074
 800dce0:	20000138 	.word	0x20000138
 800dce4:	20001568 	.word	0x20001568
 800dce8:	20001554 	.word	0x20001554
 800dcec:	2000154c 	.word	0x2000154c

0800dcf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dcf4:	4b04      	ldr	r3, [pc, #16]	; (800dd08 <vTaskSuspendAll+0x18>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	4a03      	ldr	r2, [pc, #12]	; (800dd08 <vTaskSuspendAll+0x18>)
 800dcfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dcfe:	bf00      	nop
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr
 800dd08:	20001570 	.word	0x20001570

0800dd0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd16:	2300      	movs	r3, #0
 800dd18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd1a:	4b42      	ldr	r3, [pc, #264]	; (800de24 <xTaskResumeAll+0x118>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d10a      	bne.n	800dd38 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	603b      	str	r3, [r7, #0]
}
 800dd34:	bf00      	nop
 800dd36:	e7fe      	b.n	800dd36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd38:	f001 fa2c 	bl	800f194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd3c:	4b39      	ldr	r3, [pc, #228]	; (800de24 <xTaskResumeAll+0x118>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	3b01      	subs	r3, #1
 800dd42:	4a38      	ldr	r2, [pc, #224]	; (800de24 <xTaskResumeAll+0x118>)
 800dd44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd46:	4b37      	ldr	r3, [pc, #220]	; (800de24 <xTaskResumeAll+0x118>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d162      	bne.n	800de14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd4e:	4b36      	ldr	r3, [pc, #216]	; (800de28 <xTaskResumeAll+0x11c>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d05e      	beq.n	800de14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd56:	e02f      	b.n	800ddb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd58:	4b34      	ldr	r3, [pc, #208]	; (800de2c <xTaskResumeAll+0x120>)
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	3318      	adds	r3, #24
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fe fe3d 	bl	800c9e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fe fe38 	bl	800c9e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd78:	4b2d      	ldr	r3, [pc, #180]	; (800de30 <xTaskResumeAll+0x124>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d903      	bls.n	800dd88 <xTaskResumeAll+0x7c>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd84:	4a2a      	ldr	r2, [pc, #168]	; (800de30 <xTaskResumeAll+0x124>)
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4413      	add	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4a27      	ldr	r2, [pc, #156]	; (800de34 <xTaskResumeAll+0x128>)
 800dd96:	441a      	add	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	4610      	mov	r0, r2
 800dda0:	f7fe fdc3 	bl	800c92a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda8:	4b23      	ldr	r3, [pc, #140]	; (800de38 <xTaskResumeAll+0x12c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d302      	bcc.n	800ddb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ddb2:	4b22      	ldr	r3, [pc, #136]	; (800de3c <xTaskResumeAll+0x130>)
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddb8:	4b1c      	ldr	r3, [pc, #112]	; (800de2c <xTaskResumeAll+0x120>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1cb      	bne.n	800dd58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ddc6:	f000 fb5f 	bl	800e488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ddca:	4b1d      	ldr	r3, [pc, #116]	; (800de40 <xTaskResumeAll+0x134>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d010      	beq.n	800ddf8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ddd6:	f000 f847 	bl	800de68 <xTaskIncrementTick>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dde0:	4b16      	ldr	r3, [pc, #88]	; (800de3c <xTaskResumeAll+0x130>)
 800dde2:	2201      	movs	r2, #1
 800dde4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	3b01      	subs	r3, #1
 800ddea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d1f1      	bne.n	800ddd6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ddf2:	4b13      	ldr	r3, [pc, #76]	; (800de40 <xTaskResumeAll+0x134>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ddf8:	4b10      	ldr	r3, [pc, #64]	; (800de3c <xTaskResumeAll+0x130>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d009      	beq.n	800de14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de00:	2301      	movs	r3, #1
 800de02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de04:	4b0f      	ldr	r3, [pc, #60]	; (800de44 <xTaskResumeAll+0x138>)
 800de06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de0a:	601a      	str	r2, [r3, #0]
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de14:	f001 f9ee 	bl	800f1f4 <vPortExitCritical>

	return xAlreadyYielded;
 800de18:	68bb      	ldr	r3, [r7, #8]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	20001570 	.word	0x20001570
 800de28:	20001548 	.word	0x20001548
 800de2c:	20001508 	.word	0x20001508
 800de30:	20001550 	.word	0x20001550
 800de34:	20001078 	.word	0x20001078
 800de38:	20001074 	.word	0x20001074
 800de3c:	2000155c 	.word	0x2000155c
 800de40:	20001558 	.word	0x20001558
 800de44:	e000ed04 	.word	0xe000ed04

0800de48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de4e:	4b05      	ldr	r3, [pc, #20]	; (800de64 <xTaskGetTickCount+0x1c>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de54:	687b      	ldr	r3, [r7, #4]
}
 800de56:	4618      	mov	r0, r3
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	2000154c 	.word	0x2000154c

0800de68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de6e:	2300      	movs	r3, #0
 800de70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de72:	4b4f      	ldr	r3, [pc, #316]	; (800dfb0 <xTaskIncrementTick+0x148>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	f040 808f 	bne.w	800df9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de7c:	4b4d      	ldr	r3, [pc, #308]	; (800dfb4 <xTaskIncrementTick+0x14c>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	3301      	adds	r3, #1
 800de82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de84:	4a4b      	ldr	r2, [pc, #300]	; (800dfb4 <xTaskIncrementTick+0x14c>)
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d120      	bne.n	800ded2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800de90:	4b49      	ldr	r3, [pc, #292]	; (800dfb8 <xTaskIncrementTick+0x150>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00a      	beq.n	800deb0 <xTaskIncrementTick+0x48>
	__asm volatile
 800de9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	603b      	str	r3, [r7, #0]
}
 800deac:	bf00      	nop
 800deae:	e7fe      	b.n	800deae <xTaskIncrementTick+0x46>
 800deb0:	4b41      	ldr	r3, [pc, #260]	; (800dfb8 <xTaskIncrementTick+0x150>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	60fb      	str	r3, [r7, #12]
 800deb6:	4b41      	ldr	r3, [pc, #260]	; (800dfbc <xTaskIncrementTick+0x154>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a3f      	ldr	r2, [pc, #252]	; (800dfb8 <xTaskIncrementTick+0x150>)
 800debc:	6013      	str	r3, [r2, #0]
 800debe:	4a3f      	ldr	r2, [pc, #252]	; (800dfbc <xTaskIncrementTick+0x154>)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6013      	str	r3, [r2, #0]
 800dec4:	4b3e      	ldr	r3, [pc, #248]	; (800dfc0 <xTaskIncrementTick+0x158>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	3301      	adds	r3, #1
 800deca:	4a3d      	ldr	r2, [pc, #244]	; (800dfc0 <xTaskIncrementTick+0x158>)
 800decc:	6013      	str	r3, [r2, #0]
 800dece:	f000 fadb 	bl	800e488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ded2:	4b3c      	ldr	r3, [pc, #240]	; (800dfc4 <xTaskIncrementTick+0x15c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	693a      	ldr	r2, [r7, #16]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d349      	bcc.n	800df70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dedc:	4b36      	ldr	r3, [pc, #216]	; (800dfb8 <xTaskIncrementTick+0x150>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d104      	bne.n	800def0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dee6:	4b37      	ldr	r3, [pc, #220]	; (800dfc4 <xTaskIncrementTick+0x15c>)
 800dee8:	f04f 32ff 	mov.w	r2, #4294967295
 800deec:	601a      	str	r2, [r3, #0]
					break;
 800deee:	e03f      	b.n	800df70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800def0:	4b31      	ldr	r3, [pc, #196]	; (800dfb8 <xTaskIncrementTick+0x150>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df00:	693a      	ldr	r2, [r7, #16]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d203      	bcs.n	800df10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df08:	4a2e      	ldr	r2, [pc, #184]	; (800dfc4 <xTaskIncrementTick+0x15c>)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df0e:	e02f      	b.n	800df70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	3304      	adds	r3, #4
 800df14:	4618      	mov	r0, r3
 800df16:	f7fe fd65 	bl	800c9e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d004      	beq.n	800df2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	3318      	adds	r3, #24
 800df26:	4618      	mov	r0, r3
 800df28:	f7fe fd5c 	bl	800c9e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df30:	4b25      	ldr	r3, [pc, #148]	; (800dfc8 <xTaskIncrementTick+0x160>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	429a      	cmp	r2, r3
 800df36:	d903      	bls.n	800df40 <xTaskIncrementTick+0xd8>
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3c:	4a22      	ldr	r2, [pc, #136]	; (800dfc8 <xTaskIncrementTick+0x160>)
 800df3e:	6013      	str	r3, [r2, #0]
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df44:	4613      	mov	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4413      	add	r3, r2
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	4a1f      	ldr	r2, [pc, #124]	; (800dfcc <xTaskIncrementTick+0x164>)
 800df4e:	441a      	add	r2, r3
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	3304      	adds	r3, #4
 800df54:	4619      	mov	r1, r3
 800df56:	4610      	mov	r0, r2
 800df58:	f7fe fce7 	bl	800c92a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df60:	4b1b      	ldr	r3, [pc, #108]	; (800dfd0 <xTaskIncrementTick+0x168>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df66:	429a      	cmp	r2, r3
 800df68:	d3b8      	bcc.n	800dedc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800df6a:	2301      	movs	r3, #1
 800df6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df6e:	e7b5      	b.n	800dedc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df70:	4b17      	ldr	r3, [pc, #92]	; (800dfd0 <xTaskIncrementTick+0x168>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df76:	4915      	ldr	r1, [pc, #84]	; (800dfcc <xTaskIncrementTick+0x164>)
 800df78:	4613      	mov	r3, r2
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4413      	add	r3, r2
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	440b      	add	r3, r1
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d901      	bls.n	800df8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800df88:	2301      	movs	r3, #1
 800df8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800df8c:	4b11      	ldr	r3, [pc, #68]	; (800dfd4 <xTaskIncrementTick+0x16c>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d007      	beq.n	800dfa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800df94:	2301      	movs	r3, #1
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	e004      	b.n	800dfa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800df9a:	4b0f      	ldr	r3, [pc, #60]	; (800dfd8 <xTaskIncrementTick+0x170>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	4a0d      	ldr	r2, [pc, #52]	; (800dfd8 <xTaskIncrementTick+0x170>)
 800dfa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dfa4:	697b      	ldr	r3, [r7, #20]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3718      	adds	r7, #24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	20001570 	.word	0x20001570
 800dfb4:	2000154c 	.word	0x2000154c
 800dfb8:	20001500 	.word	0x20001500
 800dfbc:	20001504 	.word	0x20001504
 800dfc0:	20001560 	.word	0x20001560
 800dfc4:	20001568 	.word	0x20001568
 800dfc8:	20001550 	.word	0x20001550
 800dfcc:	20001078 	.word	0x20001078
 800dfd0:	20001074 	.word	0x20001074
 800dfd4:	2000155c 	.word	0x2000155c
 800dfd8:	20001558 	.word	0x20001558

0800dfdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dfe2:	4b2a      	ldr	r3, [pc, #168]	; (800e08c <vTaskSwitchContext+0xb0>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dfea:	4b29      	ldr	r3, [pc, #164]	; (800e090 <vTaskSwitchContext+0xb4>)
 800dfec:	2201      	movs	r2, #1
 800dfee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dff0:	e046      	b.n	800e080 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dff2:	4b27      	ldr	r3, [pc, #156]	; (800e090 <vTaskSwitchContext+0xb4>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dff8:	4b26      	ldr	r3, [pc, #152]	; (800e094 <vTaskSwitchContext+0xb8>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	60fb      	str	r3, [r7, #12]
 800dffe:	e010      	b.n	800e022 <vTaskSwitchContext+0x46>
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10a      	bne.n	800e01c <vTaskSwitchContext+0x40>
	__asm volatile
 800e006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	607b      	str	r3, [r7, #4]
}
 800e018:	bf00      	nop
 800e01a:	e7fe      	b.n	800e01a <vTaskSwitchContext+0x3e>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	3b01      	subs	r3, #1
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	491d      	ldr	r1, [pc, #116]	; (800e098 <vTaskSwitchContext+0xbc>)
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	4613      	mov	r3, r2
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4413      	add	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	440b      	add	r3, r1
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d0e4      	beq.n	800e000 <vTaskSwitchContext+0x24>
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	4613      	mov	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4413      	add	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4a15      	ldr	r2, [pc, #84]	; (800e098 <vTaskSwitchContext+0xbc>)
 800e042:	4413      	add	r3, r2
 800e044:	60bb      	str	r3, [r7, #8]
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	685a      	ldr	r2, [r3, #4]
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	605a      	str	r2, [r3, #4]
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	3308      	adds	r3, #8
 800e058:	429a      	cmp	r2, r3
 800e05a:	d104      	bne.n	800e066 <vTaskSwitchContext+0x8a>
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	685a      	ldr	r2, [r3, #4]
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	605a      	str	r2, [r3, #4]
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	4a0b      	ldr	r2, [pc, #44]	; (800e09c <vTaskSwitchContext+0xc0>)
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	4a08      	ldr	r2, [pc, #32]	; (800e094 <vTaskSwitchContext+0xb8>)
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e076:	4b09      	ldr	r3, [pc, #36]	; (800e09c <vTaskSwitchContext+0xc0>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	3354      	adds	r3, #84	; 0x54
 800e07c:	4a08      	ldr	r2, [pc, #32]	; (800e0a0 <vTaskSwitchContext+0xc4>)
 800e07e:	6013      	str	r3, [r2, #0]
}
 800e080:	bf00      	nop
 800e082:	3714      	adds	r7, #20
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr
 800e08c:	20001570 	.word	0x20001570
 800e090:	2000155c 	.word	0x2000155c
 800e094:	20001550 	.word	0x20001550
 800e098:	20001078 	.word	0x20001078
 800e09c:	20001074 	.word	0x20001074
 800e0a0:	20000138 	.word	0x20000138

0800e0a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10a      	bne.n	800e0ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b8:	f383 8811 	msr	BASEPRI, r3
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	60fb      	str	r3, [r7, #12]
}
 800e0c6:	bf00      	nop
 800e0c8:	e7fe      	b.n	800e0c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0ca:	4b07      	ldr	r3, [pc, #28]	; (800e0e8 <vTaskPlaceOnEventList+0x44>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	3318      	adds	r3, #24
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7fe fc4d 	bl	800c972 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e0d8:	2101      	movs	r1, #1
 800e0da:	6838      	ldr	r0, [r7, #0]
 800e0dc:	f000 fb8e 	bl	800e7fc <prvAddCurrentTaskToDelayedList>
}
 800e0e0:	bf00      	nop
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	20001074 	.word	0x20001074

0800e0ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10a      	bne.n	800e114 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	617b      	str	r3, [r7, #20]
}
 800e110:	bf00      	nop
 800e112:	e7fe      	b.n	800e112 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e114:	4b0a      	ldr	r3, [pc, #40]	; (800e140 <vTaskPlaceOnEventListRestricted+0x54>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3318      	adds	r3, #24
 800e11a:	4619      	mov	r1, r3
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f7fe fc04 	bl	800c92a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e128:	f04f 33ff 	mov.w	r3, #4294967295
 800e12c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	68b8      	ldr	r0, [r7, #8]
 800e132:	f000 fb63 	bl	800e7fc <prvAddCurrentTaskToDelayedList>
	}
 800e136:	bf00      	nop
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	20001074 	.word	0x20001074

0800e144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d10a      	bne.n	800e170 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	60fb      	str	r3, [r7, #12]
}
 800e16c:	bf00      	nop
 800e16e:	e7fe      	b.n	800e16e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	3318      	adds	r3, #24
 800e174:	4618      	mov	r0, r3
 800e176:	f7fe fc35 	bl	800c9e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e17a:	4b1e      	ldr	r3, [pc, #120]	; (800e1f4 <xTaskRemoveFromEventList+0xb0>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d11d      	bne.n	800e1be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	3304      	adds	r3, #4
 800e186:	4618      	mov	r0, r3
 800e188:	f7fe fc2c 	bl	800c9e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e190:	4b19      	ldr	r3, [pc, #100]	; (800e1f8 <xTaskRemoveFromEventList+0xb4>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	429a      	cmp	r2, r3
 800e196:	d903      	bls.n	800e1a0 <xTaskRemoveFromEventList+0x5c>
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19c:	4a16      	ldr	r2, [pc, #88]	; (800e1f8 <xTaskRemoveFromEventList+0xb4>)
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4a13      	ldr	r2, [pc, #76]	; (800e1fc <xTaskRemoveFromEventList+0xb8>)
 800e1ae:	441a      	add	r2, r3
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	f7fe fbb7 	bl	800c92a <vListInsertEnd>
 800e1bc:	e005      	b.n	800e1ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	3318      	adds	r3, #24
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	480e      	ldr	r0, [pc, #56]	; (800e200 <xTaskRemoveFromEventList+0xbc>)
 800e1c6:	f7fe fbb0 	bl	800c92a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ce:	4b0d      	ldr	r3, [pc, #52]	; (800e204 <xTaskRemoveFromEventList+0xc0>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d905      	bls.n	800e1e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e1dc:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <xTaskRemoveFromEventList+0xc4>)
 800e1de:	2201      	movs	r2, #1
 800e1e0:	601a      	str	r2, [r3, #0]
 800e1e2:	e001      	b.n	800e1e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e1e8:	697b      	ldr	r3, [r7, #20]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3718      	adds	r7, #24
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20001570 	.word	0x20001570
 800e1f8:	20001550 	.word	0x20001550
 800e1fc:	20001078 	.word	0x20001078
 800e200:	20001508 	.word	0x20001508
 800e204:	20001074 	.word	0x20001074
 800e208:	2000155c 	.word	0x2000155c

0800e20c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e214:	4b06      	ldr	r3, [pc, #24]	; (800e230 <vTaskInternalSetTimeOutState+0x24>)
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e21c:	4b05      	ldr	r3, [pc, #20]	; (800e234 <vTaskInternalSetTimeOutState+0x28>)
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	605a      	str	r2, [r3, #4]
}
 800e224:	bf00      	nop
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	20001560 	.word	0x20001560
 800e234:	2000154c 	.word	0x2000154c

0800e238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b088      	sub	sp, #32
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d10a      	bne.n	800e25e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24c:	f383 8811 	msr	BASEPRI, r3
 800e250:	f3bf 8f6f 	isb	sy
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	613b      	str	r3, [r7, #16]
}
 800e25a:	bf00      	nop
 800e25c:	e7fe      	b.n	800e25c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d10a      	bne.n	800e27a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e268:	f383 8811 	msr	BASEPRI, r3
 800e26c:	f3bf 8f6f 	isb	sy
 800e270:	f3bf 8f4f 	dsb	sy
 800e274:	60fb      	str	r3, [r7, #12]
}
 800e276:	bf00      	nop
 800e278:	e7fe      	b.n	800e278 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e27a:	f000 ff8b 	bl	800f194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e27e:	4b1d      	ldr	r3, [pc, #116]	; (800e2f4 <xTaskCheckForTimeOut+0xbc>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	69ba      	ldr	r2, [r7, #24]
 800e28a:	1ad3      	subs	r3, r2, r3
 800e28c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e296:	d102      	bne.n	800e29e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e298:	2300      	movs	r3, #0
 800e29a:	61fb      	str	r3, [r7, #28]
 800e29c:	e023      	b.n	800e2e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	4b15      	ldr	r3, [pc, #84]	; (800e2f8 <xTaskCheckForTimeOut+0xc0>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d007      	beq.n	800e2ba <xTaskCheckForTimeOut+0x82>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	69ba      	ldr	r2, [r7, #24]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d302      	bcc.n	800e2ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	61fb      	str	r3, [r7, #28]
 800e2b8:	e015      	b.n	800e2e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	697a      	ldr	r2, [r7, #20]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d20b      	bcs.n	800e2dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	681a      	ldr	r2, [r3, #0]
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	1ad2      	subs	r2, r2, r3
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7ff ff9b 	bl	800e20c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	61fb      	str	r3, [r7, #28]
 800e2da:	e004      	b.n	800e2e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e2e6:	f000 ff85 	bl	800f1f4 <vPortExitCritical>

	return xReturn;
 800e2ea:	69fb      	ldr	r3, [r7, #28]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3720      	adds	r7, #32
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	2000154c 	.word	0x2000154c
 800e2f8:	20001560 	.word	0x20001560

0800e2fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e300:	4b03      	ldr	r3, [pc, #12]	; (800e310 <vTaskMissedYield+0x14>)
 800e302:	2201      	movs	r2, #1
 800e304:	601a      	str	r2, [r3, #0]
}
 800e306:	bf00      	nop
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	2000155c 	.word	0x2000155c

0800e314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e31c:	f000 f852 	bl	800e3c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e320:	4b06      	ldr	r3, [pc, #24]	; (800e33c <prvIdleTask+0x28>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d9f9      	bls.n	800e31c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e328:	4b05      	ldr	r3, [pc, #20]	; (800e340 <prvIdleTask+0x2c>)
 800e32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e32e:	601a      	str	r2, [r3, #0]
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e338:	e7f0      	b.n	800e31c <prvIdleTask+0x8>
 800e33a:	bf00      	nop
 800e33c:	20001078 	.word	0x20001078
 800e340:	e000ed04 	.word	0xe000ed04

0800e344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e34a:	2300      	movs	r3, #0
 800e34c:	607b      	str	r3, [r7, #4]
 800e34e:	e00c      	b.n	800e36a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	4613      	mov	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	4413      	add	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4a12      	ldr	r2, [pc, #72]	; (800e3a4 <prvInitialiseTaskLists+0x60>)
 800e35c:	4413      	add	r3, r2
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fe fab6 	bl	800c8d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	3301      	adds	r3, #1
 800e368:	607b      	str	r3, [r7, #4]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2b37      	cmp	r3, #55	; 0x37
 800e36e:	d9ef      	bls.n	800e350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e370:	480d      	ldr	r0, [pc, #52]	; (800e3a8 <prvInitialiseTaskLists+0x64>)
 800e372:	f7fe faad 	bl	800c8d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e376:	480d      	ldr	r0, [pc, #52]	; (800e3ac <prvInitialiseTaskLists+0x68>)
 800e378:	f7fe faaa 	bl	800c8d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e37c:	480c      	ldr	r0, [pc, #48]	; (800e3b0 <prvInitialiseTaskLists+0x6c>)
 800e37e:	f7fe faa7 	bl	800c8d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e382:	480c      	ldr	r0, [pc, #48]	; (800e3b4 <prvInitialiseTaskLists+0x70>)
 800e384:	f7fe faa4 	bl	800c8d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e388:	480b      	ldr	r0, [pc, #44]	; (800e3b8 <prvInitialiseTaskLists+0x74>)
 800e38a:	f7fe faa1 	bl	800c8d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e38e:	4b0b      	ldr	r3, [pc, #44]	; (800e3bc <prvInitialiseTaskLists+0x78>)
 800e390:	4a05      	ldr	r2, [pc, #20]	; (800e3a8 <prvInitialiseTaskLists+0x64>)
 800e392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e394:	4b0a      	ldr	r3, [pc, #40]	; (800e3c0 <prvInitialiseTaskLists+0x7c>)
 800e396:	4a05      	ldr	r2, [pc, #20]	; (800e3ac <prvInitialiseTaskLists+0x68>)
 800e398:	601a      	str	r2, [r3, #0]
}
 800e39a:	bf00      	nop
 800e39c:	3708      	adds	r7, #8
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	20001078 	.word	0x20001078
 800e3a8:	200014d8 	.word	0x200014d8
 800e3ac:	200014ec 	.word	0x200014ec
 800e3b0:	20001508 	.word	0x20001508
 800e3b4:	2000151c 	.word	0x2000151c
 800e3b8:	20001534 	.word	0x20001534
 800e3bc:	20001500 	.word	0x20001500
 800e3c0:	20001504 	.word	0x20001504

0800e3c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3ca:	e019      	b.n	800e400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e3cc:	f000 fee2 	bl	800f194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d0:	4b10      	ldr	r3, [pc, #64]	; (800e414 <prvCheckTasksWaitingTermination+0x50>)
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3304      	adds	r3, #4
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7fe fb01 	bl	800c9e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3e2:	4b0d      	ldr	r3, [pc, #52]	; (800e418 <prvCheckTasksWaitingTermination+0x54>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	4a0b      	ldr	r2, [pc, #44]	; (800e418 <prvCheckTasksWaitingTermination+0x54>)
 800e3ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e3ec:	4b0b      	ldr	r3, [pc, #44]	; (800e41c <prvCheckTasksWaitingTermination+0x58>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	4a0a      	ldr	r2, [pc, #40]	; (800e41c <prvCheckTasksWaitingTermination+0x58>)
 800e3f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3f6:	f000 fefd 	bl	800f1f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f810 	bl	800e420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e400:	4b06      	ldr	r3, [pc, #24]	; (800e41c <prvCheckTasksWaitingTermination+0x58>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1e1      	bne.n	800e3cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	2000151c 	.word	0x2000151c
 800e418:	20001548 	.word	0x20001548
 800e41c:	20001530 	.word	0x20001530

0800e420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	3354      	adds	r3, #84	; 0x54
 800e42c:	4618      	mov	r0, r3
 800e42e:	f002 f821 	bl	8010474 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d108      	bne.n	800e44e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e440:	4618      	mov	r0, r3
 800e442:	f001 f895 	bl	800f570 <vPortFree>
				vPortFree( pxTCB );
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 f892 	bl	800f570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e44c:	e018      	b.n	800e480 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e454:	2b01      	cmp	r3, #1
 800e456:	d103      	bne.n	800e460 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f001 f889 	bl	800f570 <vPortFree>
	}
 800e45e:	e00f      	b.n	800e480 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e466:	2b02      	cmp	r3, #2
 800e468:	d00a      	beq.n	800e480 <prvDeleteTCB+0x60>
	__asm volatile
 800e46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46e:	f383 8811 	msr	BASEPRI, r3
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	f3bf 8f4f 	dsb	sy
 800e47a:	60fb      	str	r3, [r7, #12]
}
 800e47c:	bf00      	nop
 800e47e:	e7fe      	b.n	800e47e <prvDeleteTCB+0x5e>
	}
 800e480:	bf00      	nop
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e48e:	4b0c      	ldr	r3, [pc, #48]	; (800e4c0 <prvResetNextTaskUnblockTime+0x38>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d104      	bne.n	800e4a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e498:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <prvResetNextTaskUnblockTime+0x3c>)
 800e49a:	f04f 32ff 	mov.w	r2, #4294967295
 800e49e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e4a0:	e008      	b.n	800e4b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4a2:	4b07      	ldr	r3, [pc, #28]	; (800e4c0 <prvResetNextTaskUnblockTime+0x38>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	4a04      	ldr	r2, [pc, #16]	; (800e4c4 <prvResetNextTaskUnblockTime+0x3c>)
 800e4b2:	6013      	str	r3, [r2, #0]
}
 800e4b4:	bf00      	nop
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	20001500 	.word	0x20001500
 800e4c4:	20001568 	.word	0x20001568

0800e4c8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e4ce:	4b05      	ldr	r3, [pc, #20]	; (800e4e4 <xTaskGetCurrentTaskHandle+0x1c>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e4d4:	687b      	ldr	r3, [r7, #4]
	}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	370c      	adds	r7, #12
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	20001074 	.word	0x20001074

0800e4e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e4ee:	4b0b      	ldr	r3, [pc, #44]	; (800e51c <xTaskGetSchedulerState+0x34>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d102      	bne.n	800e4fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	607b      	str	r3, [r7, #4]
 800e4fa:	e008      	b.n	800e50e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4fc:	4b08      	ldr	r3, [pc, #32]	; (800e520 <xTaskGetSchedulerState+0x38>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d102      	bne.n	800e50a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e504:	2302      	movs	r3, #2
 800e506:	607b      	str	r3, [r7, #4]
 800e508:	e001      	b.n	800e50e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e50a:	2300      	movs	r3, #0
 800e50c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e50e:	687b      	ldr	r3, [r7, #4]
	}
 800e510:	4618      	mov	r0, r3
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr
 800e51c:	20001554 	.word	0x20001554
 800e520:	20001570 	.word	0x20001570

0800e524 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e530:	2300      	movs	r3, #0
 800e532:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d051      	beq.n	800e5de <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53e:	4b2a      	ldr	r3, [pc, #168]	; (800e5e8 <xTaskPriorityInherit+0xc4>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e544:	429a      	cmp	r2, r3
 800e546:	d241      	bcs.n	800e5cc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	699b      	ldr	r3, [r3, #24]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	db06      	blt.n	800e55e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e550:	4b25      	ldr	r3, [pc, #148]	; (800e5e8 <xTaskPriorityInherit+0xc4>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	6959      	ldr	r1, [r3, #20]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e566:	4613      	mov	r3, r2
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	4413      	add	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	4a1f      	ldr	r2, [pc, #124]	; (800e5ec <xTaskPriorityInherit+0xc8>)
 800e570:	4413      	add	r3, r2
 800e572:	4299      	cmp	r1, r3
 800e574:	d122      	bne.n	800e5bc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	3304      	adds	r3, #4
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fe fa32 	bl	800c9e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e580:	4b19      	ldr	r3, [pc, #100]	; (800e5e8 <xTaskPriorityInherit+0xc4>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e58e:	4b18      	ldr	r3, [pc, #96]	; (800e5f0 <xTaskPriorityInherit+0xcc>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	429a      	cmp	r2, r3
 800e594:	d903      	bls.n	800e59e <xTaskPriorityInherit+0x7a>
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59a:	4a15      	ldr	r2, [pc, #84]	; (800e5f0 <xTaskPriorityInherit+0xcc>)
 800e59c:	6013      	str	r3, [r2, #0]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4413      	add	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	4a10      	ldr	r2, [pc, #64]	; (800e5ec <xTaskPriorityInherit+0xc8>)
 800e5ac:	441a      	add	r2, r3
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	3304      	adds	r3, #4
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	f7fe f9b8 	bl	800c92a <vListInsertEnd>
 800e5ba:	e004      	b.n	800e5c6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5bc:	4b0a      	ldr	r3, [pc, #40]	; (800e5e8 <xTaskPriorityInherit+0xc4>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	60fb      	str	r3, [r7, #12]
 800e5ca:	e008      	b.n	800e5de <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e5d0:	4b05      	ldr	r3, [pc, #20]	; (800e5e8 <xTaskPriorityInherit+0xc4>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d201      	bcs.n	800e5de <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5de:	68fb      	ldr	r3, [r7, #12]
	}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	20001074 	.word	0x20001074
 800e5ec:	20001078 	.word	0x20001078
 800e5f0:	20001550 	.word	0x20001550

0800e5f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e600:	2300      	movs	r3, #0
 800e602:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d056      	beq.n	800e6b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e60a:	4b2e      	ldr	r3, [pc, #184]	; (800e6c4 <xTaskPriorityDisinherit+0xd0>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	429a      	cmp	r2, r3
 800e612:	d00a      	beq.n	800e62a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	60fb      	str	r3, [r7, #12]
}
 800e626:	bf00      	nop
 800e628:	e7fe      	b.n	800e628 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d10a      	bne.n	800e648 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e636:	f383 8811 	msr	BASEPRI, r3
 800e63a:	f3bf 8f6f 	isb	sy
 800e63e:	f3bf 8f4f 	dsb	sy
 800e642:	60bb      	str	r3, [r7, #8]
}
 800e644:	bf00      	nop
 800e646:	e7fe      	b.n	800e646 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e64c:	1e5a      	subs	r2, r3, #1
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d02c      	beq.n	800e6b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e662:	2b00      	cmp	r3, #0
 800e664:	d128      	bne.n	800e6b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	3304      	adds	r3, #4
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fe f9ba 	bl	800c9e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e688:	4b0f      	ldr	r3, [pc, #60]	; (800e6c8 <xTaskPriorityDisinherit+0xd4>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d903      	bls.n	800e698 <xTaskPriorityDisinherit+0xa4>
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e694:	4a0c      	ldr	r2, [pc, #48]	; (800e6c8 <xTaskPriorityDisinherit+0xd4>)
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69c:	4613      	mov	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	4413      	add	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4a09      	ldr	r2, [pc, #36]	; (800e6cc <xTaskPriorityDisinherit+0xd8>)
 800e6a6:	441a      	add	r2, r3
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	3304      	adds	r3, #4
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	f7fe f93b 	bl	800c92a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6b8:	697b      	ldr	r3, [r7, #20]
	}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3718      	adds	r7, #24
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20001074 	.word	0x20001074
 800e6c8:	20001550 	.word	0x20001550
 800e6cc:	20001078 	.word	0x20001078

0800e6d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b088      	sub	sp, #32
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d06a      	beq.n	800e7be <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e6e8:	69bb      	ldr	r3, [r7, #24]
 800e6ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d10a      	bne.n	800e706 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	60fb      	str	r3, [r7, #12]
}
 800e702:	bf00      	nop
 800e704:	e7fe      	b.n	800e704 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d902      	bls.n	800e716 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	61fb      	str	r3, [r7, #28]
 800e714:	e002      	b.n	800e71c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e71a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e720:	69fa      	ldr	r2, [r7, #28]
 800e722:	429a      	cmp	r2, r3
 800e724:	d04b      	beq.n	800e7be <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e72a:	697a      	ldr	r2, [r7, #20]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d146      	bne.n	800e7be <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e730:	4b25      	ldr	r3, [pc, #148]	; (800e7c8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	69ba      	ldr	r2, [r7, #24]
 800e736:	429a      	cmp	r2, r3
 800e738:	d10a      	bne.n	800e750 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73e:	f383 8811 	msr	BASEPRI, r3
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	f3bf 8f4f 	dsb	sy
 800e74a:	60bb      	str	r3, [r7, #8]
}
 800e74c:	bf00      	nop
 800e74e:	e7fe      	b.n	800e74e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e754:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	69fa      	ldr	r2, [r7, #28]
 800e75a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	699b      	ldr	r3, [r3, #24]
 800e760:	2b00      	cmp	r3, #0
 800e762:	db04      	blt.n	800e76e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	6959      	ldr	r1, [r3, #20]
 800e772:	693a      	ldr	r2, [r7, #16]
 800e774:	4613      	mov	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4413      	add	r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	4a13      	ldr	r2, [pc, #76]	; (800e7cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e77e:	4413      	add	r3, r2
 800e780:	4299      	cmp	r1, r3
 800e782:	d11c      	bne.n	800e7be <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	3304      	adds	r3, #4
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fe f92b 	bl	800c9e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e792:	4b0f      	ldr	r3, [pc, #60]	; (800e7d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	429a      	cmp	r2, r3
 800e798:	d903      	bls.n	800e7a2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79e:	4a0c      	ldr	r2, [pc, #48]	; (800e7d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7a0:	6013      	str	r3, [r2, #0]
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	4413      	add	r3, r2
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	4a07      	ldr	r2, [pc, #28]	; (800e7cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e7b0:	441a      	add	r2, r3
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	4610      	mov	r0, r2
 800e7ba:	f7fe f8b6 	bl	800c92a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7be:	bf00      	nop
 800e7c0:	3720      	adds	r7, #32
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	20001074 	.word	0x20001074
 800e7cc:	20001078 	.word	0x20001078
 800e7d0:	20001550 	.word	0x20001550

0800e7d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e7d4:	b480      	push	{r7}
 800e7d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e7d8:	4b07      	ldr	r3, [pc, #28]	; (800e7f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d004      	beq.n	800e7ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e7e0:	4b05      	ldr	r3, [pc, #20]	; (800e7f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7e6:	3201      	adds	r2, #1
 800e7e8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e7ea:	4b03      	ldr	r3, [pc, #12]	; (800e7f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
	}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	20001074 	.word	0x20001074

0800e7fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e806:	4b21      	ldr	r3, [pc, #132]	; (800e88c <prvAddCurrentTaskToDelayedList+0x90>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e80c:	4b20      	ldr	r3, [pc, #128]	; (800e890 <prvAddCurrentTaskToDelayedList+0x94>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	3304      	adds	r3, #4
 800e812:	4618      	mov	r0, r3
 800e814:	f7fe f8e6 	bl	800c9e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e81e:	d10a      	bne.n	800e836 <prvAddCurrentTaskToDelayedList+0x3a>
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d007      	beq.n	800e836 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e826:	4b1a      	ldr	r3, [pc, #104]	; (800e890 <prvAddCurrentTaskToDelayedList+0x94>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3304      	adds	r3, #4
 800e82c:	4619      	mov	r1, r3
 800e82e:	4819      	ldr	r0, [pc, #100]	; (800e894 <prvAddCurrentTaskToDelayedList+0x98>)
 800e830:	f7fe f87b 	bl	800c92a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e834:	e026      	b.n	800e884 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4413      	add	r3, r2
 800e83c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e83e:	4b14      	ldr	r3, [pc, #80]	; (800e890 <prvAddCurrentTaskToDelayedList+0x94>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e846:	68ba      	ldr	r2, [r7, #8]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d209      	bcs.n	800e862 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e84e:	4b12      	ldr	r3, [pc, #72]	; (800e898 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	4b0f      	ldr	r3, [pc, #60]	; (800e890 <prvAddCurrentTaskToDelayedList+0x94>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3304      	adds	r3, #4
 800e858:	4619      	mov	r1, r3
 800e85a:	4610      	mov	r0, r2
 800e85c:	f7fe f889 	bl	800c972 <vListInsert>
}
 800e860:	e010      	b.n	800e884 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e862:	4b0e      	ldr	r3, [pc, #56]	; (800e89c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	4b0a      	ldr	r3, [pc, #40]	; (800e890 <prvAddCurrentTaskToDelayedList+0x94>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3304      	adds	r3, #4
 800e86c:	4619      	mov	r1, r3
 800e86e:	4610      	mov	r0, r2
 800e870:	f7fe f87f 	bl	800c972 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e874:	4b0a      	ldr	r3, [pc, #40]	; (800e8a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	68ba      	ldr	r2, [r7, #8]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d202      	bcs.n	800e884 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e87e:	4a08      	ldr	r2, [pc, #32]	; (800e8a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	6013      	str	r3, [r2, #0]
}
 800e884:	bf00      	nop
 800e886:	3710      	adds	r7, #16
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	2000154c 	.word	0x2000154c
 800e890:	20001074 	.word	0x20001074
 800e894:	20001534 	.word	0x20001534
 800e898:	20001504 	.word	0x20001504
 800e89c:	20001500 	.word	0x20001500
 800e8a0:	20001568 	.word	0x20001568

0800e8a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b08a      	sub	sp, #40	; 0x28
 800e8a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e8ae:	f000 fb07 	bl	800eec0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e8b2:	4b1c      	ldr	r3, [pc, #112]	; (800e924 <xTimerCreateTimerTask+0x80>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d021      	beq.n	800e8fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e8c2:	1d3a      	adds	r2, r7, #4
 800e8c4:	f107 0108 	add.w	r1, r7, #8
 800e8c8:	f107 030c 	add.w	r3, r7, #12
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7fd ffe5 	bl	800c89c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e8d2:	6879      	ldr	r1, [r7, #4]
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	9202      	str	r2, [sp, #8]
 800e8da:	9301      	str	r3, [sp, #4]
 800e8dc:	2302      	movs	r3, #2
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	460a      	mov	r2, r1
 800e8e4:	4910      	ldr	r1, [pc, #64]	; (800e928 <xTimerCreateTimerTask+0x84>)
 800e8e6:	4811      	ldr	r0, [pc, #68]	; (800e92c <xTimerCreateTimerTask+0x88>)
 800e8e8:	f7fe ffa6 	bl	800d838 <xTaskCreateStatic>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	4a10      	ldr	r2, [pc, #64]	; (800e930 <xTimerCreateTimerTask+0x8c>)
 800e8f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e8f2:	4b0f      	ldr	r3, [pc, #60]	; (800e930 <xTimerCreateTimerTask+0x8c>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d001      	beq.n	800e8fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10a      	bne.n	800e91a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	613b      	str	r3, [r7, #16]
}
 800e916:	bf00      	nop
 800e918:	e7fe      	b.n	800e918 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e91a:	697b      	ldr	r3, [r7, #20]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3718      	adds	r7, #24
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}
 800e924:	200015a4 	.word	0x200015a4
 800e928:	08010814 	.word	0x08010814
 800e92c:	0800ea69 	.word	0x0800ea69
 800e930:	200015a8 	.word	0x200015a8

0800e934 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08a      	sub	sp, #40	; 0x28
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
 800e940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e942:	2300      	movs	r3, #0
 800e944:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d10a      	bne.n	800e962 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e950:	f383 8811 	msr	BASEPRI, r3
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	623b      	str	r3, [r7, #32]
}
 800e95e:	bf00      	nop
 800e960:	e7fe      	b.n	800e960 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e962:	4b1a      	ldr	r3, [pc, #104]	; (800e9cc <xTimerGenericCommand+0x98>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d02a      	beq.n	800e9c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b05      	cmp	r3, #5
 800e97a:	dc18      	bgt.n	800e9ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e97c:	f7ff fdb4 	bl	800e4e8 <xTaskGetSchedulerState>
 800e980:	4603      	mov	r3, r0
 800e982:	2b02      	cmp	r3, #2
 800e984:	d109      	bne.n	800e99a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e986:	4b11      	ldr	r3, [pc, #68]	; (800e9cc <xTimerGenericCommand+0x98>)
 800e988:	6818      	ldr	r0, [r3, #0]
 800e98a:	f107 0110 	add.w	r1, r7, #16
 800e98e:	2300      	movs	r3, #0
 800e990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e992:	f7fe fa45 	bl	800ce20 <xQueueGenericSend>
 800e996:	6278      	str	r0, [r7, #36]	; 0x24
 800e998:	e012      	b.n	800e9c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e99a:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <xTimerGenericCommand+0x98>)
 800e99c:	6818      	ldr	r0, [r3, #0]
 800e99e:	f107 0110 	add.w	r1, r7, #16
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f7fe fa3b 	bl	800ce20 <xQueueGenericSend>
 800e9aa:	6278      	str	r0, [r7, #36]	; 0x24
 800e9ac:	e008      	b.n	800e9c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e9ae:	4b07      	ldr	r3, [pc, #28]	; (800e9cc <xTimerGenericCommand+0x98>)
 800e9b0:	6818      	ldr	r0, [r3, #0]
 800e9b2:	f107 0110 	add.w	r1, r7, #16
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	f7fe fb2f 	bl	800d01c <xQueueGenericSendFromISR>
 800e9be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3728      	adds	r7, #40	; 0x28
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	200015a4 	.word	0x200015a4

0800e9d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b088      	sub	sp, #32
 800e9d4:	af02      	add	r7, sp, #8
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9da:	4b22      	ldr	r3, [pc, #136]	; (800ea64 <prvProcessExpiredTimer+0x94>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fd fffb 	bl	800c9e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9f4:	f003 0304 	and.w	r3, r3, #4
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d022      	beq.n	800ea42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	699a      	ldr	r2, [r3, #24]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	18d1      	adds	r1, r2, r3
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	6978      	ldr	r0, [r7, #20]
 800ea0a:	f000 f8d1 	bl	800ebb0 <prvInsertTimerInActiveList>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d01f      	beq.n	800ea54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea14:	2300      	movs	r3, #0
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	2300      	movs	r3, #0
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	6978      	ldr	r0, [r7, #20]
 800ea20:	f7ff ff88 	bl	800e934 <xTimerGenericCommand>
 800ea24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d113      	bne.n	800ea54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ea2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea30:	f383 8811 	msr	BASEPRI, r3
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	f3bf 8f4f 	dsb	sy
 800ea3c:	60fb      	str	r3, [r7, #12]
}
 800ea3e:	bf00      	nop
 800ea40:	e7fe      	b.n	800ea40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea48:	f023 0301 	bic.w	r3, r3, #1
 800ea4c:	b2da      	uxtb	r2, r3
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	6a1b      	ldr	r3, [r3, #32]
 800ea58:	6978      	ldr	r0, [r7, #20]
 800ea5a:	4798      	blx	r3
}
 800ea5c:	bf00      	nop
 800ea5e:	3718      	adds	r7, #24
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	2000159c 	.word	0x2000159c

0800ea68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea70:	f107 0308 	add.w	r3, r7, #8
 800ea74:	4618      	mov	r0, r3
 800ea76:	f000 f857 	bl	800eb28 <prvGetNextExpireTime>
 800ea7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	4619      	mov	r1, r3
 800ea80:	68f8      	ldr	r0, [r7, #12]
 800ea82:	f000 f803 	bl	800ea8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ea86:	f000 f8d5 	bl	800ec34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea8a:	e7f1      	b.n	800ea70 <prvTimerTask+0x8>

0800ea8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ea96:	f7ff f92b 	bl	800dcf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea9a:	f107 0308 	add.w	r3, r7, #8
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f000 f866 	bl	800eb70 <prvSampleTimeNow>
 800eaa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d130      	bne.n	800eb0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d10a      	bne.n	800eac8 <prvProcessTimerOrBlockTask+0x3c>
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d806      	bhi.n	800eac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eaba:	f7ff f927 	bl	800dd0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eabe:	68f9      	ldr	r1, [r7, #12]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7ff ff85 	bl	800e9d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eac6:	e024      	b.n	800eb12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d008      	beq.n	800eae0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eace:	4b13      	ldr	r3, [pc, #76]	; (800eb1c <prvProcessTimerOrBlockTask+0x90>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d101      	bne.n	800eadc <prvProcessTimerOrBlockTask+0x50>
 800ead8:	2301      	movs	r3, #1
 800eada:	e000      	b.n	800eade <prvProcessTimerOrBlockTask+0x52>
 800eadc:	2300      	movs	r3, #0
 800eade:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eae0:	4b0f      	ldr	r3, [pc, #60]	; (800eb20 <prvProcessTimerOrBlockTask+0x94>)
 800eae2:	6818      	ldr	r0, [r3, #0]
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	683a      	ldr	r2, [r7, #0]
 800eaec:	4619      	mov	r1, r3
 800eaee:	f7fe fe6f 	bl	800d7d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eaf2:	f7ff f90b 	bl	800dd0c <xTaskResumeAll>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10a      	bne.n	800eb12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eafc:	4b09      	ldr	r3, [pc, #36]	; (800eb24 <prvProcessTimerOrBlockTask+0x98>)
 800eafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	f3bf 8f6f 	isb	sy
}
 800eb0c:	e001      	b.n	800eb12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb0e:	f7ff f8fd 	bl	800dd0c <xTaskResumeAll>
}
 800eb12:	bf00      	nop
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	200015a0 	.word	0x200015a0
 800eb20:	200015a4 	.word	0x200015a4
 800eb24:	e000ed04 	.word	0xe000ed04

0800eb28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb30:	4b0e      	ldr	r3, [pc, #56]	; (800eb6c <prvGetNextExpireTime+0x44>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d101      	bne.n	800eb3e <prvGetNextExpireTime+0x16>
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	e000      	b.n	800eb40 <prvGetNextExpireTime+0x18>
 800eb3e:	2200      	movs	r2, #0
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d105      	bne.n	800eb58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb4c:	4b07      	ldr	r3, [pc, #28]	; (800eb6c <prvGetNextExpireTime+0x44>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	60fb      	str	r3, [r7, #12]
 800eb56:	e001      	b.n	800eb5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3714      	adds	r7, #20
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	2000159c 	.word	0x2000159c

0800eb70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eb78:	f7ff f966 	bl	800de48 <xTaskGetTickCount>
 800eb7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eb7e:	4b0b      	ldr	r3, [pc, #44]	; (800ebac <prvSampleTimeNow+0x3c>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d205      	bcs.n	800eb94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eb88:	f000 f936 	bl	800edf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	601a      	str	r2, [r3, #0]
 800eb92:	e002      	b.n	800eb9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eb9a:	4a04      	ldr	r2, [pc, #16]	; (800ebac <prvSampleTimeNow+0x3c>)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eba0:	68fb      	ldr	r3, [r7, #12]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	200015ac 	.word	0x200015ac

0800ebb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
 800ebbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	68ba      	ldr	r2, [r7, #8]
 800ebc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d812      	bhi.n	800ebfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	1ad2      	subs	r2, r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	699b      	ldr	r3, [r3, #24]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d302      	bcc.n	800ebea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	617b      	str	r3, [r7, #20]
 800ebe8:	e01b      	b.n	800ec22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ebea:	4b10      	ldr	r3, [pc, #64]	; (800ec2c <prvInsertTimerInActiveList+0x7c>)
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	4610      	mov	r0, r2
 800ebf6:	f7fd febc 	bl	800c972 <vListInsert>
 800ebfa:	e012      	b.n	800ec22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d206      	bcs.n	800ec12 <prvInsertTimerInActiveList+0x62>
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d302      	bcc.n	800ec12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	617b      	str	r3, [r7, #20]
 800ec10:	e007      	b.n	800ec22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec12:	4b07      	ldr	r3, [pc, #28]	; (800ec30 <prvInsertTimerInActiveList+0x80>)
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	3304      	adds	r3, #4
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	4610      	mov	r0, r2
 800ec1e:	f7fd fea8 	bl	800c972 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec22:	697b      	ldr	r3, [r7, #20]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3718      	adds	r7, #24
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	200015a0 	.word	0x200015a0
 800ec30:	2000159c 	.word	0x2000159c

0800ec34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b08e      	sub	sp, #56	; 0x38
 800ec38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec3a:	e0ca      	b.n	800edd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	da18      	bge.n	800ec74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec42:	1d3b      	adds	r3, r7, #4
 800ec44:	3304      	adds	r3, #4
 800ec46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10a      	bne.n	800ec64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ec4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec52:	f383 8811 	msr	BASEPRI, r3
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	61fb      	str	r3, [r7, #28]
}
 800ec60:	bf00      	nop
 800ec62:	e7fe      	b.n	800ec62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ec64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec6a:	6850      	ldr	r0, [r2, #4]
 800ec6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec6e:	6892      	ldr	r2, [r2, #8]
 800ec70:	4611      	mov	r1, r2
 800ec72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f2c0 80aa 	blt.w	800edd0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ec80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec82:	695b      	ldr	r3, [r3, #20]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d004      	beq.n	800ec92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fd fea9 	bl	800c9e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec92:	463b      	mov	r3, r7
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7ff ff6b 	bl	800eb70 <prvSampleTimeNow>
 800ec9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b09      	cmp	r3, #9
 800eca0:	f200 8097 	bhi.w	800edd2 <prvProcessReceivedCommands+0x19e>
 800eca4:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <prvProcessReceivedCommands+0x78>)
 800eca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecaa:	bf00      	nop
 800ecac:	0800ecd5 	.word	0x0800ecd5
 800ecb0:	0800ecd5 	.word	0x0800ecd5
 800ecb4:	0800ecd5 	.word	0x0800ecd5
 800ecb8:	0800ed49 	.word	0x0800ed49
 800ecbc:	0800ed5d 	.word	0x0800ed5d
 800ecc0:	0800eda7 	.word	0x0800eda7
 800ecc4:	0800ecd5 	.word	0x0800ecd5
 800ecc8:	0800ecd5 	.word	0x0800ecd5
 800eccc:	0800ed49 	.word	0x0800ed49
 800ecd0:	0800ed5d 	.word	0x0800ed5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecda:	f043 0301 	orr.w	r3, r3, #1
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ece6:	68ba      	ldr	r2, [r7, #8]
 800ece8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	18d1      	adds	r1, r2, r3
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecf4:	f7ff ff5c 	bl	800ebb0 <prvInsertTimerInActiveList>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d069      	beq.n	800edd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ecfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed00:	6a1b      	ldr	r3, [r3, #32]
 800ed02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed0c:	f003 0304 	and.w	r3, r3, #4
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d05e      	beq.n	800edd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed18:	699b      	ldr	r3, [r3, #24]
 800ed1a:	441a      	add	r2, r3
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	2300      	movs	r3, #0
 800ed22:	2100      	movs	r1, #0
 800ed24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed26:	f7ff fe05 	bl	800e934 <xTimerGenericCommand>
 800ed2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed2c:	6a3b      	ldr	r3, [r7, #32]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d14f      	bne.n	800edd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ed32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed36:	f383 8811 	msr	BASEPRI, r3
 800ed3a:	f3bf 8f6f 	isb	sy
 800ed3e:	f3bf 8f4f 	dsb	sy
 800ed42:	61bb      	str	r3, [r7, #24]
}
 800ed44:	bf00      	nop
 800ed46:	e7fe      	b.n	800ed46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed4e:	f023 0301 	bic.w	r3, r3, #1
 800ed52:	b2da      	uxtb	r2, r3
 800ed54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ed5a:	e03a      	b.n	800edd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed62:	f043 0301 	orr.w	r3, r3, #1
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ed6e:	68ba      	ldr	r2, [r7, #8]
 800ed70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ed74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed76:	699b      	ldr	r3, [r3, #24]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10a      	bne.n	800ed92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	617b      	str	r3, [r7, #20]
}
 800ed8e:	bf00      	nop
 800ed90:	e7fe      	b.n	800ed90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ed92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed94:	699a      	ldr	r2, [r3, #24]
 800ed96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed98:	18d1      	adds	r1, r2, r3
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eda0:	f7ff ff06 	bl	800ebb0 <prvInsertTimerInActiveList>
					break;
 800eda4:	e015      	b.n	800edd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edac:	f003 0302 	and.w	r3, r3, #2
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d103      	bne.n	800edbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800edb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edb6:	f000 fbdb 	bl	800f570 <vPortFree>
 800edba:	e00a      	b.n	800edd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edc2:	f023 0301 	bic.w	r3, r3, #1
 800edc6:	b2da      	uxtb	r2, r3
 800edc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800edce:	e000      	b.n	800edd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800edd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edd2:	4b08      	ldr	r3, [pc, #32]	; (800edf4 <prvProcessReceivedCommands+0x1c0>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	1d39      	adds	r1, r7, #4
 800edd8:	2200      	movs	r2, #0
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fe f9ba 	bl	800d154 <xQueueReceive>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f47f af2a 	bne.w	800ec3c <prvProcessReceivedCommands+0x8>
	}
}
 800ede8:	bf00      	nop
 800edea:	bf00      	nop
 800edec:	3730      	adds	r7, #48	; 0x30
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	200015a4 	.word	0x200015a4

0800edf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b088      	sub	sp, #32
 800edfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edfe:	e048      	b.n	800ee92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee00:	4b2d      	ldr	r3, [pc, #180]	; (800eeb8 <prvSwitchTimerLists+0xc0>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee0a:	4b2b      	ldr	r3, [pc, #172]	; (800eeb8 <prvSwitchTimerLists+0xc0>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	3304      	adds	r3, #4
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fd fde3 	bl	800c9e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6a1b      	ldr	r3, [r3, #32]
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee2c:	f003 0304 	and.w	r3, r3, #4
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d02e      	beq.n	800ee92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	693a      	ldr	r2, [r7, #16]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d90e      	bls.n	800ee64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	68ba      	ldr	r2, [r7, #8]
 800ee4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee52:	4b19      	ldr	r3, [pc, #100]	; (800eeb8 <prvSwitchTimerLists+0xc0>)
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	3304      	adds	r3, #4
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	4610      	mov	r0, r2
 800ee5e:	f7fd fd88 	bl	800c972 <vListInsert>
 800ee62:	e016      	b.n	800ee92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee64:	2300      	movs	r3, #0
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	2300      	movs	r3, #0
 800ee6a:	693a      	ldr	r2, [r7, #16]
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f7ff fd60 	bl	800e934 <xTimerGenericCommand>
 800ee74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d10a      	bne.n	800ee92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ee7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee80:	f383 8811 	msr	BASEPRI, r3
 800ee84:	f3bf 8f6f 	isb	sy
 800ee88:	f3bf 8f4f 	dsb	sy
 800ee8c:	603b      	str	r3, [r7, #0]
}
 800ee8e:	bf00      	nop
 800ee90:	e7fe      	b.n	800ee90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee92:	4b09      	ldr	r3, [pc, #36]	; (800eeb8 <prvSwitchTimerLists+0xc0>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1b1      	bne.n	800ee00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ee9c:	4b06      	ldr	r3, [pc, #24]	; (800eeb8 <prvSwitchTimerLists+0xc0>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eea2:	4b06      	ldr	r3, [pc, #24]	; (800eebc <prvSwitchTimerLists+0xc4>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4a04      	ldr	r2, [pc, #16]	; (800eeb8 <prvSwitchTimerLists+0xc0>)
 800eea8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eeaa:	4a04      	ldr	r2, [pc, #16]	; (800eebc <prvSwitchTimerLists+0xc4>)
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	6013      	str	r3, [r2, #0]
}
 800eeb0:	bf00      	nop
 800eeb2:	3718      	adds	r7, #24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	2000159c 	.word	0x2000159c
 800eebc:	200015a0 	.word	0x200015a0

0800eec0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eec6:	f000 f965 	bl	800f194 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eeca:	4b15      	ldr	r3, [pc, #84]	; (800ef20 <prvCheckForValidListAndQueue+0x60>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d120      	bne.n	800ef14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eed2:	4814      	ldr	r0, [pc, #80]	; (800ef24 <prvCheckForValidListAndQueue+0x64>)
 800eed4:	f7fd fcfc 	bl	800c8d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eed8:	4813      	ldr	r0, [pc, #76]	; (800ef28 <prvCheckForValidListAndQueue+0x68>)
 800eeda:	f7fd fcf9 	bl	800c8d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eede:	4b13      	ldr	r3, [pc, #76]	; (800ef2c <prvCheckForValidListAndQueue+0x6c>)
 800eee0:	4a10      	ldr	r2, [pc, #64]	; (800ef24 <prvCheckForValidListAndQueue+0x64>)
 800eee2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eee4:	4b12      	ldr	r3, [pc, #72]	; (800ef30 <prvCheckForValidListAndQueue+0x70>)
 800eee6:	4a10      	ldr	r2, [pc, #64]	; (800ef28 <prvCheckForValidListAndQueue+0x68>)
 800eee8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eeea:	2300      	movs	r3, #0
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	4b11      	ldr	r3, [pc, #68]	; (800ef34 <prvCheckForValidListAndQueue+0x74>)
 800eef0:	4a11      	ldr	r2, [pc, #68]	; (800ef38 <prvCheckForValidListAndQueue+0x78>)
 800eef2:	2110      	movs	r1, #16
 800eef4:	200a      	movs	r0, #10
 800eef6:	f7fd fe07 	bl	800cb08 <xQueueGenericCreateStatic>
 800eefa:	4603      	mov	r3, r0
 800eefc:	4a08      	ldr	r2, [pc, #32]	; (800ef20 <prvCheckForValidListAndQueue+0x60>)
 800eefe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef00:	4b07      	ldr	r3, [pc, #28]	; (800ef20 <prvCheckForValidListAndQueue+0x60>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d005      	beq.n	800ef14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef08:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <prvCheckForValidListAndQueue+0x60>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	490b      	ldr	r1, [pc, #44]	; (800ef3c <prvCheckForValidListAndQueue+0x7c>)
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7fe fc34 	bl	800d77c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef14:	f000 f96e 	bl	800f1f4 <vPortExitCritical>
}
 800ef18:	bf00      	nop
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	200015a4 	.word	0x200015a4
 800ef24:	20001574 	.word	0x20001574
 800ef28:	20001588 	.word	0x20001588
 800ef2c:	2000159c 	.word	0x2000159c
 800ef30:	200015a0 	.word	0x200015a0
 800ef34:	20001650 	.word	0x20001650
 800ef38:	200015b0 	.word	0x200015b0
 800ef3c:	0801081c 	.word	0x0801081c

0800ef40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef40:	b480      	push	{r7}
 800ef42:	b085      	sub	sp, #20
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	3b04      	subs	r3, #4
 800ef50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	3b04      	subs	r3, #4
 800ef5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	f023 0201 	bic.w	r2, r3, #1
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	3b04      	subs	r3, #4
 800ef6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef70:	4a0c      	ldr	r2, [pc, #48]	; (800efa4 <pxPortInitialiseStack+0x64>)
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	3b14      	subs	r3, #20
 800ef7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	3b04      	subs	r3, #4
 800ef86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f06f 0202 	mvn.w	r2, #2
 800ef8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	3b20      	subs	r3, #32
 800ef94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ef96:	68fb      	ldr	r3, [r7, #12]
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3714      	adds	r7, #20
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr
 800efa4:	0800efa9 	.word	0x0800efa9

0800efa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800efb2:	4b12      	ldr	r3, [pc, #72]	; (800effc <prvTaskExitError+0x54>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efba:	d00a      	beq.n	800efd2 <prvTaskExitError+0x2a>
	__asm volatile
 800efbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	60fb      	str	r3, [r7, #12]
}
 800efce:	bf00      	nop
 800efd0:	e7fe      	b.n	800efd0 <prvTaskExitError+0x28>
	__asm volatile
 800efd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd6:	f383 8811 	msr	BASEPRI, r3
 800efda:	f3bf 8f6f 	isb	sy
 800efde:	f3bf 8f4f 	dsb	sy
 800efe2:	60bb      	str	r3, [r7, #8]
}
 800efe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800efe6:	bf00      	nop
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d0fc      	beq.n	800efe8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800efee:	bf00      	nop
 800eff0:	bf00      	nop
 800eff2:	3714      	adds	r7, #20
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr
 800effc:	200000d0 	.word	0x200000d0

0800f000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f000:	4b07      	ldr	r3, [pc, #28]	; (800f020 <pxCurrentTCBConst2>)
 800f002:	6819      	ldr	r1, [r3, #0]
 800f004:	6808      	ldr	r0, [r1, #0]
 800f006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00a:	f380 8809 	msr	PSP, r0
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	f04f 0000 	mov.w	r0, #0
 800f016:	f380 8811 	msr	BASEPRI, r0
 800f01a:	4770      	bx	lr
 800f01c:	f3af 8000 	nop.w

0800f020 <pxCurrentTCBConst2>:
 800f020:	20001074 	.word	0x20001074
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f024:	bf00      	nop
 800f026:	bf00      	nop

0800f028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f028:	4808      	ldr	r0, [pc, #32]	; (800f04c <prvPortStartFirstTask+0x24>)
 800f02a:	6800      	ldr	r0, [r0, #0]
 800f02c:	6800      	ldr	r0, [r0, #0]
 800f02e:	f380 8808 	msr	MSP, r0
 800f032:	f04f 0000 	mov.w	r0, #0
 800f036:	f380 8814 	msr	CONTROL, r0
 800f03a:	b662      	cpsie	i
 800f03c:	b661      	cpsie	f
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	f3bf 8f6f 	isb	sy
 800f046:	df00      	svc	0
 800f048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f04a:	bf00      	nop
 800f04c:	e000ed08 	.word	0xe000ed08

0800f050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f056:	4b46      	ldr	r3, [pc, #280]	; (800f170 <xPortStartScheduler+0x120>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a46      	ldr	r2, [pc, #280]	; (800f174 <xPortStartScheduler+0x124>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d10a      	bne.n	800f076 <xPortStartScheduler+0x26>
	__asm volatile
 800f060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f064:	f383 8811 	msr	BASEPRI, r3
 800f068:	f3bf 8f6f 	isb	sy
 800f06c:	f3bf 8f4f 	dsb	sy
 800f070:	613b      	str	r3, [r7, #16]
}
 800f072:	bf00      	nop
 800f074:	e7fe      	b.n	800f074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f076:	4b3e      	ldr	r3, [pc, #248]	; (800f170 <xPortStartScheduler+0x120>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a3f      	ldr	r2, [pc, #252]	; (800f178 <xPortStartScheduler+0x128>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d10a      	bne.n	800f096 <xPortStartScheduler+0x46>
	__asm volatile
 800f080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	60fb      	str	r3, [r7, #12]
}
 800f092:	bf00      	nop
 800f094:	e7fe      	b.n	800f094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f096:	4b39      	ldr	r3, [pc, #228]	; (800f17c <xPortStartScheduler+0x12c>)
 800f098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	22ff      	movs	r2, #255	; 0xff
 800f0a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	b2db      	uxtb	r3, r3
 800f0ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0b0:	78fb      	ldrb	r3, [r7, #3]
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	4b31      	ldr	r3, [pc, #196]	; (800f180 <xPortStartScheduler+0x130>)
 800f0bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f0be:	4b31      	ldr	r3, [pc, #196]	; (800f184 <xPortStartScheduler+0x134>)
 800f0c0:	2207      	movs	r2, #7
 800f0c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0c4:	e009      	b.n	800f0da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f0c6:	4b2f      	ldr	r3, [pc, #188]	; (800f184 <xPortStartScheduler+0x134>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	3b01      	subs	r3, #1
 800f0cc:	4a2d      	ldr	r2, [pc, #180]	; (800f184 <xPortStartScheduler+0x134>)
 800f0ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f0d0:	78fb      	ldrb	r3, [r7, #3]
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0da:	78fb      	ldrb	r3, [r7, #3]
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0e2:	2b80      	cmp	r3, #128	; 0x80
 800f0e4:	d0ef      	beq.n	800f0c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f0e6:	4b27      	ldr	r3, [pc, #156]	; (800f184 <xPortStartScheduler+0x134>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f1c3 0307 	rsb	r3, r3, #7
 800f0ee:	2b04      	cmp	r3, #4
 800f0f0:	d00a      	beq.n	800f108 <xPortStartScheduler+0xb8>
	__asm volatile
 800f0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f6:	f383 8811 	msr	BASEPRI, r3
 800f0fa:	f3bf 8f6f 	isb	sy
 800f0fe:	f3bf 8f4f 	dsb	sy
 800f102:	60bb      	str	r3, [r7, #8]
}
 800f104:	bf00      	nop
 800f106:	e7fe      	b.n	800f106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f108:	4b1e      	ldr	r3, [pc, #120]	; (800f184 <xPortStartScheduler+0x134>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	021b      	lsls	r3, r3, #8
 800f10e:	4a1d      	ldr	r2, [pc, #116]	; (800f184 <xPortStartScheduler+0x134>)
 800f110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f112:	4b1c      	ldr	r3, [pc, #112]	; (800f184 <xPortStartScheduler+0x134>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f11a:	4a1a      	ldr	r2, [pc, #104]	; (800f184 <xPortStartScheduler+0x134>)
 800f11c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	b2da      	uxtb	r2, r3
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f126:	4b18      	ldr	r3, [pc, #96]	; (800f188 <xPortStartScheduler+0x138>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4a17      	ldr	r2, [pc, #92]	; (800f188 <xPortStartScheduler+0x138>)
 800f12c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f132:	4b15      	ldr	r3, [pc, #84]	; (800f188 <xPortStartScheduler+0x138>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a14      	ldr	r2, [pc, #80]	; (800f188 <xPortStartScheduler+0x138>)
 800f138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f13c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f13e:	f000 f8dd 	bl	800f2fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f142:	4b12      	ldr	r3, [pc, #72]	; (800f18c <xPortStartScheduler+0x13c>)
 800f144:	2200      	movs	r2, #0
 800f146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f148:	f000 f8fc 	bl	800f344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f14c:	4b10      	ldr	r3, [pc, #64]	; (800f190 <xPortStartScheduler+0x140>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4a0f      	ldr	r2, [pc, #60]	; (800f190 <xPortStartScheduler+0x140>)
 800f152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f158:	f7ff ff66 	bl	800f028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f15c:	f7fe ff3e 	bl	800dfdc <vTaskSwitchContext>
	prvTaskExitError();
 800f160:	f7ff ff22 	bl	800efa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3718      	adds	r7, #24
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	e000ed00 	.word	0xe000ed00
 800f174:	410fc271 	.word	0x410fc271
 800f178:	410fc270 	.word	0x410fc270
 800f17c:	e000e400 	.word	0xe000e400
 800f180:	200016a0 	.word	0x200016a0
 800f184:	200016a4 	.word	0x200016a4
 800f188:	e000ed20 	.word	0xe000ed20
 800f18c:	200000d0 	.word	0x200000d0
 800f190:	e000ef34 	.word	0xe000ef34

0800f194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
	__asm volatile
 800f19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f19e:	f383 8811 	msr	BASEPRI, r3
 800f1a2:	f3bf 8f6f 	isb	sy
 800f1a6:	f3bf 8f4f 	dsb	sy
 800f1aa:	607b      	str	r3, [r7, #4]
}
 800f1ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f1ae:	4b0f      	ldr	r3, [pc, #60]	; (800f1ec <vPortEnterCritical+0x58>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	4a0d      	ldr	r2, [pc, #52]	; (800f1ec <vPortEnterCritical+0x58>)
 800f1b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f1b8:	4b0c      	ldr	r3, [pc, #48]	; (800f1ec <vPortEnterCritical+0x58>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d10f      	bne.n	800f1e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f1c0:	4b0b      	ldr	r3, [pc, #44]	; (800f1f0 <vPortEnterCritical+0x5c>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00a      	beq.n	800f1e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	603b      	str	r3, [r7, #0]
}
 800f1dc:	bf00      	nop
 800f1de:	e7fe      	b.n	800f1de <vPortEnterCritical+0x4a>
	}
}
 800f1e0:	bf00      	nop
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr
 800f1ec:	200000d0 	.word	0x200000d0
 800f1f0:	e000ed04 	.word	0xe000ed04

0800f1f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f1fa:	4b12      	ldr	r3, [pc, #72]	; (800f244 <vPortExitCritical+0x50>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d10a      	bne.n	800f218 <vPortExitCritical+0x24>
	__asm volatile
 800f202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f206:	f383 8811 	msr	BASEPRI, r3
 800f20a:	f3bf 8f6f 	isb	sy
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	607b      	str	r3, [r7, #4]
}
 800f214:	bf00      	nop
 800f216:	e7fe      	b.n	800f216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f218:	4b0a      	ldr	r3, [pc, #40]	; (800f244 <vPortExitCritical+0x50>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	3b01      	subs	r3, #1
 800f21e:	4a09      	ldr	r2, [pc, #36]	; (800f244 <vPortExitCritical+0x50>)
 800f220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f222:	4b08      	ldr	r3, [pc, #32]	; (800f244 <vPortExitCritical+0x50>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d105      	bne.n	800f236 <vPortExitCritical+0x42>
 800f22a:	2300      	movs	r3, #0
 800f22c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	f383 8811 	msr	BASEPRI, r3
}
 800f234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f236:	bf00      	nop
 800f238:	370c      	adds	r7, #12
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	200000d0 	.word	0x200000d0
	...

0800f250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f250:	f3ef 8009 	mrs	r0, PSP
 800f254:	f3bf 8f6f 	isb	sy
 800f258:	4b15      	ldr	r3, [pc, #84]	; (800f2b0 <pxCurrentTCBConst>)
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	f01e 0f10 	tst.w	lr, #16
 800f260:	bf08      	it	eq
 800f262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26a:	6010      	str	r0, [r2, #0]
 800f26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f270:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f274:	f380 8811 	msr	BASEPRI, r0
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f7fe feac 	bl	800dfdc <vTaskSwitchContext>
 800f284:	f04f 0000 	mov.w	r0, #0
 800f288:	f380 8811 	msr	BASEPRI, r0
 800f28c:	bc09      	pop	{r0, r3}
 800f28e:	6819      	ldr	r1, [r3, #0]
 800f290:	6808      	ldr	r0, [r1, #0]
 800f292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f296:	f01e 0f10 	tst.w	lr, #16
 800f29a:	bf08      	it	eq
 800f29c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2a0:	f380 8809 	msr	PSP, r0
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop
 800f2ac:	f3af 8000 	nop.w

0800f2b0 <pxCurrentTCBConst>:
 800f2b0:	20001074 	.word	0x20001074
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f2b4:	bf00      	nop
 800f2b6:	bf00      	nop

0800f2b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	607b      	str	r3, [r7, #4]
}
 800f2d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f2d2:	f7fe fdc9 	bl	800de68 <xTaskIncrementTick>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d003      	beq.n	800f2e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f2dc:	4b06      	ldr	r3, [pc, #24]	; (800f2f8 <xPortSysTickHandler+0x40>)
 800f2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2e2:	601a      	str	r2, [r3, #0]
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	f383 8811 	msr	BASEPRI, r3
}
 800f2ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f2f0:	bf00      	nop
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	e000ed04 	.word	0xe000ed04

0800f2fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f300:	4b0b      	ldr	r3, [pc, #44]	; (800f330 <vPortSetupTimerInterrupt+0x34>)
 800f302:	2200      	movs	r2, #0
 800f304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f306:	4b0b      	ldr	r3, [pc, #44]	; (800f334 <vPortSetupTimerInterrupt+0x38>)
 800f308:	2200      	movs	r2, #0
 800f30a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f30c:	4b0a      	ldr	r3, [pc, #40]	; (800f338 <vPortSetupTimerInterrupt+0x3c>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4a0a      	ldr	r2, [pc, #40]	; (800f33c <vPortSetupTimerInterrupt+0x40>)
 800f312:	fba2 2303 	umull	r2, r3, r2, r3
 800f316:	099b      	lsrs	r3, r3, #6
 800f318:	4a09      	ldr	r2, [pc, #36]	; (800f340 <vPortSetupTimerInterrupt+0x44>)
 800f31a:	3b01      	subs	r3, #1
 800f31c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f31e:	4b04      	ldr	r3, [pc, #16]	; (800f330 <vPortSetupTimerInterrupt+0x34>)
 800f320:	2207      	movs	r2, #7
 800f322:	601a      	str	r2, [r3, #0]
}
 800f324:	bf00      	nop
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr
 800f32e:	bf00      	nop
 800f330:	e000e010 	.word	0xe000e010
 800f334:	e000e018 	.word	0xe000e018
 800f338:	20000038 	.word	0x20000038
 800f33c:	10624dd3 	.word	0x10624dd3
 800f340:	e000e014 	.word	0xe000e014

0800f344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f354 <vPortEnableVFP+0x10>
 800f348:	6801      	ldr	r1, [r0, #0]
 800f34a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f34e:	6001      	str	r1, [r0, #0]
 800f350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f352:	bf00      	nop
 800f354:	e000ed88 	.word	0xe000ed88

0800f358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f35e:	f3ef 8305 	mrs	r3, IPSR
 800f362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2b0f      	cmp	r3, #15
 800f368:	d914      	bls.n	800f394 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f36a:	4a17      	ldr	r2, [pc, #92]	; (800f3c8 <vPortValidateInterruptPriority+0x70>)
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	4413      	add	r3, r2
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f374:	4b15      	ldr	r3, [pc, #84]	; (800f3cc <vPortValidateInterruptPriority+0x74>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	7afa      	ldrb	r2, [r7, #11]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d20a      	bcs.n	800f394 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	607b      	str	r3, [r7, #4]
}
 800f390:	bf00      	nop
 800f392:	e7fe      	b.n	800f392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f394:	4b0e      	ldr	r3, [pc, #56]	; (800f3d0 <vPortValidateInterruptPriority+0x78>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f39c:	4b0d      	ldr	r3, [pc, #52]	; (800f3d4 <vPortValidateInterruptPriority+0x7c>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d90a      	bls.n	800f3ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a8:	f383 8811 	msr	BASEPRI, r3
 800f3ac:	f3bf 8f6f 	isb	sy
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	603b      	str	r3, [r7, #0]
}
 800f3b6:	bf00      	nop
 800f3b8:	e7fe      	b.n	800f3b8 <vPortValidateInterruptPriority+0x60>
	}
 800f3ba:	bf00      	nop
 800f3bc:	3714      	adds	r7, #20
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop
 800f3c8:	e000e3f0 	.word	0xe000e3f0
 800f3cc:	200016a0 	.word	0x200016a0
 800f3d0:	e000ed0c 	.word	0xe000ed0c
 800f3d4:	200016a4 	.word	0x200016a4

0800f3d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b08a      	sub	sp, #40	; 0x28
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f3e4:	f7fe fc84 	bl	800dcf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f3e8:	4b5b      	ldr	r3, [pc, #364]	; (800f558 <pvPortMalloc+0x180>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d101      	bne.n	800f3f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f3f0:	f000 f920 	bl	800f634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3f4:	4b59      	ldr	r3, [pc, #356]	; (800f55c <pvPortMalloc+0x184>)
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4013      	ands	r3, r2
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f040 8093 	bne.w	800f528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d01d      	beq.n	800f444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f408:	2208      	movs	r2, #8
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4413      	add	r3, r2
 800f40e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f003 0307 	and.w	r3, r3, #7
 800f416:	2b00      	cmp	r3, #0
 800f418:	d014      	beq.n	800f444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f023 0307 	bic.w	r3, r3, #7
 800f420:	3308      	adds	r3, #8
 800f422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f003 0307 	and.w	r3, r3, #7
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00a      	beq.n	800f444 <pvPortMalloc+0x6c>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	617b      	str	r3, [r7, #20]
}
 800f440:	bf00      	nop
 800f442:	e7fe      	b.n	800f442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d06e      	beq.n	800f528 <pvPortMalloc+0x150>
 800f44a:	4b45      	ldr	r3, [pc, #276]	; (800f560 <pvPortMalloc+0x188>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	429a      	cmp	r2, r3
 800f452:	d869      	bhi.n	800f528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f454:	4b43      	ldr	r3, [pc, #268]	; (800f564 <pvPortMalloc+0x18c>)
 800f456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f458:	4b42      	ldr	r3, [pc, #264]	; (800f564 <pvPortMalloc+0x18c>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f45e:	e004      	b.n	800f46a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	429a      	cmp	r2, r3
 800f472:	d903      	bls.n	800f47c <pvPortMalloc+0xa4>
 800f474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1f1      	bne.n	800f460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f47c:	4b36      	ldr	r3, [pc, #216]	; (800f558 <pvPortMalloc+0x180>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f482:	429a      	cmp	r2, r3
 800f484:	d050      	beq.n	800f528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f486:	6a3b      	ldr	r3, [r7, #32]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2208      	movs	r2, #8
 800f48c:	4413      	add	r3, r2
 800f48e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	6a3b      	ldr	r3, [r7, #32]
 800f496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49a:	685a      	ldr	r2, [r3, #4]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	1ad2      	subs	r2, r2, r3
 800f4a0:	2308      	movs	r3, #8
 800f4a2:	005b      	lsls	r3, r3, #1
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d91f      	bls.n	800f4e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	f003 0307 	and.w	r3, r3, #7
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00a      	beq.n	800f4d0 <pvPortMalloc+0xf8>
	__asm volatile
 800f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	613b      	str	r3, [r7, #16]
}
 800f4cc:	bf00      	nop
 800f4ce:	e7fe      	b.n	800f4ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	685a      	ldr	r2, [r3, #4]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	1ad2      	subs	r2, r2, r3
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f4e2:	69b8      	ldr	r0, [r7, #24]
 800f4e4:	f000 f908 	bl	800f6f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4e8:	4b1d      	ldr	r3, [pc, #116]	; (800f560 <pvPortMalloc+0x188>)
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	4a1b      	ldr	r2, [pc, #108]	; (800f560 <pvPortMalloc+0x188>)
 800f4f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4f6:	4b1a      	ldr	r3, [pc, #104]	; (800f560 <pvPortMalloc+0x188>)
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	4b1b      	ldr	r3, [pc, #108]	; (800f568 <pvPortMalloc+0x190>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d203      	bcs.n	800f50a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f502:	4b17      	ldr	r3, [pc, #92]	; (800f560 <pvPortMalloc+0x188>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4a18      	ldr	r2, [pc, #96]	; (800f568 <pvPortMalloc+0x190>)
 800f508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50c:	685a      	ldr	r2, [r3, #4]
 800f50e:	4b13      	ldr	r3, [pc, #76]	; (800f55c <pvPortMalloc+0x184>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	431a      	orrs	r2, r3
 800f514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51a:	2200      	movs	r2, #0
 800f51c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f51e:	4b13      	ldr	r3, [pc, #76]	; (800f56c <pvPortMalloc+0x194>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3301      	adds	r3, #1
 800f524:	4a11      	ldr	r2, [pc, #68]	; (800f56c <pvPortMalloc+0x194>)
 800f526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f528:	f7fe fbf0 	bl	800dd0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	f003 0307 	and.w	r3, r3, #7
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00a      	beq.n	800f54c <pvPortMalloc+0x174>
	__asm volatile
 800f536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53a:	f383 8811 	msr	BASEPRI, r3
 800f53e:	f3bf 8f6f 	isb	sy
 800f542:	f3bf 8f4f 	dsb	sy
 800f546:	60fb      	str	r3, [r7, #12]
}
 800f548:	bf00      	nop
 800f54a:	e7fe      	b.n	800f54a <pvPortMalloc+0x172>
	return pvReturn;
 800f54c:	69fb      	ldr	r3, [r7, #28]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3728      	adds	r7, #40	; 0x28
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	200052b0 	.word	0x200052b0
 800f55c:	200052c4 	.word	0x200052c4
 800f560:	200052b4 	.word	0x200052b4
 800f564:	200052a8 	.word	0x200052a8
 800f568:	200052b8 	.word	0x200052b8
 800f56c:	200052bc 	.word	0x200052bc

0800f570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d04d      	beq.n	800f61e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f582:	2308      	movs	r3, #8
 800f584:	425b      	negs	r3, r3
 800f586:	697a      	ldr	r2, [r7, #20]
 800f588:	4413      	add	r3, r2
 800f58a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	685a      	ldr	r2, [r3, #4]
 800f594:	4b24      	ldr	r3, [pc, #144]	; (800f628 <vPortFree+0xb8>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4013      	ands	r3, r2
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d10a      	bne.n	800f5b4 <vPortFree+0x44>
	__asm volatile
 800f59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a2:	f383 8811 	msr	BASEPRI, r3
 800f5a6:	f3bf 8f6f 	isb	sy
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	60fb      	str	r3, [r7, #12]
}
 800f5b0:	bf00      	nop
 800f5b2:	e7fe      	b.n	800f5b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00a      	beq.n	800f5d2 <vPortFree+0x62>
	__asm volatile
 800f5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c0:	f383 8811 	msr	BASEPRI, r3
 800f5c4:	f3bf 8f6f 	isb	sy
 800f5c8:	f3bf 8f4f 	dsb	sy
 800f5cc:	60bb      	str	r3, [r7, #8]
}
 800f5ce:	bf00      	nop
 800f5d0:	e7fe      	b.n	800f5d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	685a      	ldr	r2, [r3, #4]
 800f5d6:	4b14      	ldr	r3, [pc, #80]	; (800f628 <vPortFree+0xb8>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4013      	ands	r3, r2
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d01e      	beq.n	800f61e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d11a      	bne.n	800f61e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	685a      	ldr	r2, [r3, #4]
 800f5ec:	4b0e      	ldr	r3, [pc, #56]	; (800f628 <vPortFree+0xb8>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	43db      	mvns	r3, r3
 800f5f2:	401a      	ands	r2, r3
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f5f8:	f7fe fb7a 	bl	800dcf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	685a      	ldr	r2, [r3, #4]
 800f600:	4b0a      	ldr	r3, [pc, #40]	; (800f62c <vPortFree+0xbc>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4413      	add	r3, r2
 800f606:	4a09      	ldr	r2, [pc, #36]	; (800f62c <vPortFree+0xbc>)
 800f608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f60a:	6938      	ldr	r0, [r7, #16]
 800f60c:	f000 f874 	bl	800f6f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f610:	4b07      	ldr	r3, [pc, #28]	; (800f630 <vPortFree+0xc0>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	3301      	adds	r3, #1
 800f616:	4a06      	ldr	r2, [pc, #24]	; (800f630 <vPortFree+0xc0>)
 800f618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f61a:	f7fe fb77 	bl	800dd0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f61e:	bf00      	nop
 800f620:	3718      	adds	r7, #24
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	200052c4 	.word	0x200052c4
 800f62c:	200052b4 	.word	0x200052b4
 800f630:	200052c0 	.word	0x200052c0

0800f634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f634:	b480      	push	{r7}
 800f636:	b085      	sub	sp, #20
 800f638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f63a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f63e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f640:	4b27      	ldr	r3, [pc, #156]	; (800f6e0 <prvHeapInit+0xac>)
 800f642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f003 0307 	and.w	r3, r3, #7
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00c      	beq.n	800f668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	3307      	adds	r3, #7
 800f652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f023 0307 	bic.w	r3, r3, #7
 800f65a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	4a1f      	ldr	r2, [pc, #124]	; (800f6e0 <prvHeapInit+0xac>)
 800f664:	4413      	add	r3, r2
 800f666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f66c:	4a1d      	ldr	r2, [pc, #116]	; (800f6e4 <prvHeapInit+0xb0>)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f672:	4b1c      	ldr	r3, [pc, #112]	; (800f6e4 <prvHeapInit+0xb0>)
 800f674:	2200      	movs	r2, #0
 800f676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	4413      	add	r3, r2
 800f67e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f680:	2208      	movs	r2, #8
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	1a9b      	subs	r3, r3, r2
 800f686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f023 0307 	bic.w	r3, r3, #7
 800f68e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	4a15      	ldr	r2, [pc, #84]	; (800f6e8 <prvHeapInit+0xb4>)
 800f694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f696:	4b14      	ldr	r3, [pc, #80]	; (800f6e8 <prvHeapInit+0xb4>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2200      	movs	r2, #0
 800f69c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f69e:	4b12      	ldr	r3, [pc, #72]	; (800f6e8 <prvHeapInit+0xb4>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	1ad2      	subs	r2, r2, r3
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f6b4:	4b0c      	ldr	r3, [pc, #48]	; (800f6e8 <prvHeapInit+0xb4>)
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	4a0a      	ldr	r2, [pc, #40]	; (800f6ec <prvHeapInit+0xb8>)
 800f6c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	4a09      	ldr	r2, [pc, #36]	; (800f6f0 <prvHeapInit+0xbc>)
 800f6ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6cc:	4b09      	ldr	r3, [pc, #36]	; (800f6f4 <prvHeapInit+0xc0>)
 800f6ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f6d2:	601a      	str	r2, [r3, #0]
}
 800f6d4:	bf00      	nop
 800f6d6:	3714      	adds	r7, #20
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	200016a8 	.word	0x200016a8
 800f6e4:	200052a8 	.word	0x200052a8
 800f6e8:	200052b0 	.word	0x200052b0
 800f6ec:	200052b8 	.word	0x200052b8
 800f6f0:	200052b4 	.word	0x200052b4
 800f6f4:	200052c4 	.word	0x200052c4

0800f6f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f700:	4b28      	ldr	r3, [pc, #160]	; (800f7a4 <prvInsertBlockIntoFreeList+0xac>)
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	e002      	b.n	800f70c <prvInsertBlockIntoFreeList+0x14>
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	60fb      	str	r3, [r7, #12]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	429a      	cmp	r2, r3
 800f714:	d8f7      	bhi.n	800f706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	68ba      	ldr	r2, [r7, #8]
 800f720:	4413      	add	r3, r2
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	429a      	cmp	r2, r3
 800f726:	d108      	bne.n	800f73a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	685a      	ldr	r2, [r3, #4]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	441a      	add	r2, r3
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	441a      	add	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d118      	bne.n	800f780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	4b15      	ldr	r3, [pc, #84]	; (800f7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	429a      	cmp	r2, r3
 800f758:	d00d      	beq.n	800f776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	685a      	ldr	r2, [r3, #4]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	441a      	add	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	601a      	str	r2, [r3, #0]
 800f774:	e008      	b.n	800f788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f776:	4b0c      	ldr	r3, [pc, #48]	; (800f7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	e003      	b.n	800f788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f788:	68fa      	ldr	r2, [r7, #12]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d002      	beq.n	800f796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f796:	bf00      	nop
 800f798:	3714      	adds	r7, #20
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	200052a8 	.word	0x200052a8
 800f7a8:	200052b0 	.word	0x200052b0

0800f7ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	4912      	ldr	r1, [pc, #72]	; (800f7fc <MX_USB_DEVICE_Init+0x50>)
 800f7b4:	4812      	ldr	r0, [pc, #72]	; (800f800 <MX_USB_DEVICE_Init+0x54>)
 800f7b6:	f7fb fb1b 	bl	800adf0 <USBD_Init>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d001      	beq.n	800f7c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f7c0:	f7f3 fab4 	bl	8002d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f7c4:	490f      	ldr	r1, [pc, #60]	; (800f804 <MX_USB_DEVICE_Init+0x58>)
 800f7c6:	480e      	ldr	r0, [pc, #56]	; (800f800 <MX_USB_DEVICE_Init+0x54>)
 800f7c8:	f7fb fb42 	bl	800ae50 <USBD_RegisterClass>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f7d2:	f7f3 faab 	bl	8002d2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f7d6:	490c      	ldr	r1, [pc, #48]	; (800f808 <MX_USB_DEVICE_Init+0x5c>)
 800f7d8:	4809      	ldr	r0, [pc, #36]	; (800f800 <MX_USB_DEVICE_Init+0x54>)
 800f7da:	f7fb fa33 	bl	800ac44 <USBD_CDC_RegisterInterface>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d001      	beq.n	800f7e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f7e4:	f7f3 faa2 	bl	8002d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f7e8:	4805      	ldr	r0, [pc, #20]	; (800f800 <MX_USB_DEVICE_Init+0x54>)
 800f7ea:	f7fb fb67 	bl	800aebc <USBD_Start>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d001      	beq.n	800f7f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f7f4:	f7f3 fa9a 	bl	8002d2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f7f8:	bf00      	nop
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	200000e8 	.word	0x200000e8
 800f800:	200052c8 	.word	0x200052c8
 800f804:	20000050 	.word	0x20000050
 800f808:	200000d4 	.word	0x200000d4

0800f80c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f810:	2200      	movs	r2, #0
 800f812:	4905      	ldr	r1, [pc, #20]	; (800f828 <CDC_Init_FS+0x1c>)
 800f814:	4805      	ldr	r0, [pc, #20]	; (800f82c <CDC_Init_FS+0x20>)
 800f816:	f7fb fa2f 	bl	800ac78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f81a:	4905      	ldr	r1, [pc, #20]	; (800f830 <CDC_Init_FS+0x24>)
 800f81c:	4803      	ldr	r0, [pc, #12]	; (800f82c <CDC_Init_FS+0x20>)
 800f81e:	f7fb fa4d 	bl	800acbc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f822:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f824:	4618      	mov	r0, r3
 800f826:	bd80      	pop	{r7, pc}
 800f828:	20005da4 	.word	0x20005da4
 800f82c:	200052c8 	.word	0x200052c8
 800f830:	200055a4 	.word	0x200055a4

0800f834 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f834:	b480      	push	{r7}
 800f836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f838:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	6039      	str	r1, [r7, #0]
 800f84e:	71fb      	strb	r3, [r7, #7]
 800f850:	4613      	mov	r3, r2
 800f852:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f854:	79fb      	ldrb	r3, [r7, #7]
 800f856:	2b23      	cmp	r3, #35	; 0x23
 800f858:	d84a      	bhi.n	800f8f0 <CDC_Control_FS+0xac>
 800f85a:	a201      	add	r2, pc, #4	; (adr r2, 800f860 <CDC_Control_FS+0x1c>)
 800f85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f860:	0800f8f1 	.word	0x0800f8f1
 800f864:	0800f8f1 	.word	0x0800f8f1
 800f868:	0800f8f1 	.word	0x0800f8f1
 800f86c:	0800f8f1 	.word	0x0800f8f1
 800f870:	0800f8f1 	.word	0x0800f8f1
 800f874:	0800f8f1 	.word	0x0800f8f1
 800f878:	0800f8f1 	.word	0x0800f8f1
 800f87c:	0800f8f1 	.word	0x0800f8f1
 800f880:	0800f8f1 	.word	0x0800f8f1
 800f884:	0800f8f1 	.word	0x0800f8f1
 800f888:	0800f8f1 	.word	0x0800f8f1
 800f88c:	0800f8f1 	.word	0x0800f8f1
 800f890:	0800f8f1 	.word	0x0800f8f1
 800f894:	0800f8f1 	.word	0x0800f8f1
 800f898:	0800f8f1 	.word	0x0800f8f1
 800f89c:	0800f8f1 	.word	0x0800f8f1
 800f8a0:	0800f8f1 	.word	0x0800f8f1
 800f8a4:	0800f8f1 	.word	0x0800f8f1
 800f8a8:	0800f8f1 	.word	0x0800f8f1
 800f8ac:	0800f8f1 	.word	0x0800f8f1
 800f8b0:	0800f8f1 	.word	0x0800f8f1
 800f8b4:	0800f8f1 	.word	0x0800f8f1
 800f8b8:	0800f8f1 	.word	0x0800f8f1
 800f8bc:	0800f8f1 	.word	0x0800f8f1
 800f8c0:	0800f8f1 	.word	0x0800f8f1
 800f8c4:	0800f8f1 	.word	0x0800f8f1
 800f8c8:	0800f8f1 	.word	0x0800f8f1
 800f8cc:	0800f8f1 	.word	0x0800f8f1
 800f8d0:	0800f8f1 	.word	0x0800f8f1
 800f8d4:	0800f8f1 	.word	0x0800f8f1
 800f8d8:	0800f8f1 	.word	0x0800f8f1
 800f8dc:	0800f8f1 	.word	0x0800f8f1
 800f8e0:	0800f8f1 	.word	0x0800f8f1
 800f8e4:	0800f8f1 	.word	0x0800f8f1
 800f8e8:	0800f8f1 	.word	0x0800f8f1
 800f8ec:	0800f8f1 	.word	0x0800f8f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f8f0:	bf00      	nop
  }

  return (USBD_OK);
 800f8f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr

0800f900 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 command_CMD[0] = Buf[0];
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	781a      	ldrb	r2, [r3, #0]
 800f90e:	4b05      	ldr	r3, [pc, #20]	; (800f924 <CDC_Receive_FS+0x24>)
 800f910:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f912:	4805      	ldr	r0, [pc, #20]	; (800f928 <CDC_Receive_FS+0x28>)
 800f914:	f7fb fa36 	bl	800ad84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f918:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	20000894 	.word	0x20000894
 800f928:	200052c8 	.word	0x200052c8

0800f92c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	460b      	mov	r3, r1
 800f936:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f938:	2300      	movs	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f93c:	4b0d      	ldr	r3, [pc, #52]	; (800f974 <CDC_Transmit_FS+0x48>)
 800f93e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f942:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d001      	beq.n	800f952 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f94e:	2301      	movs	r3, #1
 800f950:	e00b      	b.n	800f96a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f952:	887b      	ldrh	r3, [r7, #2]
 800f954:	461a      	mov	r2, r3
 800f956:	6879      	ldr	r1, [r7, #4]
 800f958:	4806      	ldr	r0, [pc, #24]	; (800f974 <CDC_Transmit_FS+0x48>)
 800f95a:	f7fb f98d 	bl	800ac78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f95e:	4805      	ldr	r0, [pc, #20]	; (800f974 <CDC_Transmit_FS+0x48>)
 800f960:	f7fb f9ca 	bl	800acf8 <USBD_CDC_TransmitPacket>
 800f964:	4603      	mov	r3, r0
 800f966:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f968:	7bfb      	ldrb	r3, [r7, #15]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	200052c8 	.word	0x200052c8

0800f978 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f978:	b480      	push	{r7}
 800f97a:	b087      	sub	sp, #28
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	4613      	mov	r3, r2
 800f984:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f98a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f98e:	4618      	mov	r0, r3
 800f990:	371c      	adds	r7, #28
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
	...

0800f99c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	6039      	str	r1, [r7, #0]
 800f9a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	2212      	movs	r2, #18
 800f9ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f9ae:	4b03      	ldr	r3, [pc, #12]	; (800f9bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr
 800f9bc:	20000104 	.word	0x20000104

0800f9c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	6039      	str	r1, [r7, #0]
 800f9ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	2204      	movs	r2, #4
 800f9d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f9d2:	4b03      	ldr	r3, [pc, #12]	; (800f9e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr
 800f9e0:	20000118 	.word	0x20000118

0800f9e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	6039      	str	r1, [r7, #0]
 800f9ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f9f0:	79fb      	ldrb	r3, [r7, #7]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d105      	bne.n	800fa02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f9f6:	683a      	ldr	r2, [r7, #0]
 800f9f8:	4907      	ldr	r1, [pc, #28]	; (800fa18 <USBD_FS_ProductStrDescriptor+0x34>)
 800f9fa:	4808      	ldr	r0, [pc, #32]	; (800fa1c <USBD_FS_ProductStrDescriptor+0x38>)
 800f9fc:	f7fc fc0a 	bl	800c214 <USBD_GetString>
 800fa00:	e004      	b.n	800fa0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa02:	683a      	ldr	r2, [r7, #0]
 800fa04:	4904      	ldr	r1, [pc, #16]	; (800fa18 <USBD_FS_ProductStrDescriptor+0x34>)
 800fa06:	4805      	ldr	r0, [pc, #20]	; (800fa1c <USBD_FS_ProductStrDescriptor+0x38>)
 800fa08:	f7fc fc04 	bl	800c214 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa0c:	4b02      	ldr	r3, [pc, #8]	; (800fa18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	200065a4 	.word	0x200065a4
 800fa1c:	08010824 	.word	0x08010824

0800fa20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	4603      	mov	r3, r0
 800fa28:	6039      	str	r1, [r7, #0]
 800fa2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fa2c:	683a      	ldr	r2, [r7, #0]
 800fa2e:	4904      	ldr	r1, [pc, #16]	; (800fa40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fa30:	4804      	ldr	r0, [pc, #16]	; (800fa44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fa32:	f7fc fbef 	bl	800c214 <USBD_GetString>
  return USBD_StrDesc;
 800fa36:	4b02      	ldr	r3, [pc, #8]	; (800fa40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	200065a4 	.word	0x200065a4
 800fa44:	0801083c 	.word	0x0801083c

0800fa48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	6039      	str	r1, [r7, #0]
 800fa52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	221a      	movs	r2, #26
 800fa58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fa5a:	f000 f843 	bl	800fae4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fa5e:	4b02      	ldr	r3, [pc, #8]	; (800fa68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	2000011c 	.word	0x2000011c

0800fa6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	4603      	mov	r3, r0
 800fa74:	6039      	str	r1, [r7, #0]
 800fa76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fa78:	79fb      	ldrb	r3, [r7, #7]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d105      	bne.n	800fa8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fa7e:	683a      	ldr	r2, [r7, #0]
 800fa80:	4907      	ldr	r1, [pc, #28]	; (800faa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fa82:	4808      	ldr	r0, [pc, #32]	; (800faa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fa84:	f7fc fbc6 	bl	800c214 <USBD_GetString>
 800fa88:	e004      	b.n	800fa94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fa8a:	683a      	ldr	r2, [r7, #0]
 800fa8c:	4904      	ldr	r1, [pc, #16]	; (800faa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fa8e:	4805      	ldr	r0, [pc, #20]	; (800faa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fa90:	f7fc fbc0 	bl	800c214 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa94:	4b02      	ldr	r3, [pc, #8]	; (800faa0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3708      	adds	r7, #8
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	200065a4 	.word	0x200065a4
 800faa4:	08010850 	.word	0x08010850

0800faa8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	4603      	mov	r3, r0
 800fab0:	6039      	str	r1, [r7, #0]
 800fab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fab4:	79fb      	ldrb	r3, [r7, #7]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d105      	bne.n	800fac6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800faba:	683a      	ldr	r2, [r7, #0]
 800fabc:	4907      	ldr	r1, [pc, #28]	; (800fadc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fabe:	4808      	ldr	r0, [pc, #32]	; (800fae0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fac0:	f7fc fba8 	bl	800c214 <USBD_GetString>
 800fac4:	e004      	b.n	800fad0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fac6:	683a      	ldr	r2, [r7, #0]
 800fac8:	4904      	ldr	r1, [pc, #16]	; (800fadc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800faca:	4805      	ldr	r0, [pc, #20]	; (800fae0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800facc:	f7fc fba2 	bl	800c214 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fad0:	4b02      	ldr	r3, [pc, #8]	; (800fadc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3708      	adds	r7, #8
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	200065a4 	.word	0x200065a4
 800fae0:	0801085c 	.word	0x0801085c

0800fae4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800faea:	4b0f      	ldr	r3, [pc, #60]	; (800fb28 <Get_SerialNum+0x44>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800faf0:	4b0e      	ldr	r3, [pc, #56]	; (800fb2c <Get_SerialNum+0x48>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800faf6:	4b0e      	ldr	r3, [pc, #56]	; (800fb30 <Get_SerialNum+0x4c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	4413      	add	r3, r2
 800fb02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d009      	beq.n	800fb1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fb0a:	2208      	movs	r2, #8
 800fb0c:	4909      	ldr	r1, [pc, #36]	; (800fb34 <Get_SerialNum+0x50>)
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f000 f814 	bl	800fb3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fb14:	2204      	movs	r2, #4
 800fb16:	4908      	ldr	r1, [pc, #32]	; (800fb38 <Get_SerialNum+0x54>)
 800fb18:	68b8      	ldr	r0, [r7, #8]
 800fb1a:	f000 f80f 	bl	800fb3c <IntToUnicode>
  }
}
 800fb1e:	bf00      	nop
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	1fff7a10 	.word	0x1fff7a10
 800fb2c:	1fff7a14 	.word	0x1fff7a14
 800fb30:	1fff7a18 	.word	0x1fff7a18
 800fb34:	2000011e 	.word	0x2000011e
 800fb38:	2000012e 	.word	0x2000012e

0800fb3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b087      	sub	sp, #28
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	4613      	mov	r3, r2
 800fb48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fb4e:	2300      	movs	r3, #0
 800fb50:	75fb      	strb	r3, [r7, #23]
 800fb52:	e027      	b.n	800fba4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	0f1b      	lsrs	r3, r3, #28
 800fb58:	2b09      	cmp	r3, #9
 800fb5a:	d80b      	bhi.n	800fb74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	0f1b      	lsrs	r3, r3, #28
 800fb60:	b2da      	uxtb	r2, r3
 800fb62:	7dfb      	ldrb	r3, [r7, #23]
 800fb64:	005b      	lsls	r3, r3, #1
 800fb66:	4619      	mov	r1, r3
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	440b      	add	r3, r1
 800fb6c:	3230      	adds	r2, #48	; 0x30
 800fb6e:	b2d2      	uxtb	r2, r2
 800fb70:	701a      	strb	r2, [r3, #0]
 800fb72:	e00a      	b.n	800fb8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	0f1b      	lsrs	r3, r3, #28
 800fb78:	b2da      	uxtb	r2, r3
 800fb7a:	7dfb      	ldrb	r3, [r7, #23]
 800fb7c:	005b      	lsls	r3, r3, #1
 800fb7e:	4619      	mov	r1, r3
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	440b      	add	r3, r1
 800fb84:	3237      	adds	r2, #55	; 0x37
 800fb86:	b2d2      	uxtb	r2, r2
 800fb88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	011b      	lsls	r3, r3, #4
 800fb8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fb90:	7dfb      	ldrb	r3, [r7, #23]
 800fb92:	005b      	lsls	r3, r3, #1
 800fb94:	3301      	adds	r3, #1
 800fb96:	68ba      	ldr	r2, [r7, #8]
 800fb98:	4413      	add	r3, r2
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fb9e:	7dfb      	ldrb	r3, [r7, #23]
 800fba0:	3301      	adds	r3, #1
 800fba2:	75fb      	strb	r3, [r7, #23]
 800fba4:	7dfa      	ldrb	r2, [r7, #23]
 800fba6:	79fb      	ldrb	r3, [r7, #7]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d3d3      	bcc.n	800fb54 <IntToUnicode+0x18>
  }
}
 800fbac:	bf00      	nop
 800fbae:	bf00      	nop
 800fbb0:	371c      	adds	r7, #28
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr
	...

0800fbbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b08a      	sub	sp, #40	; 0x28
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fbc4:	f107 0314 	add.w	r3, r7, #20
 800fbc8:	2200      	movs	r2, #0
 800fbca:	601a      	str	r2, [r3, #0]
 800fbcc:	605a      	str	r2, [r3, #4]
 800fbce:	609a      	str	r2, [r3, #8]
 800fbd0:	60da      	str	r2, [r3, #12]
 800fbd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbdc:	d13a      	bne.n	800fc54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbde:	2300      	movs	r3, #0
 800fbe0:	613b      	str	r3, [r7, #16]
 800fbe2:	4b1e      	ldr	r3, [pc, #120]	; (800fc5c <HAL_PCD_MspInit+0xa0>)
 800fbe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbe6:	4a1d      	ldr	r2, [pc, #116]	; (800fc5c <HAL_PCD_MspInit+0xa0>)
 800fbe8:	f043 0301 	orr.w	r3, r3, #1
 800fbec:	6313      	str	r3, [r2, #48]	; 0x30
 800fbee:	4b1b      	ldr	r3, [pc, #108]	; (800fc5c <HAL_PCD_MspInit+0xa0>)
 800fbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbf2:	f003 0301 	and.w	r3, r3, #1
 800fbf6:	613b      	str	r3, [r7, #16]
 800fbf8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fbfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fbfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc00:	2302      	movs	r3, #2
 800fc02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc04:	2300      	movs	r3, #0
 800fc06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc08:	2303      	movs	r3, #3
 800fc0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fc0c:	230a      	movs	r3, #10
 800fc0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc10:	f107 0314 	add.w	r3, r7, #20
 800fc14:	4619      	mov	r1, r3
 800fc16:	4812      	ldr	r0, [pc, #72]	; (800fc60 <HAL_PCD_MspInit+0xa4>)
 800fc18:	f7f4 f9a2 	bl	8003f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc1c:	4b0f      	ldr	r3, [pc, #60]	; (800fc5c <HAL_PCD_MspInit+0xa0>)
 800fc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc20:	4a0e      	ldr	r2, [pc, #56]	; (800fc5c <HAL_PCD_MspInit+0xa0>)
 800fc22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc26:	6353      	str	r3, [r2, #52]	; 0x34
 800fc28:	2300      	movs	r3, #0
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	4b0b      	ldr	r3, [pc, #44]	; (800fc5c <HAL_PCD_MspInit+0xa0>)
 800fc2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc30:	4a0a      	ldr	r2, [pc, #40]	; (800fc5c <HAL_PCD_MspInit+0xa0>)
 800fc32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc36:	6453      	str	r3, [r2, #68]	; 0x44
 800fc38:	4b08      	ldr	r3, [pc, #32]	; (800fc5c <HAL_PCD_MspInit+0xa0>)
 800fc3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc40:	60fb      	str	r3, [r7, #12]
 800fc42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fc44:	2200      	movs	r2, #0
 800fc46:	2105      	movs	r1, #5
 800fc48:	2043      	movs	r0, #67	; 0x43
 800fc4a:	f7f3 fdcd 	bl	80037e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fc4e:	2043      	movs	r0, #67	; 0x43
 800fc50:	f7f3 fde6 	bl	8003820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc54:	bf00      	nop
 800fc56:	3728      	adds	r7, #40	; 0x28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	40023800 	.word	0x40023800
 800fc60:	40020000 	.word	0x40020000

0800fc64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fc78:	4619      	mov	r1, r3
 800fc7a:	4610      	mov	r0, r2
 800fc7c:	f7fb f96b 	bl	800af56 <USBD_LL_SetupStage>
}
 800fc80:	bf00      	nop
 800fc82:	3708      	adds	r7, #8
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	460b      	mov	r3, r1
 800fc92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fc9a:	78fa      	ldrb	r2, [r7, #3]
 800fc9c:	6879      	ldr	r1, [r7, #4]
 800fc9e:	4613      	mov	r3, r2
 800fca0:	00db      	lsls	r3, r3, #3
 800fca2:	4413      	add	r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	440b      	add	r3, r1
 800fca8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	78fb      	ldrb	r3, [r7, #3]
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	f7fb f9a5 	bl	800b000 <USBD_LL_DataOutStage>
}
 800fcb6:	bf00      	nop
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b082      	sub	sp, #8
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fcd0:	78fa      	ldrb	r2, [r7, #3]
 800fcd2:	6879      	ldr	r1, [r7, #4]
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	00db      	lsls	r3, r3, #3
 800fcd8:	4413      	add	r3, r2
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	440b      	add	r3, r1
 800fcde:	334c      	adds	r3, #76	; 0x4c
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	78fb      	ldrb	r3, [r7, #3]
 800fce4:	4619      	mov	r1, r3
 800fce6:	f7fb fa3e 	bl	800b166 <USBD_LL_DataInStage>
}
 800fcea:	bf00      	nop
 800fcec:	3708      	adds	r7, #8
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b082      	sub	sp, #8
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fb fb72 	bl	800b3ea <USBD_LL_SOF>
}
 800fd06:	bf00      	nop
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b084      	sub	sp, #16
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fd16:	2301      	movs	r3, #1
 800fd18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	2b02      	cmp	r3, #2
 800fd20:	d001      	beq.n	800fd26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fd22:	f7f3 f803 	bl	8002d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd2c:	7bfa      	ldrb	r2, [r7, #15]
 800fd2e:	4611      	mov	r1, r2
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fb fb1c 	bl	800b36e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7fb fac4 	bl	800b2ca <USBD_LL_Reset>
}
 800fd42:	bf00      	nop
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
	...

0800fd4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fb fb17 	bl	800b38e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	6812      	ldr	r2, [r2, #0]
 800fd6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd72:	f043 0301 	orr.w	r3, r3, #1
 800fd76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6a1b      	ldr	r3, [r3, #32]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d005      	beq.n	800fd8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd80:	4b04      	ldr	r3, [pc, #16]	; (800fd94 <HAL_PCD_SuspendCallback+0x48>)
 800fd82:	691b      	ldr	r3, [r3, #16]
 800fd84:	4a03      	ldr	r2, [pc, #12]	; (800fd94 <HAL_PCD_SuspendCallback+0x48>)
 800fd86:	f043 0306 	orr.w	r3, r3, #6
 800fd8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fd8c:	bf00      	nop
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	e000ed00 	.word	0xe000ed00

0800fd98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fb fb07 	bl	800b3ba <USBD_LL_Resume>
}
 800fdac:	bf00      	nop
 800fdae:	3708      	adds	r7, #8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fdc6:	78fa      	ldrb	r2, [r7, #3]
 800fdc8:	4611      	mov	r1, r2
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7fb fb5f 	bl	800b48e <USBD_LL_IsoOUTIncomplete>
}
 800fdd0:	bf00      	nop
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	460b      	mov	r3, r1
 800fde2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fdea:	78fa      	ldrb	r2, [r7, #3]
 800fdec:	4611      	mov	r1, r2
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fb fb1b 	bl	800b42a <USBD_LL_IsoINIncomplete>
}
 800fdf4:	bf00      	nop
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fb fb71 	bl	800b4f2 <USBD_LL_DevConnected>
}
 800fe10:	bf00      	nop
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7fb fb6e 	bl	800b508 <USBD_LL_DevDisconnected>
}
 800fe2c:	bf00      	nop
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d13c      	bne.n	800febe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fe44:	4a20      	ldr	r2, [pc, #128]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4a1e      	ldr	r2, [pc, #120]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe50:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fe54:	4b1c      	ldr	r3, [pc, #112]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fe5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fe5c:	4b1a      	ldr	r3, [pc, #104]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe5e:	2204      	movs	r2, #4
 800fe60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fe62:	4b19      	ldr	r3, [pc, #100]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe64:	2202      	movs	r2, #2
 800fe66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fe68:	4b17      	ldr	r3, [pc, #92]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fe6e:	4b16      	ldr	r3, [pc, #88]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe70:	2202      	movs	r2, #2
 800fe72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fe74:	4b14      	ldr	r3, [pc, #80]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe76:	2200      	movs	r2, #0
 800fe78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fe7a:	4b13      	ldr	r3, [pc, #76]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fe80:	4b11      	ldr	r3, [pc, #68]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fe86:	4b10      	ldr	r3, [pc, #64]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fe8c:	4b0e      	ldr	r3, [pc, #56]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe8e:	2200      	movs	r2, #0
 800fe90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fe92:	480d      	ldr	r0, [pc, #52]	; (800fec8 <USBD_LL_Init+0x94>)
 800fe94:	f7f5 ff93 	bl	8005dbe <HAL_PCD_Init>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d001      	beq.n	800fea2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fe9e:	f7f2 ff45 	bl	8002d2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fea2:	2180      	movs	r1, #128	; 0x80
 800fea4:	4808      	ldr	r0, [pc, #32]	; (800fec8 <USBD_LL_Init+0x94>)
 800fea6:	f7f7 f9ea 	bl	800727e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800feaa:	2240      	movs	r2, #64	; 0x40
 800feac:	2100      	movs	r1, #0
 800feae:	4806      	ldr	r0, [pc, #24]	; (800fec8 <USBD_LL_Init+0x94>)
 800feb0:	f7f7 f99e 	bl	80071f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800feb4:	2280      	movs	r2, #128	; 0x80
 800feb6:	2101      	movs	r1, #1
 800feb8:	4803      	ldr	r0, [pc, #12]	; (800fec8 <USBD_LL_Init+0x94>)
 800feba:	f7f7 f999 	bl	80071f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	200067a4 	.word	0x200067a4

0800fecc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b084      	sub	sp, #16
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fed4:	2300      	movs	r3, #0
 800fed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fed8:	2300      	movs	r3, #0
 800feda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f6 f888 	bl	8005ff8 <HAL_PCD_Start>
 800fee8:	4603      	mov	r3, r0
 800feea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800feec:	7bfb      	ldrb	r3, [r7, #15]
 800feee:	4618      	mov	r0, r3
 800fef0:	f000 f942 	bl	8010178 <USBD_Get_USB_Status>
 800fef4:	4603      	mov	r3, r0
 800fef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fef8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3710      	adds	r7, #16
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b084      	sub	sp, #16
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	4608      	mov	r0, r1
 800ff0c:	4611      	mov	r1, r2
 800ff0e:	461a      	mov	r2, r3
 800ff10:	4603      	mov	r3, r0
 800ff12:	70fb      	strb	r3, [r7, #3]
 800ff14:	460b      	mov	r3, r1
 800ff16:	70bb      	strb	r3, [r7, #2]
 800ff18:	4613      	mov	r3, r2
 800ff1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff20:	2300      	movs	r3, #0
 800ff22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff2a:	78bb      	ldrb	r3, [r7, #2]
 800ff2c:	883a      	ldrh	r2, [r7, #0]
 800ff2e:	78f9      	ldrb	r1, [r7, #3]
 800ff30:	f7f6 fd59 	bl	80069e6 <HAL_PCD_EP_Open>
 800ff34:	4603      	mov	r3, r0
 800ff36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff38:	7bfb      	ldrb	r3, [r7, #15]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f000 f91c 	bl	8010178 <USBD_Get_USB_Status>
 800ff40:	4603      	mov	r3, r0
 800ff42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	b084      	sub	sp, #16
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
 800ff56:	460b      	mov	r3, r1
 800ff58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff68:	78fa      	ldrb	r2, [r7, #3]
 800ff6a:	4611      	mov	r1, r2
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7f6 fda2 	bl	8006ab6 <HAL_PCD_EP_Close>
 800ff72:	4603      	mov	r3, r0
 800ff74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff76:	7bfb      	ldrb	r3, [r7, #15]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f000 f8fd 	bl	8010178 <USBD_Get_USB_Status>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	460b      	mov	r3, r1
 800ff96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffa6:	78fa      	ldrb	r2, [r7, #3]
 800ffa8:	4611      	mov	r1, r2
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7f6 fe7a 	bl	8006ca4 <HAL_PCD_EP_SetStall>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f000 f8de 	bl	8010178 <USBD_Get_USB_Status>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b084      	sub	sp, #16
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffe4:	78fa      	ldrb	r2, [r7, #3]
 800ffe6:	4611      	mov	r1, r2
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7f6 febf 	bl	8006d6c <HAL_PCD_EP_ClrStall>
 800ffee:	4603      	mov	r3, r0
 800fff0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fff2:	7bfb      	ldrb	r3, [r7, #15]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f000 f8bf 	bl	8010178 <USBD_Get_USB_Status>
 800fffa:	4603      	mov	r3, r0
 800fffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010000:	4618      	mov	r0, r3
 8010002:	3710      	adds	r7, #16
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010008:	b480      	push	{r7}
 801000a:	b085      	sub	sp, #20
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	460b      	mov	r3, r1
 8010012:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801001a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801001c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010020:	2b00      	cmp	r3, #0
 8010022:	da0b      	bge.n	801003c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010024:	78fb      	ldrb	r3, [r7, #3]
 8010026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801002a:	68f9      	ldr	r1, [r7, #12]
 801002c:	4613      	mov	r3, r2
 801002e:	00db      	lsls	r3, r3, #3
 8010030:	4413      	add	r3, r2
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	440b      	add	r3, r1
 8010036:	333e      	adds	r3, #62	; 0x3e
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	e00b      	b.n	8010054 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801003c:	78fb      	ldrb	r3, [r7, #3]
 801003e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010042:	68f9      	ldr	r1, [r7, #12]
 8010044:	4613      	mov	r3, r2
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	4413      	add	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	440b      	add	r3, r1
 801004e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010052:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010054:	4618      	mov	r0, r3
 8010056:	3714      	adds	r7, #20
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	460b      	mov	r3, r1
 801006a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801006c:	2300      	movs	r3, #0
 801006e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010070:	2300      	movs	r3, #0
 8010072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801007a:	78fa      	ldrb	r2, [r7, #3]
 801007c:	4611      	mov	r1, r2
 801007e:	4618      	mov	r0, r3
 8010080:	f7f6 fc8c 	bl	800699c <HAL_PCD_SetAddress>
 8010084:	4603      	mov	r3, r0
 8010086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010088:	7bfb      	ldrb	r3, [r7, #15]
 801008a:	4618      	mov	r0, r3
 801008c:	f000 f874 	bl	8010178 <USBD_Get_USB_Status>
 8010090:	4603      	mov	r3, r0
 8010092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010094:	7bbb      	ldrb	r3, [r7, #14]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b086      	sub	sp, #24
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	60f8      	str	r0, [r7, #12]
 80100a6:	607a      	str	r2, [r7, #4]
 80100a8:	603b      	str	r3, [r7, #0]
 80100aa:	460b      	mov	r3, r1
 80100ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ae:	2300      	movs	r3, #0
 80100b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100b2:	2300      	movs	r3, #0
 80100b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80100bc:	7af9      	ldrb	r1, [r7, #11]
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	f7f6 fda5 	bl	8006c10 <HAL_PCD_EP_Transmit>
 80100c6:	4603      	mov	r3, r0
 80100c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f000 f853 	bl	8010178 <USBD_Get_USB_Status>
 80100d2:	4603      	mov	r3, r0
 80100d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80100d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3718      	adds	r7, #24
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b086      	sub	sp, #24
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	607a      	str	r2, [r7, #4]
 80100ea:	603b      	str	r3, [r7, #0]
 80100ec:	460b      	mov	r3, r1
 80100ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100f0:	2300      	movs	r3, #0
 80100f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100f4:	2300      	movs	r3, #0
 80100f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80100fe:	7af9      	ldrb	r1, [r7, #11]
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	f7f6 fd21 	bl	8006b4a <HAL_PCD_EP_Receive>
 8010108:	4603      	mov	r3, r0
 801010a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801010c:	7dfb      	ldrb	r3, [r7, #23]
 801010e:	4618      	mov	r0, r3
 8010110:	f000 f832 	bl	8010178 <USBD_Get_USB_Status>
 8010114:	4603      	mov	r3, r0
 8010116:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010118:	7dbb      	ldrb	r3, [r7, #22]
}
 801011a:	4618      	mov	r0, r3
 801011c:	3718      	adds	r7, #24
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b082      	sub	sp, #8
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
 801012a:	460b      	mov	r3, r1
 801012c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010134:	78fa      	ldrb	r2, [r7, #3]
 8010136:	4611      	mov	r1, r2
 8010138:	4618      	mov	r0, r3
 801013a:	f7f6 fd51 	bl	8006be0 <HAL_PCD_EP_GetRxCount>
 801013e:	4603      	mov	r3, r0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010150:	4b03      	ldr	r3, [pc, #12]	; (8010160 <USBD_static_malloc+0x18>)
}
 8010152:	4618      	mov	r0, r3
 8010154:	370c      	adds	r7, #12
 8010156:	46bd      	mov	sp, r7
 8010158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015c:	4770      	bx	lr
 801015e:	bf00      	nop
 8010160:	20006cb0 	.word	0x20006cb0

08010164 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]

}
 801016c:	bf00      	nop
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010182:	2300      	movs	r3, #0
 8010184:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010186:	79fb      	ldrb	r3, [r7, #7]
 8010188:	2b03      	cmp	r3, #3
 801018a:	d817      	bhi.n	80101bc <USBD_Get_USB_Status+0x44>
 801018c:	a201      	add	r2, pc, #4	; (adr r2, 8010194 <USBD_Get_USB_Status+0x1c>)
 801018e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010192:	bf00      	nop
 8010194:	080101a5 	.word	0x080101a5
 8010198:	080101ab 	.word	0x080101ab
 801019c:	080101b1 	.word	0x080101b1
 80101a0:	080101b7 	.word	0x080101b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80101a4:	2300      	movs	r3, #0
 80101a6:	73fb      	strb	r3, [r7, #15]
    break;
 80101a8:	e00b      	b.n	80101c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80101aa:	2303      	movs	r3, #3
 80101ac:	73fb      	strb	r3, [r7, #15]
    break;
 80101ae:	e008      	b.n	80101c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80101b0:	2301      	movs	r3, #1
 80101b2:	73fb      	strb	r3, [r7, #15]
    break;
 80101b4:	e005      	b.n	80101c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80101b6:	2303      	movs	r3, #3
 80101b8:	73fb      	strb	r3, [r7, #15]
    break;
 80101ba:	e002      	b.n	80101c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80101bc:	2303      	movs	r3, #3
 80101be:	73fb      	strb	r3, [r7, #15]
    break;
 80101c0:	bf00      	nop
  }
  return usb_status;
 80101c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3714      	adds	r7, #20
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr

080101d0 <__errno>:
 80101d0:	4b01      	ldr	r3, [pc, #4]	; (80101d8 <__errno+0x8>)
 80101d2:	6818      	ldr	r0, [r3, #0]
 80101d4:	4770      	bx	lr
 80101d6:	bf00      	nop
 80101d8:	20000138 	.word	0x20000138

080101dc <__libc_init_array>:
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	4d0d      	ldr	r5, [pc, #52]	; (8010214 <__libc_init_array+0x38>)
 80101e0:	4c0d      	ldr	r4, [pc, #52]	; (8010218 <__libc_init_array+0x3c>)
 80101e2:	1b64      	subs	r4, r4, r5
 80101e4:	10a4      	asrs	r4, r4, #2
 80101e6:	2600      	movs	r6, #0
 80101e8:	42a6      	cmp	r6, r4
 80101ea:	d109      	bne.n	8010200 <__libc_init_array+0x24>
 80101ec:	4d0b      	ldr	r5, [pc, #44]	; (801021c <__libc_init_array+0x40>)
 80101ee:	4c0c      	ldr	r4, [pc, #48]	; (8010220 <__libc_init_array+0x44>)
 80101f0:	f000 f9fa 	bl	80105e8 <_init>
 80101f4:	1b64      	subs	r4, r4, r5
 80101f6:	10a4      	asrs	r4, r4, #2
 80101f8:	2600      	movs	r6, #0
 80101fa:	42a6      	cmp	r6, r4
 80101fc:	d105      	bne.n	801020a <__libc_init_array+0x2e>
 80101fe:	bd70      	pop	{r4, r5, r6, pc}
 8010200:	f855 3b04 	ldr.w	r3, [r5], #4
 8010204:	4798      	blx	r3
 8010206:	3601      	adds	r6, #1
 8010208:	e7ee      	b.n	80101e8 <__libc_init_array+0xc>
 801020a:	f855 3b04 	ldr.w	r3, [r5], #4
 801020e:	4798      	blx	r3
 8010210:	3601      	adds	r6, #1
 8010212:	e7f2      	b.n	80101fa <__libc_init_array+0x1e>
 8010214:	08011718 	.word	0x08011718
 8010218:	08011718 	.word	0x08011718
 801021c:	08011718 	.word	0x08011718
 8010220:	0801171c 	.word	0x0801171c

08010224 <__itoa>:
 8010224:	1e93      	subs	r3, r2, #2
 8010226:	2b22      	cmp	r3, #34	; 0x22
 8010228:	b510      	push	{r4, lr}
 801022a:	460c      	mov	r4, r1
 801022c:	d904      	bls.n	8010238 <__itoa+0x14>
 801022e:	2300      	movs	r3, #0
 8010230:	700b      	strb	r3, [r1, #0]
 8010232:	461c      	mov	r4, r3
 8010234:	4620      	mov	r0, r4
 8010236:	bd10      	pop	{r4, pc}
 8010238:	2a0a      	cmp	r2, #10
 801023a:	d109      	bne.n	8010250 <__itoa+0x2c>
 801023c:	2800      	cmp	r0, #0
 801023e:	da07      	bge.n	8010250 <__itoa+0x2c>
 8010240:	232d      	movs	r3, #45	; 0x2d
 8010242:	700b      	strb	r3, [r1, #0]
 8010244:	4240      	negs	r0, r0
 8010246:	2101      	movs	r1, #1
 8010248:	4421      	add	r1, r4
 801024a:	f000 f97f 	bl	801054c <__utoa>
 801024e:	e7f1      	b.n	8010234 <__itoa+0x10>
 8010250:	2100      	movs	r1, #0
 8010252:	e7f9      	b.n	8010248 <__itoa+0x24>

08010254 <itoa>:
 8010254:	f7ff bfe6 	b.w	8010224 <__itoa>

08010258 <__retarget_lock_acquire_recursive>:
 8010258:	4770      	bx	lr

0801025a <__retarget_lock_release_recursive>:
 801025a:	4770      	bx	lr

0801025c <malloc>:
 801025c:	4b02      	ldr	r3, [pc, #8]	; (8010268 <malloc+0xc>)
 801025e:	4601      	mov	r1, r0
 8010260:	6818      	ldr	r0, [r3, #0]
 8010262:	f000 b885 	b.w	8010370 <_malloc_r>
 8010266:	bf00      	nop
 8010268:	20000138 	.word	0x20000138

0801026c <memcpy>:
 801026c:	440a      	add	r2, r1
 801026e:	4291      	cmp	r1, r2
 8010270:	f100 33ff 	add.w	r3, r0, #4294967295
 8010274:	d100      	bne.n	8010278 <memcpy+0xc>
 8010276:	4770      	bx	lr
 8010278:	b510      	push	{r4, lr}
 801027a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801027e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010282:	4291      	cmp	r1, r2
 8010284:	d1f9      	bne.n	801027a <memcpy+0xe>
 8010286:	bd10      	pop	{r4, pc}

08010288 <memset>:
 8010288:	4402      	add	r2, r0
 801028a:	4603      	mov	r3, r0
 801028c:	4293      	cmp	r3, r2
 801028e:	d100      	bne.n	8010292 <memset+0xa>
 8010290:	4770      	bx	lr
 8010292:	f803 1b01 	strb.w	r1, [r3], #1
 8010296:	e7f9      	b.n	801028c <memset+0x4>

08010298 <_free_r>:
 8010298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801029a:	2900      	cmp	r1, #0
 801029c:	d044      	beq.n	8010328 <_free_r+0x90>
 801029e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102a2:	9001      	str	r0, [sp, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f1a1 0404 	sub.w	r4, r1, #4
 80102aa:	bfb8      	it	lt
 80102ac:	18e4      	addlt	r4, r4, r3
 80102ae:	f000 f98f 	bl	80105d0 <__malloc_lock>
 80102b2:	4a1e      	ldr	r2, [pc, #120]	; (801032c <_free_r+0x94>)
 80102b4:	9801      	ldr	r0, [sp, #4]
 80102b6:	6813      	ldr	r3, [r2, #0]
 80102b8:	b933      	cbnz	r3, 80102c8 <_free_r+0x30>
 80102ba:	6063      	str	r3, [r4, #4]
 80102bc:	6014      	str	r4, [r2, #0]
 80102be:	b003      	add	sp, #12
 80102c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102c4:	f000 b98a 	b.w	80105dc <__malloc_unlock>
 80102c8:	42a3      	cmp	r3, r4
 80102ca:	d908      	bls.n	80102de <_free_r+0x46>
 80102cc:	6825      	ldr	r5, [r4, #0]
 80102ce:	1961      	adds	r1, r4, r5
 80102d0:	428b      	cmp	r3, r1
 80102d2:	bf01      	itttt	eq
 80102d4:	6819      	ldreq	r1, [r3, #0]
 80102d6:	685b      	ldreq	r3, [r3, #4]
 80102d8:	1949      	addeq	r1, r1, r5
 80102da:	6021      	streq	r1, [r4, #0]
 80102dc:	e7ed      	b.n	80102ba <_free_r+0x22>
 80102de:	461a      	mov	r2, r3
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	b10b      	cbz	r3, 80102e8 <_free_r+0x50>
 80102e4:	42a3      	cmp	r3, r4
 80102e6:	d9fa      	bls.n	80102de <_free_r+0x46>
 80102e8:	6811      	ldr	r1, [r2, #0]
 80102ea:	1855      	adds	r5, r2, r1
 80102ec:	42a5      	cmp	r5, r4
 80102ee:	d10b      	bne.n	8010308 <_free_r+0x70>
 80102f0:	6824      	ldr	r4, [r4, #0]
 80102f2:	4421      	add	r1, r4
 80102f4:	1854      	adds	r4, r2, r1
 80102f6:	42a3      	cmp	r3, r4
 80102f8:	6011      	str	r1, [r2, #0]
 80102fa:	d1e0      	bne.n	80102be <_free_r+0x26>
 80102fc:	681c      	ldr	r4, [r3, #0]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	6053      	str	r3, [r2, #4]
 8010302:	4421      	add	r1, r4
 8010304:	6011      	str	r1, [r2, #0]
 8010306:	e7da      	b.n	80102be <_free_r+0x26>
 8010308:	d902      	bls.n	8010310 <_free_r+0x78>
 801030a:	230c      	movs	r3, #12
 801030c:	6003      	str	r3, [r0, #0]
 801030e:	e7d6      	b.n	80102be <_free_r+0x26>
 8010310:	6825      	ldr	r5, [r4, #0]
 8010312:	1961      	adds	r1, r4, r5
 8010314:	428b      	cmp	r3, r1
 8010316:	bf04      	itt	eq
 8010318:	6819      	ldreq	r1, [r3, #0]
 801031a:	685b      	ldreq	r3, [r3, #4]
 801031c:	6063      	str	r3, [r4, #4]
 801031e:	bf04      	itt	eq
 8010320:	1949      	addeq	r1, r1, r5
 8010322:	6021      	streq	r1, [r4, #0]
 8010324:	6054      	str	r4, [r2, #4]
 8010326:	e7ca      	b.n	80102be <_free_r+0x26>
 8010328:	b003      	add	sp, #12
 801032a:	bd30      	pop	{r4, r5, pc}
 801032c:	20006ed4 	.word	0x20006ed4

08010330 <sbrk_aligned>:
 8010330:	b570      	push	{r4, r5, r6, lr}
 8010332:	4e0e      	ldr	r6, [pc, #56]	; (801036c <sbrk_aligned+0x3c>)
 8010334:	460c      	mov	r4, r1
 8010336:	6831      	ldr	r1, [r6, #0]
 8010338:	4605      	mov	r5, r0
 801033a:	b911      	cbnz	r1, 8010342 <sbrk_aligned+0x12>
 801033c:	f000 f8f6 	bl	801052c <_sbrk_r>
 8010340:	6030      	str	r0, [r6, #0]
 8010342:	4621      	mov	r1, r4
 8010344:	4628      	mov	r0, r5
 8010346:	f000 f8f1 	bl	801052c <_sbrk_r>
 801034a:	1c43      	adds	r3, r0, #1
 801034c:	d00a      	beq.n	8010364 <sbrk_aligned+0x34>
 801034e:	1cc4      	adds	r4, r0, #3
 8010350:	f024 0403 	bic.w	r4, r4, #3
 8010354:	42a0      	cmp	r0, r4
 8010356:	d007      	beq.n	8010368 <sbrk_aligned+0x38>
 8010358:	1a21      	subs	r1, r4, r0
 801035a:	4628      	mov	r0, r5
 801035c:	f000 f8e6 	bl	801052c <_sbrk_r>
 8010360:	3001      	adds	r0, #1
 8010362:	d101      	bne.n	8010368 <sbrk_aligned+0x38>
 8010364:	f04f 34ff 	mov.w	r4, #4294967295
 8010368:	4620      	mov	r0, r4
 801036a:	bd70      	pop	{r4, r5, r6, pc}
 801036c:	20006ed8 	.word	0x20006ed8

08010370 <_malloc_r>:
 8010370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010374:	1ccd      	adds	r5, r1, #3
 8010376:	f025 0503 	bic.w	r5, r5, #3
 801037a:	3508      	adds	r5, #8
 801037c:	2d0c      	cmp	r5, #12
 801037e:	bf38      	it	cc
 8010380:	250c      	movcc	r5, #12
 8010382:	2d00      	cmp	r5, #0
 8010384:	4607      	mov	r7, r0
 8010386:	db01      	blt.n	801038c <_malloc_r+0x1c>
 8010388:	42a9      	cmp	r1, r5
 801038a:	d905      	bls.n	8010398 <_malloc_r+0x28>
 801038c:	230c      	movs	r3, #12
 801038e:	603b      	str	r3, [r7, #0]
 8010390:	2600      	movs	r6, #0
 8010392:	4630      	mov	r0, r6
 8010394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010398:	4e2e      	ldr	r6, [pc, #184]	; (8010454 <_malloc_r+0xe4>)
 801039a:	f000 f919 	bl	80105d0 <__malloc_lock>
 801039e:	6833      	ldr	r3, [r6, #0]
 80103a0:	461c      	mov	r4, r3
 80103a2:	bb34      	cbnz	r4, 80103f2 <_malloc_r+0x82>
 80103a4:	4629      	mov	r1, r5
 80103a6:	4638      	mov	r0, r7
 80103a8:	f7ff ffc2 	bl	8010330 <sbrk_aligned>
 80103ac:	1c43      	adds	r3, r0, #1
 80103ae:	4604      	mov	r4, r0
 80103b0:	d14d      	bne.n	801044e <_malloc_r+0xde>
 80103b2:	6834      	ldr	r4, [r6, #0]
 80103b4:	4626      	mov	r6, r4
 80103b6:	2e00      	cmp	r6, #0
 80103b8:	d140      	bne.n	801043c <_malloc_r+0xcc>
 80103ba:	6823      	ldr	r3, [r4, #0]
 80103bc:	4631      	mov	r1, r6
 80103be:	4638      	mov	r0, r7
 80103c0:	eb04 0803 	add.w	r8, r4, r3
 80103c4:	f000 f8b2 	bl	801052c <_sbrk_r>
 80103c8:	4580      	cmp	r8, r0
 80103ca:	d13a      	bne.n	8010442 <_malloc_r+0xd2>
 80103cc:	6821      	ldr	r1, [r4, #0]
 80103ce:	3503      	adds	r5, #3
 80103d0:	1a6d      	subs	r5, r5, r1
 80103d2:	f025 0503 	bic.w	r5, r5, #3
 80103d6:	3508      	adds	r5, #8
 80103d8:	2d0c      	cmp	r5, #12
 80103da:	bf38      	it	cc
 80103dc:	250c      	movcc	r5, #12
 80103de:	4629      	mov	r1, r5
 80103e0:	4638      	mov	r0, r7
 80103e2:	f7ff ffa5 	bl	8010330 <sbrk_aligned>
 80103e6:	3001      	adds	r0, #1
 80103e8:	d02b      	beq.n	8010442 <_malloc_r+0xd2>
 80103ea:	6823      	ldr	r3, [r4, #0]
 80103ec:	442b      	add	r3, r5
 80103ee:	6023      	str	r3, [r4, #0]
 80103f0:	e00e      	b.n	8010410 <_malloc_r+0xa0>
 80103f2:	6822      	ldr	r2, [r4, #0]
 80103f4:	1b52      	subs	r2, r2, r5
 80103f6:	d41e      	bmi.n	8010436 <_malloc_r+0xc6>
 80103f8:	2a0b      	cmp	r2, #11
 80103fa:	d916      	bls.n	801042a <_malloc_r+0xba>
 80103fc:	1961      	adds	r1, r4, r5
 80103fe:	42a3      	cmp	r3, r4
 8010400:	6025      	str	r5, [r4, #0]
 8010402:	bf18      	it	ne
 8010404:	6059      	strne	r1, [r3, #4]
 8010406:	6863      	ldr	r3, [r4, #4]
 8010408:	bf08      	it	eq
 801040a:	6031      	streq	r1, [r6, #0]
 801040c:	5162      	str	r2, [r4, r5]
 801040e:	604b      	str	r3, [r1, #4]
 8010410:	4638      	mov	r0, r7
 8010412:	f104 060b 	add.w	r6, r4, #11
 8010416:	f000 f8e1 	bl	80105dc <__malloc_unlock>
 801041a:	f026 0607 	bic.w	r6, r6, #7
 801041e:	1d23      	adds	r3, r4, #4
 8010420:	1af2      	subs	r2, r6, r3
 8010422:	d0b6      	beq.n	8010392 <_malloc_r+0x22>
 8010424:	1b9b      	subs	r3, r3, r6
 8010426:	50a3      	str	r3, [r4, r2]
 8010428:	e7b3      	b.n	8010392 <_malloc_r+0x22>
 801042a:	6862      	ldr	r2, [r4, #4]
 801042c:	42a3      	cmp	r3, r4
 801042e:	bf0c      	ite	eq
 8010430:	6032      	streq	r2, [r6, #0]
 8010432:	605a      	strne	r2, [r3, #4]
 8010434:	e7ec      	b.n	8010410 <_malloc_r+0xa0>
 8010436:	4623      	mov	r3, r4
 8010438:	6864      	ldr	r4, [r4, #4]
 801043a:	e7b2      	b.n	80103a2 <_malloc_r+0x32>
 801043c:	4634      	mov	r4, r6
 801043e:	6876      	ldr	r6, [r6, #4]
 8010440:	e7b9      	b.n	80103b6 <_malloc_r+0x46>
 8010442:	230c      	movs	r3, #12
 8010444:	603b      	str	r3, [r7, #0]
 8010446:	4638      	mov	r0, r7
 8010448:	f000 f8c8 	bl	80105dc <__malloc_unlock>
 801044c:	e7a1      	b.n	8010392 <_malloc_r+0x22>
 801044e:	6025      	str	r5, [r4, #0]
 8010450:	e7de      	b.n	8010410 <_malloc_r+0xa0>
 8010452:	bf00      	nop
 8010454:	20006ed4 	.word	0x20006ed4

08010458 <cleanup_glue>:
 8010458:	b538      	push	{r3, r4, r5, lr}
 801045a:	460c      	mov	r4, r1
 801045c:	6809      	ldr	r1, [r1, #0]
 801045e:	4605      	mov	r5, r0
 8010460:	b109      	cbz	r1, 8010466 <cleanup_glue+0xe>
 8010462:	f7ff fff9 	bl	8010458 <cleanup_glue>
 8010466:	4621      	mov	r1, r4
 8010468:	4628      	mov	r0, r5
 801046a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801046e:	f7ff bf13 	b.w	8010298 <_free_r>
	...

08010474 <_reclaim_reent>:
 8010474:	4b2c      	ldr	r3, [pc, #176]	; (8010528 <_reclaim_reent+0xb4>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4283      	cmp	r3, r0
 801047a:	b570      	push	{r4, r5, r6, lr}
 801047c:	4604      	mov	r4, r0
 801047e:	d051      	beq.n	8010524 <_reclaim_reent+0xb0>
 8010480:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010482:	b143      	cbz	r3, 8010496 <_reclaim_reent+0x22>
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d14a      	bne.n	8010520 <_reclaim_reent+0xac>
 801048a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801048c:	6819      	ldr	r1, [r3, #0]
 801048e:	b111      	cbz	r1, 8010496 <_reclaim_reent+0x22>
 8010490:	4620      	mov	r0, r4
 8010492:	f7ff ff01 	bl	8010298 <_free_r>
 8010496:	6961      	ldr	r1, [r4, #20]
 8010498:	b111      	cbz	r1, 80104a0 <_reclaim_reent+0x2c>
 801049a:	4620      	mov	r0, r4
 801049c:	f7ff fefc 	bl	8010298 <_free_r>
 80104a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80104a2:	b111      	cbz	r1, 80104aa <_reclaim_reent+0x36>
 80104a4:	4620      	mov	r0, r4
 80104a6:	f7ff fef7 	bl	8010298 <_free_r>
 80104aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80104ac:	b111      	cbz	r1, 80104b4 <_reclaim_reent+0x40>
 80104ae:	4620      	mov	r0, r4
 80104b0:	f7ff fef2 	bl	8010298 <_free_r>
 80104b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80104b6:	b111      	cbz	r1, 80104be <_reclaim_reent+0x4a>
 80104b8:	4620      	mov	r0, r4
 80104ba:	f7ff feed 	bl	8010298 <_free_r>
 80104be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80104c0:	b111      	cbz	r1, 80104c8 <_reclaim_reent+0x54>
 80104c2:	4620      	mov	r0, r4
 80104c4:	f7ff fee8 	bl	8010298 <_free_r>
 80104c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80104ca:	b111      	cbz	r1, 80104d2 <_reclaim_reent+0x5e>
 80104cc:	4620      	mov	r0, r4
 80104ce:	f7ff fee3 	bl	8010298 <_free_r>
 80104d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80104d4:	b111      	cbz	r1, 80104dc <_reclaim_reent+0x68>
 80104d6:	4620      	mov	r0, r4
 80104d8:	f7ff fede 	bl	8010298 <_free_r>
 80104dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104de:	b111      	cbz	r1, 80104e6 <_reclaim_reent+0x72>
 80104e0:	4620      	mov	r0, r4
 80104e2:	f7ff fed9 	bl	8010298 <_free_r>
 80104e6:	69a3      	ldr	r3, [r4, #24]
 80104e8:	b1e3      	cbz	r3, 8010524 <_reclaim_reent+0xb0>
 80104ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80104ec:	4620      	mov	r0, r4
 80104ee:	4798      	blx	r3
 80104f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80104f2:	b1b9      	cbz	r1, 8010524 <_reclaim_reent+0xb0>
 80104f4:	4620      	mov	r0, r4
 80104f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104fa:	f7ff bfad 	b.w	8010458 <cleanup_glue>
 80104fe:	5949      	ldr	r1, [r1, r5]
 8010500:	b941      	cbnz	r1, 8010514 <_reclaim_reent+0xa0>
 8010502:	3504      	adds	r5, #4
 8010504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010506:	2d80      	cmp	r5, #128	; 0x80
 8010508:	68d9      	ldr	r1, [r3, #12]
 801050a:	d1f8      	bne.n	80104fe <_reclaim_reent+0x8a>
 801050c:	4620      	mov	r0, r4
 801050e:	f7ff fec3 	bl	8010298 <_free_r>
 8010512:	e7ba      	b.n	801048a <_reclaim_reent+0x16>
 8010514:	680e      	ldr	r6, [r1, #0]
 8010516:	4620      	mov	r0, r4
 8010518:	f7ff febe 	bl	8010298 <_free_r>
 801051c:	4631      	mov	r1, r6
 801051e:	e7ef      	b.n	8010500 <_reclaim_reent+0x8c>
 8010520:	2500      	movs	r5, #0
 8010522:	e7ef      	b.n	8010504 <_reclaim_reent+0x90>
 8010524:	bd70      	pop	{r4, r5, r6, pc}
 8010526:	bf00      	nop
 8010528:	20000138 	.word	0x20000138

0801052c <_sbrk_r>:
 801052c:	b538      	push	{r3, r4, r5, lr}
 801052e:	4d06      	ldr	r5, [pc, #24]	; (8010548 <_sbrk_r+0x1c>)
 8010530:	2300      	movs	r3, #0
 8010532:	4604      	mov	r4, r0
 8010534:	4608      	mov	r0, r1
 8010536:	602b      	str	r3, [r5, #0]
 8010538:	f7f2 fe00 	bl	800313c <_sbrk>
 801053c:	1c43      	adds	r3, r0, #1
 801053e:	d102      	bne.n	8010546 <_sbrk_r+0x1a>
 8010540:	682b      	ldr	r3, [r5, #0]
 8010542:	b103      	cbz	r3, 8010546 <_sbrk_r+0x1a>
 8010544:	6023      	str	r3, [r4, #0]
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	20006edc 	.word	0x20006edc

0801054c <__utoa>:
 801054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801054e:	4c1f      	ldr	r4, [pc, #124]	; (80105cc <__utoa+0x80>)
 8010550:	b08b      	sub	sp, #44	; 0x2c
 8010552:	4605      	mov	r5, r0
 8010554:	460b      	mov	r3, r1
 8010556:	466e      	mov	r6, sp
 8010558:	f104 0c20 	add.w	ip, r4, #32
 801055c:	6820      	ldr	r0, [r4, #0]
 801055e:	6861      	ldr	r1, [r4, #4]
 8010560:	4637      	mov	r7, r6
 8010562:	c703      	stmia	r7!, {r0, r1}
 8010564:	3408      	adds	r4, #8
 8010566:	4564      	cmp	r4, ip
 8010568:	463e      	mov	r6, r7
 801056a:	d1f7      	bne.n	801055c <__utoa+0x10>
 801056c:	7921      	ldrb	r1, [r4, #4]
 801056e:	7139      	strb	r1, [r7, #4]
 8010570:	1e91      	subs	r1, r2, #2
 8010572:	6820      	ldr	r0, [r4, #0]
 8010574:	6038      	str	r0, [r7, #0]
 8010576:	2922      	cmp	r1, #34	; 0x22
 8010578:	f04f 0100 	mov.w	r1, #0
 801057c:	d904      	bls.n	8010588 <__utoa+0x3c>
 801057e:	7019      	strb	r1, [r3, #0]
 8010580:	460b      	mov	r3, r1
 8010582:	4618      	mov	r0, r3
 8010584:	b00b      	add	sp, #44	; 0x2c
 8010586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010588:	1e58      	subs	r0, r3, #1
 801058a:	4684      	mov	ip, r0
 801058c:	fbb5 f7f2 	udiv	r7, r5, r2
 8010590:	fb02 5617 	mls	r6, r2, r7, r5
 8010594:	3628      	adds	r6, #40	; 0x28
 8010596:	446e      	add	r6, sp
 8010598:	460c      	mov	r4, r1
 801059a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801059e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80105a2:	462e      	mov	r6, r5
 80105a4:	42b2      	cmp	r2, r6
 80105a6:	f101 0101 	add.w	r1, r1, #1
 80105aa:	463d      	mov	r5, r7
 80105ac:	d9ee      	bls.n	801058c <__utoa+0x40>
 80105ae:	2200      	movs	r2, #0
 80105b0:	545a      	strb	r2, [r3, r1]
 80105b2:	1919      	adds	r1, r3, r4
 80105b4:	1aa5      	subs	r5, r4, r2
 80105b6:	42aa      	cmp	r2, r5
 80105b8:	dae3      	bge.n	8010582 <__utoa+0x36>
 80105ba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80105be:	780e      	ldrb	r6, [r1, #0]
 80105c0:	7006      	strb	r6, [r0, #0]
 80105c2:	3201      	adds	r2, #1
 80105c4:	f801 5901 	strb.w	r5, [r1], #-1
 80105c8:	e7f4      	b.n	80105b4 <__utoa+0x68>
 80105ca:	bf00      	nop
 80105cc:	080116e8 	.word	0x080116e8

080105d0 <__malloc_lock>:
 80105d0:	4801      	ldr	r0, [pc, #4]	; (80105d8 <__malloc_lock+0x8>)
 80105d2:	f7ff be41 	b.w	8010258 <__retarget_lock_acquire_recursive>
 80105d6:	bf00      	nop
 80105d8:	20006ed0 	.word	0x20006ed0

080105dc <__malloc_unlock>:
 80105dc:	4801      	ldr	r0, [pc, #4]	; (80105e4 <__malloc_unlock+0x8>)
 80105de:	f7ff be3c 	b.w	801025a <__retarget_lock_release_recursive>
 80105e2:	bf00      	nop
 80105e4:	20006ed0 	.word	0x20006ed0

080105e8 <_init>:
 80105e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ea:	bf00      	nop
 80105ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ee:	bc08      	pop	{r3}
 80105f0:	469e      	mov	lr, r3
 80105f2:	4770      	bx	lr

080105f4 <_fini>:
 80105f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f6:	bf00      	nop
 80105f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105fa:	bc08      	pop	{r3}
 80105fc:	469e      	mov	lr, r3
 80105fe:	4770      	bx	lr
