
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cb4  0800a944  0800a944  0001a944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5f8  0800c5f8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5f8  0800c5f8  0001c5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c600  0800c600  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c600  0800c600  0001c600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c604  0800c604  0001c604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800c608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005118  200000ac  0800c6b4  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200051c4  0800c6b4  000251c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ef6  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004baa  00000000  00000000  00040fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b70  00000000  00000000  00045b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001968  00000000  00000000  000476f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f2  00000000  00000000  00049058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d93  00000000  00000000  0006544a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d427  00000000  00000000  000871dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007684  00000000  00000000  00124654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a92c 	.word	0x0800a92c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	0800a92c 	.word	0x0800a92c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

//static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4639      	mov	r1, r7
 8000ccc:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f009 fca5 	bl	800a624 <malloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	897a      	ldrh	r2, [r7, #10]
 8000ce8:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	1d9a      	adds	r2, r3, #6
 8000cee:	463b      	mov	r3, r7
 8000cf0:	cb03      	ldmia	r3!, {r0, r1}
 8000cf2:	6010      	str	r0, [r2, #0]
 8000cf4:	6051      	str	r1, [r2, #4]
	return pConfig;
 8000cf6:	697b      	ldr	r3, [r7, #20]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1d9a      	adds	r2, r3, #6
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	cb03      	ldmia	r3!, {r0, r1}
 8000d16:	6010      	str	r0, [r2, #0]
 8000d18:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ADS1115_updateConfig+0x60>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	82bb      	strh	r3, [r7, #20]
 8000d20:	2300      	movs	r3, #0
 8000d22:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000d34:	460b      	mov	r3, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f000 f841 	bl	8000dc0 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2303      	movs	r3, #3
 8000d54:	f003 f9b2 	bl	80040bc <HAL_I2C_Master_Transmit>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800a944 	.word	0x0800a944

08000d64 <ADS1115_startContinousMode>:

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
}

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <ADS1115_startContinousMode+0x58>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	82bb      	strh	r3, [r7, #20]
 8000d72:	2300      	movs	r3, #0
 8000d74:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	3206      	adds	r2, #6
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	6851      	ldr	r1, [r2, #4]
 8000d82:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000d88:	f107 0014 	add.w	r0, r7, #20
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000d94:	f000 f814 	bl	8000dc0 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	889b      	ldrh	r3, [r3, #4]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	b299      	uxth	r1, r3
 8000da4:	f107 0214 	add.w	r2, r7, #20
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2303      	movs	r3, #3
 8000dae:	f003 f985 	bl	80040bc <HAL_I2C_Master_Transmit>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	0800a944 	.word	0x0800a944

08000dc0 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t temp[3] = {0};
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <prepareConfigFrame+0xac>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	82bb      	strh	r3, [r7, #20]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	75bb      	strb	r3, [r7, #22]
	pOutFrame[0] = 0x01;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	793b      	ldrb	r3, [r7, #4]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	b259      	sxtb	r1, r3
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	430b      	orrs	r3, r1
 8000df4:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	b259      	sxtb	r1, r3
 8000e18:	7a3b      	ldrb	r3, [r7, #8]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	b259      	sxtb	r1, r3
 8000e22:	7a7b      	ldrb	r3, [r7, #9]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 8000e2c:	7abb      	ldrb	r3, [r7, #10]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	430b      	orrs	r3, r1
 8000e34:	b259      	sxtb	r1, r3
 8000e36:	7afb      	ldrb	r3, [r7, #11]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3302      	adds	r3, #2
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	701a      	strb	r2, [r3, #0]
	temp[0] = pOutFrame[0];
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	753b      	strb	r3, [r7, #20]
	temp[1] = pOutFrame[1];
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	785b      	ldrb	r3, [r3, #1]
 8000e56:	757b      	strb	r3, [r7, #21]
	temp[2] = pOutFrame[2];
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	75bb      	strb	r3, [r7, #22]
}
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	0800a944 	.word	0x0800a944

08000e70 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	ed87 0a00 	vstr	s0, [r7]
 8000e80:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	ed97 0a00 	vldr	s0, [r7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f822 	bl	8000ee0 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}

08000eb2 <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	791b      	ldrb	r3, [r3, #4]
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f003 ff3c 	bl	8004d44 <HAL_I2C_IsDeviceReady>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000eec:	edd7 7a00 	vldr	s15, [r7]
 8000ef0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	d103      	bne.n	8000f02 <MCP4725_setReferenceVoltage+0x22>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <MCP4725_setReferenceVoltage+0x50>)
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	e002      	b.n	8000f08 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f0e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f34 <MCP4725_setReferenceVoltage+0x54>
 8000f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1a:	ee17 3a90 	vmov	r3, s15
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	819a      	strh	r2, [r3, #12]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40533333 	.word	0x40533333
 8000f34:	45800000 	.word	0x45800000

08000f38 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	707b      	strb	r3, [r7, #1]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000f52:	783b      	ldrb	r3, [r7, #0]
 8000f54:	787a      	ldrb	r2, [r7, #1]
 8000f56:	8879      	ldrh	r1, [r7, #2]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f822 	bl	8000fa2 <MCP4725_writeComand>
 8000f5e:	4603      	mov	r3, r0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000f70:	2101      	movs	r1, #1
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f895 	bl	80010a2 <MCP4725_readRegister>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d008      	beq.n	8000f98 <MCP4725_getEepromBusyFlag+0x30>
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	e000      	b.n	8000f9a <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	4608      	mov	r0, r1
 8000fac:	4611      	mov	r1, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	707b      	strb	r3, [r7, #1]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b60      	cmp	r3, #96	; 0x60
 8000fc0:	d028      	beq.n	8001014 <MCP4725_writeComand+0x72>
 8000fc2:	2b60      	cmp	r3, #96	; 0x60
 8000fc4:	dc4a      	bgt.n	800105c <MCP4725_writeComand+0xba>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <MCP4725_writeComand+0x2e>
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d022      	beq.n	8001014 <MCP4725_writeComand+0x72>
 8000fce:	e045      	b.n	800105c <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8000fd0:	783b      	ldrb	r3, [r7, #0]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	b25a      	sxtb	r2, r3
 8000fd6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b25a      	sxtb	r2, r3
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	f003 f857 	bl	80040bc <HAL_I2C_Master_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
		
      break;
 8001012:	e023      	b.n	800105c <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 800101a:	783b      	ldrb	r3, [r7, #0]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b25a      	sxtb	r2, r3
 8001020:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001024:	4313      	orrs	r3, r2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	b299      	uxth	r1, r3
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2303      	movs	r3, #3
 8001052:	f003 f833 	bl	80040bc <HAL_I2C_Master_Transmit>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
		
			break;
 800105a:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MCP4725_writeComand+0xc4>
 8001062:	2300      	movs	r3, #0
 8001064:	e019      	b.n	800109a <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 8001066:	787b      	ldrb	r3, [r7, #1]
 8001068:	2b60      	cmp	r3, #96	; 0x60
 800106a:	d115      	bne.n	8001098 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff7b 	bl	8000f68 <MCP4725_getEepromBusyFlag>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <MCP4725_writeComand+0xda>
 8001078:	2301      	movs	r3, #1
 800107a:	e00e      	b.n	800109a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 800107c:	2019      	movs	r0, #25
 800107e:	f002 f88b 	bl	8003198 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff70 	bl	8000f68 <MCP4725_getEepromBusyFlag>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <MCP4725_writeComand+0xf0>
 800108e:	2301      	movs	r3, #1
 8001090:	e003      	b.n	800109a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 8001092:	2019      	movs	r0, #25
 8001094:	f002 f880 	bl	8003198 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 80010a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
 80010b0:	466b      	mov	r3, sp
 80010b2:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 80010b8:	2300      	movs	r3, #0
 80010ba:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 80010bc:	78f9      	ldrb	r1, [r7, #3]
 80010be:	460b      	mov	r3, r1
 80010c0:	3b01      	subs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	b2cb      	uxtb	r3, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	4698      	mov	r8, r3
 80010ca:	4691      	mov	r9, r2
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010e0:	b2cb      	uxtb	r3, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	461c      	mov	r4, r3
 80010e6:	4615      	mov	r5, r2
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	00eb      	lsls	r3, r5, #3
 80010f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010f6:	00e2      	lsls	r2, r4, #3
 80010f8:	460b      	mov	r3, r1
 80010fa:	3307      	adds	r3, #7
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	ebad 0d03 	sub.w	sp, sp, r3
 8001104:	ab02      	add	r3, sp, #8
 8001106:	3300      	adds	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	b299      	uxth	r1, r3
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	b29b      	uxth	r3, r3
 8001118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111c:	9200      	str	r2, [sp, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	f003 f8ca 	bl	80042b8 <HAL_I2C_Master_Receive>
 8001124:	4603      	mov	r3, r0
 8001126:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <MCP4725_readRegister+0x92>
 800112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001132:	e01f      	b.n	8001174 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d00a      	beq.n	8001150 <MCP4725_readRegister+0xae>
 800113a:	2b05      	cmp	r3, #5
 800113c:	dc19      	bgt.n	8001172 <MCP4725_readRegister+0xd0>
 800113e:	2b01      	cmp	r3, #1
 8001140:	d002      	beq.n	8001148 <MCP4725_readRegister+0xa6>
 8001142:	2b03      	cmp	r3, #3
 8001144:	d004      	beq.n	8001150 <MCP4725_readRegister+0xae>
 8001146:	e014      	b.n	8001172 <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	82fb      	strh	r3, [r7, #22]

      break;
 800114e:	e010      	b.n	8001172 <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8001150:	8abb      	ldrh	r3, [r7, #20]
 8001152:	3b02      	subs	r3, #2
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 800115a:	8afb      	ldrh	r3, [r7, #22]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	8abb      	ldrh	r3, [r7, #20]
 8001162:	3b01      	subs	r3, #1
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	5ccb      	ldrb	r3, [r1, r3]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21b      	sxth	r3, r3
 800116e:	82fb      	strh	r3, [r7, #22]
      break;
 8001170:	bf00      	nop
  }

  return ret_val;
 8001172:	8afb      	ldrh	r3, [r7, #22]
 8001174:	46b5      	mov	sp, r6
}
 8001176:	4618      	mov	r0, r3
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001180 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af04      	add	r7, sp, #16
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	2178      	movs	r1, #120	; 0x78
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <ssd1306_WriteCommand+0x2c>)
 80011b0:	f003 faa8 	bl	8004704 <HAL_I2C_Mem_Write>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200005b8 	.word	0x200005b8

080011c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295
 80011d2:	9202      	str	r2, [sp, #8]
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2240      	movs	r2, #64	; 0x40
 80011de:	2178      	movs	r1, #120	; 0x78
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <ssd1306_WriteData+0x30>)
 80011e2:	f003 fa8f 	bl	8004704 <HAL_I2C_Mem_Write>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200005b8 	.word	0x200005b8

080011f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80011f8:	f7ff ffc2 	bl	8001180 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f001 ffcb 	bl	8003198 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001202:	2000      	movs	r0, #0
 8001204:	f000 fa7c 	bl	8001700 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001208:	2020      	movs	r0, #32
 800120a:	f7ff ffc1 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ffbe 	bl	8001190 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001214:	20b0      	movs	r0, #176	; 0xb0
 8001216:	f7ff ffbb 	bl	8001190 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800121a:	20c8      	movs	r0, #200	; 0xc8
 800121c:	f7ff ffb8 	bl	8001190 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ffb5 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001226:	2010      	movs	r0, #16
 8001228:	f7ff ffb2 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800122c:	2040      	movs	r0, #64	; 0x40
 800122e:	f7ff ffaf 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001232:	20ff      	movs	r0, #255	; 0xff
 8001234:	f000 fa51 	bl	80016da <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001238:	20a1      	movs	r0, #161	; 0xa1
 800123a:	f7ff ffa9 	bl	8001190 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800123e:	20a6      	movs	r0, #166	; 0xa6
 8001240:	f7ff ffa6 	bl	8001190 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001244:	20a8      	movs	r0, #168	; 0xa8
 8001246:	f7ff ffa3 	bl	8001190 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800124a:	203f      	movs	r0, #63	; 0x3f
 800124c:	f7ff ffa0 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001250:	20a4      	movs	r0, #164	; 0xa4
 8001252:	f7ff ff9d 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001256:	20d3      	movs	r0, #211	; 0xd3
 8001258:	f7ff ff9a 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff ff97 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001262:	20d5      	movs	r0, #213	; 0xd5
 8001264:	f7ff ff94 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001268:	20f0      	movs	r0, #240	; 0xf0
 800126a:	f7ff ff91 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800126e:	20d9      	movs	r0, #217	; 0xd9
 8001270:	f7ff ff8e 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001274:	2022      	movs	r0, #34	; 0x22
 8001276:	f7ff ff8b 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800127a:	20da      	movs	r0, #218	; 0xda
 800127c:	f7ff ff88 	bl	8001190 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001280:	2012      	movs	r0, #18
 8001282:	f7ff ff85 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001286:	20db      	movs	r0, #219	; 0xdb
 8001288:	f7ff ff82 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800128c:	2020      	movs	r0, #32
 800128e:	f7ff ff7f 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001292:	208d      	movs	r0, #141	; 0x8d
 8001294:	f7ff ff7c 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001298:	2014      	movs	r0, #20
 800129a:	f7ff ff79 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fa2e 	bl	8001700 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f80f 	bl	80012c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012aa:	f000 f831 	bl	8001310 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <ssd1306_Init+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <ssd1306_Init+0xd0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012ba:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <ssd1306_Init+0xd0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	711a      	strb	r2, [r3, #4]
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200004c8 	.word	0x200004c8

080012c8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e00d      	b.n	80012f4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <ssd1306_Fill+0x1a>
 80012de:	2100      	movs	r1, #0
 80012e0:	e000      	b.n	80012e4 <ssd1306_Fill+0x1c>
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4a09      	ldr	r2, [pc, #36]	; (800130c <ssd1306_Fill+0x44>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	460a      	mov	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fa:	d3ed      	bcc.n	80012d8 <ssd1306_Fill+0x10>
    }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200000c8 	.word	0x200000c8

08001310 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e016      	b.n	800134a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	3b50      	subs	r3, #80	; 0x50
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff34 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ff31 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800132e:	2010      	movs	r0, #16
 8001330:	f7ff ff2e 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	01db      	lsls	r3, r3, #7
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <ssd1306_UpdateScreen+0x4c>)
 800133a:	4413      	add	r3, r2
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff3e 	bl	80011c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3301      	adds	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b07      	cmp	r3, #7
 800134e:	d9e5      	bls.n	800131c <ssd1306_UpdateScreen+0xc>
    }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000c8 	.word	0x200000c8

08001360 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	460b      	mov	r3, r1
 800136c:	71bb      	strb	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db3d      	blt.n	80013f6 <ssd1306_DrawPixel+0x96>
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	2b3f      	cmp	r3, #63	; 0x3f
 800137e:	d83a      	bhi.n	80013f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d11a      	bne.n	80013bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	4603      	mov	r3, r0
 8001390:	01db      	lsls	r3, r3, #7
 8001392:	4413      	add	r3, r2
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b259      	sxtb	r1, r3
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	4603      	mov	r3, r0
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	4413      	add	r3, r2
 80013b4:	b2c9      	uxtb	r1, r1
 80013b6:	4a13      	ldr	r2, [pc, #76]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 80013b8:	54d1      	strb	r1, [r2, r3]
 80013ba:	e01d      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2d8      	uxtb	r0, r3
 80013c4:	4603      	mov	r3, r0
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	4413      	add	r3, r2
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4013      	ands	r3, r2
 80013e4:	b259      	sxtb	r1, r3
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	4603      	mov	r3, r0
 80013ea:	01db      	lsls	r3, r3, #7
 80013ec:	4413      	add	r3, r2
 80013ee:	b2c9      	uxtb	r1, r1
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 80013f2:	54d1      	strb	r1, [r2, r3]
 80013f4:	e000      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
        return;
 80013f6:	bf00      	nop
    }
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200000c8 	.word	0x200000c8

08001408 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	1d38      	adds	r0, r7, #4
 8001412:	e880 0006 	stmia.w	r0, {r1, r2}
 8001416:	461a      	mov	r2, r3
 8001418:	4623      	mov	r3, r4
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	4613      	mov	r3, r2
 800141e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b1f      	cmp	r3, #31
 8001424:	d902      	bls.n	800142c <ssd1306_WriteChar+0x24>
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b7e      	cmp	r3, #126	; 0x7e
 800142a:	d901      	bls.n	8001430 <ssd1306_WriteChar+0x28>
        return 0;
 800142c:	2300      	movs	r3, #0
 800142e:	e06d      	b.n	800150c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001430:	4b38      	ldr	r3, [pc, #224]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	793b      	ldrb	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	2b80      	cmp	r3, #128	; 0x80
 800143c:	dc06      	bgt.n	800144c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800143e:	4b35      	ldr	r3, [pc, #212]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001440:	885b      	ldrh	r3, [r3, #2]
 8001442:	461a      	mov	r2, r3
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	dd01      	ble.n	8001450 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800144c:	2300      	movs	r3, #0
 800144e:	e05d      	b.n	800150c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	e04c      	b.n	80014f0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3b20      	subs	r3, #32
 800145c:	7979      	ldrb	r1, [r7, #5]
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	4619      	mov	r1, r3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	440b      	add	r3, r1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	e034      	b.n	80014e0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d012      	beq.n	80014ac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b2d8      	uxtb	r0, r3
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001496:	885b      	ldrh	r3, [r3, #2]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	7bba      	ldrb	r2, [r7, #14]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff ff5b 	bl	8001360 <ssd1306_DrawPixel>
 80014aa:	e016      	b.n	80014da <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	b2d8      	uxtb	r0, r3
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014bc:	885b      	ldrh	r3, [r3, #2]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	b2d9      	uxtb	r1, r3
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	f7ff ff43 	bl	8001360 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3301      	adds	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	793b      	ldrb	r3, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d3c5      	bcc.n	8001476 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	797b      	ldrb	r3, [r7, #5]
 80014f2:	461a      	mov	r2, r3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d3ad      	bcc.n	8001456 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	793b      	ldrb	r3, [r7, #4]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4413      	add	r3, r2
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b03      	ldr	r3, [pc, #12]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001508:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3724      	adds	r7, #36	; 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	200004c8 	.word	0x200004c8

08001518 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	1d38      	adds	r0, r7, #4
 8001522:	e880 0006 	stmia.w	r0, {r1, r2}
 8001526:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001528:	e012      	b.n	8001550 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	7818      	ldrb	r0, [r3, #0]
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	1d3a      	adds	r2, r7, #4
 8001532:	ca06      	ldmia	r2, {r1, r2}
 8001534:	f7ff ff68 	bl	8001408 <ssd1306_WriteChar>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d002      	beq.n	800154a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	e008      	b.n	800155c <ssd1306_WriteString+0x44>
        }
        str++;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e8      	bne.n	800152a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <ssd1306_SetCursor+0x2c>)
 800157a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <ssd1306_SetCursor+0x2c>)
 8001582:	805a      	strh	r2, [r3, #2]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	200004c8 	.word	0x200004c8

08001594 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	4603      	mov	r3, r0
 80015a8:	71bb      	strb	r3, [r7, #6]
 80015aa:	460b      	mov	r3, r1
 80015ac:	717b      	strb	r3, [r7, #5]
 80015ae:	4613      	mov	r3, r2
 80015b0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80015b2:	797a      	ldrb	r2, [r7, #5]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bfb8      	it	lt
 80015bc:	425b      	neglt	r3, r3
 80015be:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80015c0:	793a      	ldrb	r2, [r7, #4]
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bfb8      	it	lt
 80015ca:	425b      	neglt	r3, r3
 80015cc:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	797b      	ldrb	r3, [r7, #5]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d201      	bcs.n	80015da <ssd1306_Line+0x46>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e001      	b.n	80015de <ssd1306_Line+0x4a>
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80015e0:	79ba      	ldrb	r2, [r7, #6]
 80015e2:	793b      	ldrb	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d201      	bcs.n	80015ec <ssd1306_Line+0x58>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e001      	b.n	80015f0 <ssd1306_Line+0x5c>
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80015fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80015fe:	7939      	ldrb	r1, [r7, #4]
 8001600:	797b      	ldrb	r3, [r7, #5]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff feac 	bl	8001360 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001608:	e024      	b.n	8001654 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800160a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800160e:	79b9      	ldrb	r1, [r7, #6]
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fea4 	bl	8001360 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	425b      	negs	r3, r3
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	429a      	cmp	r2, r3
 8001626:	dd08      	ble.n	800163a <ssd1306_Line+0xa6>
            error -= deltaY;
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	4413      	add	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	429a      	cmp	r2, r3
 8001640:	da08      	bge.n	8001654 <ssd1306_Line+0xc0>
            error += deltaX;
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	4413      	add	r3, r2
 8001648:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	4413      	add	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	797b      	ldrb	r3, [r7, #5]
 8001658:	429a      	cmp	r2, r3
 800165a:	d1d6      	bne.n	800160a <ssd1306_Line+0x76>
 800165c:	79ba      	ldrb	r2, [r7, #6]
 800165e:	793b      	ldrb	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d1d2      	bne.n	800160a <ssd1306_Line+0x76>
        }
    }
    return;
 8001664:	bf00      	nop
}
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af02      	add	r7, sp, #8
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	4603      	mov	r3, r0
 8001680:	71bb      	strb	r3, [r7, #6]
 8001682:	460b      	mov	r3, r1
 8001684:	717b      	strb	r3, [r7, #5]
 8001686:	4613      	mov	r3, r2
 8001688:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800168a:	79bc      	ldrb	r4, [r7, #6]
 800168c:	797a      	ldrb	r2, [r7, #5]
 800168e:	79b9      	ldrb	r1, [r7, #6]
 8001690:	79f8      	ldrb	r0, [r7, #7]
 8001692:	7e3b      	ldrb	r3, [r7, #24]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4623      	mov	r3, r4
 8001698:	f7ff ff7c 	bl	8001594 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800169c:	793c      	ldrb	r4, [r7, #4]
 800169e:	797a      	ldrb	r2, [r7, #5]
 80016a0:	79b9      	ldrb	r1, [r7, #6]
 80016a2:	7978      	ldrb	r0, [r7, #5]
 80016a4:	7e3b      	ldrb	r3, [r7, #24]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4623      	mov	r3, r4
 80016aa:	f7ff ff73 	bl	8001594 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80016ae:	793c      	ldrb	r4, [r7, #4]
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	7939      	ldrb	r1, [r7, #4]
 80016b4:	7978      	ldrb	r0, [r7, #5]
 80016b6:	7e3b      	ldrb	r3, [r7, #24]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7ff ff6a 	bl	8001594 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80016c0:	79bc      	ldrb	r4, [r7, #6]
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	7939      	ldrb	r1, [r7, #4]
 80016c6:	79f8      	ldrb	r0, [r7, #7]
 80016c8:	7e3b      	ldrb	r3, [r7, #24]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4623      	mov	r3, r4
 80016ce:	f7ff ff61 	bl	8001594 <ssd1306_Line>

    return;
 80016d2:	bf00      	nop
}
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}

080016da <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80016e4:	2381      	movs	r3, #129	; 0x81
 80016e6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fd50 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd4c 	bl	8001190 <ssd1306_WriteCommand>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001710:	23af      	movs	r3, #175	; 0xaf
 8001712:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <ssd1306_SetDisplayOn+0x38>)
 8001716:	2201      	movs	r2, #1
 8001718:	715a      	strb	r2, [r3, #5]
 800171a:	e004      	b.n	8001726 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800171c:	23ae      	movs	r3, #174	; 0xae
 800171e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <ssd1306_SetDisplayOn+0x38>)
 8001722:	2200      	movs	r2, #0
 8001724:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fd31 	bl	8001190 <ssd1306_WriteCommand>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200004c8 	.word	0x200004c8
 800173c:	00000000 	.word	0x00000000

08001740 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8001746:	f004 fd1b 	bl	8006180 <HAL_RCC_GetPCLK2Freq>
 800174a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <ARGB_Init+0xd8>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <ARGB_Init+0x1c>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <ARGB_Init+0x1e>
 800175c:	2302      	movs	r3, #2
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	4a2b      	ldr	r2, [pc, #172]	; (800181c <ARGB_Init+0xdc>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <ARGB_Init+0xe0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	b29b      	uxth	r3, r3
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <ARGB_Init+0xe0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <ARGB_Init+0xe0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe fe65 	bl	8000464 <__aeabi_ui2d>
 800179a:	a31b      	add	r3, pc, #108	; (adr r3, 8001808 <ARGB_Init+0xc8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe feda 	bl	8000558 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f8e6 	bl	800097c <__aeabi_d2uiz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <ARGB_Init+0xe4>)
 80017ba:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fe51 	bl	8000464 <__aeabi_ui2d>
 80017c2:	a313      	add	r3, pc, #76	; (adr r3, 8001810 <ARGB_Init+0xd0>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe fec6 	bl	8000558 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f8d2 	bl	800097c <__aeabi_d2uiz>
 80017d8:	4603      	mov	r3, r0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <ARGB_Init+0xe8>)
 80017e2:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <ARGB_Init+0xec>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <ARGB_Init+0xe0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	2104      	movs	r1, #4
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 fc50 	bl	8007098 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 80017f8:	2001      	movs	r0, #1
 80017fa:	f001 fccd 	bl	8003198 <HAL_Delay>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	1eb851ec 	.word	0x1eb851ec
 800180c:	3fe1eb85 	.word	0x3fe1eb85
 8001810:	1eb851ec 	.word	0x1eb851ec
 8001814:	3fd1eb85 	.word	0x3fd1eb85
 8001818:	40023800 	.word	0x40023800
 800181c:	014f8b59 	.word	0x014f8b59
 8001820:	20000664 	.word	0x20000664
 8001824:	200004ce 	.word	0x200004ce
 8001828:	200004cf 	.word	0x200004cf
 800182c:	200005aa 	.word	0x200005aa

08001830 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f000 f885 	bl	8001948 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <ARGB_SetBrightness+0x1c>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	7013      	strb	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	20000018 	.word	0x20000018

08001864 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	4604      	mov	r4, r0
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4623      	mov	r3, r4
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	4603      	mov	r3, r0
 8001878:	717b      	strb	r3, [r7, #5]
 800187a:	460b      	mov	r3, r1
 800187c:	713b      	strb	r3, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b07      	cmp	r3, #7
 8001886:	d908      	bls.n	800189a <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	b29b      	uxth	r3, r3
 8001894:	88fa      	ldrh	r2, [r7, #6]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <ARGB_SetRGB+0xdc>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018aa:	797a      	ldrb	r2, [r7, #5]
 80018ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b0:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <ARGB_SetRGB+0xdc>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018be:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c2:	793a      	ldrb	r2, [r7, #4]
 80018c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c8:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <ARGB_SetRGB+0xdc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018e0:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 80018e2:	793b      	ldrb	r3, [r7, #4]
 80018e4:	21b0      	movs	r1, #176	; 0xb0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f9ca 	bl	8001c80 <scale8>
 80018ec:	4603      	mov	r3, r0
 80018ee:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	21f0      	movs	r1, #240	; 0xf0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f9c3 	bl	8001c80 <scale8>
 80018fa:	4603      	mov	r3, r0
 80018fc:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 80018fe:	793b      	ldrb	r3, [r7, #4]
 8001900:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8001902:	797b      	ldrb	r3, [r7, #5]
 8001904:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	490c      	ldr	r1, [pc, #48]	; (8001944 <ARGB_SetRGB+0xe0>)
 8001914:	7b7a      	ldrb	r2, [r7, #13]
 8001916:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	3301      	adds	r3, #1
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <ARGB_SetRGB+0xe0>)
 8001924:	7b3a      	ldrb	r2, [r7, #12]
 8001926:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8001928:	88fa      	ldrh	r2, [r7, #6]
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	3302      	adds	r3, #2
 8001932:	4904      	ldr	r1, [pc, #16]	; (8001944 <ARGB_SetRGB+0xe0>)
 8001934:	7afa      	ldrb	r2, [r7, #11]
 8001936:	54ca      	strb	r2, [r1, r3]
#endif
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	20000018 	.word	0x20000018
 8001944:	200004d0 	.word	0x200004d0

08001948 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	460b      	mov	r3, r1
 8001954:	71bb      	strb	r3, [r7, #6]
 8001956:	4613      	mov	r3, r2
 8001958:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	81fb      	strh	r3, [r7, #14]
 800195e:	e00b      	b.n	8001978 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8001960:	89fb      	ldrh	r3, [r7, #14]
 8001962:	b298      	uxth	r0, r3
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	79ba      	ldrb	r2, [r7, #6]
 8001968:	79f9      	ldrb	r1, [r7, #7]
 800196a:	f7ff ff7b 	bl	8001864 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	b29b      	uxth	r3, r3
 8001972:	3301      	adds	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	81fb      	strh	r3, [r7, #14]
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b07      	cmp	r3, #7
 800197e:	d9ef      	bls.n	8001960 <ARGB_FillRGB+0x18>
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8001992:	4b9d      	ldr	r3, [pc, #628]	; (8001c08 <ARGB_Show+0x27c>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8001998:	4b9c      	ldr	r3, [pc, #624]	; (8001c0c <ARGB_Show+0x280>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <ARGB_Show+0x22>
 80019a2:	4b9b      	ldr	r3, [pc, #620]	; (8001c10 <ARGB_Show+0x284>)
 80019a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <ARGB_Show+0x26>
        return ARGB_BUSY;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e15e      	b.n	8001c70 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	71fb      	strb	r3, [r7, #7]
 80019b6:	e0a6      	b.n	8001b06 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019b8:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <ARGB_Show+0x288>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dd04      	ble.n	80019da <ARGB_Show+0x4e>
 80019d0:	4b91      	ldr	r3, [pc, #580]	; (8001c18 <ARGB_Show+0x28c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	e003      	b.n	80019e2 <ARGB_Show+0x56>
 80019da:	4b90      	ldr	r3, [pc, #576]	; (8001c1c <ARGB_Show+0x290>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	4b8d      	ldr	r3, [pc, #564]	; (8001c20 <ARGB_Show+0x294>)
 80019ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019ee:	4b89      	ldr	r3, [pc, #548]	; (8001c14 <ARGB_Show+0x288>)
 80019f0:	785b      	ldrb	r3, [r3, #1]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd04      	ble.n	8001a10 <ARGB_Show+0x84>
 8001a06:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <ARGB_Show+0x28c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	e003      	b.n	8001a18 <ARGB_Show+0x8c>
 8001a10:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <ARGB_Show+0x290>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4619      	mov	r1, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3308      	adds	r3, #8
 8001a1e:	4a80      	ldr	r2, [pc, #512]	; (8001c20 <ARGB_Show+0x294>)
 8001a20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a24:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <ARGB_Show+0x288>)
 8001a26:	789b      	ldrb	r3, [r3, #2]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	dd04      	ble.n	8001a46 <ARGB_Show+0xba>
 8001a3c:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <ARGB_Show+0x28c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4619      	mov	r1, r3
 8001a44:	e003      	b.n	8001a4e <ARGB_Show+0xc2>
 8001a46:	4b75      	ldr	r3, [pc, #468]	; (8001c1c <ARGB_Show+0x290>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3310      	adds	r3, #16
 8001a54:	4a72      	ldr	r2, [pc, #456]	; (8001c20 <ARGB_Show+0x294>)
 8001a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a5a:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <ARGB_Show+0x288>)
 8001a5c:	78db      	ldrb	r3, [r3, #3]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	dd04      	ble.n	8001a7c <ARGB_Show+0xf0>
 8001a72:	4b69      	ldr	r3, [pc, #420]	; (8001c18 <ARGB_Show+0x28c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	e003      	b.n	8001a84 <ARGB_Show+0xf8>
 8001a7c:	4b67      	ldr	r3, [pc, #412]	; (8001c1c <ARGB_Show+0x290>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3318      	adds	r3, #24
 8001a8a:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <ARGB_Show+0x294>)
 8001a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a90:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <ARGB_Show+0x288>)
 8001a92:	791b      	ldrb	r3, [r3, #4]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dd04      	ble.n	8001ab2 <ARGB_Show+0x126>
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <ARGB_Show+0x28c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4619      	mov	r1, r3
 8001ab0:	e003      	b.n	8001aba <ARGB_Show+0x12e>
 8001ab2:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <ARGB_Show+0x290>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3320      	adds	r3, #32
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <ARGB_Show+0x294>)
 8001ac2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ac6:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <ARGB_Show+0x288>)
 8001ac8:	795b      	ldrb	r3, [r3, #5]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	dd04      	ble.n	8001ae8 <ARGB_Show+0x15c>
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <ARGB_Show+0x28c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	e003      	b.n	8001af0 <ARGB_Show+0x164>
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <ARGB_Show+0x290>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	3328      	adds	r3, #40	; 0x28
 8001af6:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <ARGB_Show+0x294>)
 8001af8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	3301      	adds	r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	f67f af54 	bls.w	80019b8 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b14:	e0a4      	b.n	8001c60 <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <ARGB_Show+0x298>)
 8001b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d102      	bne.n	8001b28 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
 8001b24:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b26:	e09b      	b.n	8001c60 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8001b28:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <ARGB_Show+0x298>)
 8001b2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d11d      	bne.n	8001b70 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b34:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <ARGB_Show+0x298>)
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <ARGB_Show+0x298>)
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <ARGB_Show+0x29c>)
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8001b44:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <ARGB_Show+0x298>)
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <ARGB_Show+0x2a0>)
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <ARGB_Show+0x298>)
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	4a37      	ldr	r2, [pc, #220]	; (8001c30 <ARGB_Show+0x2a4>)
 8001b52:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b54:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <ARGB_Show+0x298>)
 8001b56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001b58:	4931      	ldr	r1, [pc, #196]	; (8001c20 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <ARGB_Show+0x298>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b60:	461a      	mov	r2, r3
 8001b62:	2330      	movs	r3, #48	; 0x30
 8001b64:	f001 fccc 	bl	8003500 <HAL_DMA_Start_IT>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <ARGB_Show+0x1f0>
 8001b6e:	e002      	b.n	8001b76 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b74:	e074      	b.n	8001c60 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b7a:	e071      	b.n	8001c60 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001b7c:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <ARGB_Show+0x298>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <ARGB_Show+0x298>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b8a:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <ARGB_Show+0x298>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <ARGB_Show+0x2a8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d107      	bne.n	8001ba6 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <ARGB_Show+0x298>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <ARGB_Show+0x298>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <ARGB_Show+0x298>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <ARGB_Show+0x2a8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d018      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <ARGB_Show+0x298>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb8:	d013      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <ARGB_Show+0x298>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <ARGB_Show+0x2ac>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <ARGB_Show+0x298>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <ARGB_Show+0x2b0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <ARGB_Show+0x298>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <ARGB_Show+0x2b4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <ARGB_Show+0x298>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <ARGB_Show+0x2b8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d132      	bne.n	8001c48 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <ARGB_Show+0x298>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	d032      	beq.n	8001c5a <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <ARGB_Show+0x298>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <ARGB_Show+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c04:	e029      	b.n	8001c5a <ARGB_Show+0x2ce>
 8001c06:	bf00      	nop
 8001c08:	200005aa 	.word	0x200005aa
 8001c0c:	200005a8 	.word	0x200005a8
 8001c10:	200006ac 	.word	0x200006ac
 8001c14:	200004d0 	.word	0x200004d0
 8001c18:	200004ce 	.word	0x200004ce
 8001c1c:	200004cf 	.word	0x200004cf
 8001c20:	200004e8 	.word	0x200004e8
 8001c24:	20000664 	.word	0x20000664
 8001c28:	08001ca9 	.word	0x08001ca9
 8001c2c:	08001f59 	.word	0x08001f59
 8001c30:	08006abb 	.word	0x08006abb
 8001c34:	40010000 	.word	0x40010000
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40000c00 	.word	0x40000c00
 8001c44:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <ARGB_Show+0x2ec>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <ARGB_Show+0x2ec>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e000      	b.n	8001c5c <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c5a:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f47f af57 	bne.w	8001b16 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <ARGB_Show+0x2f0>)
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001c6e:	2302      	movs	r3, #2
    }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000664 	.word	0x20000664
 8001c7c:	200005a8 	.word	0x200005a8

08001c80 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	460a      	mov	r2, r1
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	79ba      	ldrb	r2, [r7, #6]
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	121b      	asrs	r3, r3, #8
 8001c9a:	b2db      	uxtb	r3, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a9d      	ldr	r2, [pc, #628]	; (8001f30 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	f040 8131 	bne.w	8001f22 <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a9c      	ldr	r2, [pc, #624]	; (8001f34 <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	f040 812c 	bne.w	8001f22 <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001cca:	4b9b      	ldr	r3, [pc, #620]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8128 	beq.w	8001f26 <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d10b      	bne.n	8001cf8 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d136      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf6:	e031      	b.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d10b      	bne.n	8001d1a <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2202      	movs	r2, #2
 8001d06:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d125      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d18:	e020      	b.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d10b      	bne.n	8001d3c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2204      	movs	r2, #4
 8001d28:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d114      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d3a:	e00f      	b.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d10a      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001d5c:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b07      	cmp	r3, #7
 8001d64:	d87b      	bhi.n	8001e5e <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	72fb      	strb	r3, [r7, #11]
 8001d6a:	e06c      	b.n	8001e46 <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d6c:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a70      	ldr	r2, [pc, #448]	; (8001f3c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	7afb      	ldrb	r3, [r7, #11]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dd04      	ble.n	8001d9c <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001d92:	4b6b      	ldr	r3, [pc, #428]	; (8001f40 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	e003      	b.n	8001da4 <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8001d9c:	4b69      	ldr	r3, [pc, #420]	; (8001f44 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3318      	adds	r3, #24
 8001daa:	4a67      	ldr	r2, [pc, #412]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001db0:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a5e      	ldr	r2, [pc, #376]	; (8001f3c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dd04      	ble.n	8001de2 <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	e003      	b.n	8001dea <ARGB_TIM_DMADelayPulseCplt+0x142>
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3320      	adds	r3, #32
 8001df0:	4a55      	ldr	r2, [pc, #340]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001df2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001df6:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3302      	adds	r3, #2
 8001e06:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	dd04      	ble.n	8001e28 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8001e1e:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4619      	mov	r1, r3
 8001e26:	e003      	b.n	8001e30 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4619      	mov	r1, r3
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3328      	adds	r3, #40	; 0x28
 8001e36:	4a44      	ldr	r2, [pc, #272]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001e38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	72fb      	strb	r3, [r7, #11]
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b07      	cmp	r3, #7
 8001e4c:	d98e      	bls.n	8001d6c <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	e05d      	b.n	8001f1a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d80c      	bhi.n	8001e82 <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001e68:	2260      	movs	r2, #96	; 0x60
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4837      	ldr	r0, [pc, #220]	; (8001f4c <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8001e6e:	f008 fbef 	bl	800a650 <memset>
        BUF_COUNTER++;
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	e04b      	b.n	8001f1a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e96:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fb87 	bl	80035b0 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d117      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10f      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	f240 4344 	movw	r3, #1092	; 0x444
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eda:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	f240 4344 	movw	r3, #1092	; 0x444
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
 8001f20:	e002      	b.n	8001f28 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f22:	bf00      	nop
 8001f24:	e000      	b.n	8001f28 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f26:	bf00      	nop
}
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200006ac 	.word	0x200006ac
 8001f34:	20000664 	.word	0x20000664
 8001f38:	200005a8 	.word	0x200005a8
 8001f3c:	200004d0 	.word	0x200004d0
 8001f40:	200004ce 	.word	0x200004ce
 8001f44:	200004cf 	.word	0x200004cf
 8001f48:	200004e8 	.word	0x200004e8
 8001f4c:	20000548 	.word	0x20000548
 8001f50:	40010000 	.word	0x40010000
 8001f54:	200005aa 	.word	0x200005aa

08001f58 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	f040 809e 	bne.w	80020ac <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a52      	ldr	r2, [pc, #328]	; (80020bc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	f040 8099 	bne.w	80020ac <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f7a:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8095 	beq.w	80020b0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001f86:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b07      	cmp	r3, #7
 8001f8e:	d87b      	bhi.n	8002088 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	72fb      	strb	r3, [r7, #11]
 8001f94:	e06c      	b.n	8002070 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f96:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dd04      	ble.n	8001fc6 <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	e003      	b.n	8001fce <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001fd6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dd04      	ble.n	800200c <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	e003      	b.n	8002014 <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3308      	adds	r3, #8
 800201a:	4a2d      	ldr	r2, [pc, #180]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 800201c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	3302      	adds	r3, #2
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	2b00      	cmp	r3, #0
 8002046:	dd04      	ble.n	8002052 <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	e003      	b.n	800205a <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4619      	mov	r1, r3
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3310      	adds	r3, #16
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002062:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	72fb      	strb	r3, [r7, #11]
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b07      	cmp	r3, #7
 8002076:	d98e      	bls.n	8001f96 <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	3301      	adds	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e014      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b09      	cmp	r3, #9
 8002090:	d80f      	bhi.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8002092:	2260      	movs	r2, #96	; 0x60
 8002094:	2100      	movs	r1, #0
 8002096:	480e      	ldr	r0, [pc, #56]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002098:	f008 fada 	bl	800a650 <memset>
        BUF_COUNTER++;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	e002      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80020ac:	bf00      	nop
 80020ae:	e000      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80020b0:	bf00      	nop
    }
}
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200006ac 	.word	0x200006ac
 80020bc:	20000664 	.word	0x20000664
 80020c0:	200005a8 	.word	0x200005a8
 80020c4:	200004d0 	.word	0x200004d0
 80020c8:	200004ce 	.word	0x200004ce
 80020cc:	200004cf 	.word	0x200004cf
 80020d0:	200004e8 	.word	0x200004e8

080020d4 <AS5600_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1,AS5600_ADDR,&Data,1,10);	
	HAL_I2C_Mem_Write(&hi2c1,(AS5600_ADDR << 1),Reg,1,&Data,1,100);
}

uint8_t AS5600_ReadReg(uint8_t Reg)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af04      	add	r7, sp, #16
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead=0;	
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1,(AS5600_ADDR << 1),Reg,1,&DataRead,1,100);
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	2364      	movs	r3, #100	; 0x64
 80020e8:	9302      	str	r3, [sp, #8]
 80020ea:	2301      	movs	r3, #1
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	f107 030f 	add.w	r3, r7, #15
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	216c      	movs	r1, #108	; 0x6c
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <AS5600_ReadReg+0x34>)
 80020fa:	f002 fbfd 	bl	80048f8 <HAL_I2C_Mem_Read>
	
	
	return DataRead;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200005b8 	.word	0x200005b8

0800210c <AS5600_GetRawAngle>:
	return (int)((float)(AS5600_ReadReg(ANGLE_L) + (AS5600_ReadReg(ANGLE_H) << 8))/4096*360);	
}


uint16_t AS5600_GetRawAngle()
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
	uint16_t AngleVal=AS5600_ReadReg(RAWANG_L) + (AS5600_ReadReg(RAWANG_H) << 8);
 8002112:	200d      	movs	r0, #13
 8002114:	f7ff ffde 	bl	80020d4 <AS5600_ReadReg>
 8002118:	4603      	mov	r3, r0
 800211a:	b29c      	uxth	r4, r3
 800211c:	200c      	movs	r0, #12
 800211e:	f7ff ffd9 	bl	80020d4 <AS5600_ReadReg>
 8002122:	4603      	mov	r3, r0
 8002124:	b29b      	uxth	r3, r3
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b29b      	uxth	r3, r3
 800212a:	4423      	add	r3, r4
 800212c:	80fb      	strh	r3, [r7, #6]
	return AngleVal;	
 800212e:	88fb      	ldrh	r3, [r7, #6]
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bd90      	pop	{r4, r7, pc}

08002138 <AS5600_GetStatus>:

uint8_t AS5600_GetStatus()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	return AS5600_ReadReg(STATUS) & 0x38;	
 800213c:	200b      	movs	r0, #11
 800213e:	f7ff ffc9 	bl	80020d4 <AS5600_ReadReg>
 8002142:	4603      	mov	r3, r0
 8002144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002148:	b2db      	uxtb	r3, r3
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <drawMainMenu>:
	"5:Encod.  ",
	"6:DAC     ",
	"0:Exit    "
};

void drawMainMenu() {
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff f8b6 	bl	80012c8 <ssd1306_Fill>
    uint8_t exit = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	713b      	strb	r3, [r7, #4]
    uint8_t current_item_menu = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	71fb      	strb	r3, [r7, #7]
    uint8_t next_item_menu = current_item_menu + 1;
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	3301      	adds	r3, #1
 8002168:	71bb      	strb	r3, [r7, #6]
    uint8_t prev_item_menu = MENU_ITEMS_COUNT - 1;
 800216a:	2306      	movs	r3, #6
 800216c:	717b      	strb	r3, [r7, #5]
    ssd1306_DrawRectangle(1, 1, 127, 63, White);
 800216e:	2301      	movs	r3, #1
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	233f      	movs	r3, #63	; 0x3f
 8002174:	227f      	movs	r2, #127	; 0x7f
 8002176:	2101      	movs	r1, #1
 8002178:	2001      	movs	r0, #1
 800217a:	f7ff fa77 	bl	800166c <ssd1306_DrawRectangle>
#define SIZE_FONT_X 7
#define SIZE_FONT_Y 10

#define SIZE_MAIN_FONT_X 11
#define SIZE_MAIN_FONT_Y 18
    udpateDisplay();
 800217e:	f000 f887 	bl	8002290 <udpateDisplay>
    while( exit ){
 8002182:	e075      	b.n	8002270 <drawMainMenu+0x120>
         next_item_menu = current_item_menu + 1;
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	3301      	adds	r3, #1
 8002188:	71bb      	strb	r3, [r7, #6]
         prev_item_menu = current_item_menu - 1;
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	3b01      	subs	r3, #1
 800218e:	717b      	strb	r3, [r7, #5]
    	if(current_item_menu == (MENU_ITEMS_COUNT-1))
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d101      	bne.n	800219a <drawMainMenu+0x4a>
    		next_item_menu = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	71bb      	strb	r3, [r7, #6]
    	if(current_item_menu == 0) // Для нулевого элемента предыдущий символ будет последним
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <drawMainMenu+0x54>
    		prev_item_menu = MENU_ITEMS_COUNT - 1;
 80021a0:	2306      	movs	r3, #6
 80021a2:	717b      	strb	r3, [r7, #5]

    	ssd1306_SetCursor(START_POS_X, SIZE_FONT_Y + START_POS_Y+8);// Магический номер что бы сделать по центру
 80021a4:	2117      	movs	r1, #23
 80021a6:	2005      	movs	r0, #5
 80021a8:	f7ff f9dc 	bl	8001564 <ssd1306_SetCursor>
    		ssd1306_WriteString(">", Font_11x18, White);
 80021ac:	4a34      	ldr	r2, [pc, #208]	; (8002280 <drawMainMenu+0x130>)
 80021ae:	2301      	movs	r3, #1
 80021b0:	ca06      	ldmia	r2, {r1, r2}
 80021b2:	4834      	ldr	r0, [pc, #208]	; (8002284 <drawMainMenu+0x134>)
 80021b4:	f7ff f9b0 	bl	8001518 <ssd1306_WriteString>
    	ssd1306_SetCursor(START_POS_X+SIZE_MAIN_FONT_X+5, SIZE_FONT_Y + START_POS_Y+8);
 80021b8:	2117      	movs	r1, #23
 80021ba:	2015      	movs	r0, #21
 80021bc:	f7ff f9d2 	bl	8001564 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[current_item_menu], Font_11x18, White);
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	4a31      	ldr	r2, [pc, #196]	; (8002288 <drawMainMenu+0x138>)
 80021c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021c8:	4a2d      	ldr	r2, [pc, #180]	; (8002280 <drawMainMenu+0x130>)
 80021ca:	2301      	movs	r3, #1
 80021cc:	ca06      	ldmia	r2, {r1, r2}
 80021ce:	f7ff f9a3 	bl	8001518 <ssd1306_WriteString>

    	udpateDisplay();
 80021d2:	f000 f85d 	bl	8002290 <udpateDisplay>
    	HAL_Delay(50);
 80021d6:	2032      	movs	r0, #50	; 0x32
 80021d8:	f000 ffde 	bl	8003198 <HAL_Delay>

    	ssd1306_SetCursor(START_POS_X, START_POS_Y); // В первой строке пишем предыдущий пункт
 80021dc:	2105      	movs	r1, #5
 80021de:	2005      	movs	r0, #5
 80021e0:	f7ff f9c0 	bl	8001564 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[prev_item_menu], Font_7x10, White);
 80021e4:	797b      	ldrb	r3, [r7, #5]
 80021e6:	4a28      	ldr	r2, [pc, #160]	; (8002288 <drawMainMenu+0x138>)
 80021e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021ec:	4a27      	ldr	r2, [pc, #156]	; (800228c <drawMainMenu+0x13c>)
 80021ee:	2301      	movs	r3, #1
 80021f0:	ca06      	ldmia	r2, {r1, r2}
 80021f2:	f7ff f991 	bl	8001518 <ssd1306_WriteString>
    	udpateDisplay();
 80021f6:	f000 f84b 	bl	8002290 <udpateDisplay>

        	ssd1306_SetCursor(START_POS_X, LAST_POS_Y - SIZE_FONT_Y);
 80021fa:	2130      	movs	r1, #48	; 0x30
 80021fc:	2005      	movs	r0, #5
 80021fe:	f7ff f9b1 	bl	8001564 <ssd1306_SetCursor>
        		ssd1306_WriteString(menuItems[next_item_menu], Font_7x10, White);
 8002202:	79bb      	ldrb	r3, [r7, #6]
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <drawMainMenu+0x138>)
 8002206:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800220a:	4a20      	ldr	r2, [pc, #128]	; (800228c <drawMainMenu+0x13c>)
 800220c:	2301      	movs	r3, #1
 800220e:	ca06      	ldmia	r2, {r1, r2}
 8002210:	f7ff f982 	bl	8001518 <ssd1306_WriteString>
        udpateDisplay();
 8002214:	f000 f83c 	bl	8002290 <udpateDisplay>
        HAL_Delay(500);
 8002218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800221c:	f000 ffbc 	bl	8003198 <HAL_Delay>
        buttonLongReset();
 8002220:	f000 f8d0 	bl	80023c4 <buttonLongReset>
        encoderReset();
 8002224:	f000 f8fe 	bl	8002424 <encoderReset>
    	while(1){
    		if(encoderData() > 0){
 8002228:	f000 f8d8 	bl	80023dc <encoderData>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	dd05      	ble.n	800223e <drawMainMenu+0xee>
    			current_item_menu++;
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	3301      	adds	r3, #1
 8002236:	71fb      	strb	r3, [r7, #7]
    			encoderReset();
 8002238:	f000 f8f4 	bl	8002424 <encoderReset>
    			break;
 800223c:	e018      	b.n	8002270 <drawMainMenu+0x120>
    		}
    		if(encoderData() < 0){
 800223e:	f000 f8cd 	bl	80023dc <encoderData>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	da05      	bge.n	8002254 <drawMainMenu+0x104>
    			current_item_menu--;
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	3b01      	subs	r3, #1
 800224c:	71fb      	strb	r3, [r7, #7]
    			encoderReset();
 800224e:	f000 f8e9 	bl	8002424 <encoderReset>
    			break;
 8002252:	e00d      	b.n	8002270 <drawMainMenu+0x120>
    		}
    		if(buttonLong()){
 8002254:	f000 f89e 	bl	8002394 <buttonLong>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <drawMainMenu+0x114>
    			// Вернуться на стартовый дисплей
    			current_item_menu = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	71fb      	strb	r3, [r7, #7]
    			break;
 8002262:	e005      	b.n	8002270 <drawMainMenu+0x120>
    		}

    		if(current_item_menu >= MENU_ITEMS_COUNT )
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d9de      	bls.n	8002228 <drawMainMenu+0xd8>
    			current_item_menu = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	71fb      	strb	r3, [r7, #7]
    		if(encoderData() > 0){
 800226e:	e7db      	b.n	8002228 <drawMainMenu+0xd8>
    while( exit ){
 8002270:	793b      	ldrb	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d186      	bne.n	8002184 <drawMainMenu+0x34>
    	}
    }

}
 8002276:	bf00      	nop
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000010 	.word	0x20000010
 8002284:	0800a99c 	.word	0x0800a99c
 8002288:	2000001c 	.word	0x2000001c
 800228c:	20000008 	.word	0x20000008

08002290 <udpateDisplay>:

extern osMutexId_t BlockI2CHandle;
void udpateDisplay(){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	statusMutex = osMutexAcquire(BlockI2CHandle, 1000);
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <udpateDisplay+0x34>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800229c:	4618      	mov	r0, r3
 800229e:	f005 f964 	bl	800756a <osMutexAcquire>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <udpateDisplay+0x38>)
 80022a6:	6013      	str	r3, [r2, #0]
	if(statusMutex == osOK)
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <udpateDisplay+0x38>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <udpateDisplay+0x24>
		ssd1306_UpdateScreen();
 80022b0:	f7ff f82e 	bl	8001310 <ssd1306_UpdateScreen>
	osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <udpateDisplay+0x34>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f005 f9a1 	bl	8007600 <osMutexRelease>
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000710 	.word	0x20000710
 80022c8:	200005ac 	.word	0x200005ac

080022cc <buttonUp>:
void drawSubMenu(uint8_t i){
	ssd1306_SetCursor(0, 0);
	ssd1306_WriteString(menuItems[i], Font_7x10, White);
}

uint8_t buttonUp(){
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
	return buttonUpper;
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <buttonUp+0x14>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200005b0 	.word	0x200005b0

080022e4 <buttonUpSet>:
void buttonUpSet(){
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
	buttonUpper = 1;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <buttonUpSet+0x14>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	200005b0 	.word	0x200005b0

080022fc <buttonUpReset>:
void buttonUpReset(){
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	buttonUpper = 0;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <buttonUpReset+0x14>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	200005b0 	.word	0x200005b0

08002314 <buttonEn>:

uint8_t buttonEn(){
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
	return buttonEnable;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <buttonEn+0x14>)
 800231a:	781b      	ldrb	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	200005b1 	.word	0x200005b1

0800232c <buttonEnSet>:
void buttonEnSet(){
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	buttonEnable = 1;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <buttonEnSet+0x14>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	200005b1 	.word	0x200005b1

08002344 <buttonCounter>:
void buttonEnReset(){
	buttonEnable = 0;
}

uint8_t buttonCounter(){
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
	return button_counter;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <buttonCounter+0x14>)
 800234a:	781b      	ldrb	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200005b2 	.word	0x200005b2

0800235c <buttonCounterSet>:
void buttonCounterSet(){
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	button_counter++;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <buttonCounterSet+0x1c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <buttonCounterSet+0x1c>)
 800236a:	701a      	strb	r2, [r3, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200005b2 	.word	0x200005b2

0800237c <buttonCounterReset>:

void buttonCounterReset(){
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
	button_counter = 0;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <buttonCounterReset+0x14>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	200005b2 	.word	0x200005b2

08002394 <buttonLong>:

uint8_t buttonLong(){
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	return button_long;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <buttonLong+0x14>)
 800239a:	781b      	ldrb	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	200005b3 	.word	0x200005b3

080023ac <buttonLongSet>:
void buttonLongSet(){
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
	button_long = 1;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <buttonLongSet+0x14>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	200005b3 	.word	0x200005b3

080023c4 <buttonLongReset>:
void buttonLongReset(){
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
	button_long = 0;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <buttonLongReset+0x14>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	200005b3 	.word	0x200005b3

080023dc <encoderData>:

int8_t encoderData(){
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
	return encoderAS56;
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <encoderData+0x14>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	200005b4 	.word	0x200005b4

080023f4 <encoderSetUp>:
void encoderSetUp(){
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
	encoderAS56 = 1;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <encoderSetUp+0x14>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	200005b4 	.word	0x200005b4

0800240c <encoderSetDown>:

void encoderSetDown(){
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	encoderAS56 = -1;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <encoderSetDown+0x14>)
 8002412:	22ff      	movs	r2, #255	; 0xff
 8002414:	701a      	strb	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	200005b4 	.word	0x200005b4

08002424 <encoderReset>:

void encoderReset(){
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	encoderAS56 = 0;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <encoderReset+0x14>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	200005b4 	.word	0x200005b4

0800243c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002442:	f000 fe67 	bl	8003114 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002446:	f000 f86b 	bl	8002520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800244a:	f000 f9c9 	bl	80027e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800244e:	f000 f9a7 	bl	80027a0 <MX_DMA_Init>
  MX_I2C1_Init();
 8002452:	f000 f8cd 	bl	80025f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002456:	f000 f8f9 	bl	800264c <MX_SPI1_Init>
  MX_TIM2_Init();
 800245a:	f000 f92d 	bl	80026b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t test_i2c_dev(); // Определяем что все устройства на линии i2c подключены
  ssd1306_Init();
 800245e:	f7fe fec9 	bl	80011f4 <ssd1306_Init>
  startDisplay();
 8002462:	f000 fa43 	bl	80028ec <startDisplay>

  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 8002466:	4827      	ldr	r0, [pc, #156]	; (8002504 <main+0xc8>)
 8002468:	f004 fff9 	bl	800745e <osMutexNew>
 800246c:	4603      	mov	r3, r0
 800246e:	4a26      	ldr	r2, [pc, #152]	; (8002508 <main+0xcc>)
 8002470:	6013      	str	r3, [r2, #0]
  //osStatus_t status = osMutexAcquire(BlockI2CHandle, 1000);
  //osMutexRelease (BlockI2CHandle);

  HAL_Delay(1000);
 8002472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002476:	f000 fe8f 	bl	8003198 <HAL_Delay>
  //EPD_WhiteScreen_ALL(gqImage_R,gqImage_R); //Refresh the picture in full screen
  //EPD_WhiteScreen_ALL(default_dis,gqImage_R);
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!

  //ADS1115_setConversionReadyPin(pADS);
  float data_from_adc_0 = 0;
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
  MCP4725 myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800250c <main+0xd0>
 8002486:	2260      	movs	r2, #96	; 0x60
 8002488:	4921      	ldr	r1, [pc, #132]	; (8002510 <main+0xd4>)
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fcf0 	bl	8000e70 <MCP4725_init>
	// Check the connection:
	uint8_t state_dac = MCP4725_isConnected(&myMCP4725);
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fd0d 	bl	8000eb2 <MCP4725_isConnected>
 8002498:	4603      	mov	r3, r0
 800249a:	75fb      	strb	r3, [r7, #23]
	uint16_t v_out = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	83fb      	strh	r3, [r7, #30]
  for(uint8_t temp = 0; temp < 80; temp++){
 80024a0:	2300      	movs	r3, #0
 80024a2:	777b      	strb	r3, [r7, #29]
 80024a4:	e015      	b.n	80024d2 <main+0x96>
	  MCP4725_setValue(&myMCP4725, v_out, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80024a6:	8bf9      	ldrh	r1, [r7, #30]
 80024a8:	1d38      	adds	r0, r7, #4
 80024aa:	2300      	movs	r3, #0
 80024ac:	2200      	movs	r2, #0
 80024ae:	f7fe fd43 	bl	8000f38 <MCP4725_setValue>
	  HAL_Delay(50);
 80024b2:	2032      	movs	r0, #50	; 0x32
 80024b4:	f000 fe70 	bl	8003198 <HAL_Delay>
	  //data_from_adc_0 = (ADS1115_getData(pADS));
	  v_out+= 150;
 80024b8:	8bfb      	ldrh	r3, [r7, #30]
 80024ba:	3396      	adds	r3, #150	; 0x96
 80024bc:	83fb      	strh	r3, [r7, #30]
	  if(v_out > 4060)
 80024be:	8bfb      	ldrh	r3, [r7, #30]
 80024c0:	f640 72dc 	movw	r2, #4060	; 0xfdc
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <main+0x90>
		  v_out = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	83fb      	strh	r3, [r7, #30]
  for(uint8_t temp = 0; temp < 80; temp++){
 80024cc:	7f7b      	ldrb	r3, [r7, #29]
 80024ce:	3301      	adds	r3, #1
 80024d0:	777b      	strb	r3, [r7, #29]
 80024d2:	7f7b      	ldrb	r3, [r7, #29]
 80024d4:	2b4f      	cmp	r3, #79	; 0x4f
 80024d6:	d9e6      	bls.n	80024a6 <main+0x6a>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80024d8:	f004 feca 	bl	8007270 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of BlockI2C */
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 80024dc:	4809      	ldr	r0, [pc, #36]	; (8002504 <main+0xc8>)
 80024de:	f004 ffbe 	bl	800745e <osMutexNew>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a08      	ldr	r2, [pc, #32]	; (8002508 <main+0xcc>)
 80024e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <main+0xd8>)
 80024ea:	2100      	movs	r1, #0
 80024ec:	480a      	ldr	r0, [pc, #40]	; (8002518 <main+0xdc>)
 80024ee:	f004 ff09 	bl	8007304 <osThreadNew>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4a09      	ldr	r2, [pc, #36]	; (800251c <main+0xe0>)
 80024f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 80024f8:	f000 fdb4 	bl	8003064 <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80024fc:	f004 fedc 	bl	80072b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002500:	e7fe      	b.n	8002500 <main+0xc4>
 8002502:	bf00      	nop
 8002504:	0800c4fc 	.word	0x0800c4fc
 8002508:	20000710 	.word	0x20000710
 800250c:	40533333 	.word	0x40533333
 8002510:	200005b8 	.word	0x200005b8
 8002514:	0800c4d8 	.word	0x0800c4d8
 8002518:	08002939 	.word	0x08002939
 800251c:	2000070c 	.word	0x2000070c

08002520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b094      	sub	sp, #80	; 0x50
 8002524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002526:	f107 0320 	add.w	r3, r7, #32
 800252a:	2230      	movs	r2, #48	; 0x30
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f008 f88e 	bl	800a650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <SystemClock_Config+0xc8>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <SystemClock_Config+0xc8>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <SystemClock_Config+0xc8>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <SystemClock_Config+0xcc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a20      	ldr	r2, [pc, #128]	; (80025ec <SystemClock_Config+0xcc>)
 800256a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <SystemClock_Config+0xcc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800257c:	2301      	movs	r3, #1
 800257e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002586:	2302      	movs	r3, #2
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800258a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002590:	2319      	movs	r3, #25
 8002592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002594:	2390      	movs	r3, #144	; 0x90
 8002596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002598:	2302      	movs	r3, #2
 800259a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800259c:	2304      	movs	r3, #4
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a0:	f107 0320 	add.w	r3, r7, #32
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 f9a7 	bl	80058f8 <HAL_RCC_OscConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025b0:	f000 f9dc 	bl	800296c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b4:	230f      	movs	r3, #15
 80025b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025b8:	2302      	movs	r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	2102      	movs	r1, #2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 fc09 	bl	8005de8 <HAL_RCC_ClockConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80025dc:	f000 f9c6 	bl	800296c <Error_Handler>
  }
}
 80025e0:	bf00      	nop
 80025e2:	3750      	adds	r7, #80	; 0x50
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40007000 	.word	0x40007000

080025f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <MX_I2C1_Init+0x50>)
 80025f6:	4a13      	ldr	r2, [pc, #76]	; (8002644 <MX_I2C1_Init+0x54>)
 80025f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_I2C1_Init+0x50>)
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <MX_I2C1_Init+0x58>)
 80025fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <MX_I2C1_Init+0x50>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_I2C1_Init+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_I2C1_Init+0x50>)
 800260e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <MX_I2C1_Init+0x50>)
 8002616:	2200      	movs	r2, #0
 8002618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_I2C1_Init+0x50>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <MX_I2C1_Init+0x50>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_I2C1_Init+0x50>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <MX_I2C1_Init+0x50>)
 800262e:	f001 fc01 	bl	8003e34 <HAL_I2C_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002638:	f000 f998 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200005b8 	.word	0x200005b8
 8002644:	40005400 	.word	0x40005400
 8002648:	00061a80 	.word	0x00061a80

0800264c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <MX_SPI1_Init+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800265c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <MX_SPI1_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800267c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002680:	2230      	movs	r2, #48	; 0x30
 8002682:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002686:	2200      	movs	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <MX_SPI1_Init+0x64>)
 800268c:	2200      	movs	r2, #0
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002692:	2200      	movs	r2, #0
 8002694:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <MX_SPI1_Init+0x64>)
 8002698:	220a      	movs	r2, #10
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800269c:	4804      	ldr	r0, [pc, #16]	; (80026b0 <MX_SPI1_Init+0x64>)
 800269e:	f003 fdb5 	bl	800620c <HAL_SPI_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026a8:	f000 f960 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000060c 	.word	0x2000060c
 80026b4:	40013000 	.word	0x40013000

080026b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	; 0x38
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	f107 0320 	add.w	r3, r7, #32
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
 80026e4:	615a      	str	r2, [r3, #20]
 80026e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <MX_TIM2_Init+0xe4>)
 80026ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <MX_TIM2_Init+0xe4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <MX_TIM2_Init+0xe4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <MX_TIM2_Init+0xe4>)
 80026fe:	2259      	movs	r2, #89	; 0x59
 8002700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <MX_TIM2_Init+0xe4>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002708:	4b24      	ldr	r3, [pc, #144]	; (800279c <MX_TIM2_Init+0xe4>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800270e:	4823      	ldr	r0, [pc, #140]	; (800279c <MX_TIM2_Init+0xe4>)
 8002710:	f003 fe05 	bl	800631e <HAL_TIM_Base_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800271a:	f000 f927 	bl	800296c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002728:	4619      	mov	r1, r3
 800272a:	481c      	ldr	r0, [pc, #112]	; (800279c <MX_TIM2_Init+0xe4>)
 800272c:	f004 f8cc 	bl	80068c8 <HAL_TIM_ConfigClockSource>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002736:	f000 f919 	bl	800296c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800273a:	4818      	ldr	r0, [pc, #96]	; (800279c <MX_TIM2_Init+0xe4>)
 800273c:	f003 fea0 	bl	8006480 <HAL_TIM_PWM_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002746:	f000 f911 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002752:	f107 0320 	add.w	r3, r7, #32
 8002756:	4619      	mov	r1, r3
 8002758:	4810      	ldr	r0, [pc, #64]	; (800279c <MX_TIM2_Init+0xe4>)
 800275a:	f004 fcc3 	bl	80070e4 <HAL_TIMEx_MasterConfigSynchronization>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002764:	f000 f902 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002768:	2360      	movs	r3, #96	; 0x60
 800276a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	2204      	movs	r2, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4807      	ldr	r0, [pc, #28]	; (800279c <MX_TIM2_Init+0xe4>)
 8002780:	f003 ffe0 	bl	8006744 <HAL_TIM_PWM_ConfigChannel>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800278a:	f000 f8ef 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800278e:	4803      	ldr	r0, [pc, #12]	; (800279c <MX_TIM2_Init+0xe4>)
 8002790:	f000 fa0e 	bl	8002bb0 <HAL_TIM_MspPostInit>

}
 8002794:	bf00      	nop
 8002796:	3738      	adds	r7, #56	; 0x38
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000664 	.word	0x20000664

080027a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_DMA_Init+0x3c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <MX_DMA_Init+0x3c>)
 80027b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_DMA_Init+0x3c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2105      	movs	r1, #5
 80027c6:	2011      	movs	r0, #17
 80027c8:	f000 fdc2 	bl	8003350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027cc:	2011      	movs	r0, #17
 80027ce:	f000 fddb 	bl	8003388 <HAL_NVIC_EnableIRQ>

}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <MX_GPIO_Init+0xe0>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <MX_GPIO_Init+0xe0>)
 8002800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <MX_GPIO_Init+0xe0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <MX_GPIO_Init+0xe0>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a29      	ldr	r2, [pc, #164]	; (80028c0 <MX_GPIO_Init+0xe0>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <MX_GPIO_Init+0xe0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <MX_GPIO_Init+0xe0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <MX_GPIO_Init+0xe0>)
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <MX_GPIO_Init+0xe0>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 800284a:	2200      	movs	r2, #0
 800284c:	2107      	movs	r1, #7
 800284e:	481d      	ldr	r0, [pc, #116]	; (80028c4 <MX_GPIO_Init+0xe4>)
 8002850:	f001 fabe 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8002854:	2307      	movs	r3, #7
 8002856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002858:	2301      	movs	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	4619      	mov	r1, r3
 800286a:	4816      	ldr	r0, [pc, #88]	; (80028c4 <MX_GPIO_Init+0xe4>)
 800286c:	f001 f92c 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800287a:	2302      	movs	r3, #2
 800287c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4619      	mov	r1, r3
 8002884:	480f      	ldr	r0, [pc, #60]	; (80028c4 <MX_GPIO_Init+0xe4>)
 8002886:	f001 f91f 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 800288a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800288e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002890:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002896:	2301      	movs	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	4619      	mov	r1, r3
 80028a0:	4808      	ldr	r0, [pc, #32]	; (80028c4 <MX_GPIO_Init+0xe4>)
 80028a2:	f001 f911 	bl	8003ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2105      	movs	r1, #5
 80028aa:	2028      	movs	r0, #40	; 0x28
 80028ac:	f000 fd50 	bl	8003350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028b0:	2028      	movs	r0, #40	; 0x28
 80028b2:	f000 fd69 	bl	8003388 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028b6:	bf00      	nop
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020400 	.word	0x40020400

080028c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_button_on_Pin){
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d8:	d104      	bne.n	80028e4 <HAL_GPIO_EXTI_Callback+0x1c>
		buttonEnSet(ON);
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff fd26 	bl	800232c <buttonEnSet>
		buttonUpSet();
 80028e0:	f7ff fd00 	bl	80022e4 <buttonUpSet>
	}
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <startDisplay>:
void startDisplay(){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	    ssd1306_Fill(Black);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f7fe fce9 	bl	80012c8 <ssd1306_Fill>
	    ssd1306_SetCursor(5, 10);
 80028f6:	210a      	movs	r1, #10
 80028f8:	2005      	movs	r0, #5
 80028fa:	f7fe fe33 	bl	8001564 <ssd1306_SetCursor>
	    ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <startDisplay+0x3c>)
 8002900:	2301      	movs	r3, #1
 8002902:	ca06      	ldmia	r2, {r1, r2}
 8002904:	4809      	ldr	r0, [pc, #36]	; (800292c <startDisplay+0x40>)
 8002906:	f7fe fe07 	bl	8001518 <ssd1306_WriteString>
	    ssd1306_SetCursor(3, 40);
 800290a:	2128      	movs	r1, #40	; 0x28
 800290c:	2003      	movs	r0, #3
 800290e:	f7fe fe29 	bl	8001564 <ssd1306_SetCursor>
	    ssd1306_WriteString("Tap Start for continue", Font_6x8, White);
 8002912:	4a07      	ldr	r2, [pc, #28]	; (8002930 <startDisplay+0x44>)
 8002914:	2301      	movs	r3, #1
 8002916:	ca06      	ldmia	r2, {r1, r2}
 8002918:	4806      	ldr	r0, [pc, #24]	; (8002934 <startDisplay+0x48>)
 800291a:	f7fe fdfd 	bl	8001518 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 800291e:	f7fe fcf7 	bl	8001310 <ssd1306_UpdateScreen>
  }
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000010 	.word	0x20000010
 800292c:	0800a9b8 	.word	0x0800a9b8
 8002930:	20000000 	.word	0x20000000
 8002934:	0800a9c4 	.word	0x0800a9c4

08002938 <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f004 fd71 	bl	8007428 <osDelay>
 8002946:	e7fb      	b.n	8002940 <StartEmptyTask+0x8>

08002948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800295a:	f000 fbfd 	bl	8003158 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40014000 	.word	0x40014000

0800296c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002974:	e7fe      	b.n	8002974 <Error_Handler+0x8>
	...

08002978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_MspInit+0x54>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_MspInit+0x54>)
 8002988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_MspInit+0x54>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_MspInit+0x54>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <HAL_MspInit+0x54>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_MspInit+0x54>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	210f      	movs	r1, #15
 80029ba:	f06f 0001 	mvn.w	r0, #1
 80029be:	f000 fcc7 	bl	8003350 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_I2C_MspInit+0x84>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12b      	bne.n	8002a4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_I2C_MspInit+0x88>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_I2C_MspInit+0x88>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_I2C_MspInit+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a0e:	23c0      	movs	r3, #192	; 0xc0
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a12:	2312      	movs	r3, #18
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	480c      	ldr	r0, [pc, #48]	; (8002a5c <HAL_I2C_MspInit+0x8c>)
 8002a2a:	f001 f84d 	bl	8003ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_I2C_MspInit+0x88>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_I2C_MspInit+0x88>)
 8002a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_I2C_MspInit+0x88>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40005400 	.word	0x40005400
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020400 	.word	0x40020400

08002a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <HAL_SPI_MspInit+0x84>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d12b      	bne.n	8002ada <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002a8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002aba:	23a0      	movs	r3, #160	; 0xa0
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aca:	2305      	movs	r3, #5
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <HAL_SPI_MspInit+0x8c>)
 8002ad6:	f000 fff7 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ada:	bf00      	nop
 8002adc:	3728      	adds	r7, #40	; 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40013000 	.word	0x40013000
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020000 	.word	0x40020000

08002af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d14c      	bne.n	8002b9c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_TIM_Base_MspInit+0xb4>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <HAL_TIM_Base_MspInit+0xb4>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_TIM_Base_MspInit+0xb4>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <HAL_TIM_Base_MspInit+0xbc>)
 8002b22:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8002b24:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b26:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b2a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b46:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b54:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b5e:	2204      	movs	r2, #4
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b64:	2203      	movs	r2, #3
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b76:	f000 fc15 	bl	80033a4 <HAL_DMA_Init>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8002b80:	f7ff fef4 	bl	800296c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b88:	629a      	str	r2, [r3, #40]	; 0x28
 8002b8a:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a05      	ldr	r2, [pc, #20]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <HAL_TIM_Base_MspInit+0xb8>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	200006ac 	.word	0x200006ac
 8002bac:	400260a0 	.word	0x400260a0

08002bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d11d      	bne.n	8002c0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_TIM_MspPostInit+0x68>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a0f      	ldr	r2, [pc, #60]	; (8002c18 <HAL_TIM_MspPostInit+0x68>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_TIM_MspPostInit+0x68>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	4619      	mov	r1, r3
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <HAL_TIM_MspPostInit+0x6c>)
 8002c0a:	f000 ff5d 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c0e:	bf00      	nop
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000

08002c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_InitTick+0xd0>)
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	4a2d      	ldr	r2, [pc, #180]	; (8002cf0 <HAL_InitTick+0xd0>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_InitTick+0xd0>)
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c4c:	f107 020c 	add.w	r2, r7, #12
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 faa6 	bl	80061a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c5c:	f003 fa90 	bl	8006180 <HAL_RCC_GetPCLK2Freq>
 8002c60:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <HAL_InitTick+0xd4>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0c9b      	lsrs	r3, r3, #18
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_InitTick+0xd8>)
 8002c72:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <HAL_InitTick+0xdc>)
 8002c74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_InitTick+0xd8>)
 8002c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c7c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002c7e:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_InitTick+0xd8>)
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002c84:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <HAL_InitTick+0xd8>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_InitTick+0xd8>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_InitTick+0xd8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8002c96:	4818      	ldr	r0, [pc, #96]	; (8002cf8 <HAL_InitTick+0xd8>)
 8002c98:	f003 fb41 	bl	800631e <HAL_TIM_Base_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8002caa:	4813      	ldr	r0, [pc, #76]	; (8002cf8 <HAL_InitTick+0xd8>)
 8002cac:	f003 fb86 	bl	80063bc <HAL_TIM_Base_Start_IT>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d111      	bne.n	8002ce2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002cbe:	2018      	movs	r0, #24
 8002cc0:	f000 fb62 	bl	8003388 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	d808      	bhi.n	8002cdc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	2018      	movs	r0, #24
 8002cd0:	f000 fb3e 	bl	8003350 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_InitTick+0xe0>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e002      	b.n	8002ce2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3730      	adds	r7, #48	; 0x30
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	20000714 	.word	0x20000714
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	2000003c 	.word	0x2000003c

08002d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <NMI_Handler+0x4>

08002d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <HardFault_Handler+0x4>

08002d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <MemManage_Handler+0x4>

08002d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <BusFault_Handler+0x4>

08002d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <UsageFault_Handler+0x4>

08002d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <DMA1_Stream6_IRQHandler+0x10>)
 8002d36:	f000 fc5d 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200006ac 	.word	0x200006ac

08002d44 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002d4a:	f003 fbf2 	bl	8006532 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000714 	.word	0x20000714

08002d58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 8002d5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d60:	f001 f850 	bl	8003e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <_sbrk+0x5c>)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <_sbrk+0x60>)
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <_sbrk+0x64>)
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <_sbrk+0x68>)
 8002d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d207      	bcs.n	8002da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d98:	f007 fc18 	bl	800a5cc <__errno>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	220c      	movs	r2, #12
 8002da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	e009      	b.n	8002dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <_sbrk+0x64>)
 8002db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20020000 	.word	0x20020000
 8002dc8:	00004000 	.word	0x00004000
 8002dcc:	2000075c 	.word	0x2000075c
 8002dd0:	200051c8 	.word	0x200051c8

08002dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <SystemInit+0x20>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <SystemInit+0x20>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <StartLedControlTask>:

#include "tasks/LedControl.h"

void StartLedControlTask(void *argument){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	  ARGB_Init();  // Initialization
 8002e00:	f7fe fc9e 	bl	8001740 <ARGB_Init>
	  ARGB_Clear();
 8002e04:	f7fe fd14 	bl	8001830 <ARGB_Clear>
	  while (ARGB_Show() != ARGB_OK);
 8002e08:	bf00      	nop
 8002e0a:	f7fe fdbf 	bl	800198c <ARGB_Show>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d1fa      	bne.n	8002e0a <StartLedControlTask+0x12>
	  ARGB_SetBrightness(80);
 8002e14:	2050      	movs	r0, #80	; 0x50
 8002e16:	f7fe fd15 	bl	8001844 <ARGB_SetBrightness>
	for(;;){
		osDelay(100);
 8002e1a:	2064      	movs	r0, #100	; 0x64
 8002e1c:	f004 fb04 	bl	8007428 <osDelay>
 8002e20:	e7fb      	b.n	8002e1a <StartLedControlTask+0x22>

08002e22 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
	for(;;){
		if(buttonEn() == ON){
 8002e2a:	f7ff fa73 	bl	8002314 <buttonEn>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <StartOledMenuTask+0x16>
			drawMainMenu();
 8002e34:	f7ff f98c 	bl	8002150 <drawMainMenu>
		}
	osDelay(100);
 8002e38:	2064      	movs	r0, #100	; 0x64
 8002e3a:	f004 faf5 	bl	8007428 <osDelay>
		if(buttonEn() == ON){
 8002e3e:	e7f4      	b.n	8002e2a <StartOledMenuTask+0x8>

08002e40 <StartSensOutTask>:
ADS1115_Handle_t *pADS;

osStatus_t statusMutexI2C;

// Задача для опросо кнопок ADC и энкодера
void StartSensOutTask(void *argument){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	initAllChanelADC();
 8002e48:	f000 f8b6 	bl	8002fb8 <initAllChanelADC>
    pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configChanel1);
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <StartSensOutTask+0x78>)
 8002e4e:	cb0c      	ldmia	r3, {r2, r3}
 8002e50:	2148      	movs	r1, #72	; 0x48
 8002e52:	481a      	ldr	r0, [pc, #104]	; (8002ebc <StartSensOutTask+0x7c>)
 8002e54:	f7fd ff34 	bl	8000cc0 <ADS1115_init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <StartSensOutTask+0x80>)
 8002e5c:	6013      	str	r3, [r2, #0]
    ADS1115_updateConfig(pADS, configChanel1);
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <StartSensOutTask+0x80>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <StartSensOutTask+0x78>)
 8002e64:	ca06      	ldmia	r2, {r1, r2}
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd ff4a 	bl	8000d00 <ADS1115_updateConfig>
    ADS1115_startContinousMode(pADS);
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <StartSensOutTask+0x80>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd ff77 	bl	8000d64 <ADS1115_startContinousMode>
	for(;;){
		// Попытка захвата мьютекса с таймаутом 1000 мс
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <StartSensOutTask+0x84>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 fb73 	bl	800756a <osMutexAcquire>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <StartSensOutTask+0x88>)
 8002e88:	6013      	str	r3, [r2, #0]
		if(statusMutexI2C == osOK){
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <StartSensOutTask+0x88>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <StartSensOutTask+0x6a>
			calcDeltaAngle((int16_t)getEncoderData()); // Расчитываем смещение энкодера
 8002e92:	f000 f873 	bl	8002f7c <getEncoderData>
 8002e96:	4603      	mov	r3, r0
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f816 	bl	8002ecc <calcDeltaAngle>
			osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <StartSensOutTask+0x84>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f004 fbab 	bl	8007600 <osMutexRelease>
		}
		longButton();
 8002eaa:	f000 f847 	bl	8002f3c <longButton>
		osDelay(50);
 8002eae:	2032      	movs	r0, #50	; 0x32
 8002eb0:	f004 faba 	bl	8007428 <osDelay>
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 8002eb4:	e7df      	b.n	8002e76 <StartSensOutTask+0x36>
 8002eb6:	bf00      	nop
 8002eb8:	20000768 	.word	0x20000768
 8002ebc:	200005b8 	.word	0x200005b8
 8002ec0:	20000788 	.word	0x20000788
 8002ec4:	20000710 	.word	0x20000710
 8002ec8:	2000078c 	.word	0x2000078c

08002ecc <calcDeltaAngle>:
	}
}

void calcDeltaAngle(int16_t current_encoder_data){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
	delta_encoder = current_encoder_data - old_encoder_data;
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <calcDeltaAngle+0x68>)
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	b21a      	sxth	r2, r3
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <calcDeltaAngle+0x6c>)
 8002ee8:	801a      	strh	r2, [r3, #0]
	old_encoder_data = current_encoder_data;
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <calcDeltaAngle+0x68>)
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	8013      	strh	r3, [r2, #0]
	if(delta_encoder > MAX_ANGLE || delta_encoder < (-1)*MAX_ANGLE){
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <calcDeltaAngle+0x6c>)
 8002ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef6:	2bb4      	cmp	r3, #180	; 0xb4
 8002ef8:	dc05      	bgt.n	8002f06 <calcDeltaAngle+0x3a>
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <calcDeltaAngle+0x6c>)
 8002efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f00:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8002f04:	da02      	bge.n	8002f0c <calcDeltaAngle+0x40>
		delta_encoder = 0;
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <calcDeltaAngle+0x6c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	801a      	strh	r2, [r3, #0]
	}
	if(delta_encoder > MIN_ANGLE )
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <calcDeltaAngle+0x6c>)
 8002f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	dd01      	ble.n	8002f1a <calcDeltaAngle+0x4e>
		encoderSetUp();
 8002f16:	f7ff fa6d 	bl	80023f4 <encoderSetUp>
	if(delta_encoder < (-1)*MIN_ANGLE)
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <calcDeltaAngle+0x6c>)
 8002f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f20:	f113 0f05 	cmn.w	r3, #5
 8002f24:	da01      	bge.n	8002f2a <calcDeltaAngle+0x5e>
		encoderSetDown();
 8002f26:	f7ff fa71 	bl	800240c <encoderSetDown>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000762 	.word	0x20000762
 8002f38:	20000764 	.word	0x20000764

08002f3c <longButton>:
void longButton(){
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	if(buttonUp() == OFF){
 8002f40:	f7ff f9c4 	bl	80022cc <buttonUp>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <longButton+0x12>
		buttonCounterReset();
 8002f4a:	f7ff fa17 	bl	800237c <buttonCounterReset>
	}
	if(buttonUp() == ON){
 8002f4e:	f7ff f9bd 	bl	80022cc <buttonUp>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d103      	bne.n	8002f60 <longButton+0x24>
		buttonCounterSet();
 8002f58:	f7ff fa00 	bl	800235c <buttonCounterSet>
		buttonUpReset();
 8002f5c:	f7ff f9ce 	bl	80022fc <buttonUpReset>
	}
	if(buttonCounter() > 10){
 8002f60:	f7ff f9f0 	bl	8002344 <buttonCounter>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b0a      	cmp	r3, #10
 8002f68:	d905      	bls.n	8002f76 <longButton+0x3a>
		buttonLongSet();
 8002f6a:	f7ff fa1f 	bl	80023ac <buttonLongSet>
		buttonCounterReset();
 8002f6e:	f7ff fa05 	bl	800237c <buttonCounterReset>
		buttonUpReset();
 8002f72:	f7ff f9c3 	bl	80022fc <buttonUpReset>
	}
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <getEncoderData>:

u_magnituda magnituda;
uint16_t getEncoderData(){
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
	magnituda.data = AS5600_GetStatus();
 8002f80:	f7ff f8da 	bl	8002138 <AS5600_GetStatus>
 8002f84:	4603      	mov	r3, r0
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <getEncoderData+0x34>)
 8002f8a:	701a      	strb	r2, [r3, #0]
	if(magnituda.state_magnit.MD == ON)
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <getEncoderData+0x34>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <getEncoderData+0x2a>
		raw_angle = AS5600_GetRawAngle();
 8002f9a:	f7ff f8b7 	bl	800210c <AS5600_GetRawAngle>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <getEncoderData+0x38>)
 8002fa4:	801a      	strh	r2, [r3, #0]
	return 	raw_angle;
 8002fa6:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <getEncoderData+0x38>)
 8002fa8:	881b      	ldrh	r3, [r3, #0]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000790 	.word	0x20000790
 8002fb4:	20000760 	.word	0x20000760

08002fb8 <initAllChanelADC>:

void initAllChanelADC(){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	initADC(&configChanel1);
 8002fbc:	480e      	ldr	r0, [pc, #56]	; (8002ff8 <initAllChanelADC+0x40>)
 8002fbe:	f000 f823 	bl	8003008 <initADC>
	initADC(&configChanel2);
 8002fc2:	480e      	ldr	r0, [pc, #56]	; (8002ffc <initAllChanelADC+0x44>)
 8002fc4:	f000 f820 	bl	8003008 <initADC>
	initADC(&configChanel3);
 8002fc8:	480d      	ldr	r0, [pc, #52]	; (8003000 <initAllChanelADC+0x48>)
 8002fca:	f000 f81d 	bl	8003008 <initADC>
	initADC(&configChanel4);
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <initAllChanelADC+0x4c>)
 8002fd0:	f000 f81a 	bl	8003008 <initADC>

	initChanelADC(&configChanel1, CHANNEL_AIN0_GND);
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	4808      	ldr	r0, [pc, #32]	; (8002ff8 <initAllChanelADC+0x40>)
 8002fd8:	f000 f835 	bl	8003046 <initChanelADC>
	initChanelADC(&configChanel2, CHANNEL_AIN1_GND);
 8002fdc:	2105      	movs	r1, #5
 8002fde:	4807      	ldr	r0, [pc, #28]	; (8002ffc <initAllChanelADC+0x44>)
 8002fe0:	f000 f831 	bl	8003046 <initChanelADC>
	initChanelADC(&configChanel3, CHANNEL_AIN2_GND);
 8002fe4:	2106      	movs	r1, #6
 8002fe6:	4806      	ldr	r0, [pc, #24]	; (8003000 <initAllChanelADC+0x48>)
 8002fe8:	f000 f82d 	bl	8003046 <initChanelADC>
	initChanelADC(&configChanel4, CHANNEL_AIN3_GND);
 8002fec:	2107      	movs	r1, #7
 8002fee:	4805      	ldr	r0, [pc, #20]	; (8003004 <initAllChanelADC+0x4c>)
 8002ff0:	f000 f829 	bl	8003046 <initChanelADC>
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000768 	.word	0x20000768
 8002ffc:	20000770 	.word	0x20000770
 8003000:	20000778 	.word	0x20000778
 8003004:	20000780 	.word	0x20000780

08003008 <initADC>:

void initADC(ADS1115_Config_t* configReg){
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	configReg->pgaConfig 		= PGA_4_096;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	705a      	strb	r2, [r3, #1]
	configReg->operatingMode 	= MODE_CONTINOUS;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	709a      	strb	r2, [r3, #2]
	configReg->dataRate 		= DRATE_250;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2205      	movs	r2, #5
 8003020:	70da      	strb	r2, [r3, #3]
	configReg->compareMode 		= COMP_HYSTERESIS;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	711a      	strb	r2, [r3, #4]
	configReg->polarityMode 	= POLARITY_ACTIVE_LOW;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	715a      	strb	r2, [r3, #5]
	configReg->latchingMode  	= LATCHING_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	719a      	strb	r2, [r3, #6]
	configReg->queueComparator 	= QUEUE_ONE; 			// ПОднять флаг через сколько измерений
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	71da      	strb	r2, [r3, #7]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <initChanelADC>:

void initChanelADC(ADS1115_Config_t* configReg, MultiplexerConfig_t chanel){
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	70fb      	strb	r3, [r7, #3]
	configReg->channel = chanel;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	701a      	strb	r2, [r3, #0]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void initUserTasks(){
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	OledMenuTaskHandle   = osThreadNew(StartOledMenuTask,   NULL, &OledMenuTask_attributes);
 8003068:	4a0c      	ldr	r2, [pc, #48]	; (800309c <initUserTasks+0x38>)
 800306a:	2100      	movs	r1, #0
 800306c:	480c      	ldr	r0, [pc, #48]	; (80030a0 <initUserTasks+0x3c>)
 800306e:	f004 f949 	bl	8007304 <osThreadNew>
 8003072:	4603      	mov	r3, r0
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <initUserTasks+0x40>)
 8003076:	6013      	str	r3, [r2, #0]
	LedControlTaskHandle = osThreadNew(StartLedControlTask, NULL, &LedControlTask_attributes);
 8003078:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <initUserTasks+0x44>)
 800307a:	2100      	movs	r1, #0
 800307c:	480b      	ldr	r0, [pc, #44]	; (80030ac <initUserTasks+0x48>)
 800307e:	f004 f941 	bl	8007304 <osThreadNew>
 8003082:	4603      	mov	r3, r0
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <initUserTasks+0x4c>)
 8003086:	6013      	str	r3, [r2, #0]
	SensOutTaskHandle    = osThreadNew(StartSensOutTask,    NULL, &SensOutTask_attributes);
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <initUserTasks+0x50>)
 800308a:	2100      	movs	r1, #0
 800308c:	480a      	ldr	r0, [pc, #40]	; (80030b8 <initUserTasks+0x54>)
 800308e:	f004 f939 	bl	8007304 <osThreadNew>
 8003092:	4603      	mov	r3, r0
 8003094:	4a09      	ldr	r2, [pc, #36]	; (80030bc <initUserTasks+0x58>)
 8003096:	6013      	str	r3, [r2, #0]
};
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}
 800309c:	0800c524 	.word	0x0800c524
 80030a0:	08002e23 	.word	0x08002e23
 80030a4:	20000794 	.word	0x20000794
 80030a8:	0800c548 	.word	0x0800c548
 80030ac:	08002df9 	.word	0x08002df9
 80030b0:	20000798 	.word	0x20000798
 80030b4:	0800c56c 	.word	0x0800c56c
 80030b8:	08002e41 	.word	0x08002e41
 80030bc:	2000079c 	.word	0x2000079c

080030c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80030c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030c4:	480d      	ldr	r0, [pc, #52]	; (80030fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030c6:	490e      	ldr	r1, [pc, #56]	; (8003100 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030c8:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030cc:	e002      	b.n	80030d4 <LoopCopyDataInit>

080030ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d2:	3304      	adds	r3, #4

080030d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030d8:	d3f9      	bcc.n	80030ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030da:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030dc:	4c0b      	ldr	r4, [pc, #44]	; (800310c <LoopFillZerobss+0x26>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e0:	e001      	b.n	80030e6 <LoopFillZerobss>

080030e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e4:	3204      	adds	r2, #4

080030e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030e8:	d3fb      	bcc.n	80030e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030ea:	f7ff fe73 	bl	8002dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ee:	f007 fa73 	bl	800a5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030f2:	f7ff f9a3 	bl	800243c <main>
  bx  lr    
 80030f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003100:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003104:	0800c608 	.word	0x0800c608
  ldr r2, =_sbss
 8003108:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800310c:	200051c4 	.word	0x200051c4

08003110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC_IRQHandler>
	...

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_Init+0x40>)
 800311e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_Init+0x40>)
 800312a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_Init+0x40>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800313c:	2003      	movs	r0, #3
 800313e:	f000 f8fc 	bl	800333a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003142:	2000      	movs	r0, #0
 8003144:	f7ff fd6c 	bl	8002c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003148:	f7ff fc16 	bl	8002978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00

08003158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_IncTick+0x20>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_IncTick+0x24>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4413      	add	r3, r2
 8003168:	4a04      	ldr	r2, [pc, #16]	; (800317c <HAL_IncTick+0x24>)
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000040 	.word	0x20000040
 800317c:	200007a0 	.word	0x200007a0

08003180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return uwTick;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_GetTick+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	200007a0 	.word	0x200007a0

08003198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff ffee 	bl	8003180 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d005      	beq.n	80031be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_Delay+0x44>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031be:	bf00      	nop
 80031c0:	f7ff ffde 	bl	8003180 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d8f7      	bhi.n	80031c0 <HAL_Delay+0x28>
  {
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000040 	.word	0x20000040

080031e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031fc:	4013      	ands	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800320c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003212:	4a04      	ldr	r2, [pc, #16]	; (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	60d3      	str	r3, [r2, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <__NVIC_GetPriorityGrouping+0x18>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 0307 	and.w	r3, r3, #7
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db0b      	blt.n	800326e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4907      	ldr	r1, [pc, #28]	; (800327c <__NVIC_EnableIRQ+0x38>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100

08003280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	2b00      	cmp	r3, #0
 8003292:	db0a      	blt.n	80032aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	490c      	ldr	r1, [pc, #48]	; (80032cc <__NVIC_SetPriority+0x4c>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	440b      	add	r3, r1
 80032a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a8:	e00a      	b.n	80032c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4908      	ldr	r1, [pc, #32]	; (80032d0 <__NVIC_SetPriority+0x50>)
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3b04      	subs	r3, #4
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	440b      	add	r3, r1
 80032be:	761a      	strb	r2, [r3, #24]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f1c3 0307 	rsb	r3, r3, #7
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	bf28      	it	cs
 80032f2:	2304      	movcs	r3, #4
 80032f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d902      	bls.n	8003304 <NVIC_EncodePriority+0x30>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3b03      	subs	r3, #3
 8003302:	e000      	b.n	8003306 <NVIC_EncodePriority+0x32>
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	401a      	ands	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800331c:	f04f 31ff 	mov.w	r1, #4294967295
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43d9      	mvns	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	4313      	orrs	r3, r2
         );
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff4c 	bl	80031e0 <__NVIC_SetPriorityGrouping>
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003362:	f7ff ff61 	bl	8003228 <__NVIC_GetPriorityGrouping>
 8003366:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	6978      	ldr	r0, [r7, #20]
 800336e:	f7ff ffb1 	bl	80032d4 <NVIC_EncodePriority>
 8003372:	4602      	mov	r2, r0
 8003374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ff80 	bl	8003280 <__NVIC_SetPriority>
}
 8003380:	bf00      	nop
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff54 	bl	8003244 <__NVIC_EnableIRQ>
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033b0:	f7ff fee6 	bl	8003180 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e099      	b.n	80034f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e0:	e00f      	b.n	8003402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033e2:	f7ff fecd 	bl	8003180 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d908      	bls.n	8003402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2203      	movs	r2, #3
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e078      	b.n	80034f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e8      	bne.n	80033e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4b38      	ldr	r3, [pc, #224]	; (80034fc <HAL_DMA_Init+0x158>)
 800341c:	4013      	ands	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800342e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2b04      	cmp	r3, #4
 800345a:	d107      	bne.n	800346c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	4313      	orrs	r3, r2
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0307 	bic.w	r3, r3, #7
 8003482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b04      	cmp	r3, #4
 8003494:	d117      	bne.n	80034c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00e      	beq.n	80034c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fa91 	bl	80039d0 <DMA_CheckFifoParam>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2240      	movs	r2, #64	; 0x40
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034c2:	2301      	movs	r3, #1
 80034c4:	e016      	b.n	80034f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa48 	bl	8003964 <DMA_CalcBaseAndBitshift>
 80034d4:	4603      	mov	r3, r0
 80034d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	223f      	movs	r2, #63	; 0x3f
 80034de:	409a      	lsls	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	f010803f 	.word	0xf010803f

08003500 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_DMA_Start_IT+0x26>
 8003522:	2302      	movs	r3, #2
 8003524:	e040      	b.n	80035a8 <HAL_DMA_Start_IT+0xa8>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d12f      	bne.n	800359a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f9da 	bl	8003908 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	223f      	movs	r2, #63	; 0x3f
 800355a:	409a      	lsls	r2, r3
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0216 	orr.w	r2, r2, #22
 800356e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e005      	b.n	80035a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
 80035a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00c      	b.n	80035e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2205      	movs	r2, #5
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003600:	4b8e      	ldr	r3, [pc, #568]	; (800383c <HAL_DMA_IRQHandler+0x248>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a8e      	ldr	r2, [pc, #568]	; (8003840 <HAL_DMA_IRQHandler+0x24c>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a9b      	lsrs	r3, r3, #10
 800360c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2208      	movs	r2, #8
 8003620:	409a      	lsls	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01a      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	2208      	movs	r2, #8
 800364e:	409a      	lsls	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	2201      	movs	r2, #1
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2204      	movs	r2, #4
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d012      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	2204      	movs	r2, #4
 80036ba:	409a      	lsls	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	2210      	movs	r2, #16
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d043      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d03c      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2210      	movs	r2, #16
 80036f0:	409a      	lsls	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d018      	beq.n	8003736 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d024      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e01f      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e016      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0208 	bic.w	r2, r2, #8
 8003752:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2220      	movs	r2, #32
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 808f 	beq.w	8003894 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8087 	beq.w	8003894 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	2220      	movs	r2, #32
 800378c:	409a      	lsls	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b05      	cmp	r3, #5
 800379c:	d136      	bne.n	800380c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0216 	bic.w	r2, r2, #22
 80037ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_DMA_IRQHandler+0x1da>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	223f      	movs	r2, #63	; 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d07e      	beq.n	8003900 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
        }
        return;
 800380a:	e079      	b.n	8003900 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01d      	beq.n	8003856 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	2b00      	cmp	r3, #0
 800382e:	d031      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
 8003838:	e02c      	b.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
 800383a:	bf00      	nop
 800383c:	20000038 	.word	0x20000038
 8003840:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e01e      	b.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10f      	bne.n	8003884 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0210 	bic.w	r2, r2, #16
 8003872:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	2b00      	cmp	r3, #0
 800389a:	d032      	beq.n	8003902 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2205      	movs	r2, #5
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d307      	bcc.n	80038dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f2      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x2cc>
 80038da:	e000      	b.n	80038de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
 80038fe:	e000      	b.n	8003902 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003900:	bf00      	nop
    }
  }
}
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003924:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d108      	bne.n	8003948 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003946:	e007      	b.n	8003958 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	3b10      	subs	r3, #16
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800397e:	4a13      	ldr	r2, [pc, #76]	; (80039cc <DMA_CalcBaseAndBitshift+0x68>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d909      	bls.n	80039a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	1d1a      	adds	r2, r3, #4
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	659a      	str	r2, [r3, #88]	; 0x58
 80039a4:	e007      	b.n	80039b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	aaaaaaab 	.word	0xaaaaaaab
 80039cc:	0800c590 	.word	0x0800c590

080039d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11f      	bne.n	8003a2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d856      	bhi.n	8003a9e <DMA_CheckFifoParam+0xce>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <DMA_CheckFifoParam+0x28>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a1b 	.word	0x08003a1b
 8003a00:	08003a09 	.word	0x08003a09
 8003a04:	08003a9f 	.word	0x08003a9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d046      	beq.n	8003aa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a18:	e043      	b.n	8003aa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a22:	d140      	bne.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e03d      	b.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a32:	d121      	bne.n	8003a78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d837      	bhi.n	8003aaa <DMA_CheckFifoParam+0xda>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <DMA_CheckFifoParam+0x70>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a57 	.word	0x08003a57
 8003a48:	08003a51 	.word	0x08003a51
 8003a4c:	08003a69 	.word	0x08003a69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e030      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d025      	beq.n	8003aae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a66:	e022      	b.n	8003aae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a70:	d11f      	bne.n	8003ab2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a76:	e01c      	b.n	8003ab2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d903      	bls.n	8003a86 <DMA_CheckFifoParam+0xb6>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d003      	beq.n	8003a8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a84:	e018      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8a:	e015      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e00b      	b.n	8003ab6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e00a      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e008      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e006      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e004      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e159      	b.n	8003d98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 8148 	bne.w	8003d92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d005      	beq.n	8003b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d130      	bne.n	8003b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0201 	and.w	r2, r3, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d017      	beq.n	8003bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d123      	bne.n	8003c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a2 	beq.w	8003d92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <HAL_GPIO_Init+0x2e8>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	4a56      	ldr	r2, [pc, #344]	; (8003db0 <HAL_GPIO_Init+0x2e8>)
 8003c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5e:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <HAL_GPIO_Init+0x2e8>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c6a:	4a52      	ldr	r2, [pc, #328]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a49      	ldr	r2, [pc, #292]	; (8003db8 <HAL_GPIO_Init+0x2f0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d019      	beq.n	8003cca <HAL_GPIO_Init+0x202>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a48      	ldr	r2, [pc, #288]	; (8003dbc <HAL_GPIO_Init+0x2f4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_GPIO_Init+0x1fe>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a47      	ldr	r2, [pc, #284]	; (8003dc0 <HAL_GPIO_Init+0x2f8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_GPIO_Init+0x1fa>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a46      	ldr	r2, [pc, #280]	; (8003dc4 <HAL_GPIO_Init+0x2fc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <HAL_GPIO_Init+0x1f6>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a45      	ldr	r2, [pc, #276]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_GPIO_Init+0x1f2>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	e008      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cba:	2307      	movs	r3, #7
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e004      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	f002 0203 	and.w	r2, r2, #3
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	4093      	lsls	r3, r2
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cdc:	4935      	ldr	r1, [pc, #212]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cea:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d0e:	4a2f      	ldr	r2, [pc, #188]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d38:	4a24      	ldr	r2, [pc, #144]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d3e:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d62:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d8c:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	f67f aea2 	bls.w	8003ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40013800 	.word	0x40013800
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40020800 	.word	0x40020800
 8003dc4:	40020c00 	.word	0x40020c00
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40013c00 	.word	0x40013c00

08003dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de0:	787b      	ldrb	r3, [r7, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dec:	e003      	b.n	8003df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e0e:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e1a:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fd50 	bl	80028c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40013c00 	.word	0x40013c00

08003e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e12b      	b.n	800409e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fdb8 	bl	80029d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e98:	f002 f95e 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4a81      	ldr	r2, [pc, #516]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d807      	bhi.n	8003eb8 <HAL_I2C_Init+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a80      	ldr	r2, [pc, #512]	; (80040ac <HAL_I2C_Init+0x278>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	bf94      	ite	ls
 8003eb0:	2301      	movls	r3, #1
 8003eb2:	2300      	movhi	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e006      	b.n	8003ec6 <HAL_I2C_Init+0x92>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a7d      	ldr	r2, [pc, #500]	; (80040b0 <HAL_I2C_Init+0x27c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bf94      	ite	ls
 8003ec0:	2301      	movls	r3, #1
 8003ec2:	2300      	movhi	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0e7      	b.n	800409e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a78      	ldr	r2, [pc, #480]	; (80040b4 <HAL_I2C_Init+0x280>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0c9b      	lsrs	r3, r3, #18
 8003ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d802      	bhi.n	8003f08 <HAL_I2C_Init+0xd4>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3301      	adds	r3, #1
 8003f06:	e009      	b.n	8003f1c <HAL_I2C_Init+0xe8>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	4a69      	ldr	r2, [pc, #420]	; (80040b8 <HAL_I2C_Init+0x284>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	495c      	ldr	r1, [pc, #368]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	d819      	bhi.n	8003f70 <HAL_I2C_Init+0x13c>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e59      	subs	r1, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f4a:	1c59      	adds	r1, r3, #1
 8003f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f50:	400b      	ands	r3, r1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_I2C_Init+0x138>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1e59      	subs	r1, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f64:	3301      	adds	r3, #1
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	e051      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	e04f      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d111      	bne.n	8003f9c <HAL_I2C_Init+0x168>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1e58      	subs	r0, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	440b      	add	r3, r1
 8003f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e012      	b.n	8003fc2 <HAL_I2C_Init+0x18e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1e58      	subs	r0, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	0099      	lsls	r1, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_Init+0x196>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e022      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_I2C_Init+0x1bc>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1e58      	subs	r0, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	440b      	add	r3, r1
 8003fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fee:	e00f      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e58      	subs	r0, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	0099      	lsls	r1, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	fbb0 f3f3 	udiv	r3, r0, r3
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	6809      	ldr	r1, [r1, #0]
 8004014:	4313      	orrs	r3, r2
 8004016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800403e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6911      	ldr	r1, [r2, #16]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68d2      	ldr	r2, [r2, #12]
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	430b      	orrs	r3, r1
 8004052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	000186a0 	.word	0x000186a0
 80040ac:	001e847f 	.word	0x001e847f
 80040b0:	003d08ff 	.word	0x003d08ff
 80040b4:	431bde83 	.word	0x431bde83
 80040b8:	10624dd3 	.word	0x10624dd3

080040bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	461a      	mov	r2, r3
 80040c8:	460b      	mov	r3, r1
 80040ca:	817b      	strh	r3, [r7, #10]
 80040cc:	4613      	mov	r3, r2
 80040ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d0:	f7ff f856 	bl	8003180 <HAL_GetTick>
 80040d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b20      	cmp	r3, #32
 80040e0:	f040 80e0 	bne.w	80042a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2319      	movs	r3, #25
 80040ea:	2201      	movs	r2, #1
 80040ec:	4970      	ldr	r1, [pc, #448]	; (80042b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f001 fa24 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
 80040fc:	e0d3      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_I2C_Master_Transmit+0x50>
 8004108:	2302      	movs	r3, #2
 800410a:	e0cc      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d007      	beq.n	8004132 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2221      	movs	r2, #33	; 0x21
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2210      	movs	r2, #16
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	893a      	ldrh	r2, [r7, #8]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a50      	ldr	r2, [pc, #320]	; (80042b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004174:	8979      	ldrh	r1, [r7, #10]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 ff10 	bl	8004fa0 <I2C_MasterRequestWrite>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e08d      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041a0:	e066      	b.n	8004270 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	6a39      	ldr	r1, [r7, #32]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f001 fa9e 	bl	80056e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00d      	beq.n	80041ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d107      	bne.n	80041ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06b      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d11b      	bne.n	8004244 <HAL_I2C_Master_Transmit+0x188>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	d017      	beq.n	8004244 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	6a39      	ldr	r1, [r7, #32]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f001 fa8e 	bl	800576a <I2C_WaitOnBTFFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b04      	cmp	r3, #4
 800425a:	d107      	bne.n	800426c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e01a      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d194      	bne.n	80041a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	00100002 	.word	0x00100002
 80042b4:	ffff0000 	.word	0xffff0000

080042b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08c      	sub	sp, #48	; 0x30
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	461a      	mov	r2, r3
 80042c4:	460b      	mov	r3, r1
 80042c6:	817b      	strh	r3, [r7, #10]
 80042c8:	4613      	mov	r3, r2
 80042ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042cc:	f7fe ff58 	bl	8003180 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b20      	cmp	r3, #32
 80042dc:	f040 820b 	bne.w	80046f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2319      	movs	r3, #25
 80042e6:	2201      	movs	r2, #1
 80042e8:	497c      	ldr	r1, [pc, #496]	; (80044dc <HAL_I2C_Master_Receive+0x224>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f001 f926 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
 80042f8:	e1fe      	b.n	80046f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_I2C_Master_Receive+0x50>
 8004304:	2302      	movs	r3, #2
 8004306:	e1f7      	b.n	80046f8 <HAL_I2C_Master_Receive+0x440>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d007      	beq.n	800432e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2222      	movs	r2, #34	; 0x22
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2210      	movs	r2, #16
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	893a      	ldrh	r2, [r7, #8]
 800435e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a5c      	ldr	r2, [pc, #368]	; (80044e0 <HAL_I2C_Master_Receive+0x228>)
 800436e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004370:	8979      	ldrh	r1, [r7, #10]
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fe94 	bl	80050a4 <I2C_MasterRequestRead>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e1b8      	b.n	80046f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d113      	bne.n	80043b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438e:	2300      	movs	r3, #0
 8004390:	623b      	str	r3, [r7, #32]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e18c      	b.n	80046d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d11b      	bne.n	80043f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e16c      	b.n	80046d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d11b      	bne.n	8004436 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	e14c      	b.n	80046d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800445c:	e138      	b.n	80046d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	2b03      	cmp	r3, #3
 8004464:	f200 80f1 	bhi.w	800464a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446c:	2b01      	cmp	r3, #1
 800446e:	d123      	bne.n	80044b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f001 f9b9 	bl	80057ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e139      	b.n	80046f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044b6:	e10b      	b.n	80046d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d14e      	bne.n	800455e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2200      	movs	r2, #0
 80044c8:	4906      	ldr	r1, [pc, #24]	; (80044e4 <HAL_I2C_Master_Receive+0x22c>)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f001 f836 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e10e      	b.n	80046f8 <HAL_I2C_Master_Receive+0x440>
 80044da:	bf00      	nop
 80044dc:	00100002 	.word	0x00100002
 80044e0:	ffff0000 	.word	0xffff0000
 80044e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800455c:	e0b8      	b.n	80046d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2200      	movs	r2, #0
 8004566:	4966      	ldr	r1, [pc, #408]	; (8004700 <HAL_I2C_Master_Receive+0x448>)
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 ffe7 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0bf      	b.n	80046f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	2200      	movs	r2, #0
 80045c2:	494f      	ldr	r1, [pc, #316]	; (8004700 <HAL_I2C_Master_Receive+0x448>)
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 ffb9 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e091      	b.n	80046f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004648:	e042      	b.n	80046d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f001 f8cc 	bl	80057ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e04c      	b.n	80046f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b04      	cmp	r3, #4
 800469c:	d118      	bne.n	80046d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f47f aec2 	bne.w	800445e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e000      	b.n	80046f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3728      	adds	r7, #40	; 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	00010004 	.word	0x00010004

08004704 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	4608      	mov	r0, r1
 800470e:	4611      	mov	r1, r2
 8004710:	461a      	mov	r2, r3
 8004712:	4603      	mov	r3, r0
 8004714:	817b      	strh	r3, [r7, #10]
 8004716:	460b      	mov	r3, r1
 8004718:	813b      	strh	r3, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800471e:	f7fe fd2f 	bl	8003180 <HAL_GetTick>
 8004722:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b20      	cmp	r3, #32
 800472e:	f040 80d9 	bne.w	80048e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	2319      	movs	r3, #25
 8004738:	2201      	movs	r2, #1
 800473a:	496d      	ldr	r1, [pc, #436]	; (80048f0 <HAL_I2C_Mem_Write+0x1ec>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fefd 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
 800474a:	e0cc      	b.n	80048e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_I2C_Mem_Write+0x56>
 8004756:	2302      	movs	r3, #2
 8004758:	e0c5      	b.n	80048e6 <HAL_I2C_Mem_Write+0x1e2>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d007      	beq.n	8004780 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2221      	movs	r2, #33	; 0x21
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2240      	movs	r2, #64	; 0x40
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a4d      	ldr	r2, [pc, #308]	; (80048f4 <HAL_I2C_Mem_Write+0x1f0>)
 80047c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047c2:	88f8      	ldrh	r0, [r7, #6]
 80047c4:	893a      	ldrh	r2, [r7, #8]
 80047c6:	8979      	ldrh	r1, [r7, #10]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	4603      	mov	r3, r0
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fd34 	bl	8005240 <I2C_RequestMemoryWrite>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d052      	beq.n	8004884 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e081      	b.n	80048e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 ff7e 	bl	80056e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d107      	bne.n	800480a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004808:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e06b      	b.n	80048e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	781a      	ldrb	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b04      	cmp	r3, #4
 800484a:	d11b      	bne.n	8004884 <HAL_I2C_Mem_Write+0x180>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d017      	beq.n	8004884 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1aa      	bne.n	80047e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 ff6a 	bl	800576a <I2C_WaitOnBTFFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00d      	beq.n	80048b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d107      	bne.n	80048b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e016      	b.n	80048e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	00100002 	.word	0x00100002
 80048f4:	ffff0000 	.word	0xffff0000

080048f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08c      	sub	sp, #48	; 0x30
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	4603      	mov	r3, r0
 8004908:	817b      	strh	r3, [r7, #10]
 800490a:	460b      	mov	r3, r1
 800490c:	813b      	strh	r3, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004912:	f7fe fc35 	bl	8003180 <HAL_GetTick>
 8004916:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b20      	cmp	r3, #32
 8004922:	f040 8208 	bne.w	8004d36 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	2319      	movs	r3, #25
 800492c:	2201      	movs	r2, #1
 800492e:	497b      	ldr	r1, [pc, #492]	; (8004b1c <HAL_I2C_Mem_Read+0x224>)
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 fe03 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
 800493e:	e1fb      	b.n	8004d38 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_I2C_Mem_Read+0x56>
 800494a:	2302      	movs	r3, #2
 800494c:	e1f4      	b.n	8004d38 <HAL_I2C_Mem_Read+0x440>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d007      	beq.n	8004974 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2222      	movs	r2, #34	; 0x22
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a5b      	ldr	r2, [pc, #364]	; (8004b20 <HAL_I2C_Mem_Read+0x228>)
 80049b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049b6:	88f8      	ldrh	r0, [r7, #6]
 80049b8:	893a      	ldrh	r2, [r7, #8]
 80049ba:	8979      	ldrh	r1, [r7, #10]
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	4603      	mov	r3, r0
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fcd0 	bl	800536c <I2C_RequestMemoryRead>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e1b0      	b.n	8004d38 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d113      	bne.n	8004a06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049de:	2300      	movs	r3, #0
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	623b      	str	r3, [r7, #32]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	623b      	str	r3, [r7, #32]
 80049f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e184      	b.n	8004d10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d11b      	bne.n	8004a46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e164      	b.n	8004d10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d11b      	bne.n	8004a86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	e144      	b.n	8004d10 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a9c:	e138      	b.n	8004d10 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	f200 80f1 	bhi.w	8004c8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d123      	bne.n	8004af8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 fe99 	bl	80057ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e139      	b.n	8004d38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004af6:	e10b      	b.n	8004d10 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d14e      	bne.n	8004b9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	2200      	movs	r2, #0
 8004b08:	4906      	ldr	r1, [pc, #24]	; (8004b24 <HAL_I2C_Mem_Read+0x22c>)
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fd16 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e10e      	b.n	8004d38 <HAL_I2C_Mem_Read+0x440>
 8004b1a:	bf00      	nop
 8004b1c:	00100002 	.word	0x00100002
 8004b20:	ffff0000 	.word	0xffff0000
 8004b24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b9c:	e0b8      	b.n	8004d10 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	4966      	ldr	r1, [pc, #408]	; (8004d40 <HAL_I2C_Mem_Read+0x448>)
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fcc7 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0bf      	b.n	8004d38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	2200      	movs	r2, #0
 8004c02:	494f      	ldr	r1, [pc, #316]	; (8004d40 <HAL_I2C_Mem_Read+0x448>)
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fc99 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e091      	b.n	8004d38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c88:	e042      	b.n	8004d10 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fdac 	bl	80057ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e04c      	b.n	8004d38 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d118      	bne.n	8004d10 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f47f aec2 	bne.w	8004a9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e000      	b.n	8004d38 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3728      	adds	r7, #40	; 0x28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	00010004 	.word	0x00010004

08004d44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	460b      	mov	r3, r1
 8004d52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004d54:	f7fe fa14 	bl	8003180 <HAL_GetTick>
 8004d58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	f040 8111 	bne.w	8004f8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2319      	movs	r3, #25
 8004d72:	2201      	movs	r2, #1
 8004d74:	4988      	ldr	r1, [pc, #544]	; (8004f98 <HAL_I2C_IsDeviceReady+0x254>)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fbe0 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
 8004d84:	e104      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_I2C_IsDeviceReady+0x50>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e0fd      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d007      	beq.n	8004dba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2224      	movs	r2, #36	; 0x24
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a70      	ldr	r2, [pc, #448]	; (8004f9c <HAL_I2C_IsDeviceReady+0x258>)
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fb9e 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e14:	d103      	bne.n	8004e1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0b6      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e22:	897b      	ldrh	r3, [r7, #10]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004e32:	f7fe f9a5 	bl	8003180 <HAL_GetTick>
 8004e36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004e66:	e025      	b.n	8004eb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e68:	f7fe f98a 	bl	8003180 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d302      	bcc.n	8004e7e <HAL_I2C_IsDeviceReady+0x13a>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	22a0      	movs	r2, #160	; 0xa0
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2ba0      	cmp	r3, #160	; 0xa0
 8004ebe:	d005      	beq.n	8004ecc <HAL_I2C_IsDeviceReady+0x188>
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <HAL_I2C_IsDeviceReady+0x188>
 8004ec6:	7dbb      	ldrb	r3, [r7, #22]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0cd      	beq.n	8004e68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d129      	bne.n	8004f36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2319      	movs	r3, #25
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4921      	ldr	r1, [pc, #132]	; (8004f98 <HAL_I2C_IsDeviceReady+0x254>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fb12 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e036      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e02c      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2319      	movs	r3, #25
 8004f56:	2201      	movs	r2, #1
 8004f58:	490f      	ldr	r1, [pc, #60]	; (8004f98 <HAL_I2C_IsDeviceReady+0x254>)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 faee 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e012      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	f4ff af32 	bcc.w	8004dde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004f8e:	2302      	movs	r3, #2
  }
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	00100002 	.word	0x00100002
 8004f9c:	ffff0000 	.word	0xffff0000

08004fa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	460b      	mov	r3, r1
 8004fae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d006      	beq.n	8004fca <I2C_MasterRequestWrite+0x2a>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d003      	beq.n	8004fca <I2C_MasterRequestWrite+0x2a>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fc8:	d108      	bne.n	8004fdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e00b      	b.n	8004ff4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	2b12      	cmp	r3, #18
 8004fe2:	d107      	bne.n	8004ff4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fa9b 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501a:	d103      	bne.n	8005024 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e035      	b.n	8005094 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005030:	d108      	bne.n	8005044 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005032:	897b      	ldrh	r3, [r7, #10]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005040:	611a      	str	r2, [r3, #16]
 8005042:	e01b      	b.n	800507c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005044:	897b      	ldrh	r3, [r7, #10]
 8005046:	11db      	asrs	r3, r3, #7
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f003 0306 	and.w	r3, r3, #6
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f063 030f 	orn	r3, r3, #15
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	490e      	ldr	r1, [pc, #56]	; (800509c <I2C_MasterRequestWrite+0xfc>)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fac1 	bl	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e010      	b.n	8005094 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005072:	897b      	ldrh	r3, [r7, #10]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4907      	ldr	r1, [pc, #28]	; (80050a0 <I2C_MasterRequestWrite+0x100>)
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fab1 	bl	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	00010008 	.word	0x00010008
 80050a0:	00010002 	.word	0x00010002

080050a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607a      	str	r2, [r7, #4]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	460b      	mov	r3, r1
 80050b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d006      	beq.n	80050de <I2C_MasterRequestRead+0x3a>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d003      	beq.n	80050de <I2C_MasterRequestRead+0x3a>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050dc:	d108      	bne.n	80050f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e00b      	b.n	8005108 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	2b11      	cmp	r3, #17
 80050f6:	d107      	bne.n	8005108 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005106:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fa11 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00d      	beq.n	800513c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512e:	d103      	bne.n	8005138 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e079      	b.n	8005230 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005144:	d108      	bne.n	8005158 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005146:	897b      	ldrh	r3, [r7, #10]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	611a      	str	r2, [r3, #16]
 8005156:	e05f      	b.n	8005218 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005158:	897b      	ldrh	r3, [r7, #10]
 800515a:	11db      	asrs	r3, r3, #7
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 0306 	and.w	r3, r3, #6
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f063 030f 	orn	r3, r3, #15
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4930      	ldr	r1, [pc, #192]	; (8005238 <I2C_MasterRequestRead+0x194>)
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fa37 	bl	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e054      	b.n	8005230 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4929      	ldr	r1, [pc, #164]	; (800523c <I2C_MasterRequestRead+0x198>)
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fa27 	bl	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e044      	b.n	8005230 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f9af 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f2:	d103      	bne.n	80051fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e017      	b.n	8005230 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005200:	897b      	ldrh	r3, [r7, #10]
 8005202:	11db      	asrs	r3, r3, #7
 8005204:	b2db      	uxtb	r3, r3
 8005206:	f003 0306 	and.w	r3, r3, #6
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f063 030e 	orn	r3, r3, #14
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4907      	ldr	r1, [pc, #28]	; (800523c <I2C_MasterRequestRead+0x198>)
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f9e3 	bl	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	00010008 	.word	0x00010008
 800523c:	00010002 	.word	0x00010002

08005240 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	4608      	mov	r0, r1
 800524a:	4611      	mov	r1, r2
 800524c:	461a      	mov	r2, r3
 800524e:	4603      	mov	r3, r0
 8005250:	817b      	strh	r3, [r7, #10]
 8005252:	460b      	mov	r3, r1
 8005254:	813b      	strh	r3, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005268:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	2200      	movs	r2, #0
 8005272:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f960 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005290:	d103      	bne.n	800529a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e05f      	b.n	800535e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800529e:	897b      	ldrh	r3, [r7, #10]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	492d      	ldr	r1, [pc, #180]	; (8005368 <I2C_RequestMemoryWrite+0x128>)
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f998 	bl	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e04c      	b.n	800535e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052dc:	6a39      	ldr	r1, [r7, #32]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fa02 	bl	80056e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00d      	beq.n	8005306 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d107      	bne.n	8005302 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005300:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e02b      	b.n	800535e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d105      	bne.n	8005318 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800530c:	893b      	ldrh	r3, [r7, #8]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	611a      	str	r2, [r3, #16]
 8005316:	e021      	b.n	800535c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005318:	893b      	ldrh	r3, [r7, #8]
 800531a:	0a1b      	lsrs	r3, r3, #8
 800531c:	b29b      	uxth	r3, r3
 800531e:	b2da      	uxtb	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005328:	6a39      	ldr	r1, [r7, #32]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f9dc 	bl	80056e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b04      	cmp	r3, #4
 800533c:	d107      	bne.n	800534e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e005      	b.n	800535e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005352:	893b      	ldrh	r3, [r7, #8]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	00010002 	.word	0x00010002

0800536c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	4608      	mov	r0, r1
 8005376:	4611      	mov	r1, r2
 8005378:	461a      	mov	r2, r3
 800537a:	4603      	mov	r3, r0
 800537c:	817b      	strh	r3, [r7, #10]
 800537e:	460b      	mov	r3, r1
 8005380:	813b      	strh	r3, [r7, #8]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005394:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f8c2 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053cc:	d103      	bne.n	80053d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e0aa      	b.n	8005530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053da:	897b      	ldrh	r3, [r7, #10]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	6a3a      	ldr	r2, [r7, #32]
 80053ee:	4952      	ldr	r1, [pc, #328]	; (8005538 <I2C_RequestMemoryRead+0x1cc>)
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f8fa 	bl	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e097      	b.n	8005530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005418:	6a39      	ldr	r1, [r7, #32]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f964 	bl	80056e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	2b04      	cmp	r3, #4
 800542c:	d107      	bne.n	800543e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e076      	b.n	8005530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005448:	893b      	ldrh	r3, [r7, #8]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	611a      	str	r2, [r3, #16]
 8005452:	e021      	b.n	8005498 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005454:	893b      	ldrh	r3, [r7, #8]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	b29b      	uxth	r3, r3
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005464:	6a39      	ldr	r1, [r7, #32]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f93e 	bl	80056e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	2b04      	cmp	r3, #4
 8005478:	d107      	bne.n	800548a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005488:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e050      	b.n	8005530 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800548e:	893b      	ldrh	r3, [r7, #8]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549a:	6a39      	ldr	r1, [r7, #32]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f923 	bl	80056e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00d      	beq.n	80054c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d107      	bne.n	80054c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e035      	b.n	8005530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	2200      	movs	r2, #0
 80054dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f82b 	bl	800553c <I2C_WaitOnFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00d      	beq.n	8005508 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fa:	d103      	bne.n	8005504 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e013      	b.n	8005530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005508:	897b      	ldrh	r3, [r7, #10]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	b2da      	uxtb	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	6a3a      	ldr	r2, [r7, #32]
 800551c:	4906      	ldr	r1, [pc, #24]	; (8005538 <I2C_RequestMemoryRead+0x1cc>)
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f863 	bl	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	00010002 	.word	0x00010002

0800553c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800554c:	e025      	b.n	800559a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d021      	beq.n	800559a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005556:	f7fd fe13 	bl	8003180 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d116      	bne.n	800559a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f043 0220 	orr.w	r2, r3, #32
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e023      	b.n	80055e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10d      	bne.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	43da      	mvns	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4013      	ands	r3, r2
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf0c      	ite	eq
 80055b6:	2301      	moveq	r3, #1
 80055b8:	2300      	movne	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	e00c      	b.n	80055da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	43da      	mvns	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4013      	ands	r3, r2
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bf0c      	ite	eq
 80055d2:	2301      	moveq	r3, #1
 80055d4:	2300      	movne	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d0b6      	beq.n	800554e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055f8:	e051      	b.n	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005608:	d123      	bne.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005618:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005622:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0204 	orr.w	r2, r3, #4
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e046      	b.n	80056e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d021      	beq.n	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565a:	f7fd fd91 	bl	8003180 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d302      	bcc.n	8005670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d116      	bne.n	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f043 0220 	orr.w	r2, r3, #32
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e020      	b.n	80056e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	0c1b      	lsrs	r3, r3, #16
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10c      	bne.n	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	43da      	mvns	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4013      	ands	r3, r2
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bf14      	ite	ne
 80056ba:	2301      	movne	r3, #1
 80056bc:	2300      	moveq	r3, #0
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	e00b      	b.n	80056da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	43da      	mvns	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4013      	ands	r3, r2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d18d      	bne.n	80055fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056f4:	e02d      	b.n	8005752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f8ce 	bl	8005898 <I2C_IsAcknowledgeFailed>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e02d      	b.n	8005762 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d021      	beq.n	8005752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570e:	f7fd fd37 	bl	8003180 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	d302      	bcc.n	8005724 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d116      	bne.n	8005752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f043 0220 	orr.w	r2, r3, #32
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e007      	b.n	8005762 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b80      	cmp	r3, #128	; 0x80
 800575e:	d1ca      	bne.n	80056f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005776:	e02d      	b.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f88d 	bl	8005898 <I2C_IsAcknowledgeFailed>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e02d      	b.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d021      	beq.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005790:	f7fd fcf6 	bl	8003180 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	d302      	bcc.n	80057a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d116      	bne.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e007      	b.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d1ca      	bne.n	8005778 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057f8:	e042      	b.n	8005880 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b10      	cmp	r3, #16
 8005806:	d119      	bne.n	800583c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0210 	mvn.w	r2, #16
 8005810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e029      	b.n	8005890 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583c:	f7fd fca0 	bl	8003180 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	d302      	bcc.n	8005852 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d116      	bne.n	8005880 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e007      	b.n	8005890 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d1b5      	bne.n	80057fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ae:	d11b      	bne.n	80058e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	f043 0204 	orr.w	r2, r3, #4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e267      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d075      	beq.n	8005a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005916:	4b88      	ldr	r3, [pc, #544]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
 800591e:	2b04      	cmp	r3, #4
 8005920:	d00c      	beq.n	800593c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005922:	4b85      	ldr	r3, [pc, #532]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800592a:	2b08      	cmp	r3, #8
 800592c:	d112      	bne.n	8005954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800592e:	4b82      	ldr	r3, [pc, #520]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800593a:	d10b      	bne.n	8005954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593c:	4b7e      	ldr	r3, [pc, #504]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d05b      	beq.n	8005a00 <HAL_RCC_OscConfig+0x108>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d157      	bne.n	8005a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e242      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595c:	d106      	bne.n	800596c <HAL_RCC_OscConfig+0x74>
 800595e:	4b76      	ldr	r3, [pc, #472]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a75      	ldr	r2, [pc, #468]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e01d      	b.n	80059a8 <HAL_RCC_OscConfig+0xb0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005974:	d10c      	bne.n	8005990 <HAL_RCC_OscConfig+0x98>
 8005976:	4b70      	ldr	r3, [pc, #448]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a6f      	ldr	r2, [pc, #444]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 800597c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b6d      	ldr	r3, [pc, #436]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6c      	ldr	r2, [pc, #432]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e00b      	b.n	80059a8 <HAL_RCC_OscConfig+0xb0>
 8005990:	4b69      	ldr	r3, [pc, #420]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a68      	ldr	r2, [pc, #416]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4b66      	ldr	r3, [pc, #408]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a65      	ldr	r2, [pc, #404]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 80059a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b0:	f7fd fbe6 	bl	8003180 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b8:	f7fd fbe2 	bl	8003180 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b64      	cmp	r3, #100	; 0x64
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e207      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ca:	4b5b      	ldr	r3, [pc, #364]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f0      	beq.n	80059b8 <HAL_RCC_OscConfig+0xc0>
 80059d6:	e014      	b.n	8005a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fd fbd2 	bl	8003180 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e0:	f7fd fbce 	bl	8003180 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	; 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e1f3      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059f2:	4b51      	ldr	r3, [pc, #324]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0xe8>
 80059fe:	e000      	b.n	8005a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d063      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a0e:	4b4a      	ldr	r3, [pc, #296]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 030c 	and.w	r3, r3, #12
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a1a:	4b47      	ldr	r3, [pc, #284]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d11c      	bne.n	8005a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a26:	4b44      	ldr	r3, [pc, #272]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d116      	bne.n	8005a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a32:	4b41      	ldr	r3, [pc, #260]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_RCC_OscConfig+0x152>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d001      	beq.n	8005a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e1c7      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4a:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	4937      	ldr	r1, [pc, #220]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5e:	e03a      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d020      	beq.n	8005aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a68:	4b34      	ldr	r3, [pc, #208]	; (8005b3c <HAL_RCC_OscConfig+0x244>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fd fb87 	bl	8003180 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a76:	f7fd fb83 	bl	8003180 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e1a8      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a88:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a94:	4b28      	ldr	r3, [pc, #160]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4925      	ldr	r1, [pc, #148]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]
 8005aa8:	e015      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aaa:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <HAL_RCC_OscConfig+0x244>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fd fb66 	bl	8003180 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ab8:	f7fd fb62 	bl	8003180 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e187      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aca:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d036      	beq.n	8005b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d016      	beq.n	8005b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aea:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <HAL_RCC_OscConfig+0x248>)
 8005aec:	2201      	movs	r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af0:	f7fd fb46 	bl	8003180 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005af8:	f7fd fb42 	bl	8003180 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e167      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x200>
 8005b16:	e01b      	b.n	8005b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b18:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <HAL_RCC_OscConfig+0x248>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b1e:	f7fd fb2f 	bl	8003180 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b24:	e00e      	b.n	8005b44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b26:	f7fd fb2b 	bl	8003180 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d907      	bls.n	8005b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e150      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	42470000 	.word	0x42470000
 8005b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b44:	4b88      	ldr	r3, [pc, #544]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1ea      	bne.n	8005b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8097 	beq.w	8005c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b62:	4b81      	ldr	r3, [pc, #516]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10f      	bne.n	8005b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]
 8005b72:	4b7d      	ldr	r3, [pc, #500]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	4a7c      	ldr	r2, [pc, #496]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b7e:	4b7a      	ldr	r3, [pc, #488]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b86:	60bb      	str	r3, [r7, #8]
 8005b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b8e:	4b77      	ldr	r3, [pc, #476]	; (8005d6c <HAL_RCC_OscConfig+0x474>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d118      	bne.n	8005bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b9a:	4b74      	ldr	r3, [pc, #464]	; (8005d6c <HAL_RCC_OscConfig+0x474>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a73      	ldr	r2, [pc, #460]	; (8005d6c <HAL_RCC_OscConfig+0x474>)
 8005ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ba6:	f7fd faeb 	bl	8003180 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bae:	f7fd fae7 	bl	8003180 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e10c      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc0:	4b6a      	ldr	r3, [pc, #424]	; (8005d6c <HAL_RCC_OscConfig+0x474>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0f0      	beq.n	8005bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d106      	bne.n	8005be2 <HAL_RCC_OscConfig+0x2ea>
 8005bd4:	4b64      	ldr	r3, [pc, #400]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	4a63      	ldr	r2, [pc, #396]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	6713      	str	r3, [r2, #112]	; 0x70
 8005be0:	e01c      	b.n	8005c1c <HAL_RCC_OscConfig+0x324>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b05      	cmp	r3, #5
 8005be8:	d10c      	bne.n	8005c04 <HAL_RCC_OscConfig+0x30c>
 8005bea:	4b5f      	ldr	r3, [pc, #380]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bee:	4a5e      	ldr	r2, [pc, #376]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005bf0:	f043 0304 	orr.w	r3, r3, #4
 8005bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf6:	4b5c      	ldr	r3, [pc, #368]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	4a5b      	ldr	r2, [pc, #364]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	6713      	str	r3, [r2, #112]	; 0x70
 8005c02:	e00b      	b.n	8005c1c <HAL_RCC_OscConfig+0x324>
 8005c04:	4b58      	ldr	r3, [pc, #352]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c08:	4a57      	ldr	r2, [pc, #348]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c10:	4b55      	ldr	r3, [pc, #340]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c14:	4a54      	ldr	r2, [pc, #336]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005c16:	f023 0304 	bic.w	r3, r3, #4
 8005c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d015      	beq.n	8005c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fd faac 	bl	8003180 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2a:	e00a      	b.n	8005c42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c2c:	f7fd faa8 	bl	8003180 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e0cb      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c42:	4b49      	ldr	r3, [pc, #292]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0ee      	beq.n	8005c2c <HAL_RCC_OscConfig+0x334>
 8005c4e:	e014      	b.n	8005c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c50:	f7fd fa96 	bl	8003180 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c56:	e00a      	b.n	8005c6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c58:	f7fd fa92 	bl	8003180 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e0b5      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c6e:	4b3e      	ldr	r3, [pc, #248]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1ee      	bne.n	8005c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d105      	bne.n	8005c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c80:	4b39      	ldr	r3, [pc, #228]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	4a38      	ldr	r2, [pc, #224]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a1 	beq.w	8005dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c96:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d05c      	beq.n	8005d5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d141      	bne.n	8005d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005caa:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <HAL_RCC_OscConfig+0x478>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb0:	f7fd fa66 	bl	8003180 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb8:	f7fd fa62 	bl	8003180 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e087      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cca:	4b27      	ldr	r3, [pc, #156]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	019b      	lsls	r3, r3, #6
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	085b      	lsrs	r3, r3, #1
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	061b      	lsls	r3, r3, #24
 8005cfa:	491b      	ldr	r1, [pc, #108]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d00:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <HAL_RCC_OscConfig+0x478>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d06:	f7fd fa3b 	bl	8003180 <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d0e:	f7fd fa37 	bl	8003180 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e05c      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d20:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0f0      	beq.n	8005d0e <HAL_RCC_OscConfig+0x416>
 8005d2c:	e054      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2e:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <HAL_RCC_OscConfig+0x478>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d34:	f7fd fa24 	bl	8003180 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d3c:	f7fd fa20 	bl	8003180 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e045      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <HAL_RCC_OscConfig+0x470>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f0      	bne.n	8005d3c <HAL_RCC_OscConfig+0x444>
 8005d5a:	e03d      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d107      	bne.n	8005d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e038      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	40007000 	.word	0x40007000
 8005d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d74:	4b1b      	ldr	r3, [pc, #108]	; (8005de4 <HAL_RCC_OscConfig+0x4ec>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d028      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d121      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d11a      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005da4:	4013      	ands	r3, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d111      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	085b      	lsrs	r3, r3, #1
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40023800 	.word	0x40023800

08005de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0cc      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b68      	ldr	r3, [pc, #416]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d90c      	bls.n	8005e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b65      	ldr	r3, [pc, #404]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b63      	ldr	r3, [pc, #396]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e0b8      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d020      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e3c:	4b59      	ldr	r3, [pc, #356]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a58      	ldr	r2, [pc, #352]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e54:	4b53      	ldr	r3, [pc, #332]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	4a52      	ldr	r2, [pc, #328]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e60:	4b50      	ldr	r3, [pc, #320]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	494d      	ldr	r1, [pc, #308]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d044      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d107      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e86:	4b47      	ldr	r3, [pc, #284]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d119      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e07f      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d003      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e06f      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb6:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e067      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ec6:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f023 0203 	bic.w	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4934      	ldr	r1, [pc, #208]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ed8:	f7fd f952 	bl	8003180 <HAL_GetTick>
 8005edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ede:	e00a      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee0:	f7fd f94e 	bl	8003180 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e04f      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef6:	4b2b      	ldr	r3, [pc, #172]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 020c 	and.w	r2, r3, #12
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1eb      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f08:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d20c      	bcs.n	8005f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b22      	ldr	r3, [pc, #136]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1e:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e032      	b.n	8005f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f3c:	4b19      	ldr	r3, [pc, #100]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4916      	ldr	r1, [pc, #88]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	490e      	ldr	r1, [pc, #56]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f6e:	f000 f821 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 8005f72:	4602      	mov	r2, r0
 8005f74:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	091b      	lsrs	r3, r3, #4
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	490a      	ldr	r1, [pc, #40]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f80:	5ccb      	ldrb	r3, [r1, r3]
 8005f82:	fa22 f303 	lsr.w	r3, r2, r3
 8005f86:	4a09      	ldr	r2, [pc, #36]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fc fe46 	bl	8002c20 <HAL_InitTick>

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40023c00 	.word	0x40023c00
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	0800c50c 	.word	0x0800c50c
 8005fac:	20000038 	.word	0x20000038
 8005fb0:	2000003c 	.word	0x2000003c

08005fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb8:	b090      	sub	sp, #64	; 0x40
 8005fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fcc:	4b59      	ldr	r3, [pc, #356]	; (8006134 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 030c 	and.w	r3, r3, #12
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d00d      	beq.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	f200 80a1 	bhi.w	8006120 <HAL_RCC_GetSysClockFreq+0x16c>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d003      	beq.n	8005fee <HAL_RCC_GetSysClockFreq+0x3a>
 8005fe6:	e09b      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fe8:	4b53      	ldr	r3, [pc, #332]	; (8006138 <HAL_RCC_GetSysClockFreq+0x184>)
 8005fea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005fec:	e09b      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fee:	4b53      	ldr	r3, [pc, #332]	; (800613c <HAL_RCC_GetSysClockFreq+0x188>)
 8005ff0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ff2:	e098      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ff4:	4b4f      	ldr	r3, [pc, #316]	; (8006134 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ffe:	4b4d      	ldr	r3, [pc, #308]	; (8006134 <HAL_RCC_GetSysClockFreq+0x180>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d028      	beq.n	800605c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800600a:	4b4a      	ldr	r3, [pc, #296]	; (8006134 <HAL_RCC_GetSysClockFreq+0x180>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	099b      	lsrs	r3, r3, #6
 8006010:	2200      	movs	r2, #0
 8006012:	623b      	str	r3, [r7, #32]
 8006014:	627a      	str	r2, [r7, #36]	; 0x24
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800601c:	2100      	movs	r1, #0
 800601e:	4b47      	ldr	r3, [pc, #284]	; (800613c <HAL_RCC_GetSysClockFreq+0x188>)
 8006020:	fb03 f201 	mul.w	r2, r3, r1
 8006024:	2300      	movs	r3, #0
 8006026:	fb00 f303 	mul.w	r3, r0, r3
 800602a:	4413      	add	r3, r2
 800602c:	4a43      	ldr	r2, [pc, #268]	; (800613c <HAL_RCC_GetSysClockFreq+0x188>)
 800602e:	fba0 1202 	umull	r1, r2, r0, r2
 8006032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006034:	460a      	mov	r2, r1
 8006036:	62ba      	str	r2, [r7, #40]	; 0x28
 8006038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603a:	4413      	add	r3, r2
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	2200      	movs	r2, #0
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	61fa      	str	r2, [r7, #28]
 8006046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800604a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800604e:	f7fa fcb5 	bl	80009bc <__aeabi_uldivmod>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4613      	mov	r3, r2
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605a:	e053      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800605c:	4b35      	ldr	r3, [pc, #212]	; (8006134 <HAL_RCC_GetSysClockFreq+0x180>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	099b      	lsrs	r3, r3, #6
 8006062:	2200      	movs	r2, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	617a      	str	r2, [r7, #20]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800606e:	f04f 0b00 	mov.w	fp, #0
 8006072:	4652      	mov	r2, sl
 8006074:	465b      	mov	r3, fp
 8006076:	f04f 0000 	mov.w	r0, #0
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	0159      	lsls	r1, r3, #5
 8006080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006084:	0150      	lsls	r0, r2, #5
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	ebb2 080a 	subs.w	r8, r2, sl
 800608e:	eb63 090b 	sbc.w	r9, r3, fp
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800609e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060a6:	ebb2 0408 	subs.w	r4, r2, r8
 80060aa:	eb63 0509 	sbc.w	r5, r3, r9
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	00eb      	lsls	r3, r5, #3
 80060b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060bc:	00e2      	lsls	r2, r4, #3
 80060be:	4614      	mov	r4, r2
 80060c0:	461d      	mov	r5, r3
 80060c2:	eb14 030a 	adds.w	r3, r4, sl
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	eb45 030b 	adc.w	r3, r5, fp
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060da:	4629      	mov	r1, r5
 80060dc:	028b      	lsls	r3, r1, #10
 80060de:	4621      	mov	r1, r4
 80060e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060e4:	4621      	mov	r1, r4
 80060e6:	028a      	lsls	r2, r1, #10
 80060e8:	4610      	mov	r0, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ee:	2200      	movs	r2, #0
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	60fa      	str	r2, [r7, #12]
 80060f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060f8:	f7fa fc60 	bl	80009bc <__aeabi_uldivmod>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4613      	mov	r3, r2
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006104:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <HAL_RCC_GetSysClockFreq+0x180>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	0c1b      	lsrs	r3, r3, #16
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	3301      	adds	r3, #1
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800611e:	e002      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <HAL_RCC_GetSysClockFreq+0x184>)
 8006122:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006128:	4618      	mov	r0, r3
 800612a:	3740      	adds	r7, #64	; 0x40
 800612c:	46bd      	mov	sp, r7
 800612e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006132:	bf00      	nop
 8006134:	40023800 	.word	0x40023800
 8006138:	00f42400 	.word	0x00f42400
 800613c:	017d7840 	.word	0x017d7840

08006140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006144:	4b03      	ldr	r3, [pc, #12]	; (8006154 <HAL_RCC_GetHCLKFreq+0x14>)
 8006146:	681b      	ldr	r3, [r3, #0]
}
 8006148:	4618      	mov	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000038 	.word	0x20000038

08006158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800615c:	f7ff fff0 	bl	8006140 <HAL_RCC_GetHCLKFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	0a9b      	lsrs	r3, r3, #10
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4903      	ldr	r1, [pc, #12]	; (800617c <HAL_RCC_GetPCLK1Freq+0x24>)
 800616e:	5ccb      	ldrb	r3, [r1, r3]
 8006170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40023800 	.word	0x40023800
 800617c:	0800c51c 	.word	0x0800c51c

08006180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006184:	f7ff ffdc 	bl	8006140 <HAL_RCC_GetHCLKFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	0b5b      	lsrs	r3, r3, #13
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	4903      	ldr	r1, [pc, #12]	; (80061a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40023800 	.word	0x40023800
 80061a4:	0800c51c 	.word	0x0800c51c

080061a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	220f      	movs	r2, #15
 80061b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061b8:	4b12      	ldr	r3, [pc, #72]	; (8006204 <HAL_RCC_GetClockConfig+0x5c>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0203 	and.w	r2, r3, #3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061c4:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <HAL_RCC_GetClockConfig+0x5c>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061d0:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <HAL_RCC_GetClockConfig+0x5c>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061dc:	4b09      	ldr	r3, [pc, #36]	; (8006204 <HAL_RCC_GetClockConfig+0x5c>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	08db      	lsrs	r3, r3, #3
 80061e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <HAL_RCC_GetClockConfig+0x60>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0207 	and.w	r2, r3, #7
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	601a      	str	r2, [r3, #0]
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40023800 	.word	0x40023800
 8006208:	40023c00 	.word	0x40023c00

0800620c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e07b      	b.n	8006316 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	2b00      	cmp	r3, #0
 8006224:	d108      	bne.n	8006238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800622e:	d009      	beq.n	8006244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	61da      	str	r2, [r3, #28]
 8006236:	e005      	b.n	8006244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fc fbfe 	bl	8002a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800627a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c8:	ea42 0103 	orr.w	r1, r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	f003 0104 	and.w	r1, r3, #4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	f003 0210 	and.w	r2, r3, #16
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006304:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e041      	b.n	80063b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7fc fbd3 	bl	8002af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3304      	adds	r3, #4
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f000 fbf5 	bl	8006b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d001      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e044      	b.n	800645e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1e      	ldr	r2, [pc, #120]	; (800646c <HAL_TIM_Base_Start_IT+0xb0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d018      	beq.n	8006428 <HAL_TIM_Base_Start_IT+0x6c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fe:	d013      	beq.n	8006428 <HAL_TIM_Base_Start_IT+0x6c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1a      	ldr	r2, [pc, #104]	; (8006470 <HAL_TIM_Base_Start_IT+0xb4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_TIM_Base_Start_IT+0x6c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a19      	ldr	r2, [pc, #100]	; (8006474 <HAL_TIM_Base_Start_IT+0xb8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_TIM_Base_Start_IT+0x6c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a17      	ldr	r2, [pc, #92]	; (8006478 <HAL_TIM_Base_Start_IT+0xbc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_TIM_Base_Start_IT+0x6c>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a16      	ldr	r2, [pc, #88]	; (800647c <HAL_TIM_Base_Start_IT+0xc0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d111      	bne.n	800644c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b06      	cmp	r3, #6
 8006438:	d010      	beq.n	800645c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0201 	orr.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644a:	e007      	b.n	800645c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40010000 	.word	0x40010000
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800
 8006478:	40000c00 	.word	0x40000c00
 800647c:	40014000 	.word	0x40014000

08006480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e041      	b.n	8006516 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f839 	bl	800651e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f000 fb44 	bl	8006b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b02      	cmp	r3, #2
 8006546:	d122      	bne.n	800658e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d11b      	bne.n	800658e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0202 	mvn.w	r2, #2
 800655e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fa78 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 800657a:	e005      	b.n	8006588 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fa6a 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa7b 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b04      	cmp	r3, #4
 800659a:	d122      	bne.n	80065e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d11b      	bne.n	80065e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f06f 0204 	mvn.w	r2, #4
 80065b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fa4e 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 80065ce:	e005      	b.n	80065dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa40 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa51 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d122      	bne.n	8006636 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d11b      	bne.n	8006636 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f06f 0208 	mvn.w	r2, #8
 8006606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2204      	movs	r2, #4
 800660c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fa24 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 8006622:	e005      	b.n	8006630 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fa16 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fa27 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	2b10      	cmp	r3, #16
 8006642:	d122      	bne.n	800668a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0310 	and.w	r3, r3, #16
 800664e:	2b10      	cmp	r3, #16
 8006650:	d11b      	bne.n	800668a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0210 	mvn.w	r2, #16
 800665a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2208      	movs	r2, #8
 8006660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f9fa 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 8006676:	e005      	b.n	8006684 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9ec 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9fd 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b01      	cmp	r3, #1
 8006696:	d10e      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d107      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0201 	mvn.w	r2, #1
 80066ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7fc f949 	bl	8002948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c0:	2b80      	cmp	r3, #128	; 0x80
 80066c2:	d10e      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d107      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fd79 	bl	80071d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d10e      	bne.n	800670e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d107      	bne.n	800670e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f9c2 	bl	8006a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b20      	cmp	r3, #32
 800671a:	d10e      	bne.n	800673a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b20      	cmp	r3, #32
 8006728:	d107      	bne.n	800673a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f06f 0220 	mvn.w	r2, #32
 8006732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fd43 	bl	80071c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800675e:	2302      	movs	r3, #2
 8006760:	e0ae      	b.n	80068c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b0c      	cmp	r3, #12
 800676e:	f200 809f 	bhi.w	80068b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006772:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	080067ad 	.word	0x080067ad
 800677c:	080068b1 	.word	0x080068b1
 8006780:	080068b1 	.word	0x080068b1
 8006784:	080068b1 	.word	0x080068b1
 8006788:	080067ed 	.word	0x080067ed
 800678c:	080068b1 	.word	0x080068b1
 8006790:	080068b1 	.word	0x080068b1
 8006794:	080068b1 	.word	0x080068b1
 8006798:	0800682f 	.word	0x0800682f
 800679c:	080068b1 	.word	0x080068b1
 80067a0:	080068b1 	.word	0x080068b1
 80067a4:	080068b1 	.word	0x080068b1
 80067a8:	0800686f 	.word	0x0800686f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fa4a 	bl	8006c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0208 	orr.w	r2, r2, #8
 80067c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0204 	bic.w	r2, r2, #4
 80067d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6999      	ldr	r1, [r3, #24]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	691a      	ldr	r2, [r3, #16]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	619a      	str	r2, [r3, #24]
      break;
 80067ea:	e064      	b.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fa90 	bl	8006d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6999      	ldr	r1, [r3, #24]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	021a      	lsls	r2, r3, #8
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	619a      	str	r2, [r3, #24]
      break;
 800682c:	e043      	b.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fadb 	bl	8006df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0208 	orr.w	r2, r2, #8
 8006848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0204 	bic.w	r2, r2, #4
 8006858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69d9      	ldr	r1, [r3, #28]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	61da      	str	r2, [r3, #28]
      break;
 800686c:	e023      	b.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fb25 	bl	8006ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69d9      	ldr	r1, [r3, #28]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	021a      	lsls	r2, r3, #8
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	61da      	str	r2, [r3, #28]
      break;
 80068ae:	e002      	b.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
      break;
 80068b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_TIM_ConfigClockSource+0x1c>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e0b4      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x186>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800690a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800691c:	d03e      	beq.n	800699c <HAL_TIM_ConfigClockSource+0xd4>
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006922:	f200 8087 	bhi.w	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692a:	f000 8086 	beq.w	8006a3a <HAL_TIM_ConfigClockSource+0x172>
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006932:	d87f      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006934:	2b70      	cmp	r3, #112	; 0x70
 8006936:	d01a      	beq.n	800696e <HAL_TIM_ConfigClockSource+0xa6>
 8006938:	2b70      	cmp	r3, #112	; 0x70
 800693a:	d87b      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 800693c:	2b60      	cmp	r3, #96	; 0x60
 800693e:	d050      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006940:	2b60      	cmp	r3, #96	; 0x60
 8006942:	d877      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006944:	2b50      	cmp	r3, #80	; 0x50
 8006946:	d03c      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006948:	2b50      	cmp	r3, #80	; 0x50
 800694a:	d873      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	d058      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x13a>
 8006950:	2b40      	cmp	r3, #64	; 0x40
 8006952:	d86f      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006954:	2b30      	cmp	r3, #48	; 0x30
 8006956:	d064      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15a>
 8006958:	2b30      	cmp	r3, #48	; 0x30
 800695a:	d86b      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 800695c:	2b20      	cmp	r3, #32
 800695e:	d060      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15a>
 8006960:	2b20      	cmp	r3, #32
 8006962:	d867      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d05c      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15a>
 8006968:	2b10      	cmp	r3, #16
 800696a:	d05a      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15a>
 800696c:	e062      	b.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6899      	ldr	r1, [r3, #8]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f000 fb6b 	bl	8007058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	609a      	str	r2, [r3, #8]
      break;
 800699a:	e04f      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	6899      	ldr	r1, [r3, #8]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f000 fb54 	bl	8007058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069be:	609a      	str	r2, [r3, #8]
      break;
 80069c0:	e03c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f000 fac8 	bl	8006f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2150      	movs	r1, #80	; 0x50
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fb21 	bl	8007022 <TIM_ITRx_SetConfig>
      break;
 80069e0:	e02c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6859      	ldr	r1, [r3, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f000 fae7 	bl	8006fc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2160      	movs	r1, #96	; 0x60
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fb11 	bl	8007022 <TIM_ITRx_SetConfig>
      break;
 8006a00:	e01c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6859      	ldr	r1, [r3, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f000 faa8 	bl	8006f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2140      	movs	r1, #64	; 0x40
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fb01 	bl	8007022 <TIM_ITRx_SetConfig>
      break;
 8006a20:	e00c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f000 faf8 	bl	8007022 <TIM_ITRx_SetConfig>
      break;
 8006a32:	e003      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	73fb      	strb	r3, [r7, #15]
      break;
 8006a38:	e000      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d107      	bne.n	8006ae2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae0:	e02a      	b.n	8006b38 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d107      	bne.n	8006afc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2202      	movs	r2, #2
 8006af0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006afa:	e01d      	b.n	8006b38 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d107      	bne.n	8006b16 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b14:	e010      	b.n	8006b38 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d107      	bne.n	8006b30 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2208      	movs	r2, #8
 8006b24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b2e:	e003      	b.n	8006b38 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff ffb4 	bl	8006aa6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
}
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a34      	ldr	r2, [pc, #208]	; (8006c30 <TIM_Base_SetConfig+0xe4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00f      	beq.n	8006b84 <TIM_Base_SetConfig+0x38>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6a:	d00b      	beq.n	8006b84 <TIM_Base_SetConfig+0x38>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a31      	ldr	r2, [pc, #196]	; (8006c34 <TIM_Base_SetConfig+0xe8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d007      	beq.n	8006b84 <TIM_Base_SetConfig+0x38>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a30      	ldr	r2, [pc, #192]	; (8006c38 <TIM_Base_SetConfig+0xec>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_Base_SetConfig+0x38>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a2f      	ldr	r2, [pc, #188]	; (8006c3c <TIM_Base_SetConfig+0xf0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d108      	bne.n	8006b96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a25      	ldr	r2, [pc, #148]	; (8006c30 <TIM_Base_SetConfig+0xe4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d01b      	beq.n	8006bd6 <TIM_Base_SetConfig+0x8a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba4:	d017      	beq.n	8006bd6 <TIM_Base_SetConfig+0x8a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a22      	ldr	r2, [pc, #136]	; (8006c34 <TIM_Base_SetConfig+0xe8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d013      	beq.n	8006bd6 <TIM_Base_SetConfig+0x8a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <TIM_Base_SetConfig+0xec>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00f      	beq.n	8006bd6 <TIM_Base_SetConfig+0x8a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <TIM_Base_SetConfig+0xf0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00b      	beq.n	8006bd6 <TIM_Base_SetConfig+0x8a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <TIM_Base_SetConfig+0xf4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d007      	beq.n	8006bd6 <TIM_Base_SetConfig+0x8a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <TIM_Base_SetConfig+0xf8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_Base_SetConfig+0x8a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <TIM_Base_SetConfig+0xfc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d108      	bne.n	8006be8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <TIM_Base_SetConfig+0xe4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d103      	bne.n	8006c1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	615a      	str	r2, [r3, #20]
}
 8006c22:	bf00      	nop
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40000c00 	.word	0x40000c00
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0201 	bic.w	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0303 	bic.w	r3, r3, #3
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f023 0302 	bic.w	r3, r3, #2
 8006c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <TIM_OC1_SetConfig+0xc8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d10c      	bne.n	8006cc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0308 	bic.w	r3, r3, #8
 8006cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f023 0304 	bic.w	r3, r3, #4
 8006cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a13      	ldr	r2, [pc, #76]	; (8006d14 <TIM_OC1_SetConfig+0xc8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d111      	bne.n	8006cee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	621a      	str	r2, [r3, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	40010000 	.word	0x40010000

08006d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0210 	bic.w	r2, r3, #16
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 0320 	bic.w	r3, r3, #32
 8006d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1e      	ldr	r2, [pc, #120]	; (8006dec <TIM_OC2_SetConfig+0xd4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d10d      	bne.n	8006d94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a15      	ldr	r2, [pc, #84]	; (8006dec <TIM_OC2_SetConfig+0xd4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d113      	bne.n	8006dc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40010000 	.word	0x40010000

08006df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a1d      	ldr	r2, [pc, #116]	; (8006ec0 <TIM_OC3_SetConfig+0xd0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d10d      	bne.n	8006e6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a14      	ldr	r2, [pc, #80]	; (8006ec0 <TIM_OC3_SetConfig+0xd0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d113      	bne.n	8006e9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	621a      	str	r2, [r3, #32]
}
 8006eb4:	bf00      	nop
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	40010000 	.word	0x40010000

08006ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	021b      	lsls	r3, r3, #8
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	031b      	lsls	r3, r3, #12
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a10      	ldr	r2, [pc, #64]	; (8006f60 <TIM_OC4_SetConfig+0x9c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d109      	bne.n	8006f38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	019b      	lsls	r3, r3, #6
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	621a      	str	r2, [r3, #32]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40010000 	.word	0x40010000

08006f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	f023 0201 	bic.w	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f023 030a 	bic.w	r3, r3, #10
 8006fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b087      	sub	sp, #28
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	f023 0210 	bic.w	r2, r3, #16
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	031b      	lsls	r3, r3, #12
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007022:	b480      	push	{r7}
 8007024:	b085      	sub	sp, #20
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	f043 0307 	orr.w	r3, r3, #7
 8007044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	609a      	str	r2, [r3, #8]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	021a      	lsls	r2, r3, #8
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	431a      	orrs	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4313      	orrs	r3, r2
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	609a      	str	r2, [r3, #8]
}
 800708c:	bf00      	nop
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 031f 	and.w	r3, r3, #31
 80070aa:	2201      	movs	r2, #1
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a1a      	ldr	r2, [r3, #32]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	43db      	mvns	r3, r3
 80070ba:	401a      	ands	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1a      	ldr	r2, [r3, #32]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f003 031f 	and.w	r3, r3, #31
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	fa01 f303 	lsl.w	r3, r1, r3
 80070d0:	431a      	orrs	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	621a      	str	r2, [r3, #32]
}
 80070d6:	bf00      	nop
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
	...

080070e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e050      	b.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a1c      	ldr	r2, [pc, #112]	; (80071ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d018      	beq.n	8007172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007148:	d013      	beq.n	8007172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a16      	ldr	r2, [pc, #88]	; (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a15      	ldr	r2, [pc, #84]	; (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a13      	ldr	r2, [pc, #76]	; (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d10c      	bne.n	800718c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	4313      	orrs	r3, r2
 8007182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40010000 	.word	0x40010000
 80071b0:	40000400 	.word	0x40000400
 80071b4:	40000800 	.word	0x40000800
 80071b8:	40000c00 	.word	0x40000c00
 80071bc:	40014000 	.word	0x40014000

080071c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <__NVIC_SetPriority>:
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	db0a      	blt.n	8007212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	490c      	ldr	r1, [pc, #48]	; (8007234 <__NVIC_SetPriority+0x4c>)
 8007202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007206:	0112      	lsls	r2, r2, #4
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	440b      	add	r3, r1
 800720c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007210:	e00a      	b.n	8007228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	4908      	ldr	r1, [pc, #32]	; (8007238 <__NVIC_SetPriority+0x50>)
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	3b04      	subs	r3, #4
 8007220:	0112      	lsls	r2, r2, #4
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	440b      	add	r3, r1
 8007226:	761a      	strb	r2, [r3, #24]
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	e000e100 	.word	0xe000e100
 8007238:	e000ed00 	.word	0xe000ed00

0800723c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <SysTick_Handler+0x1c>)
 8007242:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007244:	f002 f85a 	bl	80092fc <xTaskGetSchedulerState>
 8007248:	4603      	mov	r3, r0
 800724a:	2b01      	cmp	r3, #1
 800724c:	d001      	beq.n	8007252 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800724e:	f002 ff43 	bl	800a0d8 <xPortSysTickHandler>
  }
}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	e000e010 	.word	0xe000e010

0800725c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007260:	2100      	movs	r1, #0
 8007262:	f06f 0004 	mvn.w	r0, #4
 8007266:	f7ff ffbf 	bl	80071e8 <__NVIC_SetPriority>
#endif
}
 800726a:	bf00      	nop
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007276:	f3ef 8305 	mrs	r3, IPSR
 800727a:	603b      	str	r3, [r7, #0]
  return(result);
 800727c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007282:	f06f 0305 	mvn.w	r3, #5
 8007286:	607b      	str	r3, [r7, #4]
 8007288:	e00c      	b.n	80072a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800728a:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <osKernelInitialize+0x44>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007292:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <osKernelInitialize+0x44>)
 8007294:	2201      	movs	r2, #1
 8007296:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007298:	2300      	movs	r3, #0
 800729a:	607b      	str	r3, [r7, #4]
 800729c:	e002      	b.n	80072a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800729e:	f04f 33ff 	mov.w	r3, #4294967295
 80072a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072a4:	687b      	ldr	r3, [r7, #4]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	200007a4 	.word	0x200007a4

080072b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072be:	f3ef 8305 	mrs	r3, IPSR
 80072c2:	603b      	str	r3, [r7, #0]
  return(result);
 80072c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80072ca:	f06f 0305 	mvn.w	r3, #5
 80072ce:	607b      	str	r3, [r7, #4]
 80072d0:	e010      	b.n	80072f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072d2:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <osKernelStart+0x48>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d109      	bne.n	80072ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072da:	f7ff ffbf 	bl	800725c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072de:	4b08      	ldr	r3, [pc, #32]	; (8007300 <osKernelStart+0x48>)
 80072e0:	2202      	movs	r2, #2
 80072e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072e4:	f001 fb9e 	bl	8008a24 <vTaskStartScheduler>
      stat = osOK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	607b      	str	r3, [r7, #4]
 80072ec:	e002      	b.n	80072f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072ee:	f04f 33ff 	mov.w	r3, #4294967295
 80072f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072f4:	687b      	ldr	r3, [r7, #4]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	200007a4 	.word	0x200007a4

08007304 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007304:	b580      	push	{r7, lr}
 8007306:	b08e      	sub	sp, #56	; 0x38
 8007308:	af04      	add	r7, sp, #16
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007314:	f3ef 8305 	mrs	r3, IPSR
 8007318:	617b      	str	r3, [r7, #20]
  return(result);
 800731a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800731c:	2b00      	cmp	r3, #0
 800731e:	d17e      	bne.n	800741e <osThreadNew+0x11a>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d07b      	beq.n	800741e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007326:	2380      	movs	r3, #128	; 0x80
 8007328:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800732a:	2318      	movs	r3, #24
 800732c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800732e:	2300      	movs	r3, #0
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007332:	f04f 33ff 	mov.w	r3, #4294967295
 8007336:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d045      	beq.n	80073ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <osThreadNew+0x48>
        name = attr->name;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <osThreadNew+0x6e>
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	2b38      	cmp	r3, #56	; 0x38
 8007364:	d805      	bhi.n	8007372 <osThreadNew+0x6e>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <osThreadNew+0x72>
        return (NULL);
 8007372:	2300      	movs	r3, #0
 8007374:	e054      	b.n	8007420 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	089b      	lsrs	r3, r3, #2
 8007384:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00e      	beq.n	80073ac <osThreadNew+0xa8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2bbb      	cmp	r3, #187	; 0xbb
 8007394:	d90a      	bls.n	80073ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800739a:	2b00      	cmp	r3, #0
 800739c:	d006      	beq.n	80073ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <osThreadNew+0xa8>
        mem = 1;
 80073a6:	2301      	movs	r3, #1
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	e010      	b.n	80073ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10c      	bne.n	80073ce <osThreadNew+0xca>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d108      	bne.n	80073ce <osThreadNew+0xca>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d104      	bne.n	80073ce <osThreadNew+0xca>
          mem = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	e001      	b.n	80073ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d110      	bne.n	80073f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073dc:	9202      	str	r2, [sp, #8]
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	6a3a      	ldr	r2, [r7, #32]
 80073e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f001 f92e 	bl	800864c <xTaskCreateStatic>
 80073f0:	4603      	mov	r3, r0
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	e013      	b.n	800741e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d110      	bne.n	800741e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	b29a      	uxth	r2, r3
 8007400:	f107 0310 	add.w	r3, r7, #16
 8007404:	9301      	str	r3, [sp, #4]
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f001 f979 	bl	8008706 <xTaskCreate>
 8007414:	4603      	mov	r3, r0
 8007416:	2b01      	cmp	r3, #1
 8007418:	d001      	beq.n	800741e <osThreadNew+0x11a>
            hTask = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800741e:	693b      	ldr	r3, [r7, #16]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3728      	adds	r7, #40	; 0x28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007430:	f3ef 8305 	mrs	r3, IPSR
 8007434:	60bb      	str	r3, [r7, #8]
  return(result);
 8007436:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <osDelay+0x1c>
    stat = osErrorISR;
 800743c:	f06f 0305 	mvn.w	r3, #5
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e007      	b.n	8007454 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <osDelay+0x2c>
      vTaskDelay(ticks);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fab4 	bl	80089bc <vTaskDelay>
    }
  }

  return (stat);
 8007454:	68fb      	ldr	r3, [r7, #12]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800745e:	b580      	push	{r7, lr}
 8007460:	b088      	sub	sp, #32
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800746a:	f3ef 8305 	mrs	r3, IPSR
 800746e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007470:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007472:	2b00      	cmp	r3, #0
 8007474:	d174      	bne.n	8007560 <osMutexNew+0x102>
    if (attr != NULL) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <osMutexNew+0x26>
      type = attr->attr_bits;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e001      	b.n	8007488 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <osMutexNew+0x3a>
      rmtx = 1U;
 8007492:	2301      	movs	r3, #1
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e001      	b.n	800749c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d15c      	bne.n	8007560 <osMutexNew+0x102>
      mem = -1;
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d015      	beq.n	80074de <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d006      	beq.n	80074c8 <osMutexNew+0x6a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	2b4f      	cmp	r3, #79	; 0x4f
 80074c0:	d902      	bls.n	80074c8 <osMutexNew+0x6a>
          mem = 1;
 80074c2:	2301      	movs	r3, #1
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	e00c      	b.n	80074e2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d108      	bne.n	80074e2 <osMutexNew+0x84>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <osMutexNew+0x84>
            mem = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	613b      	str	r3, [r7, #16]
 80074dc:	e001      	b.n	80074e2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d112      	bne.n	800750e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	4619      	mov	r1, r3
 80074f4:	2004      	movs	r0, #4
 80074f6:	f000 fb18 	bl	8007b2a <xQueueCreateMutexStatic>
 80074fa:	61f8      	str	r0, [r7, #28]
 80074fc:	e016      	b.n	800752c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	4619      	mov	r1, r3
 8007504:	2001      	movs	r0, #1
 8007506:	f000 fb10 	bl	8007b2a <xQueueCreateMutexStatic>
 800750a:	61f8      	str	r0, [r7, #28]
 800750c:	e00e      	b.n	800752c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10b      	bne.n	800752c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d004      	beq.n	8007524 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800751a:	2004      	movs	r0, #4
 800751c:	f000 faed 	bl	8007afa <xQueueCreateMutex>
 8007520:	61f8      	str	r0, [r7, #28]
 8007522:	e003      	b.n	800752c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007524:	2001      	movs	r0, #1
 8007526:	f000 fae8 	bl	8007afa <xQueueCreateMutex>
 800752a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00c      	beq.n	800754c <osMutexNew+0xee>
        if (attr != NULL) {
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <osMutexNew+0xe2>
          name = attr->name;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	e001      	b.n	8007544 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007544:	68f9      	ldr	r1, [r7, #12]
 8007546:	69f8      	ldr	r0, [r7, #28]
 8007548:	f001 f822 	bl	8008590 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d006      	beq.n	8007560 <osMutexNew+0x102>
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f043 0301 	orr.w	r3, r3, #1
 800755e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007560:	69fb      	ldr	r3, [r7, #28]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3720      	adds	r7, #32
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800756a:	b580      	push	{r7, lr}
 800756c:	b086      	sub	sp, #24
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007588:	f3ef 8305 	mrs	r3, IPSR
 800758c:	60bb      	str	r3, [r7, #8]
  return(result);
 800758e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007594:	f06f 0305 	mvn.w	r3, #5
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	e02c      	b.n	80075f6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80075a2:	f06f 0303 	mvn.w	r3, #3
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	e025      	b.n	80075f6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d011      	beq.n	80075d4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6938      	ldr	r0, [r7, #16]
 80075b4:	f000 fb08 	bl	8007bc8 <xQueueTakeMutexRecursive>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d01b      	beq.n	80075f6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80075c4:	f06f 0301 	mvn.w	r3, #1
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	e014      	b.n	80075f6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80075cc:	f06f 0302 	mvn.w	r3, #2
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e010      	b.n	80075f6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6938      	ldr	r0, [r7, #16]
 80075d8:	f000 fda6 	bl	8008128 <xQueueSemaphoreTake>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d009      	beq.n	80075f6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80075e8:	f06f 0301 	mvn.w	r3, #1
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e002      	b.n	80075f6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80075f0:	f06f 0302 	mvn.w	r3, #2
 80075f4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80075f6:	697b      	ldr	r3, [r7, #20]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f023 0301 	bic.w	r3, r3, #1
 800760e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800761c:	f3ef 8305 	mrs	r3, IPSR
 8007620:	60bb      	str	r3, [r7, #8]
  return(result);
 8007622:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007628:	f06f 0305 	mvn.w	r3, #5
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	e01f      	b.n	8007670 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d103      	bne.n	800763e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007636:	f06f 0303 	mvn.w	r3, #3
 800763a:	617b      	str	r3, [r7, #20]
 800763c:	e018      	b.n	8007670 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d009      	beq.n	8007658 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007644:	6938      	ldr	r0, [r7, #16]
 8007646:	f000 fa8b 	bl	8007b60 <xQueueGiveMutexRecursive>
 800764a:	4603      	mov	r3, r0
 800764c:	2b01      	cmp	r3, #1
 800764e:	d00f      	beq.n	8007670 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007650:	f06f 0302 	mvn.w	r3, #2
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	e00b      	b.n	8007670 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007658:	2300      	movs	r3, #0
 800765a:	2200      	movs	r2, #0
 800765c:	2100      	movs	r1, #0
 800765e:	6938      	ldr	r0, [r7, #16]
 8007660:	f000 fae8 	bl	8007c34 <xQueueGenericSend>
 8007664:	4603      	mov	r3, r0
 8007666:	2b01      	cmp	r3, #1
 8007668:	d002      	beq.n	8007670 <osMutexRelease+0x70>
        stat = osErrorResource;
 800766a:	f06f 0302 	mvn.w	r3, #2
 800766e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007670:	697b      	ldr	r3, [r7, #20]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4a07      	ldr	r2, [pc, #28]	; (80076a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800768c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	4a06      	ldr	r2, [pc, #24]	; (80076ac <vApplicationGetIdleTaskMemory+0x30>)
 8007692:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2280      	movs	r2, #128	; 0x80
 8007698:	601a      	str	r2, [r3, #0]
}
 800769a:	bf00      	nop
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	200007a8 	.word	0x200007a8
 80076ac:	20000864 	.word	0x20000864

080076b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4a07      	ldr	r2, [pc, #28]	; (80076dc <vApplicationGetTimerTaskMemory+0x2c>)
 80076c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	4a06      	ldr	r2, [pc, #24]	; (80076e0 <vApplicationGetTimerTaskMemory+0x30>)
 80076c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076ce:	601a      	str	r2, [r3, #0]
}
 80076d0:	bf00      	nop
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	20000a64 	.word	0x20000a64
 80076e0:	20000b20 	.word	0x20000b20

080076e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f103 0208 	add.w	r2, r3, #8
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f103 0208 	add.w	r2, r3, #8
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f103 0208 	add.w	r2, r3, #8
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	601a      	str	r2, [r3, #0]
}
 800777a:	bf00      	nop
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779c:	d103      	bne.n	80077a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e00c      	b.n	80077c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3308      	adds	r3, #8
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	e002      	b.n	80077b4 <vListInsert+0x2e>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d2f6      	bcs.n	80077ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	601a      	str	r2, [r3, #0]
}
 80077ec:	bf00      	nop
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6892      	ldr	r2, [r2, #8]
 800780e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6852      	ldr	r2, [r2, #4]
 8007818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d103      	bne.n	800782c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	1e5a      	subs	r2, r3, #1
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007876:	f002 fb9d 	bl	8009fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	68f9      	ldr	r1, [r7, #12]
 8007884:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007886:	fb01 f303 	mul.w	r3, r1, r3
 800788a:	441a      	add	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	3b01      	subs	r3, #1
 80078a8:	68f9      	ldr	r1, [r7, #12]
 80078aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	22ff      	movs	r2, #255	; 0xff
 80078ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	22ff      	movs	r2, #255	; 0xff
 80078c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d114      	bne.n	80078f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01a      	beq.n	800790a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3310      	adds	r3, #16
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 fb3d 	bl	8008f58 <xTaskRemoveFromEventList>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d012      	beq.n	800790a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <xQueueGenericReset+0xcc>)
 80078e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	e009      	b.n	800790a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3310      	adds	r3, #16
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff fef2 	bl	80076e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff feed 	bl	80076e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800790a:	f002 fb83 	bl	800a014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800790e:	2301      	movs	r3, #1
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08e      	sub	sp, #56	; 0x38
 8007920:	af02      	add	r7, sp, #8
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <xQueueGenericCreateStatic+0x52>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <xQueueGenericCreateStatic+0x56>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <xQueueGenericCreateStatic+0x58>
 8007972:	2300      	movs	r3, #0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	623b      	str	r3, [r7, #32]
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <xQueueGenericCreateStatic+0x7e>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <xQueueGenericCreateStatic+0x82>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <xQueueGenericCreateStatic+0x84>
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	61fb      	str	r3, [r7, #28]
}
 80079b6:	bf00      	nop
 80079b8:	e7fe      	b.n	80079b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079ba:	2350      	movs	r3, #80	; 0x50
 80079bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b50      	cmp	r3, #80	; 0x50
 80079c2:	d00a      	beq.n	80079da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	61bb      	str	r3, [r7, #24]
}
 80079d6:	bf00      	nop
 80079d8:	e7fe      	b.n	80079d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00d      	beq.n	8007a02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	4613      	mov	r3, r2
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 f83f 	bl	8007a80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3730      	adds	r7, #48	; 0x30
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	; 0x28
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	613b      	str	r3, [r7, #16]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	fb02 f303 	mul.w	r3, r2, r3
 8007a3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	3350      	adds	r3, #80	; 0x50
 8007a44:	4618      	mov	r0, r3
 8007a46:	f002 fbd7 	bl	800a1f8 <pvPortMalloc>
 8007a4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d011      	beq.n	8007a76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	3350      	adds	r3, #80	; 0x50
 8007a5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a64:	79fa      	ldrb	r2, [r7, #7]
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f805 	bl	8007a80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a76:	69bb      	ldr	r3, [r7, #24]
	}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3720      	adds	r7, #32
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d103      	bne.n	8007a9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	e002      	b.n	8007aa2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007aae:	2101      	movs	r1, #1
 8007ab0:	69b8      	ldr	r0, [r7, #24]
 8007ab2:	f7ff fecb 	bl	800784c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	78fa      	ldrb	r2, [r7, #3]
 8007aba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00e      	beq.n	8007af2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2100      	movs	r1, #0
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f8a1 	bl	8007c34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	4603      	mov	r3, r0
 8007b02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b04:	2301      	movs	r3, #1
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	6939      	ldr	r1, [r7, #16]
 8007b12:	6978      	ldr	r0, [r7, #20]
 8007b14:	f7ff ff7a 	bl	8007a0c <xQueueGenericCreate>
 8007b18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7ff ffd3 	bl	8007ac6 <prvInitialiseMutex>

		return xNewQueue;
 8007b20:	68fb      	ldr	r3, [r7, #12]
	}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b088      	sub	sp, #32
 8007b2e:	af02      	add	r7, sp, #8
 8007b30:	4603      	mov	r3, r0
 8007b32:	6039      	str	r1, [r7, #0]
 8007b34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b36:	2301      	movs	r3, #1
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2200      	movs	r2, #0
 8007b46:	6939      	ldr	r1, [r7, #16]
 8007b48:	6978      	ldr	r0, [r7, #20]
 8007b4a:	f7ff fee7 	bl	800791c <xQueueGenericCreateStatic>
 8007b4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7ff ffb8 	bl	8007ac6 <prvInitialiseMutex>

		return xNewQueue;
 8007b56:	68fb      	ldr	r3, [r7, #12]
	}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007b60:	b590      	push	{r4, r7, lr}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	60fb      	str	r3, [r7, #12]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	689c      	ldr	r4, [r3, #8]
 8007b8c:	f001 fba6 	bl	80092dc <xTaskGetCurrentTaskHandle>
 8007b90:	4603      	mov	r3, r0
 8007b92:	429c      	cmp	r4, r3
 8007b94:	d111      	bne.n	8007bba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	1e5a      	subs	r2, r3, #1
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d105      	bne.n	8007bb4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2200      	movs	r2, #0
 8007bac:	2100      	movs	r1, #0
 8007bae:	6938      	ldr	r0, [r7, #16]
 8007bb0:	f000 f840 	bl	8007c34 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	e001      	b.n	8007bbe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007bbe:	697b      	ldr	r3, [r7, #20]
	}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	371c      	adds	r7, #28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd90      	pop	{r4, r7, pc}

08007bc8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007bc8:	b590      	push	{r4, r7, lr}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	60fb      	str	r3, [r7, #12]
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	689c      	ldr	r4, [r3, #8]
 8007bf6:	f001 fb71 	bl	80092dc <xTaskGetCurrentTaskHandle>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	429c      	cmp	r4, r3
 8007bfe:	d107      	bne.n	8007c10 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	e00c      	b.n	8007c2a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6938      	ldr	r0, [r7, #16]
 8007c14:	f000 fa88 	bl	8008128 <xQueueSemaphoreTake>
 8007c18:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007c2a:	697b      	ldr	r3, [r7, #20]
	}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	371c      	adds	r7, #28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd90      	pop	{r4, r7, pc}

08007c34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08e      	sub	sp, #56	; 0x38
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c42:	2300      	movs	r3, #0
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10a      	bne.n	8007c66 <xQueueGenericSend+0x32>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d103      	bne.n	8007c74 <xQueueGenericSend+0x40>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <xQueueGenericSend+0x44>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <xQueueGenericSend+0x46>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <xQueueGenericSend+0x60>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d103      	bne.n	8007ca2 <xQueueGenericSend+0x6e>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <xQueueGenericSend+0x72>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueGenericSend+0x74>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	623b      	str	r3, [r7, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cc2:	f001 fb1b 	bl	80092fc <xTaskGetSchedulerState>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <xQueueGenericSend+0x9e>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <xQueueGenericSend+0xa2>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <xQueueGenericSend+0xa4>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	61fb      	str	r3, [r7, #28]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cf2:	f002 f95f 	bl	8009fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d302      	bcc.n	8007d08 <xQueueGenericSend+0xd4>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d129      	bne.n	8007d5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d0e:	f000 fb2f 	bl	8008370 <prvCopyDataToQueue>
 8007d12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d010      	beq.n	8007d3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	3324      	adds	r3, #36	; 0x24
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 f919 	bl	8008f58 <xTaskRemoveFromEventList>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d013      	beq.n	8007d54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d2c:	4b3f      	ldr	r3, [pc, #252]	; (8007e2c <xQueueGenericSend+0x1f8>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	e00a      	b.n	8007d54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d44:	4b39      	ldr	r3, [pc, #228]	; (8007e2c <xQueueGenericSend+0x1f8>)
 8007d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d54:	f002 f95e 	bl	800a014 <vPortExitCritical>
				return pdPASS;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e063      	b.n	8007e24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d103      	bne.n	8007d6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d62:	f002 f957 	bl	800a014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e05c      	b.n	8007e24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d70:	f107 0314 	add.w	r3, r7, #20
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 f953 	bl	8009020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d7e:	f002 f949 	bl	800a014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d82:	f000 febf 	bl	8008b04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d86:	f002 f915 	bl	8009fb4 <vPortEnterCritical>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d103      	bne.n	8007da0 <xQueueGenericSend+0x16c>
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007da6:	b25b      	sxtb	r3, r3
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d103      	bne.n	8007db6 <xQueueGenericSend+0x182>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db6:	f002 f92d 	bl	800a014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dba:	1d3a      	adds	r2, r7, #4
 8007dbc:	f107 0314 	add.w	r3, r7, #20
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f001 f942 	bl	800904c <xTaskCheckForTimeOut>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d124      	bne.n	8007e18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd0:	f000 fbc6 	bl	8008560 <prvIsQueueFull>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d018      	beq.n	8007e0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	3310      	adds	r3, #16
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	4611      	mov	r1, r2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 f868 	bl	8008eb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dea:	f000 fb51 	bl	8008490 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dee:	f000 fe97 	bl	8008b20 <xTaskResumeAll>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f47f af7c 	bne.w	8007cf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <xQueueGenericSend+0x1f8>)
 8007dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	e772      	b.n	8007cf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e0e:	f000 fb3f 	bl	8008490 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e12:	f000 fe85 	bl	8008b20 <xTaskResumeAll>
 8007e16:	e76c      	b.n	8007cf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e1a:	f000 fb39 	bl	8008490 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e1e:	f000 fe7f 	bl	8008b20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3738      	adds	r7, #56	; 0x38
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	e000ed04 	.word	0xe000ed04

08007e30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b090      	sub	sp, #64	; 0x40
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d103      	bne.n	8007e6c <xQueueGenericSendFromISR+0x3c>
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <xQueueGenericSendFromISR+0x40>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <xQueueGenericSendFromISR+0x42>
 8007e70:	2300      	movs	r3, #0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e88:	bf00      	nop
 8007e8a:	e7fe      	b.n	8007e8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d103      	bne.n	8007e9a <xQueueGenericSendFromISR+0x6a>
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <xQueueGenericSendFromISR+0x6e>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <xQueueGenericSendFromISR+0x70>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	623b      	str	r3, [r7, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eba:	f002 f95d 	bl	800a178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ebe:	f3ef 8211 	mrs	r2, BASEPRI
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	61fa      	str	r2, [r7, #28]
 8007ed4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d302      	bcc.n	8007eec <xQueueGenericSendFromISR+0xbc>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d12f      	bne.n	8007f4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f02:	f000 fa35 	bl	8008370 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d112      	bne.n	8007f36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d016      	beq.n	8007f46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	3324      	adds	r3, #36	; 0x24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 f81b 	bl	8008f58 <xTaskRemoveFromEventList>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00e      	beq.n	8007f46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00b      	beq.n	8007f46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e007      	b.n	8007f46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	b25a      	sxtb	r2, r3
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f46:	2301      	movs	r3, #1
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f4a:	e001      	b.n	8007f50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3740      	adds	r7, #64	; 0x40
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08c      	sub	sp, #48	; 0x30
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f74:	2300      	movs	r3, #0
 8007f76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <xQueueReceive+0x30>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	623b      	str	r3, [r7, #32]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d103      	bne.n	8007fa6 <xQueueReceive+0x3e>
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <xQueueReceive+0x42>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <xQueueReceive+0x44>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <xQueueReceive+0x5e>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	61fb      	str	r3, [r7, #28]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fc6:	f001 f999 	bl	80092fc <xTaskGetSchedulerState>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <xQueueReceive+0x6e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <xQueueReceive+0x72>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <xQueueReceive+0x74>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xQueueReceive+0x8e>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	61bb      	str	r3, [r7, #24]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ff6:	f001 ffdd 	bl	8009fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01f      	beq.n	8008046 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800800a:	f000 fa1b 	bl	8008444 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	1e5a      	subs	r2, r3, #1
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00f      	beq.n	800803e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	3310      	adds	r3, #16
 8008022:	4618      	mov	r0, r3
 8008024:	f000 ff98 	bl	8008f58 <xTaskRemoveFromEventList>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d007      	beq.n	800803e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800802e:	4b3d      	ldr	r3, [pc, #244]	; (8008124 <xQueueReceive+0x1bc>)
 8008030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800803e:	f001 ffe9 	bl	800a014 <vPortExitCritical>
				return pdPASS;
 8008042:	2301      	movs	r3, #1
 8008044:	e069      	b.n	800811a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800804c:	f001 ffe2 	bl	800a014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008050:	2300      	movs	r3, #0
 8008052:	e062      	b.n	800811a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800805a:	f107 0310 	add.w	r3, r7, #16
 800805e:	4618      	mov	r0, r3
 8008060:	f000 ffde 	bl	8009020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008068:	f001 ffd4 	bl	800a014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800806c:	f000 fd4a 	bl	8008b04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008070:	f001 ffa0 	bl	8009fb4 <vPortEnterCritical>
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800807a:	b25b      	sxtb	r3, r3
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008080:	d103      	bne.n	800808a <xQueueReceive+0x122>
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008090:	b25b      	sxtb	r3, r3
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d103      	bne.n	80080a0 <xQueueReceive+0x138>
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080a0:	f001 ffb8 	bl	800a014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080a4:	1d3a      	adds	r2, r7, #4
 80080a6:	f107 0310 	add.w	r3, r7, #16
 80080aa:	4611      	mov	r1, r2
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 ffcd 	bl	800904c <xTaskCheckForTimeOut>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d123      	bne.n	8008100 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ba:	f000 fa3b 	bl	8008534 <prvIsQueueEmpty>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d017      	beq.n	80080f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	3324      	adds	r3, #36	; 0x24
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fef3 	bl	8008eb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d4:	f000 f9dc 	bl	8008490 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080d8:	f000 fd22 	bl	8008b20 <xTaskResumeAll>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d189      	bne.n	8007ff6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80080e2:	4b10      	ldr	r3, [pc, #64]	; (8008124 <xQueueReceive+0x1bc>)
 80080e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	e780      	b.n	8007ff6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f6:	f000 f9cb 	bl	8008490 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080fa:	f000 fd11 	bl	8008b20 <xTaskResumeAll>
 80080fe:	e77a      	b.n	8007ff6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008102:	f000 f9c5 	bl	8008490 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008106:	f000 fd0b 	bl	8008b20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800810a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800810c:	f000 fa12 	bl	8008534 <prvIsQueueEmpty>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	f43f af6f 	beq.w	8007ff6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008118:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800811a:	4618      	mov	r0, r3
 800811c:	3730      	adds	r7, #48	; 0x30
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	e000ed04 	.word	0xe000ed04

08008128 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08e      	sub	sp, #56	; 0x38
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008132:	2300      	movs	r3, #0
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800813a:	2300      	movs	r3, #0
 800813c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	623b      	str	r3, [r7, #32]
}
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	61fb      	str	r3, [r7, #28]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008178:	f001 f8c0 	bl	80092fc <xTaskGetSchedulerState>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d102      	bne.n	8008188 <xQueueSemaphoreTake+0x60>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <xQueueSemaphoreTake+0x64>
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <xQueueSemaphoreTake+0x66>
 800818c:	2300      	movs	r3, #0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	61bb      	str	r3, [r7, #24]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081a8:	f001 ff04 	bl	8009fb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80081ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d024      	beq.n	8008202 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	1e5a      	subs	r2, r3, #1
 80081bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80081c8:	f001 fa0e 	bl	80095e8 <pvTaskIncrementMutexHeldCount>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00f      	beq.n	80081fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	3310      	adds	r3, #16
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 feba 	bl	8008f58 <xTaskRemoveFromEventList>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d007      	beq.n	80081fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081ea:	4b54      	ldr	r3, [pc, #336]	; (800833c <xQueueSemaphoreTake+0x214>)
 80081ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081fa:	f001 ff0b 	bl	800a014 <vPortExitCritical>
				return pdPASS;
 80081fe:	2301      	movs	r3, #1
 8008200:	e097      	b.n	8008332 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d111      	bne.n	800822c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	617b      	str	r3, [r7, #20]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008224:	f001 fef6 	bl	800a014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008228:	2300      	movs	r3, #0
 800822a:	e082      	b.n	8008332 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800822c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008232:	f107 030c 	add.w	r3, r7, #12
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fef2 	bl	8009020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800823c:	2301      	movs	r3, #1
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008240:	f001 fee8 	bl	800a014 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008244:	f000 fc5e 	bl	8008b04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008248:	f001 feb4 	bl	8009fb4 <vPortEnterCritical>
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008252:	b25b      	sxtb	r3, r3
 8008254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008258:	d103      	bne.n	8008262 <xQueueSemaphoreTake+0x13a>
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008268:	b25b      	sxtb	r3, r3
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d103      	bne.n	8008278 <xQueueSemaphoreTake+0x150>
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008278:	f001 fecc 	bl	800a014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800827c:	463a      	mov	r2, r7
 800827e:	f107 030c 	add.w	r3, r7, #12
 8008282:	4611      	mov	r1, r2
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fee1 	bl	800904c <xTaskCheckForTimeOut>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d132      	bne.n	80082f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008292:	f000 f94f 	bl	8008534 <prvIsQueueEmpty>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d026      	beq.n	80082ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d109      	bne.n	80082b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80082a4:	f001 fe86 	bl	8009fb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 f843 	bl	8009338 <xTaskPriorityInherit>
 80082b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80082b4:	f001 feae 	bl	800a014 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	3324      	adds	r3, #36	; 0x24
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	4611      	mov	r1, r2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fdf9 	bl	8008eb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082c8:	f000 f8e2 	bl	8008490 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082cc:	f000 fc28 	bl	8008b20 <xTaskResumeAll>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f47f af68 	bne.w	80081a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80082d8:	4b18      	ldr	r3, [pc, #96]	; (800833c <xQueueSemaphoreTake+0x214>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	e75e      	b.n	80081a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80082ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082ec:	f000 f8d0 	bl	8008490 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082f0:	f000 fc16 	bl	8008b20 <xTaskResumeAll>
 80082f4:	e758      	b.n	80081a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80082f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082f8:	f000 f8ca 	bl	8008490 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082fc:	f000 fc10 	bl	8008b20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008302:	f000 f917 	bl	8008534 <prvIsQueueEmpty>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	f43f af4d 	beq.w	80081a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00d      	beq.n	8008330 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008314:	f001 fe4e 	bl	8009fb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800831a:	f000 f811 	bl	8008340 <prvGetDisinheritPriorityAfterTimeout>
 800831e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008326:	4618      	mov	r0, r3
 8008328:	f001 f8dc 	bl	80094e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800832c:	f001 fe72 	bl	800a014 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008332:	4618      	mov	r0, r3
 8008334:	3738      	adds	r7, #56	; 0x38
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	e000ed04 	.word	0xe000ed04

08008340 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d006      	beq.n	800835e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	e001      	b.n	8008362 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008362:	68fb      	ldr	r3, [r7, #12]
	}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800837c:	2300      	movs	r3, #0
 800837e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10d      	bne.n	80083aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d14d      	bne.n	8008432 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	4618      	mov	r0, r3
 800839c:	f001 f834 	bl	8009408 <xTaskPriorityDisinherit>
 80083a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	609a      	str	r2, [r3, #8]
 80083a8:	e043      	b.n	8008432 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d119      	bne.n	80083e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6858      	ldr	r0, [r3, #4]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	461a      	mov	r2, r3
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	f002 f93a 	bl	800a634 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	441a      	add	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d32b      	bcc.n	8008432 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	e026      	b.n	8008432 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68d8      	ldr	r0, [r3, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	461a      	mov	r2, r3
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	f002 f920 	bl	800a634 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	68da      	ldr	r2, [r3, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	425b      	negs	r3, r3
 80083fe:	441a      	add	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	429a      	cmp	r2, r3
 800840e:	d207      	bcs.n	8008420 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	425b      	negs	r3, r3
 800841a:	441a      	add	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d105      	bne.n	8008432 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	3b01      	subs	r3, #1
 8008430:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800843a:	697b      	ldr	r3, [r7, #20]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	2b00      	cmp	r3, #0
 8008454:	d018      	beq.n	8008488 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	441a      	add	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	429a      	cmp	r2, r3
 800846e:	d303      	bcc.n	8008478 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68d9      	ldr	r1, [r3, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008480:	461a      	mov	r2, r3
 8008482:	6838      	ldr	r0, [r7, #0]
 8008484:	f002 f8d6 	bl	800a634 <memcpy>
	}
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008498:	f001 fd8c 	bl	8009fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084a4:	e011      	b.n	80084ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d012      	beq.n	80084d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3324      	adds	r3, #36	; 0x24
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fd50 	bl	8008f58 <xTaskRemoveFromEventList>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084be:	f000 fe27 	bl	8009110 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dce9      	bgt.n	80084a6 <prvUnlockQueue+0x16>
 80084d2:	e000      	b.n	80084d6 <prvUnlockQueue+0x46>
					break;
 80084d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	22ff      	movs	r2, #255	; 0xff
 80084da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80084de:	f001 fd99 	bl	800a014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084e2:	f001 fd67 	bl	8009fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084ee:	e011      	b.n	8008514 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d012      	beq.n	800851e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3310      	adds	r3, #16
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fd2b 	bl	8008f58 <xTaskRemoveFromEventList>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008508:	f000 fe02 	bl	8009110 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	3b01      	subs	r3, #1
 8008510:	b2db      	uxtb	r3, r3
 8008512:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008518:	2b00      	cmp	r3, #0
 800851a:	dce9      	bgt.n	80084f0 <prvUnlockQueue+0x60>
 800851c:	e000      	b.n	8008520 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800851e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	22ff      	movs	r2, #255	; 0xff
 8008524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008528:	f001 fd74 	bl	800a014 <vPortExitCritical>
}
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800853c:	f001 fd3a 	bl	8009fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008548:	2301      	movs	r3, #1
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	e001      	b.n	8008552 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008552:	f001 fd5f 	bl	800a014 <vPortExitCritical>

	return xReturn;
 8008556:	68fb      	ldr	r3, [r7, #12]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008568:	f001 fd24 	bl	8009fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008574:	429a      	cmp	r2, r3
 8008576:	d102      	bne.n	800857e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008578:	2301      	movs	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	e001      	b.n	8008582 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008582:	f001 fd47 	bl	800a014 <vPortExitCritical>

	return xReturn;
 8008586:	68fb      	ldr	r3, [r7, #12]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	e014      	b.n	80085ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085a0:	4a0f      	ldr	r2, [pc, #60]	; (80085e0 <vQueueAddToRegistry+0x50>)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10b      	bne.n	80085c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085ac:	490c      	ldr	r1, [pc, #48]	; (80085e0 <vQueueAddToRegistry+0x50>)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085b6:	4a0a      	ldr	r2, [pc, #40]	; (80085e0 <vQueueAddToRegistry+0x50>)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	4413      	add	r3, r2
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085c2:	e006      	b.n	80085d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	3301      	adds	r3, #1
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b07      	cmp	r3, #7
 80085ce:	d9e7      	bls.n	80085a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000f20 	.word	0x20000f20

080085e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085f4:	f001 fcde 	bl	8009fb4 <vPortEnterCritical>
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085fe:	b25b      	sxtb	r3, r3
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d103      	bne.n	800860e <vQueueWaitForMessageRestricted+0x2a>
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008614:	b25b      	sxtb	r3, r3
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d103      	bne.n	8008624 <vQueueWaitForMessageRestricted+0x40>
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008624:	f001 fcf6 	bl	800a014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862c:	2b00      	cmp	r3, #0
 800862e:	d106      	bne.n	800863e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	3324      	adds	r3, #36	; 0x24
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fc61 	bl	8008f00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800863e:	6978      	ldr	r0, [r7, #20]
 8008640:	f7ff ff26 	bl	8008490 <prvUnlockQueue>
	}
 8008644:	bf00      	nop
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08e      	sub	sp, #56	; 0x38
 8008650:	af04      	add	r7, sp, #16
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800865a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	623b      	str	r3, [r7, #32]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xTaskCreateStatic+0x46>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	61fb      	str	r3, [r7, #28]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008692:	23bc      	movs	r3, #188	; 0xbc
 8008694:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2bbc      	cmp	r3, #188	; 0xbc
 800869a:	d00a      	beq.n	80086b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	61bb      	str	r3, [r7, #24]
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d01e      	beq.n	80086f8 <xTaskCreateStatic+0xac>
 80086ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01b      	beq.n	80086f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	2202      	movs	r2, #2
 80086ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086d2:	2300      	movs	r3, #0
 80086d4:	9303      	str	r3, [sp, #12]
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	9302      	str	r3, [sp, #8]
 80086da:	f107 0314 	add.w	r3, r7, #20
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 f850 	bl	8008790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086f2:	f000 f8f3 	bl	80088dc <prvAddNewTaskToReadyList>
 80086f6:	e001      	b.n	80086fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086fc:	697b      	ldr	r3, [r7, #20]
	}
 80086fe:	4618      	mov	r0, r3
 8008700:	3728      	adds	r7, #40	; 0x28
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008706:	b580      	push	{r7, lr}
 8008708:	b08c      	sub	sp, #48	; 0x30
 800870a:	af04      	add	r7, sp, #16
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	4613      	mov	r3, r2
 8008714:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4618      	mov	r0, r3
 800871c:	f001 fd6c 	bl	800a1f8 <pvPortMalloc>
 8008720:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00e      	beq.n	8008746 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008728:	20bc      	movs	r0, #188	; 0xbc
 800872a:	f001 fd65 	bl	800a1f8 <pvPortMalloc>
 800872e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	631a      	str	r2, [r3, #48]	; 0x30
 800873c:	e005      	b.n	800874a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800873e:	6978      	ldr	r0, [r7, #20]
 8008740:	f001 fe26 	bl	800a390 <vPortFree>
 8008744:	e001      	b.n	800874a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d017      	beq.n	8008780 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008758:	88fa      	ldrh	r2, [r7, #6]
 800875a:	2300      	movs	r3, #0
 800875c:	9303      	str	r3, [sp, #12]
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f80e 	bl	8008790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008774:	69f8      	ldr	r0, [r7, #28]
 8008776:	f000 f8b1 	bl	80088dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800877a:	2301      	movs	r3, #1
 800877c:	61bb      	str	r3, [r7, #24]
 800877e:	e002      	b.n	8008786 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
 8008784:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008786:	69bb      	ldr	r3, [r7, #24]
	}
 8008788:	4618      	mov	r0, r3
 800878a:	3720      	adds	r7, #32
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	461a      	mov	r2, r3
 80087a8:	21a5      	movs	r1, #165	; 0xa5
 80087aa:	f001 ff51 	bl	800a650 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087b8:	3b01      	subs	r3, #1
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	f023 0307 	bic.w	r3, r3, #7
 80087c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	617b      	str	r3, [r7, #20]
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01f      	beq.n	800882e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087ee:	2300      	movs	r3, #0
 80087f0:	61fb      	str	r3, [r7, #28]
 80087f2:	e012      	b.n	800881a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	4413      	add	r3, r2
 80087fa:	7819      	ldrb	r1, [r3, #0]
 80087fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	3334      	adds	r3, #52	; 0x34
 8008804:	460a      	mov	r2, r1
 8008806:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	4413      	add	r3, r2
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d006      	beq.n	8008822 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	3301      	adds	r3, #1
 8008818:	61fb      	str	r3, [r7, #28]
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	2b0f      	cmp	r3, #15
 800881e:	d9e9      	bls.n	80087f4 <prvInitialiseNewTask+0x64>
 8008820:	e000      	b.n	8008824 <prvInitialiseNewTask+0x94>
			{
				break;
 8008822:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800882c:	e003      	b.n	8008836 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	2b37      	cmp	r3, #55	; 0x37
 800883a:	d901      	bls.n	8008840 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800883c:	2337      	movs	r3, #55	; 0x37
 800883e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008844:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800884a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	2200      	movs	r2, #0
 8008850:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	3304      	adds	r3, #4
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe ff64 	bl	8007724 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	3318      	adds	r3, #24
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe ff5f 	bl	8007724 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800887a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	2200      	movs	r2, #0
 8008888:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	3354      	adds	r3, #84	; 0x54
 8008890:	2260      	movs	r2, #96	; 0x60
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fedb 	bl	800a650 <memset>
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <prvInitialiseNewTask+0x140>)
 800889e:	659a      	str	r2, [r3, #88]	; 0x58
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	4a0c      	ldr	r2, [pc, #48]	; (80088d4 <prvInitialiseNewTask+0x144>)
 80088a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	4a0b      	ldr	r2, [pc, #44]	; (80088d8 <prvInitialiseNewTask+0x148>)
 80088aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	69b8      	ldr	r0, [r7, #24]
 80088b2:	f001 fa4f 	bl	8009d54 <pxPortInitialiseStack>
 80088b6:	4602      	mov	r2, r0
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088c8:	bf00      	nop
 80088ca:	3720      	adds	r7, #32
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	0800c5b8 	.word	0x0800c5b8
 80088d4:	0800c5d8 	.word	0x0800c5d8
 80088d8:	0800c598 	.word	0x0800c598

080088dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088e4:	f001 fb66 	bl	8009fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088e8:	4b2d      	ldr	r3, [pc, #180]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3301      	adds	r3, #1
 80088ee:	4a2c      	ldr	r2, [pc, #176]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 80088f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088f2:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088fa:	4a2a      	ldr	r2, [pc, #168]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008900:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d110      	bne.n	800892a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008908:	f000 fc26 	bl	8009158 <prvInitialiseTaskLists>
 800890c:	e00d      	b.n	800892a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800890e:	4b26      	ldr	r3, [pc, #152]	; (80089a8 <prvAddNewTaskToReadyList+0xcc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008916:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	429a      	cmp	r2, r3
 8008922:	d802      	bhi.n	800892a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008924:	4a1f      	ldr	r2, [pc, #124]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800892a:	4b20      	ldr	r3, [pc, #128]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3301      	adds	r3, #1
 8008930:	4a1e      	ldr	r2, [pc, #120]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 8008932:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008934:	4b1d      	ldr	r3, [pc, #116]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008940:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <prvAddNewTaskToReadyList+0xd4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d903      	bls.n	8008950 <prvAddNewTaskToReadyList+0x74>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	4a18      	ldr	r2, [pc, #96]	; (80089b0 <prvAddNewTaskToReadyList+0xd4>)
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4a15      	ldr	r2, [pc, #84]	; (80089b4 <prvAddNewTaskToReadyList+0xd8>)
 800895e:	441a      	add	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	4619      	mov	r1, r3
 8008966:	4610      	mov	r0, r2
 8008968:	f7fe fee9 	bl	800773e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800896c:	f001 fb52 	bl	800a014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008970:	4b0d      	ldr	r3, [pc, #52]	; (80089a8 <prvAddNewTaskToReadyList+0xcc>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00e      	beq.n	8008996 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008978:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	429a      	cmp	r2, r3
 8008984:	d207      	bcs.n	8008996 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008986:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <prvAddNewTaskToReadyList+0xdc>)
 8008988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20001434 	.word	0x20001434
 80089a4:	20000f60 	.word	0x20000f60
 80089a8:	20001440 	.word	0x20001440
 80089ac:	20001450 	.word	0x20001450
 80089b0:	2000143c 	.word	0x2000143c
 80089b4:	20000f64 	.word	0x20000f64
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d017      	beq.n	80089fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <vTaskDelay+0x60>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <vTaskDelay+0x30>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	60bb      	str	r3, [r7, #8]
}
 80089e8:	bf00      	nop
 80089ea:	e7fe      	b.n	80089ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089ec:	f000 f88a 	bl	8008b04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089f0:	2100      	movs	r1, #0
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fe0c 	bl	8009610 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089f8:	f000 f892 	bl	8008b20 <xTaskResumeAll>
 80089fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d107      	bne.n	8008a14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a04:	4b06      	ldr	r3, [pc, #24]	; (8008a20 <vTaskDelay+0x64>)
 8008a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a14:	bf00      	nop
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	2000145c 	.word	0x2000145c
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08a      	sub	sp, #40	; 0x28
 8008a28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a32:	463a      	mov	r2, r7
 8008a34:	1d39      	adds	r1, r7, #4
 8008a36:	f107 0308 	add.w	r3, r7, #8
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fe fe1e 	bl	800767c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	9202      	str	r2, [sp, #8]
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	460a      	mov	r2, r1
 8008a52:	4924      	ldr	r1, [pc, #144]	; (8008ae4 <vTaskStartScheduler+0xc0>)
 8008a54:	4824      	ldr	r0, [pc, #144]	; (8008ae8 <vTaskStartScheduler+0xc4>)
 8008a56:	f7ff fdf9 	bl	800864c <xTaskCreateStatic>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	4a23      	ldr	r2, [pc, #140]	; (8008aec <vTaskStartScheduler+0xc8>)
 8008a5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a60:	4b22      	ldr	r3, [pc, #136]	; (8008aec <vTaskStartScheduler+0xc8>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	e001      	b.n	8008a72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d102      	bne.n	8008a7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a78:	f000 fe1e 	bl	80096b8 <xTimerCreateTimerTask>
 8008a7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d11b      	bne.n	8008abc <vTaskStartScheduler+0x98>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	613b      	str	r3, [r7, #16]
}
 8008a96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a98:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <vTaskStartScheduler+0xcc>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3354      	adds	r3, #84	; 0x54
 8008a9e:	4a15      	ldr	r2, [pc, #84]	; (8008af4 <vTaskStartScheduler+0xd0>)
 8008aa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008aa2:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <vTaskStartScheduler+0xd4>)
 8008aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008aaa:	4b14      	ldr	r3, [pc, #80]	; (8008afc <vTaskStartScheduler+0xd8>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ab0:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <vTaskStartScheduler+0xdc>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ab6:	f001 f9db 	bl	8009e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008aba:	e00e      	b.n	8008ada <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d10a      	bne.n	8008ada <vTaskStartScheduler+0xb6>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	60fb      	str	r3, [r7, #12]
}
 8008ad6:	bf00      	nop
 8008ad8:	e7fe      	b.n	8008ad8 <vTaskStartScheduler+0xb4>
}
 8008ada:	bf00      	nop
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	0800aa08 	.word	0x0800aa08
 8008ae8:	08009129 	.word	0x08009129
 8008aec:	20001458 	.word	0x20001458
 8008af0:	20000f60 	.word	0x20000f60
 8008af4:	20000048 	.word	0x20000048
 8008af8:	20001454 	.word	0x20001454
 8008afc:	20001440 	.word	0x20001440
 8008b00:	20001438 	.word	0x20001438

08008b04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b08:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <vTaskSuspendAll+0x18>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	4a03      	ldr	r2, [pc, #12]	; (8008b1c <vTaskSuspendAll+0x18>)
 8008b10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b12:	bf00      	nop
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	2000145c 	.word	0x2000145c

08008b20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b2e:	4b42      	ldr	r3, [pc, #264]	; (8008c38 <xTaskResumeAll+0x118>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10a      	bne.n	8008b4c <xTaskResumeAll+0x2c>
	__asm volatile
 8008b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	603b      	str	r3, [r7, #0]
}
 8008b48:	bf00      	nop
 8008b4a:	e7fe      	b.n	8008b4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b4c:	f001 fa32 	bl	8009fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b50:	4b39      	ldr	r3, [pc, #228]	; (8008c38 <xTaskResumeAll+0x118>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	4a38      	ldr	r2, [pc, #224]	; (8008c38 <xTaskResumeAll+0x118>)
 8008b58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b5a:	4b37      	ldr	r3, [pc, #220]	; (8008c38 <xTaskResumeAll+0x118>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d162      	bne.n	8008c28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b62:	4b36      	ldr	r3, [pc, #216]	; (8008c3c <xTaskResumeAll+0x11c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d05e      	beq.n	8008c28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b6a:	e02f      	b.n	8008bcc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b6c:	4b34      	ldr	r3, [pc, #208]	; (8008c40 <xTaskResumeAll+0x120>)
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3318      	adds	r3, #24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fe3d 	bl	80077f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fe38 	bl	80077f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	4b2d      	ldr	r3, [pc, #180]	; (8008c44 <xTaskResumeAll+0x124>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d903      	bls.n	8008b9c <xTaskResumeAll+0x7c>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	4a2a      	ldr	r2, [pc, #168]	; (8008c44 <xTaskResumeAll+0x124>)
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4a27      	ldr	r2, [pc, #156]	; (8008c48 <xTaskResumeAll+0x128>)
 8008baa:	441a      	add	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f7fe fdc3 	bl	800773e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbc:	4b23      	ldr	r3, [pc, #140]	; (8008c4c <xTaskResumeAll+0x12c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d302      	bcc.n	8008bcc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008bc6:	4b22      	ldr	r3, [pc, #136]	; (8008c50 <xTaskResumeAll+0x130>)
 8008bc8:	2201      	movs	r2, #1
 8008bca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bcc:	4b1c      	ldr	r3, [pc, #112]	; (8008c40 <xTaskResumeAll+0x120>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1cb      	bne.n	8008b6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bda:	f000 fb5f 	bl	800929c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bde:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <xTaskResumeAll+0x134>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d010      	beq.n	8008c0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bea:	f000 f847 	bl	8008c7c <xTaskIncrementTick>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008bf4:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <xTaskResumeAll+0x130>)
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f1      	bne.n	8008bea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <xTaskResumeAll+0x134>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c0c:	4b10      	ldr	r3, [pc, #64]	; (8008c50 <xTaskResumeAll+0x130>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d009      	beq.n	8008c28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c14:	2301      	movs	r3, #1
 8008c16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c18:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <xTaskResumeAll+0x138>)
 8008c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c28:	f001 f9f4 	bl	800a014 <vPortExitCritical>

	return xAlreadyYielded;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2000145c 	.word	0x2000145c
 8008c3c:	20001434 	.word	0x20001434
 8008c40:	200013f4 	.word	0x200013f4
 8008c44:	2000143c 	.word	0x2000143c
 8008c48:	20000f64 	.word	0x20000f64
 8008c4c:	20000f60 	.word	0x20000f60
 8008c50:	20001448 	.word	0x20001448
 8008c54:	20001444 	.word	0x20001444
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c62:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <xTaskGetTickCount+0x1c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c68:	687b      	ldr	r3, [r7, #4]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	20001438 	.word	0x20001438

08008c7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c86:	4b4f      	ldr	r3, [pc, #316]	; (8008dc4 <xTaskIncrementTick+0x148>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f040 808f 	bne.w	8008dae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c90:	4b4d      	ldr	r3, [pc, #308]	; (8008dc8 <xTaskIncrementTick+0x14c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3301      	adds	r3, #1
 8008c96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c98:	4a4b      	ldr	r2, [pc, #300]	; (8008dc8 <xTaskIncrementTick+0x14c>)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d120      	bne.n	8008ce6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ca4:	4b49      	ldr	r3, [pc, #292]	; (8008dcc <xTaskIncrementTick+0x150>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	603b      	str	r3, [r7, #0]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <xTaskIncrementTick+0x46>
 8008cc4:	4b41      	ldr	r3, [pc, #260]	; (8008dcc <xTaskIncrementTick+0x150>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	4b41      	ldr	r3, [pc, #260]	; (8008dd0 <xTaskIncrementTick+0x154>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a3f      	ldr	r2, [pc, #252]	; (8008dcc <xTaskIncrementTick+0x150>)
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	4a3f      	ldr	r2, [pc, #252]	; (8008dd0 <xTaskIncrementTick+0x154>)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	4b3e      	ldr	r3, [pc, #248]	; (8008dd4 <xTaskIncrementTick+0x158>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	4a3d      	ldr	r2, [pc, #244]	; (8008dd4 <xTaskIncrementTick+0x158>)
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	f000 fadb 	bl	800929c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ce6:	4b3c      	ldr	r3, [pc, #240]	; (8008dd8 <xTaskIncrementTick+0x15c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d349      	bcc.n	8008d84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cf0:	4b36      	ldr	r3, [pc, #216]	; (8008dcc <xTaskIncrementTick+0x150>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cfa:	4b37      	ldr	r3, [pc, #220]	; (8008dd8 <xTaskIncrementTick+0x15c>)
 8008cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008d00:	601a      	str	r2, [r3, #0]
					break;
 8008d02:	e03f      	b.n	8008d84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d04:	4b31      	ldr	r3, [pc, #196]	; (8008dcc <xTaskIncrementTick+0x150>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d203      	bcs.n	8008d24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d1c:	4a2e      	ldr	r2, [pc, #184]	; (8008dd8 <xTaskIncrementTick+0x15c>)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d22:	e02f      	b.n	8008d84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fe fd65 	bl	80077f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	3318      	adds	r3, #24
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fd5c 	bl	80077f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	4b25      	ldr	r3, [pc, #148]	; (8008ddc <xTaskIncrementTick+0x160>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d903      	bls.n	8008d54 <xTaskIncrementTick+0xd8>
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	4a22      	ldr	r2, [pc, #136]	; (8008ddc <xTaskIncrementTick+0x160>)
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4a1f      	ldr	r2, [pc, #124]	; (8008de0 <xTaskIncrementTick+0x164>)
 8008d62:	441a      	add	r2, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	f7fe fce7 	bl	800773e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d74:	4b1b      	ldr	r3, [pc, #108]	; (8008de4 <xTaskIncrementTick+0x168>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d3b8      	bcc.n	8008cf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d82:	e7b5      	b.n	8008cf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d84:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <xTaskIncrementTick+0x168>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8a:	4915      	ldr	r1, [pc, #84]	; (8008de0 <xTaskIncrementTick+0x164>)
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d901      	bls.n	8008da0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008da0:	4b11      	ldr	r3, [pc, #68]	; (8008de8 <xTaskIncrementTick+0x16c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d007      	beq.n	8008db8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	617b      	str	r3, [r7, #20]
 8008dac:	e004      	b.n	8008db8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008dae:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <xTaskIncrementTick+0x170>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3301      	adds	r3, #1
 8008db4:	4a0d      	ldr	r2, [pc, #52]	; (8008dec <xTaskIncrementTick+0x170>)
 8008db6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008db8:	697b      	ldr	r3, [r7, #20]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	2000145c 	.word	0x2000145c
 8008dc8:	20001438 	.word	0x20001438
 8008dcc:	200013ec 	.word	0x200013ec
 8008dd0:	200013f0 	.word	0x200013f0
 8008dd4:	2000144c 	.word	0x2000144c
 8008dd8:	20001454 	.word	0x20001454
 8008ddc:	2000143c 	.word	0x2000143c
 8008de0:	20000f64 	.word	0x20000f64
 8008de4:	20000f60 	.word	0x20000f60
 8008de8:	20001448 	.word	0x20001448
 8008dec:	20001444 	.word	0x20001444

08008df0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008df6:	4b2a      	ldr	r3, [pc, #168]	; (8008ea0 <vTaskSwitchContext+0xb0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dfe:	4b29      	ldr	r3, [pc, #164]	; (8008ea4 <vTaskSwitchContext+0xb4>)
 8008e00:	2201      	movs	r2, #1
 8008e02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e04:	e046      	b.n	8008e94 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008e06:	4b27      	ldr	r3, [pc, #156]	; (8008ea4 <vTaskSwitchContext+0xb4>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e0c:	4b26      	ldr	r3, [pc, #152]	; (8008ea8 <vTaskSwitchContext+0xb8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	e010      	b.n	8008e36 <vTaskSwitchContext+0x46>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <vTaskSwitchContext+0x40>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	607b      	str	r3, [r7, #4]
}
 8008e2c:	bf00      	nop
 8008e2e:	e7fe      	b.n	8008e2e <vTaskSwitchContext+0x3e>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	491d      	ldr	r1, [pc, #116]	; (8008eac <vTaskSwitchContext+0xbc>)
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	440b      	add	r3, r1
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0e4      	beq.n	8008e14 <vTaskSwitchContext+0x24>
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4a15      	ldr	r2, [pc, #84]	; (8008eac <vTaskSwitchContext+0xbc>)
 8008e56:	4413      	add	r3, r2
 8008e58:	60bb      	str	r3, [r7, #8]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	605a      	str	r2, [r3, #4]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d104      	bne.n	8008e7a <vTaskSwitchContext+0x8a>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	605a      	str	r2, [r3, #4]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	4a0b      	ldr	r2, [pc, #44]	; (8008eb0 <vTaskSwitchContext+0xc0>)
 8008e82:	6013      	str	r3, [r2, #0]
 8008e84:	4a08      	ldr	r2, [pc, #32]	; (8008ea8 <vTaskSwitchContext+0xb8>)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e8a:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <vTaskSwitchContext+0xc0>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3354      	adds	r3, #84	; 0x54
 8008e90:	4a08      	ldr	r2, [pc, #32]	; (8008eb4 <vTaskSwitchContext+0xc4>)
 8008e92:	6013      	str	r3, [r2, #0]
}
 8008e94:	bf00      	nop
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	2000145c 	.word	0x2000145c
 8008ea4:	20001448 	.word	0x20001448
 8008ea8:	2000143c 	.word	0x2000143c
 8008eac:	20000f64 	.word	0x20000f64
 8008eb0:	20000f60 	.word	0x20000f60
 8008eb4:	20000048 	.word	0x20000048

08008eb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	60fb      	str	r3, [r7, #12]
}
 8008eda:	bf00      	nop
 8008edc:	e7fe      	b.n	8008edc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ede:	4b07      	ldr	r3, [pc, #28]	; (8008efc <vTaskPlaceOnEventList+0x44>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3318      	adds	r3, #24
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7fe fc4d 	bl	8007786 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008eec:	2101      	movs	r1, #1
 8008eee:	6838      	ldr	r0, [r7, #0]
 8008ef0:	f000 fb8e 	bl	8009610 <prvAddCurrentTaskToDelayedList>
}
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000f60 	.word	0x20000f60

08008f00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10a      	bne.n	8008f28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	617b      	str	r3, [r7, #20]
}
 8008f24:	bf00      	nop
 8008f26:	e7fe      	b.n	8008f26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f28:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3318      	adds	r3, #24
 8008f2e:	4619      	mov	r1, r3
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7fe fc04 	bl	800773e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	68b8      	ldr	r0, [r7, #8]
 8008f46:	f000 fb63 	bl	8009610 <prvAddCurrentTaskToDelayedList>
	}
 8008f4a:	bf00      	nop
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000f60 	.word	0x20000f60

08008f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60fb      	str	r3, [r7, #12]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	3318      	adds	r3, #24
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe fc35 	bl	80077f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f8e:	4b1e      	ldr	r3, [pc, #120]	; (8009008 <xTaskRemoveFromEventList+0xb0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d11d      	bne.n	8008fd2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fc2c 	bl	80077f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	4b19      	ldr	r3, [pc, #100]	; (800900c <xTaskRemoveFromEventList+0xb4>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d903      	bls.n	8008fb4 <xTaskRemoveFromEventList+0x5c>
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb0:	4a16      	ldr	r2, [pc, #88]	; (800900c <xTaskRemoveFromEventList+0xb4>)
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb8:	4613      	mov	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4a13      	ldr	r2, [pc, #76]	; (8009010 <xTaskRemoveFromEventList+0xb8>)
 8008fc2:	441a      	add	r2, r3
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7fe fbb7 	bl	800773e <vListInsertEnd>
 8008fd0:	e005      	b.n	8008fde <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	3318      	adds	r3, #24
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	480e      	ldr	r0, [pc, #56]	; (8009014 <xTaskRemoveFromEventList+0xbc>)
 8008fda:	f7fe fbb0 	bl	800773e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe2:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <xTaskRemoveFromEventList+0xc0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d905      	bls.n	8008ff8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <xTaskRemoveFromEventList+0xc4>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	e001      	b.n	8008ffc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ffc:	697b      	ldr	r3, [r7, #20]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	2000145c 	.word	0x2000145c
 800900c:	2000143c 	.word	0x2000143c
 8009010:	20000f64 	.word	0x20000f64
 8009014:	200013f4 	.word	0x200013f4
 8009018:	20000f60 	.word	0x20000f60
 800901c:	20001448 	.word	0x20001448

08009020 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009028:	4b06      	ldr	r3, [pc, #24]	; (8009044 <vTaskInternalSetTimeOutState+0x24>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009030:	4b05      	ldr	r3, [pc, #20]	; (8009048 <vTaskInternalSetTimeOutState+0x28>)
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	605a      	str	r2, [r3, #4]
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	2000144c 	.word	0x2000144c
 8009048:	20001438 	.word	0x20001438

0800904c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	613b      	str	r3, [r7, #16]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	60fb      	str	r3, [r7, #12]
}
 800908a:	bf00      	nop
 800908c:	e7fe      	b.n	800908c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800908e:	f000 ff91 	bl	8009fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009092:	4b1d      	ldr	r3, [pc, #116]	; (8009108 <xTaskCheckForTimeOut+0xbc>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090aa:	d102      	bne.n	80090b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	61fb      	str	r3, [r7, #28]
 80090b0:	e023      	b.n	80090fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	4b15      	ldr	r3, [pc, #84]	; (800910c <xTaskCheckForTimeOut+0xc0>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d007      	beq.n	80090ce <xTaskCheckForTimeOut+0x82>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d302      	bcc.n	80090ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090c8:	2301      	movs	r3, #1
 80090ca:	61fb      	str	r3, [r7, #28]
 80090cc:	e015      	b.n	80090fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d20b      	bcs.n	80090f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff ff9b 	bl	8009020 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090ea:	2300      	movs	r3, #0
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	e004      	b.n	80090fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090f6:	2301      	movs	r3, #1
 80090f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090fa:	f000 ff8b 	bl	800a014 <vPortExitCritical>

	return xReturn;
 80090fe:	69fb      	ldr	r3, [r7, #28]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3720      	adds	r7, #32
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20001438 	.word	0x20001438
 800910c:	2000144c 	.word	0x2000144c

08009110 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009114:	4b03      	ldr	r3, [pc, #12]	; (8009124 <vTaskMissedYield+0x14>)
 8009116:	2201      	movs	r2, #1
 8009118:	601a      	str	r2, [r3, #0]
}
 800911a:	bf00      	nop
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	20001448 	.word	0x20001448

08009128 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009130:	f000 f852 	bl	80091d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009134:	4b06      	ldr	r3, [pc, #24]	; (8009150 <prvIdleTask+0x28>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d9f9      	bls.n	8009130 <prvIdleTask+0x8>
			{
				taskYIELD();
 800913c:	4b05      	ldr	r3, [pc, #20]	; (8009154 <prvIdleTask+0x2c>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800914c:	e7f0      	b.n	8009130 <prvIdleTask+0x8>
 800914e:	bf00      	nop
 8009150:	20000f64 	.word	0x20000f64
 8009154:	e000ed04 	.word	0xe000ed04

08009158 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800915e:	2300      	movs	r3, #0
 8009160:	607b      	str	r3, [r7, #4]
 8009162:	e00c      	b.n	800917e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4a12      	ldr	r2, [pc, #72]	; (80091b8 <prvInitialiseTaskLists+0x60>)
 8009170:	4413      	add	r3, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fab6 	bl	80076e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3301      	adds	r3, #1
 800917c:	607b      	str	r3, [r7, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b37      	cmp	r3, #55	; 0x37
 8009182:	d9ef      	bls.n	8009164 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009184:	480d      	ldr	r0, [pc, #52]	; (80091bc <prvInitialiseTaskLists+0x64>)
 8009186:	f7fe faad 	bl	80076e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800918a:	480d      	ldr	r0, [pc, #52]	; (80091c0 <prvInitialiseTaskLists+0x68>)
 800918c:	f7fe faaa 	bl	80076e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009190:	480c      	ldr	r0, [pc, #48]	; (80091c4 <prvInitialiseTaskLists+0x6c>)
 8009192:	f7fe faa7 	bl	80076e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009196:	480c      	ldr	r0, [pc, #48]	; (80091c8 <prvInitialiseTaskLists+0x70>)
 8009198:	f7fe faa4 	bl	80076e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800919c:	480b      	ldr	r0, [pc, #44]	; (80091cc <prvInitialiseTaskLists+0x74>)
 800919e:	f7fe faa1 	bl	80076e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091a2:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <prvInitialiseTaskLists+0x78>)
 80091a4:	4a05      	ldr	r2, [pc, #20]	; (80091bc <prvInitialiseTaskLists+0x64>)
 80091a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091a8:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <prvInitialiseTaskLists+0x7c>)
 80091aa:	4a05      	ldr	r2, [pc, #20]	; (80091c0 <prvInitialiseTaskLists+0x68>)
 80091ac:	601a      	str	r2, [r3, #0]
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000f64 	.word	0x20000f64
 80091bc:	200013c4 	.word	0x200013c4
 80091c0:	200013d8 	.word	0x200013d8
 80091c4:	200013f4 	.word	0x200013f4
 80091c8:	20001408 	.word	0x20001408
 80091cc:	20001420 	.word	0x20001420
 80091d0:	200013ec 	.word	0x200013ec
 80091d4:	200013f0 	.word	0x200013f0

080091d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091de:	e019      	b.n	8009214 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091e0:	f000 fee8 	bl	8009fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e4:	4b10      	ldr	r3, [pc, #64]	; (8009228 <prvCheckTasksWaitingTermination+0x50>)
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fb01 	bl	80077f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091f6:	4b0d      	ldr	r3, [pc, #52]	; (800922c <prvCheckTasksWaitingTermination+0x54>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	4a0b      	ldr	r2, [pc, #44]	; (800922c <prvCheckTasksWaitingTermination+0x54>)
 80091fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009200:	4b0b      	ldr	r3, [pc, #44]	; (8009230 <prvCheckTasksWaitingTermination+0x58>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3b01      	subs	r3, #1
 8009206:	4a0a      	ldr	r2, [pc, #40]	; (8009230 <prvCheckTasksWaitingTermination+0x58>)
 8009208:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800920a:	f000 ff03 	bl	800a014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f810 	bl	8009234 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009214:	4b06      	ldr	r3, [pc, #24]	; (8009230 <prvCheckTasksWaitingTermination+0x58>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e1      	bne.n	80091e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20001408 	.word	0x20001408
 800922c:	20001434 	.word	0x20001434
 8009230:	2000141c 	.word	0x2000141c

08009234 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3354      	adds	r3, #84	; 0x54
 8009240:	4618      	mov	r0, r3
 8009242:	f001 fafb 	bl	800a83c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800924c:	2b00      	cmp	r3, #0
 800924e:	d108      	bne.n	8009262 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	4618      	mov	r0, r3
 8009256:	f001 f89b 	bl	800a390 <vPortFree>
				vPortFree( pxTCB );
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 f898 	bl	800a390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009260:	e018      	b.n	8009294 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009268:	2b01      	cmp	r3, #1
 800926a:	d103      	bne.n	8009274 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f88f 	bl	800a390 <vPortFree>
	}
 8009272:	e00f      	b.n	8009294 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800927a:	2b02      	cmp	r3, #2
 800927c:	d00a      	beq.n	8009294 <prvDeleteTCB+0x60>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	60fb      	str	r3, [r7, #12]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <prvDeleteTCB+0x5e>
	}
 8009294:	bf00      	nop
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a2:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <prvResetNextTaskUnblockTime+0x38>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d104      	bne.n	80092b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <prvResetNextTaskUnblockTime+0x3c>)
 80092ae:	f04f 32ff 	mov.w	r2, #4294967295
 80092b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092b4:	e008      	b.n	80092c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b6:	4b07      	ldr	r3, [pc, #28]	; (80092d4 <prvResetNextTaskUnblockTime+0x38>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	4a04      	ldr	r2, [pc, #16]	; (80092d8 <prvResetNextTaskUnblockTime+0x3c>)
 80092c6:	6013      	str	r3, [r2, #0]
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	200013ec 	.word	0x200013ec
 80092d8:	20001454 	.word	0x20001454

080092dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <xTaskGetCurrentTaskHandle+0x1c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80092e8:	687b      	ldr	r3, [r7, #4]
	}
 80092ea:	4618      	mov	r0, r3
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	20000f60 	.word	0x20000f60

080092fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009302:	4b0b      	ldr	r3, [pc, #44]	; (8009330 <xTaskGetSchedulerState+0x34>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d102      	bne.n	8009310 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800930a:	2301      	movs	r3, #1
 800930c:	607b      	str	r3, [r7, #4]
 800930e:	e008      	b.n	8009322 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009310:	4b08      	ldr	r3, [pc, #32]	; (8009334 <xTaskGetSchedulerState+0x38>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009318:	2302      	movs	r3, #2
 800931a:	607b      	str	r3, [r7, #4]
 800931c:	e001      	b.n	8009322 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800931e:	2300      	movs	r3, #0
 8009320:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009322:	687b      	ldr	r3, [r7, #4]
	}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	20001440 	.word	0x20001440
 8009334:	2000145c 	.word	0x2000145c

08009338 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d051      	beq.n	80093f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009352:	4b2a      	ldr	r3, [pc, #168]	; (80093fc <xTaskPriorityInherit+0xc4>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	429a      	cmp	r2, r3
 800935a:	d241      	bcs.n	80093e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	db06      	blt.n	8009372 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009364:	4b25      	ldr	r3, [pc, #148]	; (80093fc <xTaskPriorityInherit+0xc4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	6959      	ldr	r1, [r3, #20]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4a1f      	ldr	r2, [pc, #124]	; (8009400 <xTaskPriorityInherit+0xc8>)
 8009384:	4413      	add	r3, r2
 8009386:	4299      	cmp	r1, r3
 8009388:	d122      	bne.n	80093d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3304      	adds	r3, #4
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fa32 	bl	80077f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009394:	4b19      	ldr	r3, [pc, #100]	; (80093fc <xTaskPriorityInherit+0xc4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a2:	4b18      	ldr	r3, [pc, #96]	; (8009404 <xTaskPriorityInherit+0xcc>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d903      	bls.n	80093b2 <xTaskPriorityInherit+0x7a>
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ae:	4a15      	ldr	r2, [pc, #84]	; (8009404 <xTaskPriorityInherit+0xcc>)
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4a10      	ldr	r2, [pc, #64]	; (8009400 <xTaskPriorityInherit+0xc8>)
 80093c0:	441a      	add	r2, r3
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4619      	mov	r1, r3
 80093c8:	4610      	mov	r0, r2
 80093ca:	f7fe f9b8 	bl	800773e <vListInsertEnd>
 80093ce:	e004      	b.n	80093da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093d0:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <xTaskPriorityInherit+0xc4>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80093da:	2301      	movs	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	e008      	b.n	80093f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093e4:	4b05      	ldr	r3, [pc, #20]	; (80093fc <xTaskPriorityInherit+0xc4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d201      	bcs.n	80093f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80093ee:	2301      	movs	r3, #1
 80093f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093f2:	68fb      	ldr	r3, [r7, #12]
	}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20000f60 	.word	0x20000f60
 8009400:	20000f64 	.word	0x20000f64
 8009404:	2000143c 	.word	0x2000143c

08009408 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d056      	beq.n	80094cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800941e:	4b2e      	ldr	r3, [pc, #184]	; (80094d8 <xTaskPriorityDisinherit+0xd0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	429a      	cmp	r2, r3
 8009426:	d00a      	beq.n	800943e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	60fb      	str	r3, [r7, #12]
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10a      	bne.n	800945c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	60bb      	str	r3, [r7, #8]
}
 8009458:	bf00      	nop
 800945a:	e7fe      	b.n	800945a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009460:	1e5a      	subs	r2, r3, #1
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946e:	429a      	cmp	r2, r3
 8009470:	d02c      	beq.n	80094cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009476:	2b00      	cmp	r3, #0
 8009478:	d128      	bne.n	80094cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	3304      	adds	r3, #4
 800947e:	4618      	mov	r0, r3
 8009480:	f7fe f9ba 	bl	80077f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009490:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <xTaskPriorityDisinherit+0xd4>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d903      	bls.n	80094ac <xTaskPriorityDisinherit+0xa4>
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	4a0c      	ldr	r2, [pc, #48]	; (80094dc <xTaskPriorityDisinherit+0xd4>)
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4a09      	ldr	r2, [pc, #36]	; (80094e0 <xTaskPriorityDisinherit+0xd8>)
 80094ba:	441a      	add	r2, r3
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	4610      	mov	r0, r2
 80094c4:	f7fe f93b 	bl	800773e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094c8:	2301      	movs	r3, #1
 80094ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094cc:	697b      	ldr	r3, [r7, #20]
	}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000f60 	.word	0x20000f60
 80094dc:	2000143c 	.word	0x2000143c
 80094e0:	20000f64 	.word	0x20000f64

080094e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80094f2:	2301      	movs	r3, #1
 80094f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d06a      	beq.n	80095d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	60fb      	str	r3, [r7, #12]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d902      	bls.n	800952a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	61fb      	str	r3, [r7, #28]
 8009528:	e002      	b.n	8009530 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800952e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	429a      	cmp	r2, r3
 8009538:	d04b      	beq.n	80095d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	429a      	cmp	r2, r3
 8009542:	d146      	bne.n	80095d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009544:	4b25      	ldr	r3, [pc, #148]	; (80095dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	429a      	cmp	r2, r3
 800954c:	d10a      	bne.n	8009564 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	60bb      	str	r3, [r7, #8]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	69fa      	ldr	r2, [r7, #28]
 800956e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	2b00      	cmp	r3, #0
 8009576:	db04      	blt.n	8009582 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	6959      	ldr	r1, [r3, #20]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4613      	mov	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4a13      	ldr	r2, [pc, #76]	; (80095e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009592:	4413      	add	r3, r2
 8009594:	4299      	cmp	r1, r3
 8009596:	d11c      	bne.n	80095d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	3304      	adds	r3, #4
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe f92b 	bl	80077f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a6:	4b0f      	ldr	r3, [pc, #60]	; (80095e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d903      	bls.n	80095b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b2:	4a0c      	ldr	r2, [pc, #48]	; (80095e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4a07      	ldr	r2, [pc, #28]	; (80095e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80095c4:	441a      	add	r2, r3
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4619      	mov	r1, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	f7fe f8b6 	bl	800773e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095d2:	bf00      	nop
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	20000f60 	.word	0x20000f60
 80095e0:	20000f64 	.word	0x20000f64
 80095e4:	2000143c 	.word	0x2000143c

080095e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80095ec:	4b07      	ldr	r3, [pc, #28]	; (800960c <pvTaskIncrementMutexHeldCount+0x24>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80095f4:	4b05      	ldr	r3, [pc, #20]	; (800960c <pvTaskIncrementMutexHeldCount+0x24>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095fa:	3201      	adds	r2, #1
 80095fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80095fe:	4b03      	ldr	r3, [pc, #12]	; (800960c <pvTaskIncrementMutexHeldCount+0x24>)
 8009600:	681b      	ldr	r3, [r3, #0]
	}
 8009602:	4618      	mov	r0, r3
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	20000f60 	.word	0x20000f60

08009610 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800961a:	4b21      	ldr	r3, [pc, #132]	; (80096a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009620:	4b20      	ldr	r3, [pc, #128]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3304      	adds	r3, #4
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe f8e6 	bl	80077f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d10a      	bne.n	800964a <prvAddCurrentTaskToDelayedList+0x3a>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800963a:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3304      	adds	r3, #4
 8009640:	4619      	mov	r1, r3
 8009642:	4819      	ldr	r0, [pc, #100]	; (80096a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009644:	f7fe f87b 	bl	800773e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009648:	e026      	b.n	8009698 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009652:	4b14      	ldr	r3, [pc, #80]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	429a      	cmp	r2, r3
 8009660:	d209      	bcs.n	8009676 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009662:	4b12      	ldr	r3, [pc, #72]	; (80096ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fe f889 	bl	8007786 <vListInsert>
}
 8009674:	e010      	b.n	8009698 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009676:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	4b0a      	ldr	r3, [pc, #40]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7fe f87f 	bl	8007786 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009688:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	429a      	cmp	r2, r3
 8009690:	d202      	bcs.n	8009698 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009692:	4a08      	ldr	r2, [pc, #32]	; (80096b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	6013      	str	r3, [r2, #0]
}
 8009698:	bf00      	nop
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20001438 	.word	0x20001438
 80096a4:	20000f60 	.word	0x20000f60
 80096a8:	20001420 	.word	0x20001420
 80096ac:	200013f0 	.word	0x200013f0
 80096b0:	200013ec 	.word	0x200013ec
 80096b4:	20001454 	.word	0x20001454

080096b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096be:	2300      	movs	r3, #0
 80096c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096c2:	f000 fb07 	bl	8009cd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80096c6:	4b1c      	ldr	r3, [pc, #112]	; (8009738 <xTimerCreateTimerTask+0x80>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d021      	beq.n	8009712 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80096d6:	1d3a      	adds	r2, r7, #4
 80096d8:	f107 0108 	add.w	r1, r7, #8
 80096dc:	f107 030c 	add.w	r3, r7, #12
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd ffe5 	bl	80076b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	9202      	str	r2, [sp, #8]
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	2302      	movs	r3, #2
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	2300      	movs	r3, #0
 80096f6:	460a      	mov	r2, r1
 80096f8:	4910      	ldr	r1, [pc, #64]	; (800973c <xTimerCreateTimerTask+0x84>)
 80096fa:	4811      	ldr	r0, [pc, #68]	; (8009740 <xTimerCreateTimerTask+0x88>)
 80096fc:	f7fe ffa6 	bl	800864c <xTaskCreateStatic>
 8009700:	4603      	mov	r3, r0
 8009702:	4a10      	ldr	r2, [pc, #64]	; (8009744 <xTimerCreateTimerTask+0x8c>)
 8009704:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009706:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <xTimerCreateTimerTask+0x8c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800970e:	2301      	movs	r3, #1
 8009710:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10a      	bne.n	800972e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	613b      	str	r3, [r7, #16]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800972e:	697b      	ldr	r3, [r7, #20]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20001490 	.word	0x20001490
 800973c:	0800aa10 	.word	0x0800aa10
 8009740:	0800987d 	.word	0x0800987d
 8009744:	20001494 	.word	0x20001494

08009748 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009756:	2300      	movs	r3, #0
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	623b      	str	r3, [r7, #32]
}
 8009772:	bf00      	nop
 8009774:	e7fe      	b.n	8009774 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009776:	4b1a      	ldr	r3, [pc, #104]	; (80097e0 <xTimerGenericCommand+0x98>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d02a      	beq.n	80097d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b05      	cmp	r3, #5
 800978e:	dc18      	bgt.n	80097c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009790:	f7ff fdb4 	bl	80092fc <xTaskGetSchedulerState>
 8009794:	4603      	mov	r3, r0
 8009796:	2b02      	cmp	r3, #2
 8009798:	d109      	bne.n	80097ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800979a:	4b11      	ldr	r3, [pc, #68]	; (80097e0 <xTimerGenericCommand+0x98>)
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	f107 0110 	add.w	r1, r7, #16
 80097a2:	2300      	movs	r3, #0
 80097a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a6:	f7fe fa45 	bl	8007c34 <xQueueGenericSend>
 80097aa:	6278      	str	r0, [r7, #36]	; 0x24
 80097ac:	e012      	b.n	80097d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097ae:	4b0c      	ldr	r3, [pc, #48]	; (80097e0 <xTimerGenericCommand+0x98>)
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	f107 0110 	add.w	r1, r7, #16
 80097b6:	2300      	movs	r3, #0
 80097b8:	2200      	movs	r2, #0
 80097ba:	f7fe fa3b 	bl	8007c34 <xQueueGenericSend>
 80097be:	6278      	str	r0, [r7, #36]	; 0x24
 80097c0:	e008      	b.n	80097d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <xTimerGenericCommand+0x98>)
 80097c4:	6818      	ldr	r0, [r3, #0]
 80097c6:	f107 0110 	add.w	r1, r7, #16
 80097ca:	2300      	movs	r3, #0
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	f7fe fb2f 	bl	8007e30 <xQueueGenericSendFromISR>
 80097d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3728      	adds	r7, #40	; 0x28
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20001490 	.word	0x20001490

080097e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af02      	add	r7, sp, #8
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ee:	4b22      	ldr	r3, [pc, #136]	; (8009878 <prvProcessExpiredTimer+0x94>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fd fffb 	bl	80077f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d022      	beq.n	8009856 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	699a      	ldr	r2, [r3, #24]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	18d1      	adds	r1, r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	6978      	ldr	r0, [r7, #20]
 800981e:	f000 f8d1 	bl	80099c4 <prvInsertTimerInActiveList>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d01f      	beq.n	8009868 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009828:	2300      	movs	r3, #0
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	2300      	movs	r3, #0
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	2100      	movs	r1, #0
 8009832:	6978      	ldr	r0, [r7, #20]
 8009834:	f7ff ff88 	bl	8009748 <xTimerGenericCommand>
 8009838:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d113      	bne.n	8009868 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	60fb      	str	r3, [r7, #12]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	b2da      	uxtb	r2, r3
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	6978      	ldr	r0, [r7, #20]
 800986e:	4798      	blx	r3
}
 8009870:	bf00      	nop
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20001488 	.word	0x20001488

0800987c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009884:	f107 0308 	add.w	r3, r7, #8
 8009888:	4618      	mov	r0, r3
 800988a:	f000 f857 	bl	800993c <prvGetNextExpireTime>
 800988e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4619      	mov	r1, r3
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f000 f803 	bl	80098a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800989a:	f000 f8d5 	bl	8009a48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800989e:	e7f1      	b.n	8009884 <prvTimerTask+0x8>

080098a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098aa:	f7ff f92b 	bl	8008b04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ae:	f107 0308 	add.w	r3, r7, #8
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 f866 	bl	8009984 <prvSampleTimeNow>
 80098b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d130      	bne.n	8009922 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <prvProcessTimerOrBlockTask+0x3c>
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d806      	bhi.n	80098dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80098ce:	f7ff f927 	bl	8008b20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff ff85 	bl	80097e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098da:	e024      	b.n	8009926 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d008      	beq.n	80098f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098e2:	4b13      	ldr	r3, [pc, #76]	; (8009930 <prvProcessTimerOrBlockTask+0x90>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <prvProcessTimerOrBlockTask+0x50>
 80098ec:	2301      	movs	r3, #1
 80098ee:	e000      	b.n	80098f2 <prvProcessTimerOrBlockTask+0x52>
 80098f0:	2300      	movs	r3, #0
 80098f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098f4:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <prvProcessTimerOrBlockTask+0x94>)
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	4619      	mov	r1, r3
 8009902:	f7fe fe6f 	bl	80085e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009906:	f7ff f90b 	bl	8008b20 <xTaskResumeAll>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009910:	4b09      	ldr	r3, [pc, #36]	; (8009938 <prvProcessTimerOrBlockTask+0x98>)
 8009912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
}
 8009920:	e001      	b.n	8009926 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009922:	f7ff f8fd 	bl	8008b20 <xTaskResumeAll>
}
 8009926:	bf00      	nop
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	2000148c 	.word	0x2000148c
 8009934:	20001490 	.word	0x20001490
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009944:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <prvGetNextExpireTime+0x44>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <prvGetNextExpireTime+0x16>
 800994e:	2201      	movs	r2, #1
 8009950:	e000      	b.n	8009954 <prvGetNextExpireTime+0x18>
 8009952:	2200      	movs	r2, #0
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <prvGetNextExpireTime+0x44>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	e001      	b.n	8009970 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009970:	68fb      	ldr	r3, [r7, #12]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	20001488 	.word	0x20001488

08009984 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800998c:	f7ff f966 	bl	8008c5c <xTaskGetTickCount>
 8009990:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009992:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <prvSampleTimeNow+0x3c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	429a      	cmp	r2, r3
 800999a:	d205      	bcs.n	80099a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800999c:	f000 f936 	bl	8009c0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	601a      	str	r2, [r3, #0]
 80099a6:	e002      	b.n	80099ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099ae:	4a04      	ldr	r2, [pc, #16]	; (80099c0 <prvSampleTimeNow+0x3c>)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099b4:	68fb      	ldr	r3, [r7, #12]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20001498 	.word	0x20001498

080099c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d812      	bhi.n	8009a10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d302      	bcc.n	80099fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	e01b      	b.n	8009a36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099fe:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <prvInsertTimerInActiveList+0x7c>)
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4619      	mov	r1, r3
 8009a08:	4610      	mov	r0, r2
 8009a0a:	f7fd febc 	bl	8007786 <vListInsert>
 8009a0e:	e012      	b.n	8009a36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d206      	bcs.n	8009a26 <prvInsertTimerInActiveList+0x62>
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d302      	bcc.n	8009a26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	e007      	b.n	8009a36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a26:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <prvInsertTimerInActiveList+0x80>)
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4610      	mov	r0, r2
 8009a32:	f7fd fea8 	bl	8007786 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a36:	697b      	ldr	r3, [r7, #20]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	2000148c 	.word	0x2000148c
 8009a44:	20001488 	.word	0x20001488

08009a48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08e      	sub	sp, #56	; 0x38
 8009a4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a4e:	e0ca      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da18      	bge.n	8009a88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	3304      	adds	r3, #4
 8009a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10a      	bne.n	8009a78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	61fb      	str	r3, [r7, #28]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a7e:	6850      	ldr	r0, [r2, #4]
 8009a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a82:	6892      	ldr	r2, [r2, #8]
 8009a84:	4611      	mov	r1, r2
 8009a86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f2c0 80aa 	blt.w	8009be4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fd fea9 	bl	80077f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff ff6b 	bl	8009984 <prvSampleTimeNow>
 8009aae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b09      	cmp	r3, #9
 8009ab4:	f200 8097 	bhi.w	8009be6 <prvProcessReceivedCommands+0x19e>
 8009ab8:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <prvProcessReceivedCommands+0x78>)
 8009aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abe:	bf00      	nop
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009ae9 	.word	0x08009ae9
 8009ac8:	08009ae9 	.word	0x08009ae9
 8009acc:	08009b5d 	.word	0x08009b5d
 8009ad0:	08009b71 	.word	0x08009b71
 8009ad4:	08009bbb 	.word	0x08009bbb
 8009ad8:	08009ae9 	.word	0x08009ae9
 8009adc:	08009ae9 	.word	0x08009ae9
 8009ae0:	08009b5d 	.word	0x08009b5d
 8009ae4:	08009b71 	.word	0x08009b71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aee:	f043 0301 	orr.w	r3, r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	18d1      	adds	r1, r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b08:	f7ff ff5c 	bl	80099c4 <prvInsertTimerInActiveList>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d069      	beq.n	8009be6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d05e      	beq.n	8009be6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	441a      	add	r2, r3
 8009b30:	2300      	movs	r3, #0
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	2100      	movs	r1, #0
 8009b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b3a:	f7ff fe05 	bl	8009748 <xTimerGenericCommand>
 8009b3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d14f      	bne.n	8009be6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	61bb      	str	r3, [r7, #24]
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b62:	f023 0301 	bic.w	r3, r3, #1
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009b6e:	e03a      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b76:	f043 0301 	orr.w	r3, r3, #1
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	617b      	str	r3, [r7, #20]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	699a      	ldr	r2, [r3, #24]
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	18d1      	adds	r1, r2, r3
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb4:	f7ff ff06 	bl	80099c4 <prvInsertTimerInActiveList>
					break;
 8009bb8:	e015      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bc0:	f003 0302 	and.w	r3, r3, #2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bca:	f000 fbe1 	bl	800a390 <vPortFree>
 8009bce:	e00a      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bd6:	f023 0301 	bic.w	r3, r3, #1
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009be2:	e000      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009be4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009be6:	4b08      	ldr	r3, [pc, #32]	; (8009c08 <prvProcessReceivedCommands+0x1c0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	1d39      	adds	r1, r7, #4
 8009bec:	2200      	movs	r2, #0
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe f9ba 	bl	8007f68 <xQueueReceive>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f47f af2a 	bne.w	8009a50 <prvProcessReceivedCommands+0x8>
	}
}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	3730      	adds	r7, #48	; 0x30
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20001490 	.word	0x20001490

08009c0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b088      	sub	sp, #32
 8009c10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c12:	e048      	b.n	8009ca6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c14:	4b2d      	ldr	r3, [pc, #180]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c1e:	4b2b      	ldr	r3, [pc, #172]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fd fde3 	bl	80077f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c40:	f003 0304 	and.w	r3, r3, #4
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d02e      	beq.n	8009ca6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	4413      	add	r3, r2
 8009c50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d90e      	bls.n	8009c78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c66:	4b19      	ldr	r3, [pc, #100]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4610      	mov	r0, r2
 8009c72:	f7fd fd88 	bl	8007786 <vListInsert>
 8009c76:	e016      	b.n	8009ca6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c78:	2300      	movs	r3, #0
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	2100      	movs	r1, #0
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f7ff fd60 	bl	8009748 <xTimerGenericCommand>
 8009c88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10a      	bne.n	8009ca6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	603b      	str	r3, [r7, #0]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1b1      	bne.n	8009c14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009cb0:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009cb6:	4b06      	ldr	r3, [pc, #24]	; (8009cd0 <prvSwitchTimerLists+0xc4>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a04      	ldr	r2, [pc, #16]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009cbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009cbe:	4a04      	ldr	r2, [pc, #16]	; (8009cd0 <prvSwitchTimerLists+0xc4>)
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	6013      	str	r3, [r2, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20001488 	.word	0x20001488
 8009cd0:	2000148c 	.word	0x2000148c

08009cd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cda:	f000 f96b 	bl	8009fb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cde:	4b15      	ldr	r3, [pc, #84]	; (8009d34 <prvCheckForValidListAndQueue+0x60>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d120      	bne.n	8009d28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ce6:	4814      	ldr	r0, [pc, #80]	; (8009d38 <prvCheckForValidListAndQueue+0x64>)
 8009ce8:	f7fd fcfc 	bl	80076e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009cec:	4813      	ldr	r0, [pc, #76]	; (8009d3c <prvCheckForValidListAndQueue+0x68>)
 8009cee:	f7fd fcf9 	bl	80076e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009cf2:	4b13      	ldr	r3, [pc, #76]	; (8009d40 <prvCheckForValidListAndQueue+0x6c>)
 8009cf4:	4a10      	ldr	r2, [pc, #64]	; (8009d38 <prvCheckForValidListAndQueue+0x64>)
 8009cf6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009cf8:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <prvCheckForValidListAndQueue+0x70>)
 8009cfa:	4a10      	ldr	r2, [pc, #64]	; (8009d3c <prvCheckForValidListAndQueue+0x68>)
 8009cfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	4b11      	ldr	r3, [pc, #68]	; (8009d48 <prvCheckForValidListAndQueue+0x74>)
 8009d04:	4a11      	ldr	r2, [pc, #68]	; (8009d4c <prvCheckForValidListAndQueue+0x78>)
 8009d06:	2110      	movs	r1, #16
 8009d08:	200a      	movs	r0, #10
 8009d0a:	f7fd fe07 	bl	800791c <xQueueGenericCreateStatic>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	4a08      	ldr	r2, [pc, #32]	; (8009d34 <prvCheckForValidListAndQueue+0x60>)
 8009d12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d14:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <prvCheckForValidListAndQueue+0x60>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d1c:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <prvCheckForValidListAndQueue+0x60>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	490b      	ldr	r1, [pc, #44]	; (8009d50 <prvCheckForValidListAndQueue+0x7c>)
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fc34 	bl	8008590 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d28:	f000 f974 	bl	800a014 <vPortExitCritical>
}
 8009d2c:	bf00      	nop
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20001490 	.word	0x20001490
 8009d38:	20001460 	.word	0x20001460
 8009d3c:	20001474 	.word	0x20001474
 8009d40:	20001488 	.word	0x20001488
 8009d44:	2000148c 	.word	0x2000148c
 8009d48:	2000153c 	.word	0x2000153c
 8009d4c:	2000149c 	.word	0x2000149c
 8009d50:	0800aa18 	.word	0x0800aa18

08009d54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3b04      	subs	r3, #4
 8009d64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3b04      	subs	r3, #4
 8009d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f023 0201 	bic.w	r2, r3, #1
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3b04      	subs	r3, #4
 8009d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d84:	4a0c      	ldr	r2, [pc, #48]	; (8009db8 <pxPortInitialiseStack+0x64>)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3b14      	subs	r3, #20
 8009d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3b04      	subs	r3, #4
 8009d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f06f 0202 	mvn.w	r2, #2
 8009da2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3b20      	subs	r3, #32
 8009da8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009daa:	68fb      	ldr	r3, [r7, #12]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	08009dbd 	.word	0x08009dbd

08009dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dc6:	4b12      	ldr	r3, [pc, #72]	; (8009e10 <prvTaskExitError+0x54>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dce:	d00a      	beq.n	8009de6 <prvTaskExitError+0x2a>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	60fb      	str	r3, [r7, #12]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <prvTaskExitError+0x28>
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	60bb      	str	r3, [r7, #8]
}
 8009df8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dfa:	bf00      	nop
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0fc      	beq.n	8009dfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	20000044 	.word	0x20000044
	...

08009e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e20:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <pxCurrentTCBConst2>)
 8009e22:	6819      	ldr	r1, [r3, #0]
 8009e24:	6808      	ldr	r0, [r1, #0]
 8009e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2a:	f380 8809 	msr	PSP, r0
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f04f 0000 	mov.w	r0, #0
 8009e36:	f380 8811 	msr	BASEPRI, r0
 8009e3a:	4770      	bx	lr
 8009e3c:	f3af 8000 	nop.w

08009e40 <pxCurrentTCBConst2>:
 8009e40:	20000f60 	.word	0x20000f60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop

08009e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e48:	4808      	ldr	r0, [pc, #32]	; (8009e6c <prvPortStartFirstTask+0x24>)
 8009e4a:	6800      	ldr	r0, [r0, #0]
 8009e4c:	6800      	ldr	r0, [r0, #0]
 8009e4e:	f380 8808 	msr	MSP, r0
 8009e52:	f04f 0000 	mov.w	r0, #0
 8009e56:	f380 8814 	msr	CONTROL, r0
 8009e5a:	b662      	cpsie	i
 8009e5c:	b661      	cpsie	f
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	df00      	svc	0
 8009e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e6a:	bf00      	nop
 8009e6c:	e000ed08 	.word	0xe000ed08

08009e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e76:	4b46      	ldr	r3, [pc, #280]	; (8009f90 <xPortStartScheduler+0x120>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a46      	ldr	r2, [pc, #280]	; (8009f94 <xPortStartScheduler+0x124>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d10a      	bne.n	8009e96 <xPortStartScheduler+0x26>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	613b      	str	r3, [r7, #16]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e96:	4b3e      	ldr	r3, [pc, #248]	; (8009f90 <xPortStartScheduler+0x120>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a3f      	ldr	r2, [pc, #252]	; (8009f98 <xPortStartScheduler+0x128>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d10a      	bne.n	8009eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	60fb      	str	r3, [r7, #12]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009eb6:	4b39      	ldr	r3, [pc, #228]	; (8009f9c <xPortStartScheduler+0x12c>)
 8009eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	22ff      	movs	r2, #255	; 0xff
 8009ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	4b31      	ldr	r3, [pc, #196]	; (8009fa0 <xPortStartScheduler+0x130>)
 8009edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ede:	4b31      	ldr	r3, [pc, #196]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009ee0:	2207      	movs	r2, #7
 8009ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ee4:	e009      	b.n	8009efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ee6:	4b2f      	ldr	r3, [pc, #188]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	4a2d      	ldr	r2, [pc, #180]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f02:	2b80      	cmp	r3, #128	; 0x80
 8009f04:	d0ef      	beq.n	8009ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f06:	4b27      	ldr	r3, [pc, #156]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1c3 0307 	rsb	r3, r3, #7
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d00a      	beq.n	8009f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	60bb      	str	r3, [r7, #8]
}
 8009f24:	bf00      	nop
 8009f26:	e7fe      	b.n	8009f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f28:	4b1e      	ldr	r3, [pc, #120]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	4a1d      	ldr	r2, [pc, #116]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f32:	4b1c      	ldr	r3, [pc, #112]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f3a:	4a1a      	ldr	r2, [pc, #104]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f46:	4b18      	ldr	r3, [pc, #96]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a17      	ldr	r2, [pc, #92]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f52:	4b15      	ldr	r3, [pc, #84]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a14      	ldr	r2, [pc, #80]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f5e:	f000 f8dd 	bl	800a11c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f62:	4b12      	ldr	r3, [pc, #72]	; (8009fac <xPortStartScheduler+0x13c>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f68:	f000 f8fc 	bl	800a164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f6c:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <xPortStartScheduler+0x140>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0f      	ldr	r2, [pc, #60]	; (8009fb0 <xPortStartScheduler+0x140>)
 8009f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f78:	f7ff ff66 	bl	8009e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f7c:	f7fe ff38 	bl	8008df0 <vTaskSwitchContext>
	prvTaskExitError();
 8009f80:	f7ff ff1c 	bl	8009dbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	e000ed00 	.word	0xe000ed00
 8009f94:	410fc271 	.word	0x410fc271
 8009f98:	410fc270 	.word	0x410fc270
 8009f9c:	e000e400 	.word	0xe000e400
 8009fa0:	2000158c 	.word	0x2000158c
 8009fa4:	20001590 	.word	0x20001590
 8009fa8:	e000ed20 	.word	0xe000ed20
 8009fac:	20000044 	.word	0x20000044
 8009fb0:	e000ef34 	.word	0xe000ef34

08009fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	607b      	str	r3, [r7, #4]
}
 8009fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fce:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <vPortEnterCritical+0x58>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	4a0d      	ldr	r2, [pc, #52]	; (800a00c <vPortEnterCritical+0x58>)
 8009fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <vPortEnterCritical+0x58>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d10f      	bne.n	800a000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <vPortEnterCritical+0x5c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <vPortEnterCritical+0x4c>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	603b      	str	r3, [r7, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	e7fe      	b.n	8009ffe <vPortEnterCritical+0x4a>
	}
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	20000044 	.word	0x20000044
 800a010:	e000ed04 	.word	0xe000ed04

0800a014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a01a:	4b12      	ldr	r3, [pc, #72]	; (800a064 <vPortExitCritical+0x50>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10a      	bne.n	800a038 <vPortExitCritical+0x24>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	607b      	str	r3, [r7, #4]
}
 800a034:	bf00      	nop
 800a036:	e7fe      	b.n	800a036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a038:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <vPortExitCritical+0x50>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	4a09      	ldr	r2, [pc, #36]	; (800a064 <vPortExitCritical+0x50>)
 800a040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a042:	4b08      	ldr	r3, [pc, #32]	; (800a064 <vPortExitCritical+0x50>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <vPortExitCritical+0x42>
 800a04a:	2300      	movs	r3, #0
 800a04c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	f383 8811 	msr	BASEPRI, r3
}
 800a054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	20000044 	.word	0x20000044
	...

0800a070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a070:	f3ef 8009 	mrs	r0, PSP
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	4b15      	ldr	r3, [pc, #84]	; (800a0d0 <pxCurrentTCBConst>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	f01e 0f10 	tst.w	lr, #16
 800a080:	bf08      	it	eq
 800a082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	6010      	str	r0, [r2, #0]
 800a08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a090:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a094:	f380 8811 	msr	BASEPRI, r0
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f7fe fea6 	bl	8008df0 <vTaskSwitchContext>
 800a0a4:	f04f 0000 	mov.w	r0, #0
 800a0a8:	f380 8811 	msr	BASEPRI, r0
 800a0ac:	bc09      	pop	{r0, r3}
 800a0ae:	6819      	ldr	r1, [r3, #0]
 800a0b0:	6808      	ldr	r0, [r1, #0]
 800a0b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b6:	f01e 0f10 	tst.w	lr, #16
 800a0ba:	bf08      	it	eq
 800a0bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0c0:	f380 8809 	msr	PSP, r0
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst>:
 800a0d0:	20000f60 	.word	0x20000f60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	607b      	str	r3, [r7, #4]
}
 800a0f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0f2:	f7fe fdc3 	bl	8008c7c <xTaskIncrementTick>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0fc:	4b06      	ldr	r3, [pc, #24]	; (800a118 <xPortSysTickHandler+0x40>)
 800a0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	2300      	movs	r3, #0
 800a106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f383 8811 	msr	BASEPRI, r3
}
 800a10e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	e000ed04 	.word	0xe000ed04

0800a11c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <vPortSetupTimerInterrupt+0x34>)
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a126:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <vPortSetupTimerInterrupt+0x38>)
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <vPortSetupTimerInterrupt+0x3c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a0a      	ldr	r2, [pc, #40]	; (800a15c <vPortSetupTimerInterrupt+0x40>)
 800a132:	fba2 2303 	umull	r2, r3, r2, r3
 800a136:	099b      	lsrs	r3, r3, #6
 800a138:	4a09      	ldr	r2, [pc, #36]	; (800a160 <vPortSetupTimerInterrupt+0x44>)
 800a13a:	3b01      	subs	r3, #1
 800a13c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a13e:	4b04      	ldr	r3, [pc, #16]	; (800a150 <vPortSetupTimerInterrupt+0x34>)
 800a140:	2207      	movs	r2, #7
 800a142:	601a      	str	r2, [r3, #0]
}
 800a144:	bf00      	nop
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	e000e010 	.word	0xe000e010
 800a154:	e000e018 	.word	0xe000e018
 800a158:	20000038 	.word	0x20000038
 800a15c:	10624dd3 	.word	0x10624dd3
 800a160:	e000e014 	.word	0xe000e014

0800a164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a174 <vPortEnableVFP+0x10>
 800a168:	6801      	ldr	r1, [r0, #0]
 800a16a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a16e:	6001      	str	r1, [r0, #0]
 800a170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a172:	bf00      	nop
 800a174:	e000ed88 	.word	0xe000ed88

0800a178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a17e:	f3ef 8305 	mrs	r3, IPSR
 800a182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b0f      	cmp	r3, #15
 800a188:	d914      	bls.n	800a1b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a18a:	4a17      	ldr	r2, [pc, #92]	; (800a1e8 <vPortValidateInterruptPriority+0x70>)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a194:	4b15      	ldr	r3, [pc, #84]	; (800a1ec <vPortValidateInterruptPriority+0x74>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	7afa      	ldrb	r2, [r7, #11]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d20a      	bcs.n	800a1b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
 800a1b2:	e7fe      	b.n	800a1b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1b4:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <vPortValidateInterruptPriority+0x78>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1bc:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <vPortValidateInterruptPriority+0x7c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d90a      	bls.n	800a1da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	603b      	str	r3, [r7, #0]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <vPortValidateInterruptPriority+0x60>
	}
 800a1da:	bf00      	nop
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	e000e3f0 	.word	0xe000e3f0
 800a1ec:	2000158c 	.word	0x2000158c
 800a1f0:	e000ed0c 	.word	0xe000ed0c
 800a1f4:	20001590 	.word	0x20001590

0800a1f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08a      	sub	sp, #40	; 0x28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a200:	2300      	movs	r3, #0
 800a202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a204:	f7fe fc7e 	bl	8008b04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a208:	4b5b      	ldr	r3, [pc, #364]	; (800a378 <pvPortMalloc+0x180>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a210:	f000 f920 	bl	800a454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a214:	4b59      	ldr	r3, [pc, #356]	; (800a37c <pvPortMalloc+0x184>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4013      	ands	r3, r2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f040 8093 	bne.w	800a348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01d      	beq.n	800a264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a228:	2208      	movs	r2, #8
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4413      	add	r3, r2
 800a22e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	2b00      	cmp	r3, #0
 800a238:	d014      	beq.n	800a264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f023 0307 	bic.w	r3, r3, #7
 800a240:	3308      	adds	r3, #8
 800a242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00a      	beq.n	800a264 <pvPortMalloc+0x6c>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	617b      	str	r3, [r7, #20]
}
 800a260:	bf00      	nop
 800a262:	e7fe      	b.n	800a262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d06e      	beq.n	800a348 <pvPortMalloc+0x150>
 800a26a:	4b45      	ldr	r3, [pc, #276]	; (800a380 <pvPortMalloc+0x188>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	429a      	cmp	r2, r3
 800a272:	d869      	bhi.n	800a348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a274:	4b43      	ldr	r3, [pc, #268]	; (800a384 <pvPortMalloc+0x18c>)
 800a276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a278:	4b42      	ldr	r3, [pc, #264]	; (800a384 <pvPortMalloc+0x18c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a27e:	e004      	b.n	800a28a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	429a      	cmp	r2, r3
 800a292:	d903      	bls.n	800a29c <pvPortMalloc+0xa4>
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1f1      	bne.n	800a280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a29c:	4b36      	ldr	r3, [pc, #216]	; (800a378 <pvPortMalloc+0x180>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d050      	beq.n	800a348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2208      	movs	r2, #8
 800a2ac:	4413      	add	r3, r2
 800a2ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	1ad2      	subs	r2, r2, r3
 800a2c0:	2308      	movs	r3, #8
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d91f      	bls.n	800a308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	613b      	str	r3, [r7, #16]
}
 800a2ec:	bf00      	nop
 800a2ee:	e7fe      	b.n	800a2ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	1ad2      	subs	r2, r2, r3
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a302:	69b8      	ldr	r0, [r7, #24]
 800a304:	f000 f908 	bl	800a518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a308:	4b1d      	ldr	r3, [pc, #116]	; (800a380 <pvPortMalloc+0x188>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	4a1b      	ldr	r2, [pc, #108]	; (800a380 <pvPortMalloc+0x188>)
 800a314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a316:	4b1a      	ldr	r3, [pc, #104]	; (800a380 <pvPortMalloc+0x188>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <pvPortMalloc+0x190>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d203      	bcs.n	800a32a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a322:	4b17      	ldr	r3, [pc, #92]	; (800a380 <pvPortMalloc+0x188>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a18      	ldr	r2, [pc, #96]	; (800a388 <pvPortMalloc+0x190>)
 800a328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	4b13      	ldr	r3, [pc, #76]	; (800a37c <pvPortMalloc+0x184>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	431a      	orrs	r2, r3
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <pvPortMalloc+0x194>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	4a11      	ldr	r2, [pc, #68]	; (800a38c <pvPortMalloc+0x194>)
 800a346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a348:	f7fe fbea 	bl	8008b20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <pvPortMalloc+0x174>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60fb      	str	r3, [r7, #12]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <pvPortMalloc+0x172>
	return pvReturn;
 800a36c:	69fb      	ldr	r3, [r7, #28]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3728      	adds	r7, #40	; 0x28
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	2000519c 	.word	0x2000519c
 800a37c:	200051b0 	.word	0x200051b0
 800a380:	200051a0 	.word	0x200051a0
 800a384:	20005194 	.word	0x20005194
 800a388:	200051a4 	.word	0x200051a4
 800a38c:	200051a8 	.word	0x200051a8

0800a390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d04d      	beq.n	800a43e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	425b      	negs	r3, r3
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	4b24      	ldr	r3, [pc, #144]	; (800a448 <vPortFree+0xb8>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <vPortFree+0x44>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	60fb      	str	r3, [r7, #12]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <vPortFree+0x62>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	60bb      	str	r3, [r7, #8]
}
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	4b14      	ldr	r3, [pc, #80]	; (800a448 <vPortFree+0xb8>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d01e      	beq.n	800a43e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11a      	bne.n	800a43e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	4b0e      	ldr	r3, [pc, #56]	; (800a448 <vPortFree+0xb8>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	43db      	mvns	r3, r3
 800a412:	401a      	ands	r2, r3
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a418:	f7fe fb74 	bl	8008b04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <vPortFree+0xbc>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4413      	add	r3, r2
 800a426:	4a09      	ldr	r2, [pc, #36]	; (800a44c <vPortFree+0xbc>)
 800a428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a42a:	6938      	ldr	r0, [r7, #16]
 800a42c:	f000 f874 	bl	800a518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <vPortFree+0xc0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3301      	adds	r3, #1
 800a436:	4a06      	ldr	r2, [pc, #24]	; (800a450 <vPortFree+0xc0>)
 800a438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a43a:	f7fe fb71 	bl	8008b20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a43e:	bf00      	nop
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	200051b0 	.word	0x200051b0
 800a44c:	200051a0 	.word	0x200051a0
 800a450:	200051ac 	.word	0x200051ac

0800a454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a45a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a45e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a460:	4b27      	ldr	r3, [pc, #156]	; (800a500 <prvHeapInit+0xac>)
 800a462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f003 0307 	and.w	r3, r3, #7
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00c      	beq.n	800a488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3307      	adds	r3, #7
 800a472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f023 0307 	bic.w	r3, r3, #7
 800a47a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	4a1f      	ldr	r2, [pc, #124]	; (800a500 <prvHeapInit+0xac>)
 800a484:	4413      	add	r3, r2
 800a486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a48c:	4a1d      	ldr	r2, [pc, #116]	; (800a504 <prvHeapInit+0xb0>)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a492:	4b1c      	ldr	r3, [pc, #112]	; (800a504 <prvHeapInit+0xb0>)
 800a494:	2200      	movs	r2, #0
 800a496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	4413      	add	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4a0:	2208      	movs	r2, #8
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	1a9b      	subs	r3, r3, r2
 800a4a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f023 0307 	bic.w	r3, r3, #7
 800a4ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4a15      	ldr	r2, [pc, #84]	; (800a508 <prvHeapInit+0xb4>)
 800a4b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <prvHeapInit+0xb4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4be:	4b12      	ldr	r3, [pc, #72]	; (800a508 <prvHeapInit+0xb4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4d4:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <prvHeapInit+0xb4>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <prvHeapInit+0xb8>)
 800a4e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	4a09      	ldr	r2, [pc, #36]	; (800a510 <prvHeapInit+0xbc>)
 800a4ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4ec:	4b09      	ldr	r3, [pc, #36]	; (800a514 <prvHeapInit+0xc0>)
 800a4ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4f2:	601a      	str	r2, [r3, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	20001594 	.word	0x20001594
 800a504:	20005194 	.word	0x20005194
 800a508:	2000519c 	.word	0x2000519c
 800a50c:	200051a4 	.word	0x200051a4
 800a510:	200051a0 	.word	0x200051a0
 800a514:	200051b0 	.word	0x200051b0

0800a518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a520:	4b28      	ldr	r3, [pc, #160]	; (800a5c4 <prvInsertBlockIntoFreeList+0xac>)
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	e002      	b.n	800a52c <prvInsertBlockIntoFreeList+0x14>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d8f7      	bhi.n	800a526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	4413      	add	r3, r2
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	429a      	cmp	r2, r3
 800a546:	d108      	bne.n	800a55a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	441a      	add	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	441a      	add	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d118      	bne.n	800a5a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	429a      	cmp	r2, r3
 800a578:	d00d      	beq.n	800a596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	441a      	add	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	e008      	b.n	800a5a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	e003      	b.n	800a5a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d002      	beq.n	800a5b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20005194 	.word	0x20005194
 800a5c8:	2000519c 	.word	0x2000519c

0800a5cc <__errno>:
 800a5cc:	4b01      	ldr	r3, [pc, #4]	; (800a5d4 <__errno+0x8>)
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20000048 	.word	0x20000048

0800a5d8 <__libc_init_array>:
 800a5d8:	b570      	push	{r4, r5, r6, lr}
 800a5da:	4d0d      	ldr	r5, [pc, #52]	; (800a610 <__libc_init_array+0x38>)
 800a5dc:	4c0d      	ldr	r4, [pc, #52]	; (800a614 <__libc_init_array+0x3c>)
 800a5de:	1b64      	subs	r4, r4, r5
 800a5e0:	10a4      	asrs	r4, r4, #2
 800a5e2:	2600      	movs	r6, #0
 800a5e4:	42a6      	cmp	r6, r4
 800a5e6:	d109      	bne.n	800a5fc <__libc_init_array+0x24>
 800a5e8:	4d0b      	ldr	r5, [pc, #44]	; (800a618 <__libc_init_array+0x40>)
 800a5ea:	4c0c      	ldr	r4, [pc, #48]	; (800a61c <__libc_init_array+0x44>)
 800a5ec:	f000 f99e 	bl	800a92c <_init>
 800a5f0:	1b64      	subs	r4, r4, r5
 800a5f2:	10a4      	asrs	r4, r4, #2
 800a5f4:	2600      	movs	r6, #0
 800a5f6:	42a6      	cmp	r6, r4
 800a5f8:	d105      	bne.n	800a606 <__libc_init_array+0x2e>
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a600:	4798      	blx	r3
 800a602:	3601      	adds	r6, #1
 800a604:	e7ee      	b.n	800a5e4 <__libc_init_array+0xc>
 800a606:	f855 3b04 	ldr.w	r3, [r5], #4
 800a60a:	4798      	blx	r3
 800a60c:	3601      	adds	r6, #1
 800a60e:	e7f2      	b.n	800a5f6 <__libc_init_array+0x1e>
 800a610:	0800c600 	.word	0x0800c600
 800a614:	0800c600 	.word	0x0800c600
 800a618:	0800c600 	.word	0x0800c600
 800a61c:	0800c604 	.word	0x0800c604

0800a620 <__retarget_lock_acquire_recursive>:
 800a620:	4770      	bx	lr

0800a622 <__retarget_lock_release_recursive>:
 800a622:	4770      	bx	lr

0800a624 <malloc>:
 800a624:	4b02      	ldr	r3, [pc, #8]	; (800a630 <malloc+0xc>)
 800a626:	4601      	mov	r1, r0
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f000 b885 	b.w	800a738 <_malloc_r>
 800a62e:	bf00      	nop
 800a630:	20000048 	.word	0x20000048

0800a634 <memcpy>:
 800a634:	440a      	add	r2, r1
 800a636:	4291      	cmp	r1, r2
 800a638:	f100 33ff 	add.w	r3, r0, #4294967295
 800a63c:	d100      	bne.n	800a640 <memcpy+0xc>
 800a63e:	4770      	bx	lr
 800a640:	b510      	push	{r4, lr}
 800a642:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a64a:	4291      	cmp	r1, r2
 800a64c:	d1f9      	bne.n	800a642 <memcpy+0xe>
 800a64e:	bd10      	pop	{r4, pc}

0800a650 <memset>:
 800a650:	4402      	add	r2, r0
 800a652:	4603      	mov	r3, r0
 800a654:	4293      	cmp	r3, r2
 800a656:	d100      	bne.n	800a65a <memset+0xa>
 800a658:	4770      	bx	lr
 800a65a:	f803 1b01 	strb.w	r1, [r3], #1
 800a65e:	e7f9      	b.n	800a654 <memset+0x4>

0800a660 <_free_r>:
 800a660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a662:	2900      	cmp	r1, #0
 800a664:	d044      	beq.n	800a6f0 <_free_r+0x90>
 800a666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a66a:	9001      	str	r0, [sp, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f1a1 0404 	sub.w	r4, r1, #4
 800a672:	bfb8      	it	lt
 800a674:	18e4      	addlt	r4, r4, r3
 800a676:	f000 f94d 	bl	800a914 <__malloc_lock>
 800a67a:	4a1e      	ldr	r2, [pc, #120]	; (800a6f4 <_free_r+0x94>)
 800a67c:	9801      	ldr	r0, [sp, #4]
 800a67e:	6813      	ldr	r3, [r2, #0]
 800a680:	b933      	cbnz	r3, 800a690 <_free_r+0x30>
 800a682:	6063      	str	r3, [r4, #4]
 800a684:	6014      	str	r4, [r2, #0]
 800a686:	b003      	add	sp, #12
 800a688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a68c:	f000 b948 	b.w	800a920 <__malloc_unlock>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d908      	bls.n	800a6a6 <_free_r+0x46>
 800a694:	6825      	ldr	r5, [r4, #0]
 800a696:	1961      	adds	r1, r4, r5
 800a698:	428b      	cmp	r3, r1
 800a69a:	bf01      	itttt	eq
 800a69c:	6819      	ldreq	r1, [r3, #0]
 800a69e:	685b      	ldreq	r3, [r3, #4]
 800a6a0:	1949      	addeq	r1, r1, r5
 800a6a2:	6021      	streq	r1, [r4, #0]
 800a6a4:	e7ed      	b.n	800a682 <_free_r+0x22>
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	b10b      	cbz	r3, 800a6b0 <_free_r+0x50>
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	d9fa      	bls.n	800a6a6 <_free_r+0x46>
 800a6b0:	6811      	ldr	r1, [r2, #0]
 800a6b2:	1855      	adds	r5, r2, r1
 800a6b4:	42a5      	cmp	r5, r4
 800a6b6:	d10b      	bne.n	800a6d0 <_free_r+0x70>
 800a6b8:	6824      	ldr	r4, [r4, #0]
 800a6ba:	4421      	add	r1, r4
 800a6bc:	1854      	adds	r4, r2, r1
 800a6be:	42a3      	cmp	r3, r4
 800a6c0:	6011      	str	r1, [r2, #0]
 800a6c2:	d1e0      	bne.n	800a686 <_free_r+0x26>
 800a6c4:	681c      	ldr	r4, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	6053      	str	r3, [r2, #4]
 800a6ca:	4421      	add	r1, r4
 800a6cc:	6011      	str	r1, [r2, #0]
 800a6ce:	e7da      	b.n	800a686 <_free_r+0x26>
 800a6d0:	d902      	bls.n	800a6d8 <_free_r+0x78>
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	e7d6      	b.n	800a686 <_free_r+0x26>
 800a6d8:	6825      	ldr	r5, [r4, #0]
 800a6da:	1961      	adds	r1, r4, r5
 800a6dc:	428b      	cmp	r3, r1
 800a6de:	bf04      	itt	eq
 800a6e0:	6819      	ldreq	r1, [r3, #0]
 800a6e2:	685b      	ldreq	r3, [r3, #4]
 800a6e4:	6063      	str	r3, [r4, #4]
 800a6e6:	bf04      	itt	eq
 800a6e8:	1949      	addeq	r1, r1, r5
 800a6ea:	6021      	streq	r1, [r4, #0]
 800a6ec:	6054      	str	r4, [r2, #4]
 800a6ee:	e7ca      	b.n	800a686 <_free_r+0x26>
 800a6f0:	b003      	add	sp, #12
 800a6f2:	bd30      	pop	{r4, r5, pc}
 800a6f4:	200051b8 	.word	0x200051b8

0800a6f8 <sbrk_aligned>:
 800a6f8:	b570      	push	{r4, r5, r6, lr}
 800a6fa:	4e0e      	ldr	r6, [pc, #56]	; (800a734 <sbrk_aligned+0x3c>)
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	6831      	ldr	r1, [r6, #0]
 800a700:	4605      	mov	r5, r0
 800a702:	b911      	cbnz	r1, 800a70a <sbrk_aligned+0x12>
 800a704:	f000 f8f6 	bl	800a8f4 <_sbrk_r>
 800a708:	6030      	str	r0, [r6, #0]
 800a70a:	4621      	mov	r1, r4
 800a70c:	4628      	mov	r0, r5
 800a70e:	f000 f8f1 	bl	800a8f4 <_sbrk_r>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	d00a      	beq.n	800a72c <sbrk_aligned+0x34>
 800a716:	1cc4      	adds	r4, r0, #3
 800a718:	f024 0403 	bic.w	r4, r4, #3
 800a71c:	42a0      	cmp	r0, r4
 800a71e:	d007      	beq.n	800a730 <sbrk_aligned+0x38>
 800a720:	1a21      	subs	r1, r4, r0
 800a722:	4628      	mov	r0, r5
 800a724:	f000 f8e6 	bl	800a8f4 <_sbrk_r>
 800a728:	3001      	adds	r0, #1
 800a72a:	d101      	bne.n	800a730 <sbrk_aligned+0x38>
 800a72c:	f04f 34ff 	mov.w	r4, #4294967295
 800a730:	4620      	mov	r0, r4
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	200051bc 	.word	0x200051bc

0800a738 <_malloc_r>:
 800a738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73c:	1ccd      	adds	r5, r1, #3
 800a73e:	f025 0503 	bic.w	r5, r5, #3
 800a742:	3508      	adds	r5, #8
 800a744:	2d0c      	cmp	r5, #12
 800a746:	bf38      	it	cc
 800a748:	250c      	movcc	r5, #12
 800a74a:	2d00      	cmp	r5, #0
 800a74c:	4607      	mov	r7, r0
 800a74e:	db01      	blt.n	800a754 <_malloc_r+0x1c>
 800a750:	42a9      	cmp	r1, r5
 800a752:	d905      	bls.n	800a760 <_malloc_r+0x28>
 800a754:	230c      	movs	r3, #12
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	2600      	movs	r6, #0
 800a75a:	4630      	mov	r0, r6
 800a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a760:	4e2e      	ldr	r6, [pc, #184]	; (800a81c <_malloc_r+0xe4>)
 800a762:	f000 f8d7 	bl	800a914 <__malloc_lock>
 800a766:	6833      	ldr	r3, [r6, #0]
 800a768:	461c      	mov	r4, r3
 800a76a:	bb34      	cbnz	r4, 800a7ba <_malloc_r+0x82>
 800a76c:	4629      	mov	r1, r5
 800a76e:	4638      	mov	r0, r7
 800a770:	f7ff ffc2 	bl	800a6f8 <sbrk_aligned>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	4604      	mov	r4, r0
 800a778:	d14d      	bne.n	800a816 <_malloc_r+0xde>
 800a77a:	6834      	ldr	r4, [r6, #0]
 800a77c:	4626      	mov	r6, r4
 800a77e:	2e00      	cmp	r6, #0
 800a780:	d140      	bne.n	800a804 <_malloc_r+0xcc>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	4631      	mov	r1, r6
 800a786:	4638      	mov	r0, r7
 800a788:	eb04 0803 	add.w	r8, r4, r3
 800a78c:	f000 f8b2 	bl	800a8f4 <_sbrk_r>
 800a790:	4580      	cmp	r8, r0
 800a792:	d13a      	bne.n	800a80a <_malloc_r+0xd2>
 800a794:	6821      	ldr	r1, [r4, #0]
 800a796:	3503      	adds	r5, #3
 800a798:	1a6d      	subs	r5, r5, r1
 800a79a:	f025 0503 	bic.w	r5, r5, #3
 800a79e:	3508      	adds	r5, #8
 800a7a0:	2d0c      	cmp	r5, #12
 800a7a2:	bf38      	it	cc
 800a7a4:	250c      	movcc	r5, #12
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f7ff ffa5 	bl	800a6f8 <sbrk_aligned>
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d02b      	beq.n	800a80a <_malloc_r+0xd2>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	442b      	add	r3, r5
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	e00e      	b.n	800a7d8 <_malloc_r+0xa0>
 800a7ba:	6822      	ldr	r2, [r4, #0]
 800a7bc:	1b52      	subs	r2, r2, r5
 800a7be:	d41e      	bmi.n	800a7fe <_malloc_r+0xc6>
 800a7c0:	2a0b      	cmp	r2, #11
 800a7c2:	d916      	bls.n	800a7f2 <_malloc_r+0xba>
 800a7c4:	1961      	adds	r1, r4, r5
 800a7c6:	42a3      	cmp	r3, r4
 800a7c8:	6025      	str	r5, [r4, #0]
 800a7ca:	bf18      	it	ne
 800a7cc:	6059      	strne	r1, [r3, #4]
 800a7ce:	6863      	ldr	r3, [r4, #4]
 800a7d0:	bf08      	it	eq
 800a7d2:	6031      	streq	r1, [r6, #0]
 800a7d4:	5162      	str	r2, [r4, r5]
 800a7d6:	604b      	str	r3, [r1, #4]
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f104 060b 	add.w	r6, r4, #11
 800a7de:	f000 f89f 	bl	800a920 <__malloc_unlock>
 800a7e2:	f026 0607 	bic.w	r6, r6, #7
 800a7e6:	1d23      	adds	r3, r4, #4
 800a7e8:	1af2      	subs	r2, r6, r3
 800a7ea:	d0b6      	beq.n	800a75a <_malloc_r+0x22>
 800a7ec:	1b9b      	subs	r3, r3, r6
 800a7ee:	50a3      	str	r3, [r4, r2]
 800a7f0:	e7b3      	b.n	800a75a <_malloc_r+0x22>
 800a7f2:	6862      	ldr	r2, [r4, #4]
 800a7f4:	42a3      	cmp	r3, r4
 800a7f6:	bf0c      	ite	eq
 800a7f8:	6032      	streq	r2, [r6, #0]
 800a7fa:	605a      	strne	r2, [r3, #4]
 800a7fc:	e7ec      	b.n	800a7d8 <_malloc_r+0xa0>
 800a7fe:	4623      	mov	r3, r4
 800a800:	6864      	ldr	r4, [r4, #4]
 800a802:	e7b2      	b.n	800a76a <_malloc_r+0x32>
 800a804:	4634      	mov	r4, r6
 800a806:	6876      	ldr	r6, [r6, #4]
 800a808:	e7b9      	b.n	800a77e <_malloc_r+0x46>
 800a80a:	230c      	movs	r3, #12
 800a80c:	603b      	str	r3, [r7, #0]
 800a80e:	4638      	mov	r0, r7
 800a810:	f000 f886 	bl	800a920 <__malloc_unlock>
 800a814:	e7a1      	b.n	800a75a <_malloc_r+0x22>
 800a816:	6025      	str	r5, [r4, #0]
 800a818:	e7de      	b.n	800a7d8 <_malloc_r+0xa0>
 800a81a:	bf00      	nop
 800a81c:	200051b8 	.word	0x200051b8

0800a820 <cleanup_glue>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	460c      	mov	r4, r1
 800a824:	6809      	ldr	r1, [r1, #0]
 800a826:	4605      	mov	r5, r0
 800a828:	b109      	cbz	r1, 800a82e <cleanup_glue+0xe>
 800a82a:	f7ff fff9 	bl	800a820 <cleanup_glue>
 800a82e:	4621      	mov	r1, r4
 800a830:	4628      	mov	r0, r5
 800a832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a836:	f7ff bf13 	b.w	800a660 <_free_r>
	...

0800a83c <_reclaim_reent>:
 800a83c:	4b2c      	ldr	r3, [pc, #176]	; (800a8f0 <_reclaim_reent+0xb4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4283      	cmp	r3, r0
 800a842:	b570      	push	{r4, r5, r6, lr}
 800a844:	4604      	mov	r4, r0
 800a846:	d051      	beq.n	800a8ec <_reclaim_reent+0xb0>
 800a848:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a84a:	b143      	cbz	r3, 800a85e <_reclaim_reent+0x22>
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d14a      	bne.n	800a8e8 <_reclaim_reent+0xac>
 800a852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a854:	6819      	ldr	r1, [r3, #0]
 800a856:	b111      	cbz	r1, 800a85e <_reclaim_reent+0x22>
 800a858:	4620      	mov	r0, r4
 800a85a:	f7ff ff01 	bl	800a660 <_free_r>
 800a85e:	6961      	ldr	r1, [r4, #20]
 800a860:	b111      	cbz	r1, 800a868 <_reclaim_reent+0x2c>
 800a862:	4620      	mov	r0, r4
 800a864:	f7ff fefc 	bl	800a660 <_free_r>
 800a868:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a86a:	b111      	cbz	r1, 800a872 <_reclaim_reent+0x36>
 800a86c:	4620      	mov	r0, r4
 800a86e:	f7ff fef7 	bl	800a660 <_free_r>
 800a872:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a874:	b111      	cbz	r1, 800a87c <_reclaim_reent+0x40>
 800a876:	4620      	mov	r0, r4
 800a878:	f7ff fef2 	bl	800a660 <_free_r>
 800a87c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a87e:	b111      	cbz	r1, 800a886 <_reclaim_reent+0x4a>
 800a880:	4620      	mov	r0, r4
 800a882:	f7ff feed 	bl	800a660 <_free_r>
 800a886:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a888:	b111      	cbz	r1, 800a890 <_reclaim_reent+0x54>
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7ff fee8 	bl	800a660 <_free_r>
 800a890:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a892:	b111      	cbz	r1, 800a89a <_reclaim_reent+0x5e>
 800a894:	4620      	mov	r0, r4
 800a896:	f7ff fee3 	bl	800a660 <_free_r>
 800a89a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a89c:	b111      	cbz	r1, 800a8a4 <_reclaim_reent+0x68>
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7ff fede 	bl	800a660 <_free_r>
 800a8a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8a6:	b111      	cbz	r1, 800a8ae <_reclaim_reent+0x72>
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f7ff fed9 	bl	800a660 <_free_r>
 800a8ae:	69a3      	ldr	r3, [r4, #24]
 800a8b0:	b1e3      	cbz	r3, 800a8ec <_reclaim_reent+0xb0>
 800a8b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	4798      	blx	r3
 800a8b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a8ba:	b1b9      	cbz	r1, 800a8ec <_reclaim_reent+0xb0>
 800a8bc:	4620      	mov	r0, r4
 800a8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8c2:	f7ff bfad 	b.w	800a820 <cleanup_glue>
 800a8c6:	5949      	ldr	r1, [r1, r5]
 800a8c8:	b941      	cbnz	r1, 800a8dc <_reclaim_reent+0xa0>
 800a8ca:	3504      	adds	r5, #4
 800a8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ce:	2d80      	cmp	r5, #128	; 0x80
 800a8d0:	68d9      	ldr	r1, [r3, #12]
 800a8d2:	d1f8      	bne.n	800a8c6 <_reclaim_reent+0x8a>
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7ff fec3 	bl	800a660 <_free_r>
 800a8da:	e7ba      	b.n	800a852 <_reclaim_reent+0x16>
 800a8dc:	680e      	ldr	r6, [r1, #0]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f7ff febe 	bl	800a660 <_free_r>
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	e7ef      	b.n	800a8c8 <_reclaim_reent+0x8c>
 800a8e8:	2500      	movs	r5, #0
 800a8ea:	e7ef      	b.n	800a8cc <_reclaim_reent+0x90>
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000048 	.word	0x20000048

0800a8f4 <_sbrk_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d06      	ldr	r5, [pc, #24]	; (800a910 <_sbrk_r+0x1c>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7f8 fa32 	bl	8002d68 <_sbrk>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_sbrk_r+0x1a>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_sbrk_r+0x1a>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	200051c0 	.word	0x200051c0

0800a914 <__malloc_lock>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__malloc_lock+0x8>)
 800a916:	f7ff be83 	b.w	800a620 <__retarget_lock_acquire_recursive>
 800a91a:	bf00      	nop
 800a91c:	200051b4 	.word	0x200051b4

0800a920 <__malloc_unlock>:
 800a920:	4801      	ldr	r0, [pc, #4]	; (800a928 <__malloc_unlock+0x8>)
 800a922:	f7ff be7e 	b.w	800a622 <__retarget_lock_release_recursive>
 800a926:	bf00      	nop
 800a928:	200051b4 	.word	0x200051b4

0800a92c <_init>:
 800a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92e:	bf00      	nop
 800a930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a932:	bc08      	pop	{r3}
 800a934:	469e      	mov	lr, r3
 800a936:	4770      	bx	lr

0800a938 <_fini>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	bf00      	nop
 800a93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93e:	bc08      	pop	{r3}
 800a940:	469e      	mov	lr, r3
 800a942:	4770      	bx	lr
