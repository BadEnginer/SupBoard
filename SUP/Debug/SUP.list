
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022b8  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba50  0800ba50  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba58  0800ba58  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba58  0800ba58  0001ba58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba5c  0800ba5c  0001ba5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ba60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050c8  20000080  0800bae0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20005148  0800bae0  00025148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb2a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041ca  00000000  00000000  0003ebda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001958  00000000  00000000  00042da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00044700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001963b  00000000  00000000  00045eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d290  00000000  00000000  0005f4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c79d  00000000  00000000  0007c77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118f18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fac  00000000  00000000  00118f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009780 	.word	0x08009780

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08009780 	.word	0x08009780

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4639      	mov	r1, r7
 8000ccc:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f008 fb8d 	bl	80093f4 <malloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	897a      	ldrh	r2, [r7, #10]
 8000ce8:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	1d9a      	adds	r2, r3, #6
 8000cee:	463b      	mov	r3, r7
 8000cf0:	cb03      	ldmia	r3!, {r0, r1}
 8000cf2:	6010      	str	r0, [r2, #0]
 8000cf4:	6051      	str	r1, [r2, #4]
	return pConfig;
 8000cf6:	697b      	ldr	r3, [r7, #20]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1d9a      	adds	r2, r3, #6
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	cb03      	ldmia	r3!, {r0, r1}
 8000d16:	6010      	str	r0, [r2, #0]
 8000d18:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ADS1115_updateConfig+0x60>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	82bb      	strh	r3, [r7, #20]
 8000d20:	2300      	movs	r3, #0
 8000d22:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000d34:	460b      	mov	r3, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f000 f891 	bl	8000e60 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2303      	movs	r3, #3
 8000d54:	f002 ffc2 	bl	8003cdc <HAL_I2C_Master_Transmit>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08009798 	.word	0x08009798

08000d64 <ADS1115_setThresholds>:

	return readValue;
}


void ADS1115_setThresholds(ADS1115_Handle_t *pConfig, int16_t lowValue, int16_t highValue){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
 8000d70:	4613      	mov	r3, r2
 8000d72:	803b      	strh	r3, [r7, #0]
	uint8_t ADSWrite[3] = { 0 };
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <ADS1115_setThresholds+0x80>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	81bb      	strh	r3, [r7, #12]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73bb      	strb	r3, [r7, #14]

	//hi threshold reg
	ADSWrite[0] = 0x03;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	733b      	strb	r3, [r7, #12]
	ADSWrite[1] = (uint8_t)((highValue & 0xFF00) >> 8);
 8000d82:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d86:	121b      	asrs	r3, r3, #8
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	737b      	strb	r3, [r7, #13]
	ADSWrite[2] = (uint8_t)(highValue & 0x00FF);
 8000d8c:	883b      	ldrh	r3, [r7, #0]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), ADSWrite, 3, 100);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	889b      	ldrh	r3, [r3, #4]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	b299      	uxth	r1, r3
 8000d9e:	f107 020c 	add.w	r2, r7, #12
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2303      	movs	r3, #3
 8000da8:	f002 ff98 	bl	8003cdc <HAL_I2C_Master_Transmit>

	//lo threshold reg
	ADSWrite[0] = 0x02;
 8000dac:	2302      	movs	r3, #2
 8000dae:	733b      	strb	r3, [r7, #12]
	ADSWrite[1] = (uint8_t)((lowValue & 0xFF00) >> 8);
 8000db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000db4:	121b      	asrs	r3, r3, #8
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	737b      	strb	r3, [r7, #13]
	ADSWrite[2] = (uint8_t)(lowValue & 0x00FF);
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), ADSWrite, 3, 100);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	889b      	ldrh	r3, [r3, #4]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	b299      	uxth	r1, r3
 8000dcc:	f107 020c 	add.w	r2, r7, #12
 8000dd0:	2364      	movs	r3, #100	; 0x64
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f002 ff81 	bl	8003cdc <HAL_I2C_Master_Transmit>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	08009798 	.word	0x08009798

08000de8 <ADS1115_setConversionReadyPin>:

void ADS1115_flushData(ADS1115_Handle_t* pConfig){
	ADS1115_getData(pConfig);
}

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	2100      	movs	r1, #0
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffb4 	bl	8000d64 <ADS1115_setThresholds>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <ADS1115_startContinousMode>:

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <ADS1115_startContinousMode+0x58>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	82bb      	strh	r3, [r7, #20]
 8000e12:	2300      	movs	r3, #0
 8000e14:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	3206      	adds	r2, #6
 8000e1e:	6810      	ldr	r0, [r2, #0]
 8000e20:	6851      	ldr	r1, [r2, #4]
 8000e22:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000e28:	f107 0014 	add.w	r0, r7, #20
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e34:	f000 f814 	bl	8000e60 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	889b      	ldrh	r3, [r3, #4]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	b299      	uxth	r1, r3
 8000e44:	f107 0214 	add.w	r2, r7, #20
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	f002 ff45 	bl	8003cdc <HAL_I2C_Master_Transmit>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	08009798 	.word	0x08009798

08000e60 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	e883 0006 	stmia.w	r3, {r1, r2}
	pOutFrame[0] = 0x01;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 6) | (config.pgaConfig << 3)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3301      	adds	r3, #1
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b25a      	sxtb	r2, r3
 8000e7c:	793b      	ldrb	r3, [r7, #4]
 8000e7e:	019b      	lsls	r3, r3, #6
 8000e80:	b259      	sxtb	r1, r3
 8000e82:	797b      	ldrb	r3, [r7, #5]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	430b      	orrs	r3, r1
 8000e92:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 6) | (config.pgaConfig << 3)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b25a      	sxtb	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b25a      	sxtb	r2, r3
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	015b      	lsls	r3, r3, #5
 8000eac:	b259      	sxtb	r1, r3
 8000eae:	7a3b      	ldrb	r3, [r7, #8]
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	b259      	sxtb	r1, r3
 8000eb8:	7a7b      	ldrb	r3, [r7, #9]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 8000ec2:	7abb      	ldrb	r3, [r7, #10]
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	b259      	sxtb	r1, r3
 8000ecc:	7afb      	ldrb	r3, [r7, #11]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b25a      	sxtb	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3302      	adds	r3, #2
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	701a      	strb	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <driver_delay_xms>:
#include "Display/e-ink/epaper.h"

void driver_delay_xms(unsigned long xms)	
{	
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
HAL_Delay(xms);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f001 ff5e 	bl	8002db8 <HAL_Delay>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Epaper_Spi_WriteByte>:


void Epaper_Spi_WriteByte(unsigned char TxData)
{				   			 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	extern SPI_HandleTypeDef hspi1;
	HAL_StatusTypeDef st;
	st = HAL_SPI_Receive(&hspi1, &TxData, sizeof(TxData), 10);
 8000f0e:	1df9      	adds	r1, r7, #7
 8000f10:	230a      	movs	r3, #10
 8000f12:	2201      	movs	r2, #1
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <Epaper_Spi_WriteByte+0x24>)
 8000f16:	f004 f9ba 	bl	800528e <HAL_SPI_Receive>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	73fb      	strb	r3, [r7, #15]


}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200005d4 	.word	0x200005d4

08000f2c <Epaper_READBUSY>:

void Epaper_READBUSY(void)
{ 
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  while(1)
  {	 //=1 BUSY
     if(isEPD_W21_BUSY==0) break;;
 8000f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <Epaper_READBUSY+0x1c>)
 8000f36:	f002 fd5b 	bl	80039f0 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d000      	beq.n	8000f42 <Epaper_READBUSY+0x16>
 8000f40:	e7f6      	b.n	8000f30 <Epaper_READBUSY+0x4>
 8000f42:	bf00      	nop
  }  
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40020400 	.word	0x40020400

08000f4c <Epaper_Write_Command>:

void Epaper_Write_Command(unsigned char cmd)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 8000f56:	2201      	movs	r2, #1
 8000f58:	2101      	movs	r1, #1
 8000f5a:	480d      	ldr	r0, [pc, #52]	; (8000f90 <Epaper_Write_Command+0x44>)
 8000f5c:	f002 fd60 	bl	8003a20 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	480a      	ldr	r0, [pc, #40]	; (8000f90 <Epaper_Write_Command+0x44>)
 8000f66:	f002 fd5b 	bl	8003a20 <HAL_GPIO_WritePin>
	EPD_W21_DC_0;  // D/C#   0:command  1:data
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <Epaper_Write_Command+0x44>)
 8000f70:	f002 fd56 	bl	8003a20 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(cmd);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ffc4 	bl	8000f04 <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <Epaper_Write_Command+0x44>)
 8000f82:	f002 fd4d 	bl	8003a20 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020400 	.word	0x40020400

08000f94 <Epaper_Write_Data>:

void Epaper_Write_Data(unsigned char data)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <Epaper_Write_Data+0x44>)
 8000fa4:	f002 fd3c 	bl	8003a20 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2101      	movs	r1, #1
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <Epaper_Write_Data+0x44>)
 8000fae:	f002 fd37 	bl	8003a20 <HAL_GPIO_WritePin>
	EPD_W21_DC_1;  // D/C#   0:command  1:data
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <Epaper_Write_Data+0x44>)
 8000fb8:	f002 fd32 	bl	8003a20 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(data);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffa0 	bl	8000f04 <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <Epaper_Write_Data+0x44>)
 8000fca:	f002 fd29 	bl	8003a20 <HAL_GPIO_WritePin>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020400 	.word	0x40020400

08000fdc <EPD_HW_Init>:
	
/////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

void EPD_HW_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	EPD_W21_RST_0;  // Module reset   
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4833      	ldr	r0, [pc, #204]	; (80010b4 <EPD_HW_Init+0xd8>)
 8000fe6:	f002 fd1b 	bl	8003a20 <HAL_GPIO_WritePin>
	driver_delay_xms(100);//At least 10ms delay 
 8000fea:	2064      	movs	r0, #100	; 0x64
 8000fec:	f7ff ff7f 	bl	8000eee <driver_delay_xms>
	EPD_W21_RST_1;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	482f      	ldr	r0, [pc, #188]	; (80010b4 <EPD_HW_Init+0xd8>)
 8000ff6:	f002 fd13 	bl	8003a20 <HAL_GPIO_WritePin>
	driver_delay_xms(100); //At least 10ms delay 
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f7ff ff77 	bl	8000eee <driver_delay_xms>
	
	Epaper_READBUSY();   
 8001000:	f7ff ff94 	bl	8000f2c <Epaper_READBUSY>
	Epaper_Write_Command(0x12);  //SWRESET
 8001004:	2012      	movs	r0, #18
 8001006:	f7ff ffa1 	bl	8000f4c <Epaper_Write_Command>
	Epaper_READBUSY();   
 800100a:	f7ff ff8f 	bl	8000f2c <Epaper_READBUSY>
		
	Epaper_Write_Command(0x01); //Driver output control      
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff ff9c 	bl	8000f4c <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 8001014:	2027      	movs	r0, #39	; 0x27
 8001016:	f7ff ffbd 	bl	8000f94 <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ffba 	bl	8000f94 <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ffb7 	bl	8000f94 <Epaper_Write_Data>

	Epaper_Write_Command(0x11); //data entry mode       
 8001026:	2011      	movs	r0, #17
 8001028:	f7ff ff90 	bl	8000f4c <Epaper_Write_Command>
	Epaper_Write_Data(0x01);
 800102c:	2001      	movs	r0, #1
 800102e:	f7ff ffb1 	bl	8000f94 <Epaper_Write_Data>

	Epaper_Write_Command(0x44); //set Ram-X address start/end position   
 8001032:	2044      	movs	r0, #68	; 0x44
 8001034:	f7ff ff8a 	bl	8000f4c <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff ffab 	bl	8000f94 <Epaper_Write_Data>
	Epaper_Write_Data(0x0F);    //0x0F-->(15+1)*8=128
 800103e:	200f      	movs	r0, #15
 8001040:	f7ff ffa8 	bl	8000f94 <Epaper_Write_Data>

	Epaper_Write_Command(0x45); //set Ram-Y address start/end position          
 8001044:	2045      	movs	r0, #69	; 0x45
 8001046:	f7ff ff81 	bl	8000f4c <Epaper_Write_Command>
	Epaper_Write_Data(0x27);   //0x0127-->(295+1)=296
 800104a:	2027      	movs	r0, #39	; 0x27
 800104c:	f7ff ffa2 	bl	8000f94 <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff ff9f 	bl	8000f94 <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff ff9c 	bl	8000f94 <Epaper_Write_Data>
	Epaper_Write_Data(0x00); 
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff ff99 	bl	8000f94 <Epaper_Write_Data>

	Epaper_Write_Command(0x3C); //BorderWavefrom
 8001062:	203c      	movs	r0, #60	; 0x3c
 8001064:	f7ff ff72 	bl	8000f4c <Epaper_Write_Command>
	Epaper_Write_Data(0x05);	
 8001068:	2005      	movs	r0, #5
 800106a:	f7ff ff93 	bl	8000f94 <Epaper_Write_Data>
	  	
  Epaper_Write_Command(0x18); //Read built-in temperature sensor
 800106e:	2018      	movs	r0, #24
 8001070:	f7ff ff6c 	bl	8000f4c <Epaper_Write_Command>
	Epaper_Write_Data(0x80);	
 8001074:	2080      	movs	r0, #128	; 0x80
 8001076:	f7ff ff8d 	bl	8000f94 <Epaper_Write_Data>
	
	Epaper_Write_Command(0x21); //  Display update control
 800107a:	2021      	movs	r0, #33	; 0x21
 800107c:	f7ff ff66 	bl	8000f4c <Epaper_Write_Command>
  Epaper_Write_Data(0x00);	
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff87 	bl	8000f94 <Epaper_Write_Data>
	Epaper_Write_Data(0x80);	
 8001086:	2080      	movs	r0, #128	; 0x80
 8001088:	f7ff ff84 	bl	8000f94 <Epaper_Write_Data>

	Epaper_Write_Command(0x4E);   // set RAM x address count to 0;
 800108c:	204e      	movs	r0, #78	; 0x4e
 800108e:	f7ff ff5d 	bl	8000f4c <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff ff7e 	bl	8000f94 <Epaper_Write_Data>
	Epaper_Write_Command(0x4F);   // set RAM y address count to 0X199;    
 8001098:	204f      	movs	r0, #79	; 0x4f
 800109a:	f7ff ff57 	bl	8000f4c <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 800109e:	2027      	movs	r0, #39	; 0x27
 80010a0:	f7ff ff78 	bl	8000f94 <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff75 	bl	8000f94 <Epaper_Write_Data>
  Epaper_READBUSY();
 80010aa:	f7ff ff3f 	bl	8000f2c <Epaper_READBUSY>
	
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020400 	.word	0x40020400

080010b8 <EPD_Update>:
/////////////////////////////////////////////////////////////////////////////////////////
void EPD_Update(void)
{   
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  Epaper_Write_Command(0x22); //Display Update Control
 80010bc:	2022      	movs	r0, #34	; 0x22
 80010be:	f7ff ff45 	bl	8000f4c <Epaper_Write_Command>
  Epaper_Write_Data(0xF7);   
 80010c2:	20f7      	movs	r0, #247	; 0xf7
 80010c4:	f7ff ff66 	bl	8000f94 <Epaper_Write_Data>
  Epaper_Write_Command(0x20);  //Activate Display Update Sequence
 80010c8:	2020      	movs	r0, #32
 80010ca:	f7ff ff3f 	bl	8000f4c <Epaper_Write_Command>
  Epaper_READBUSY();   
 80010ce:	f7ff ff2d 	bl	8000f2c <Epaper_READBUSY>

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <EPD_WhiteScreen_ALL>:
//////////////////////////////All screen update////////////////////////////////////////////
void EPD_WhiteScreen_ALL(const unsigned char *BW_datas,const unsigned char *R_datas)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
   unsigned int i;	
  Epaper_Write_Command(0x24);   //write RAM for black(0)/white (1)
 80010e0:	2024      	movs	r0, #36	; 0x24
 80010e2:	f7ff ff33 	bl	8000f4c <Epaper_Write_Command>
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e00a      	b.n	8001102 <EPD_WhiteScreen_ALL+0x2c>
   {               
     Epaper_Write_Data(*BW_datas);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff4f 	bl	8000f94 <Epaper_Write_Data>
			BW_datas++;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3301      	adds	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001108:	d3f0      	bcc.n	80010ec <EPD_WhiteScreen_ALL+0x16>
   }
	Epaper_Write_Command(0x26);   //write RAM for black(0)/white (1)
 800110a:	2026      	movs	r0, #38	; 0x26
 800110c:	f7ff ff1e 	bl	8000f4c <Epaper_Write_Command>
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e00c      	b.n	8001130 <EPD_WhiteScreen_ALL+0x5a>
   {               
     Epaper_Write_Data(~(*R_datas));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	43db      	mvns	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff38 	bl	8000f94 <Epaper_Write_Data>
			R_datas++;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	603b      	str	r3, [r7, #0]
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001136:	d3ee      	bcc.n	8001116 <EPD_WhiteScreen_ALL+0x40>
   }
   EPD_Update();	 
 8001138:	f7ff ffbe 	bl	80010b8 <EPD_Update>
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <EPD_DeepSleep>:
     Epaper_Write_Data(0x00);
   }
   EPD_Update();	 
}
void EPD_DeepSleep(void)
{  	
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  Epaper_Write_Command(0x10); //enter deep sleep
 8001148:	2010      	movs	r0, #16
 800114a:	f7ff feff 	bl	8000f4c <Epaper_Write_Command>
  Epaper_Write_Data(0x01); 
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff ff20 	bl	8000f94 <Epaper_Write_Data>
  driver_delay_xms(100);
 8001154:	2064      	movs	r0, #100	; 0x64
 8001156:	f7ff feca 	bl	8000eee <driver_delay_xms>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}

0800115e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af04      	add	r7, sp, #16
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2301      	movs	r3, #1
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2200      	movs	r2, #0
 8001188:	2178      	movs	r1, #120	; 0x78
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <ssd1306_WriteCommand+0x2c>)
 800118c:	f002 fea4 	bl	8003ed8 <HAL_I2C_Mem_Write>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000580 	.word	0x20000580

0800119c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f04f 32ff 	mov.w	r2, #4294967295
 80011ae:	9202      	str	r2, [sp, #8]
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	2240      	movs	r2, #64	; 0x40
 80011ba:	2178      	movs	r1, #120	; 0x78
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <ssd1306_WriteData+0x30>)
 80011be:	f002 fe8b 	bl	8003ed8 <HAL_I2C_Mem_Write>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000580 	.word	0x20000580

080011d0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80011d4:	f7ff ffc3 	bl	800115e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011d8:	2064      	movs	r0, #100	; 0x64
 80011da:	f001 fded 	bl	8002db8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 fa34 	bl	800164c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80011e4:	2020      	movs	r0, #32
 80011e6:	f7ff ffc1 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ffbe 	bl	800116c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011f0:	20b0      	movs	r0, #176	; 0xb0
 80011f2:	f7ff ffbb 	bl	800116c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80011f6:	20c8      	movs	r0, #200	; 0xc8
 80011f8:	f7ff ffb8 	bl	800116c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff ffb5 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001202:	2010      	movs	r0, #16
 8001204:	f7ff ffb2 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001208:	2040      	movs	r0, #64	; 0x40
 800120a:	f7ff ffaf 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800120e:	20ff      	movs	r0, #255	; 0xff
 8001210:	f000 fa09 	bl	8001626 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001214:	20a1      	movs	r0, #161	; 0xa1
 8001216:	f7ff ffa9 	bl	800116c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800121a:	20a6      	movs	r0, #166	; 0xa6
 800121c:	f7ff ffa6 	bl	800116c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001220:	20a8      	movs	r0, #168	; 0xa8
 8001222:	f7ff ffa3 	bl	800116c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001226:	203f      	movs	r0, #63	; 0x3f
 8001228:	f7ff ffa0 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800122c:	20a4      	movs	r0, #164	; 0xa4
 800122e:	f7ff ff9d 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001232:	20d3      	movs	r0, #211	; 0xd3
 8001234:	f7ff ff9a 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff97 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800123e:	20d5      	movs	r0, #213	; 0xd5
 8001240:	f7ff ff94 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001244:	20f0      	movs	r0, #240	; 0xf0
 8001246:	f7ff ff91 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800124a:	20d9      	movs	r0, #217	; 0xd9
 800124c:	f7ff ff8e 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001250:	2022      	movs	r0, #34	; 0x22
 8001252:	f7ff ff8b 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001256:	20da      	movs	r0, #218	; 0xda
 8001258:	f7ff ff88 	bl	800116c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800125c:	2012      	movs	r0, #18
 800125e:	f7ff ff85 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001262:	20db      	movs	r0, #219	; 0xdb
 8001264:	f7ff ff82 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001268:	2020      	movs	r0, #32
 800126a:	f7ff ff7f 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800126e:	208d      	movs	r0, #141	; 0x8d
 8001270:	f7ff ff7c 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001274:	2014      	movs	r0, #20
 8001276:	f7ff ff79 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800127a:	2001      	movs	r0, #1
 800127c:	f000 f9e6 	bl	800164c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f80f 	bl	80012a4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001286:	f000 f831 	bl	80012ec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <ssd1306_Init+0xd0>)
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <ssd1306_Init+0xd0>)
 8001292:	2200      	movs	r2, #0
 8001294:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001296:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <ssd1306_Init+0xd0>)
 8001298:	2201      	movs	r2, #1
 800129a:	711a      	strb	r2, [r3, #4]
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000049c 	.word	0x2000049c

080012a4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e00d      	b.n	80012d0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <ssd1306_Fill+0x1a>
 80012ba:	2100      	movs	r1, #0
 80012bc:	e000      	b.n	80012c0 <ssd1306_Fill+0x1c>
 80012be:	21ff      	movs	r1, #255	; 0xff
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <ssd1306_Fill+0x44>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	460a      	mov	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d6:	d3ed      	bcc.n	80012b4 <ssd1306_Fill+0x10>
    }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2000009c 	.word	0x2000009c

080012ec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	e016      	b.n	8001326 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3b50      	subs	r3, #80	; 0x50
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff34 	bl	800116c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff ff31 	bl	800116c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800130a:	2010      	movs	r0, #16
 800130c:	f7ff ff2e 	bl	800116c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <ssd1306_UpdateScreen+0x4c>)
 8001316:	4413      	add	r3, r2
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff3e 	bl	800119c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3301      	adds	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b07      	cmp	r3, #7
 800132a:	d9e5      	bls.n	80012f8 <ssd1306_UpdateScreen+0xc>
    }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000009c 	.word	0x2000009c

0800133c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	460b      	mov	r3, r1
 8001348:	71bb      	strb	r3, [r7, #6]
 800134a:	4613      	mov	r3, r2
 800134c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db3d      	blt.n	80013d2 <ssd1306_DrawPixel+0x96>
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	2b3f      	cmp	r3, #63	; 0x3f
 800135a:	d83a      	bhi.n	80013d2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d11a      	bne.n	8001398 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	b2d8      	uxtb	r0, r3
 800136a:	4603      	mov	r3, r0
 800136c:	01db      	lsls	r3, r3, #7
 800136e:	4413      	add	r3, r2
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <ssd1306_DrawPixel+0xa4>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	b25a      	sxtb	r2, r3
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	2101      	movs	r1, #1
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	b25b      	sxtb	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b259      	sxtb	r1, r3
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	4603      	mov	r3, r0
 800138c:	01db      	lsls	r3, r3, #7
 800138e:	4413      	add	r3, r2
 8001390:	b2c9      	uxtb	r1, r1
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <ssd1306_DrawPixel+0xa4>)
 8001394:	54d1      	strb	r1, [r2, r3]
 8001396:	e01d      	b.n	80013d4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	b2d8      	uxtb	r0, r3
 80013a0:	4603      	mov	r3, r0
 80013a2:	01db      	lsls	r3, r3, #7
 80013a4:	4413      	add	r3, r2
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <ssd1306_DrawPixel+0xa4>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	4013      	ands	r3, r2
 80013c0:	b259      	sxtb	r1, r3
 80013c2:	79fa      	ldrb	r2, [r7, #7]
 80013c4:	4603      	mov	r3, r0
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	4413      	add	r3, r2
 80013ca:	b2c9      	uxtb	r1, r1
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <ssd1306_DrawPixel+0xa4>)
 80013ce:	54d1      	strb	r1, [r2, r3]
 80013d0:	e000      	b.n	80013d4 <ssd1306_DrawPixel+0x98>
        return;
 80013d2:	bf00      	nop
    }
}
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000009c 	.word	0x2000009c

080013e4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4604      	mov	r4, r0
 80013ec:	1d38      	adds	r0, r7, #4
 80013ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80013f2:	461a      	mov	r2, r3
 80013f4:	4623      	mov	r3, r4
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	4613      	mov	r3, r2
 80013fa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b1f      	cmp	r3, #31
 8001400:	d902      	bls.n	8001408 <ssd1306_WriteChar+0x24>
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b7e      	cmp	r3, #126	; 0x7e
 8001406:	d901      	bls.n	800140c <ssd1306_WriteChar+0x28>
        return 0;
 8001408:	2300      	movs	r3, #0
 800140a:	e06d      	b.n	80014e8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800140c:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <ssd1306_WriteChar+0x10c>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	793b      	ldrb	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	2b80      	cmp	r3, #128	; 0x80
 8001418:	dc06      	bgt.n	8001428 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800141a:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <ssd1306_WriteChar+0x10c>)
 800141c:	885b      	ldrh	r3, [r3, #2]
 800141e:	461a      	mov	r2, r3
 8001420:	797b      	ldrb	r3, [r7, #5]
 8001422:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001424:	2b40      	cmp	r3, #64	; 0x40
 8001426:	dd01      	ble.n	800142c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001428:	2300      	movs	r3, #0
 800142a:	e05d      	b.n	80014e8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	e04c      	b.n	80014cc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	3b20      	subs	r3, #32
 8001438:	7979      	ldrb	r1, [r7, #5]
 800143a:	fb01 f303 	mul.w	r3, r1, r3
 800143e:	4619      	mov	r1, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	440b      	add	r3, r1
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	e034      	b.n	80014bc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d012      	beq.n	8001488 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <ssd1306_WriteChar+0x10c>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b2d8      	uxtb	r0, r3
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <ssd1306_WriteChar+0x10c>)
 8001472:	885b      	ldrh	r3, [r3, #2]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4413      	add	r3, r2
 800147c:	b2db      	uxtb	r3, r3
 800147e:	7bba      	ldrb	r2, [r7, #14]
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff ff5b 	bl	800133c <ssd1306_DrawPixel>
 8001486:	e016      	b.n	80014b6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <ssd1306_WriteChar+0x10c>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4413      	add	r3, r2
 8001494:	b2d8      	uxtb	r0, r3
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <ssd1306_WriteChar+0x10c>)
 8001498:	885b      	ldrh	r3, [r3, #2]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	b2d9      	uxtb	r1, r3
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf0c      	ite	eq
 80014aa:	2301      	moveq	r3, #1
 80014ac:	2300      	movne	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	f7ff ff43 	bl	800133c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	793b      	ldrb	r3, [r7, #4]
 80014be:	461a      	mov	r2, r3
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d3c5      	bcc.n	8001452 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	797b      	ldrb	r3, [r7, #5]
 80014ce:	461a      	mov	r2, r3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d3ad      	bcc.n	8001432 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <ssd1306_WriteChar+0x10c>)
 80014d8:	881a      	ldrh	r2, [r3, #0]
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <ssd1306_WriteChar+0x10c>)
 80014e4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3724      	adds	r7, #36	; 0x24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	2000049c 	.word	0x2000049c

080014f4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	1d38      	adds	r0, r7, #4
 80014fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8001502:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001504:	e012      	b.n	800152c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	7818      	ldrb	r0, [r3, #0]
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	1d3a      	adds	r2, r7, #4
 800150e:	ca06      	ldmia	r2, {r1, r2}
 8001510:	f7ff ff68 	bl	80013e4 <ssd1306_WriteChar>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d002      	beq.n	8001526 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	e008      	b.n	8001538 <ssd1306_WriteString+0x44>
        }
        str++;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3301      	adds	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1e8      	bne.n	8001506 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	781b      	ldrb	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <ssd1306_SetCursor+0x2c>)
 8001556:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <ssd1306_SetCursor+0x2c>)
 800155e:	805a      	strh	r2, [r3, #2]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	2000049c 	.word	0x2000049c

08001570 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	603a      	str	r2, [r7, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	460b      	mov	r3, r1
 8001580:	71bb      	strb	r3, [r7, #6]
 8001582:	4613      	mov	r3, r2
 8001584:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001586:	797b      	ldrb	r3, [r7, #5]
 8001588:	3307      	adds	r3, #7
 800158a:	2b00      	cmp	r3, #0
 800158c:	da00      	bge.n	8001590 <ssd1306_DrawBitmap+0x20>
 800158e:	3307      	adds	r3, #7
 8001590:	10db      	asrs	r3, r3, #3
 8001592:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db3e      	blt.n	800161e <ssd1306_DrawBitmap+0xae>
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	2b3f      	cmp	r3, #63	; 0x3f
 80015a4:	d83b      	bhi.n	800161e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	73bb      	strb	r3, [r7, #14]
 80015aa:	e033      	b.n	8001614 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	737b      	strb	r3, [r7, #13]
 80015b0:	e026      	b.n	8001600 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80015b2:	7b7b      	ldrb	r3, [r7, #13]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e00d      	b.n	80015e0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	7b7a      	ldrb	r2, [r7, #13]
 80015d0:	08d2      	lsrs	r2, r2, #3
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	4413      	add	r3, r2
 80015d6:	461a      	mov	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80015e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da08      	bge.n	80015fa <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80015e8:	79fa      	ldrb	r2, [r7, #7]
 80015ea:	7b7b      	ldrb	r3, [r7, #13]
 80015ec:	4413      	add	r3, r2
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	7f3a      	ldrb	r2, [r7, #28]
 80015f2:	79b9      	ldrb	r1, [r7, #6]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fea1 	bl	800133c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80015fa:	7b7b      	ldrb	r3, [r7, #13]
 80015fc:	3301      	adds	r3, #1
 80015fe:	737b      	strb	r3, [r7, #13]
 8001600:	7b7a      	ldrb	r2, [r7, #13]
 8001602:	797b      	ldrb	r3, [r7, #5]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3d4      	bcc.n	80015b2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	3301      	adds	r3, #1
 800160c:	73bb      	strb	r3, [r7, #14]
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	3301      	adds	r3, #1
 8001612:	71bb      	strb	r3, [r7, #6]
 8001614:	7bba      	ldrb	r2, [r7, #14]
 8001616:	7e3b      	ldrb	r3, [r7, #24]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3c7      	bcc.n	80015ac <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800161c:	e000      	b.n	8001620 <ssd1306_DrawBitmap+0xb0>
        return;
 800161e:	bf00      	nop
}
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001630:	2381      	movs	r3, #129	; 0x81
 8001632:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fd98 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd94 	bl	800116c <ssd1306_WriteCommand>
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800165c:	23af      	movs	r3, #175	; 0xaf
 800165e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <ssd1306_SetDisplayOn+0x38>)
 8001662:	2201      	movs	r2, #1
 8001664:	715a      	strb	r2, [r3, #5]
 8001666:	e004      	b.n	8001672 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001668:	23ae      	movs	r3, #174	; 0xae
 800166a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <ssd1306_SetDisplayOn+0x38>)
 800166e:	2200      	movs	r2, #0
 8001670:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fd79 	bl	800116c <ssd1306_WriteCommand>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000049c 	.word	0x2000049c

08001688 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 800168e:	f003 fd2f 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 8001692:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <ARGB_Init+0xd8>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <ARGB_Init+0x1c>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <ARGB_Init+0x1e>
 80016a4:	2302      	movs	r3, #2
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	4a2b      	ldr	r2, [pc, #172]	; (8001764 <ARGB_Init+0xdc>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <ARGB_Init+0xe0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <ARGB_Init+0xe0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <ARGB_Init+0xe0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2201      	movs	r2, #1
 80016da:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7fe fec1 	bl	8000464 <__aeabi_ui2d>
 80016e2:	a31b      	add	r3, pc, #108	; (adr r3, 8001750 <ARGB_Init+0xc8>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ff36 	bl	8000558 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f942 	bl	800097c <__aeabi_d2uiz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <ARGB_Init+0xe4>)
 8001702:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7fe fead 	bl	8000464 <__aeabi_ui2d>
 800170a:	a313      	add	r3, pc, #76	; (adr r3, 8001758 <ARGB_Init+0xd0>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff22 	bl	8000558 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff f92e 	bl	800097c <__aeabi_d2uiz>
 8001720:	4603      	mov	r3, r0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <ARGB_Init+0xe8>)
 800172a:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <ARGB_Init+0xec>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <ARGB_Init+0xe0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	2104      	movs	r1, #4
 800173a:	4618      	mov	r0, r3
 800173c:	f004 ffde 	bl	80066fc <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001740:	2001      	movs	r0, #1
 8001742:	f001 fb39 	bl	8002db8 <HAL_Delay>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	1eb851ec 	.word	0x1eb851ec
 8001754:	3fe1eb85 	.word	0x3fe1eb85
 8001758:	1eb851ec 	.word	0x1eb851ec
 800175c:	3fd1eb85 	.word	0x3fd1eb85
 8001760:	40023800 	.word	0x40023800
 8001764:	014f8b59 	.word	0x014f8b59
 8001768:	2000062c 	.word	0x2000062c
 800176c:	200004a2 	.word	0x200004a2
 8001770:	200004a3 	.word	0x200004a3
 8001774:	2000057e 	.word	0x2000057e

08001778 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2000      	movs	r0, #0
 8001782:	f000 f8d1 	bl	8001928 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <ARGB_SetBrightness+0x1c>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	7013      	strb	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000008 	.word	0x20000008

080017ac <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4604      	mov	r4, r0
 80017b4:	4608      	mov	r0, r1
 80017b6:	4611      	mov	r1, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	80fb      	strh	r3, [r7, #6]
 80017be:	4603      	mov	r3, r0
 80017c0:	717b      	strb	r3, [r7, #5]
 80017c2:	460b      	mov	r3, r1
 80017c4:	713b      	strb	r3, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	d908      	bls.n	80017e2 <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	88fa      	ldrh	r2, [r7, #6]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <ARGB_SetRGB+0xdc>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80017f2:	797a      	ldrb	r2, [r7, #5]
 80017f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80017f8:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <ARGB_SetRGB+0xdc>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001806:	fb92 f3f3 	sdiv	r3, r2, r3
 800180a:	793a      	ldrb	r2, [r7, #4]
 800180c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001810:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <ARGB_SetRGB+0xdc>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	fb92 f3f3 	sdiv	r3, r2, r3
 8001828:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 800182a:	793b      	ldrb	r3, [r7, #4]
 800182c:	21b0      	movs	r1, #176	; 0xb0
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fa3e 	bl	8001cb0 <scale8>
 8001834:	4603      	mov	r3, r0
 8001836:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	21f0      	movs	r1, #240	; 0xf0
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fa37 	bl	8001cb0 <scale8>
 8001842:	4603      	mov	r3, r0
 8001844:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8001846:	793b      	ldrb	r3, [r7, #4]
 8001848:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 800184a:	797b      	ldrb	r3, [r7, #5]
 800184c:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8001852:	88fa      	ldrh	r2, [r7, #6]
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	490c      	ldr	r1, [pc, #48]	; (800188c <ARGB_SetRGB+0xe0>)
 800185c:	7b7a      	ldrb	r2, [r7, #13]
 800185e:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8001860:	88fa      	ldrh	r2, [r7, #6]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	3301      	adds	r3, #1
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <ARGB_SetRGB+0xe0>)
 800186c:	7b3a      	ldrb	r2, [r7, #12]
 800186e:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8001870:	88fa      	ldrh	r2, [r7, #6]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	3302      	adds	r3, #2
 800187a:	4904      	ldr	r1, [pc, #16]	; (800188c <ARGB_SetRGB+0xe0>)
 800187c:	7afa      	ldrb	r2, [r7, #11]
 800187e:	54ca      	strb	r2, [r1, r3]
#endif
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	20000008 	.word	0x20000008
 800188c:	200004a4 	.word	0x200004a4

08001890 <ARGB_SetHSV>:
 * @param[in] i LED position
 * @param[in] hue HUE (color) [0..255]
 * @param[in] sat Saturation  [0..255]
 * @param[in] val Value (brightness) [0..255]
 */
void ARGB_SetHSV(u16_t i, u8_t hue, u8_t sat, u8_t val) {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b087      	sub	sp, #28
 8001894:	af02      	add	r7, sp, #8
 8001896:	4604      	mov	r4, r0
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4623      	mov	r3, r4
 80018a0:	80fb      	strh	r3, [r7, #6]
 80018a2:	4603      	mov	r3, r0
 80018a4:	717b      	strb	r3, [r7, #5]
 80018a6:	460b      	mov	r3, r1
 80018a8:	713b      	strb	r3, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	70fb      	strb	r3, [r7, #3]
    uint8_t _r, _g, _b;                    // init buffer color
    HSV2RGB(hue, sat, val, &_r, &_g, &_b); // get RGB color
 80018ae:	f107 040f 	add.w	r4, r7, #15
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	7939      	ldrb	r1, [r7, #4]
 80018b6:	7978      	ldrb	r0, [r7, #5]
 80018b8:	f107 030d 	add.w	r3, r7, #13
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	f107 030e 	add.w	r3, r7, #14
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4623      	mov	r3, r4
 80018c6:	f000 fa07 	bl	8001cd8 <HSV2RGB>
    ARGB_SetRGB(i, _r, _g, _b);     // set color
 80018ca:	7bf9      	ldrb	r1, [r7, #15]
 80018cc:	7bba      	ldrb	r2, [r7, #14]
 80018ce:	7b7b      	ldrb	r3, [r7, #13]
 80018d0:	88f8      	ldrh	r0, [r7, #6]
 80018d2:	f7ff ff6b 	bl	80017ac <ARGB_SetRGB>
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd90      	pop	{r4, r7, pc}
	...

080018e0 <ARGB_SetWhite>:
/**
 * @brief Set White component in strip by index
 * @param[in] i LED position
 * @param[in] w White component [0..255]
 */
void ARGB_SetWhite(u16_t i, u8_t w) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	460a      	mov	r2, r1
 80018ea:	80fb      	strh	r3, [r7, #6]
 80018ec:	4613      	mov	r3, r2
 80018ee:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); // set brightness
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <ARGB_SetWhite+0x40>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001900:	797a      	ldrb	r2, [r7, #5]
 8001902:	fb92 f3f3 	sdiv	r3, r2, r3
 8001906:	717b      	strb	r3, [r7, #5]
    RGB_BUF[4 * i + 3] = w;                // set white part
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	3303      	adds	r3, #3
 800190e:	4905      	ldr	r1, [pc, #20]	; (8001924 <ARGB_SetWhite+0x44>)
 8001910:	797a      	ldrb	r2, [r7, #5]
 8001912:	54ca      	strb	r2, [r1, r3]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	20000008 	.word	0x20000008
 8001924:	200004a4 	.word	0x200004a4

08001928 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	460b      	mov	r3, r1
 8001934:	71bb      	strb	r3, [r7, #6]
 8001936:	4613      	mov	r3, r2
 8001938:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800193a:	2300      	movs	r3, #0
 800193c:	81fb      	strh	r3, [r7, #14]
 800193e:	e00b      	b.n	8001958 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	b298      	uxth	r0, r3
 8001944:	797b      	ldrb	r3, [r7, #5]
 8001946:	79ba      	ldrb	r2, [r7, #6]
 8001948:	79f9      	ldrb	r1, [r7, #7]
 800194a:	f7ff ff2f 	bl	80017ac <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	b29b      	uxth	r3, r3
 8001952:	3301      	adds	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	81fb      	strh	r3, [r7, #14]
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	b29b      	uxth	r3, r3
 800195c:	2b07      	cmp	r3, #7
 800195e:	d9ef      	bls.n	8001940 <ARGB_FillRGB+0x18>
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <ARGB_FillWhite>:

/**
 * @brief Set ALL White components in strip
 * @param[in] w White component [0..255]
 */
void ARGB_FillWhite(u8_t w) {
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	81fb      	strh	r3, [r7, #14]
 8001978:	e00b      	b.n	8001992 <ARGB_FillWhite+0x28>
        ARGB_SetWhite(i, w);
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	b29b      	uxth	r3, r3
 800197e:	79fa      	ldrb	r2, [r7, #7]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ffac 	bl	80018e0 <ARGB_SetWhite>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001988:	89fb      	ldrh	r3, [r7, #14]
 800198a:	b29b      	uxth	r3, r3
 800198c:	3301      	adds	r3, #1
 800198e:	b29b      	uxth	r3, r3
 8001990:	81fb      	strh	r3, [r7, #14]
 8001992:	89fb      	ldrh	r3, [r7, #14]
 8001994:	b29b      	uxth	r3, r3
 8001996:	2b07      	cmp	r3, #7
 8001998:	d9ef      	bls.n	800197a <ARGB_FillWhite+0x10>
}
 800199a:	bf00      	nop
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <ARGB_Ready>:
/**
 * @brief Get current DMA status
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Ready(void) {
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
    return ARGB_LOC_ST;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <ARGB_Ready+0x14>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	2000057e 	.word	0x2000057e

080019bc <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 80019c2:	4b9d      	ldr	r3, [pc, #628]	; (8001c38 <ARGB_Show+0x27c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 80019c8:	4b9c      	ldr	r3, [pc, #624]	; (8001c3c <ARGB_Show+0x280>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <ARGB_Show+0x22>
 80019d2:	4b9b      	ldr	r3, [pc, #620]	; (8001c40 <ARGB_Show+0x284>)
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <ARGB_Show+0x26>
        return ARGB_BUSY;
 80019de:	2300      	movs	r3, #0
 80019e0:	e15e      	b.n	8001ca0 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	e0a6      	b.n	8001b36 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019e8:	4b96      	ldr	r3, [pc, #600]	; (8001c44 <ARGB_Show+0x288>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dd04      	ble.n	8001a0a <ARGB_Show+0x4e>
 8001a00:	4b91      	ldr	r3, [pc, #580]	; (8001c48 <ARGB_Show+0x28c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	e003      	b.n	8001a12 <ARGB_Show+0x56>
 8001a0a:	4b90      	ldr	r3, [pc, #576]	; (8001c4c <ARGB_Show+0x290>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4619      	mov	r1, r3
 8001a18:	4b8d      	ldr	r3, [pc, #564]	; (8001c50 <ARGB_Show+0x294>)
 8001a1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a1e:	4b89      	ldr	r3, [pc, #548]	; (8001c44 <ARGB_Show+0x288>)
 8001a20:	785b      	ldrb	r3, [r3, #1]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	dd04      	ble.n	8001a40 <ARGB_Show+0x84>
 8001a36:	4b84      	ldr	r3, [pc, #528]	; (8001c48 <ARGB_Show+0x28c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	e003      	b.n	8001a48 <ARGB_Show+0x8c>
 8001a40:	4b82      	ldr	r3, [pc, #520]	; (8001c4c <ARGB_Show+0x290>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4619      	mov	r1, r3
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	4a80      	ldr	r2, [pc, #512]	; (8001c50 <ARGB_Show+0x294>)
 8001a50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a54:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <ARGB_Show+0x288>)
 8001a56:	789b      	ldrb	r3, [r3, #2]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	dd04      	ble.n	8001a76 <ARGB_Show+0xba>
 8001a6c:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <ARGB_Show+0x28c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	e003      	b.n	8001a7e <ARGB_Show+0xc2>
 8001a76:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <ARGB_Show+0x290>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	3310      	adds	r3, #16
 8001a84:	4a72      	ldr	r2, [pc, #456]	; (8001c50 <ARGB_Show+0x294>)
 8001a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a8a:	4b6e      	ldr	r3, [pc, #440]	; (8001c44 <ARGB_Show+0x288>)
 8001a8c:	78db      	ldrb	r3, [r3, #3]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	dd04      	ble.n	8001aac <ARGB_Show+0xf0>
 8001aa2:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <ARGB_Show+0x28c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	e003      	b.n	8001ab4 <ARGB_Show+0xf8>
 8001aac:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <ARGB_Show+0x290>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3318      	adds	r3, #24
 8001aba:	4a65      	ldr	r2, [pc, #404]	; (8001c50 <ARGB_Show+0x294>)
 8001abc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ac0:	4b60      	ldr	r3, [pc, #384]	; (8001c44 <ARGB_Show+0x288>)
 8001ac2:	791b      	ldrb	r3, [r3, #4]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	dd04      	ble.n	8001ae2 <ARGB_Show+0x126>
 8001ad8:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <ARGB_Show+0x28c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4619      	mov	r1, r3
 8001ae0:	e003      	b.n	8001aea <ARGB_Show+0x12e>
 8001ae2:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <ARGB_Show+0x290>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3320      	adds	r3, #32
 8001af0:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <ARGB_Show+0x294>)
 8001af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001af6:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <ARGB_Show+0x288>)
 8001af8:	795b      	ldrb	r3, [r3, #5]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	dd04      	ble.n	8001b18 <ARGB_Show+0x15c>
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <ARGB_Show+0x28c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	e003      	b.n	8001b20 <ARGB_Show+0x164>
 8001b18:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <ARGB_Show+0x290>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4619      	mov	r1, r3
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3328      	adds	r3, #40	; 0x28
 8001b26:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <ARGB_Show+0x294>)
 8001b28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b07      	cmp	r3, #7
 8001b3c:	f67f af54 	bls.w	80019e8 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b44:	e0a4      	b.n	8001c90 <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <ARGB_Show+0x298>)
 8001b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d102      	bne.n	8001b58 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
 8001b54:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b56:	e09b      	b.n	8001c90 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <ARGB_Show+0x298>)
 8001b5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d11d      	bne.n	8001ba0 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b64:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <ARGB_Show+0x298>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <ARGB_Show+0x298>)
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	4a39      	ldr	r2, [pc, #228]	; (8001c58 <ARGB_Show+0x29c>)
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8001b74:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <ARGB_Show+0x298>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <ARGB_Show+0x2a0>)
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <ARGB_Show+0x298>)
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	4a37      	ldr	r2, [pc, #220]	; (8001c60 <ARGB_Show+0x2a4>)
 8001b82:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <ARGB_Show+0x298>)
 8001b86:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001b88:	4931      	ldr	r1, [pc, #196]	; (8001c50 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <ARGB_Show+0x298>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b90:	461a      	mov	r2, r3
 8001b92:	2330      	movs	r3, #48	; 0x30
 8001b94:	f001 fac4 	bl	8003120 <HAL_DMA_Start_IT>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <ARGB_Show+0x1f0>
 8001b9e:	e002      	b.n	8001ba6 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
                continue;
 8001ba4:	e074      	b.n	8001c90 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
                continue;
 8001baa:	e071      	b.n	8001c90 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <ARGB_Show+0x298>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <ARGB_Show+0x298>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bba:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <ARGB_Show+0x298>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <ARGB_Show+0x2a8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d107      	bne.n	8001bd6 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <ARGB_Show+0x298>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <ARGB_Show+0x298>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <ARGB_Show+0x298>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <ARGB_Show+0x2a8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d018      	beq.n	8001c12 <ARGB_Show+0x256>
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <ARGB_Show+0x298>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be8:	d013      	beq.n	8001c12 <ARGB_Show+0x256>
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <ARGB_Show+0x298>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <ARGB_Show+0x2ac>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00e      	beq.n	8001c12 <ARGB_Show+0x256>
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <ARGB_Show+0x298>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <ARGB_Show+0x2b0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d009      	beq.n	8001c12 <ARGB_Show+0x256>
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <ARGB_Show+0x298>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <ARGB_Show+0x2b4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d004      	beq.n	8001c12 <ARGB_Show+0x256>
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <ARGB_Show+0x298>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <ARGB_Show+0x2b8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d132      	bne.n	8001c78 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <ARGB_Show+0x298>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b06      	cmp	r3, #6
 8001c22:	d032      	beq.n	8001c8a <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <ARGB_Show+0x298>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <ARGB_Show+0x298>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c34:	e029      	b.n	8001c8a <ARGB_Show+0x2ce>
 8001c36:	bf00      	nop
 8001c38:	2000057e 	.word	0x2000057e
 8001c3c:	2000057c 	.word	0x2000057c
 8001c40:	20000674 	.word	0x20000674
 8001c44:	200004a4 	.word	0x200004a4
 8001c48:	200004a2 	.word	0x200004a2
 8001c4c:	200004a3 	.word	0x200004a3
 8001c50:	200004bc 	.word	0x200004bc
 8001c54:	2000062c 	.word	0x2000062c
 8001c58:	08001f11 	.word	0x08001f11
 8001c5c:	080021c1 	.word	0x080021c1
 8001c60:	0800611f 	.word	0x0800611f
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800
 8001c70:	40000c00 	.word	0x40000c00
 8001c74:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <ARGB_Show+0x2ec>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <ARGB_Show+0x2ec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e000      	b.n	8001c8c <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c8a:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f47f af57 	bne.w	8001b46 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <ARGB_Show+0x2f0>)
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001c9e:	2302      	movs	r3, #2
    }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	2000062c 	.word	0x2000062c
 8001cac:	2000057c 	.word	0x2000057c

08001cb0 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460a      	mov	r2, r1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	79ba      	ldrb	r2, [r7, #6]
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	121b      	asrs	r3, r3, #8
 8001cca:	b2db      	uxtb	r3, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HSV2RGB>:
 * @param[in] val Value (brightness) [0..255]
 * @param[out] _r Pointer to RED component value
 * @param[out] _g Pointer to GREEN component value
 * @param[out] _b Pointer to BLUE component value
 */
static void HSV2RGB(u8_t hue, u8_t sat, u8_t val, u8_t *_r, u8_t *_g, u8_t *_b) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	71bb      	strb	r3, [r7, #6]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	717b      	strb	r3, [r7, #5]
    if (sat == 0) { // if white color
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <HSV2RGB+0x32>
        *_r = *_g = *_b = val;
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	797a      	ldrb	r2, [r7, #5]
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	701a      	strb	r2, [r3, #0]
        return;
 8001d08:	e0f4      	b.n	8001ef4 <HSV2RGB+0x21c>
    }
    // Float is smoother but check for FPU (Floating point unit) in your MCU
    // Otherwise it will take longer time in the code
    // FPU is in: F3/L3 and greater
    // Src: https://github.com/Inseckto/HSV-to-RGB
    float h = (float)hue / 255;
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d14:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8001f08 <HSV2RGB+0x230>
 8001d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d1c:	edc7 7a07 	vstr	s15, [r7, #28]
    float s = (float)sat / 255;
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d2a:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001f08 <HSV2RGB+0x230>
 8001d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d32:	edc7 7a06 	vstr	s15, [r7, #24]
    float v = (float)val / 255;
 8001d36:	797b      	ldrb	r3, [r7, #5]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d40:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001f08 <HSV2RGB+0x230>
 8001d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d48:	edc7 7a05 	vstr	s15, [r7, #20]

    int i = (int)floorf(h * 6);
 8001d4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d50:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d58:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5c:	f007 fcce 	bl	80096fc <floorf>
 8001d60:	eef0 7a40 	vmov.f32	s15, s0
 8001d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d68:	ee17 3a90 	vmov	r3, s15
 8001d6c:	613b      	str	r3, [r7, #16]
    float f = h * 6 - (float)i;
 8001d6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d72:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001d76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d88:	edc7 7a03 	vstr	s15, [r7, #12]
    u8_t p = (u8_t)(v * (1 - s) * 255.0);
 8001d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da0:	ee17 0a90 	vmov	r0, s15
 8001da4:	f7fe fb80 	bl	80004a8 <__aeabi_f2d>
 8001da8:	a355      	add	r3, pc, #340	; (adr r3, 8001f00 <HSV2RGB+0x228>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fbd3 	bl	8000558 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe fddf 	bl	800097c <__aeabi_d2uiz>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	72fb      	strb	r3, [r7, #11]
    u8_t q = (u8_t)(v * (1 - f * s) * 255.0);
 8001dc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dde:	ee17 0a90 	vmov	r0, s15
 8001de2:	f7fe fb61 	bl	80004a8 <__aeabi_f2d>
 8001de6:	a346      	add	r3, pc, #280	; (adr r3, 8001f00 <HSV2RGB+0x228>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fbb4 	bl	8000558 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fdc0 	bl	800097c <__aeabi_d2uiz>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	72bb      	strb	r3, [r7, #10]
    u8_t t = (u8_t)(v * (1 - (1 - f) * s)*255.0);
 8001e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e24:	ee17 0a90 	vmov	r0, s15
 8001e28:	f7fe fb3e 	bl	80004a8 <__aeabi_f2d>
 8001e2c:	a334      	add	r3, pc, #208	; (adr r3, 8001f00 <HSV2RGB+0x228>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	f7fe fb91 	bl	8000558 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fd9d 	bl	800097c <__aeabi_d2uiz>
 8001e42:	4603      	mov	r3, r0
 8001e44:	727b      	strb	r3, [r7, #9]

    switch (i % 6) {
 8001e46:	6939      	ldr	r1, [r7, #16]
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HSV2RGB+0x234>)
 8001e4a:	fb83 3201 	smull	r3, r2, r3, r1
 8001e4e:	17cb      	asrs	r3, r1, #31
 8001e50:	1ad2      	subs	r2, r2, r3
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	1aca      	subs	r2, r1, r3
 8001e5c:	2a04      	cmp	r2, #4
 8001e5e:	d83f      	bhi.n	8001ee0 <HSV2RGB+0x208>
 8001e60:	a301      	add	r3, pc, #4	; (adr r3, 8001e68 <HSV2RGB+0x190>)
 8001e62:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001e7d 	.word	0x08001e7d
 8001e6c:	08001e91 	.word	0x08001e91
 8001e70:	08001ea5 	.word	0x08001ea5
 8001e74:	08001eb9 	.word	0x08001eb9
 8001e78:	08001ecd 	.word	0x08001ecd
//    uint8_t rem = (hue - (reg * 43)) * 6;
//    uint8_t p = (val * (255 - sat)) >> 8;
//    uint8_t q = (val * (255 - ((sat * rem) >> 8))) >> 8;
//    uint8_t t = (val * (255 - ((sat * (255 - rem)) >> 8))) >> 8;
//    switch (reg) {
        case 0: *_r = val, *_g = t, *_b = p; break;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	797a      	ldrb	r2, [r7, #5]
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	7a7a      	ldrb	r2, [r7, #9]
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	7afa      	ldrb	r2, [r7, #11]
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e031      	b.n	8001ef4 <HSV2RGB+0x21c>
        case 1: *_r = q, *_g = val, *_b = p; break;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	7aba      	ldrb	r2, [r7, #10]
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e98:	797a      	ldrb	r2, [r7, #5]
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	7afa      	ldrb	r2, [r7, #11]
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e027      	b.n	8001ef4 <HSV2RGB+0x21c>
        case 2: *_r = p, *_g = val, *_b = t; break;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	7afa      	ldrb	r2, [r7, #11]
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	797a      	ldrb	r2, [r7, #5]
 8001eae:	701a      	strb	r2, [r3, #0]
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	7a7a      	ldrb	r2, [r7, #9]
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HSV2RGB+0x21c>
        case 3: *_r = p, *_g = q, *_b = val; break;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	7afa      	ldrb	r2, [r7, #11]
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	7aba      	ldrb	r2, [r7, #10]
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	797a      	ldrb	r2, [r7, #5]
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e013      	b.n	8001ef4 <HSV2RGB+0x21c>
        case 4: *_r = t, *_g = p, *_b = val; break;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	7a7a      	ldrb	r2, [r7, #9]
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	7afa      	ldrb	r2, [r7, #11]
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eda:	797a      	ldrb	r2, [r7, #5]
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e009      	b.n	8001ef4 <HSV2RGB+0x21c>
        default: *_r = val, *_g = p, *_b = q; break;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	797a      	ldrb	r2, [r7, #5]
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	7afa      	ldrb	r2, [r7, #11]
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	7aba      	ldrb	r2, [r7, #10]
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	bf00      	nop
    }
}
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	00000000 	.word	0x00000000
 8001f04:	406fe000 	.word	0x406fe000
 8001f08:	437f0000 	.word	0x437f0000
 8001f0c:	2aaaaaab 	.word	0x2aaaaaab

08001f10 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a9d      	ldr	r2, [pc, #628]	; (8002198 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	f040 8131 	bne.w	800218a <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a9c      	ldr	r2, [pc, #624]	; (800219c <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	f040 812c 	bne.w	800218a <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f32:	4b9b      	ldr	r3, [pc, #620]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8128 	beq.w	800218e <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d10b      	bne.n	8001f60 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d136      	bne.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f5e:	e031      	b.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d10b      	bne.n	8001f82 <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d125      	bne.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f80:	e020      	b.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d10b      	bne.n	8001fa4 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2204      	movs	r2, #4
 8001f90:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d114      	bne.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa2:	e00f      	b.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d10a      	bne.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d103      	bne.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001fc4:	4b76      	ldr	r3, [pc, #472]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b07      	cmp	r3, #7
 8001fcc:	d87b      	bhi.n	80020c6 <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001fce:	2300      	movs	r3, #0
 8001fd0:	72fb      	strb	r3, [r7, #11]
 8001fd2:	e06c      	b.n	80020ae <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fd4:	4b72      	ldr	r3, [pc, #456]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4a70      	ldr	r2, [pc, #448]	; (80021a4 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	7afb      	ldrb	r3, [r7, #11]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	dd04      	ble.n	8002004 <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001ffa:	4b6b      	ldr	r3, [pc, #428]	; (80021a8 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4619      	mov	r1, r3
 8002002:	e003      	b.n	800200c <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8002004:	4b69      	ldr	r3, [pc, #420]	; (80021ac <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4619      	mov	r1, r3
 800200c:	7afb      	ldrb	r3, [r7, #11]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3318      	adds	r3, #24
 8002012:	4a67      	ldr	r2, [pc, #412]	; (80021b0 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8002014:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002018:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	3301      	adds	r3, #1
 8002028:	4a5e      	ldr	r2, [pc, #376]	; (80021a4 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	2b00      	cmp	r3, #0
 800203e:	dd04      	ble.n	800204a <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4619      	mov	r1, r3
 8002048:	e003      	b.n	8002052 <ARGB_TIM_DMADelayPulseCplt+0x142>
 800204a:	4b58      	ldr	r3, [pc, #352]	; (80021ac <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4619      	mov	r1, r3
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	3320      	adds	r3, #32
 8002058:	4a55      	ldr	r2, [pc, #340]	; (80021b0 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 800205a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800205e:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	3302      	adds	r3, #2
 800206e:	4a4d      	ldr	r2, [pc, #308]	; (80021a4 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	7afb      	ldrb	r3, [r7, #11]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b00      	cmp	r3, #0
 8002084:	dd04      	ble.n	8002090 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8002086:	4b48      	ldr	r3, [pc, #288]	; (80021a8 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4619      	mov	r1, r3
 800208e:	e003      	b.n	8002098 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8002090:	4b46      	ldr	r3, [pc, #280]	; (80021ac <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4619      	mov	r1, r3
 8002098:	7afb      	ldrb	r3, [r7, #11]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3328      	adds	r3, #40	; 0x28
 800209e:	4a44      	ldr	r2, [pc, #272]	; (80021b0 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 80020a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	72fb      	strb	r3, [r7, #11]
 80020ae:	7afb      	ldrb	r3, [r7, #11]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b07      	cmp	r3, #7
 80020b4:	d98e      	bls.n	8001fd4 <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 80020b6:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80020c2:	801a      	strh	r2, [r3, #0]
 80020c4:	e05d      	b.n	8002182 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80020c6:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b09      	cmp	r3, #9
 80020ce:	d80c      	bhi.n	80020ea <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 80020d0:	2260      	movs	r2, #96	; 0x60
 80020d2:	2100      	movs	r1, #0
 80020d4:	4837      	ldr	r0, [pc, #220]	; (80021b4 <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 80020d6:	f007 f9a3 	bl	8009420 <memset>
        BUF_COUNTER++;
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	e04b      	b.n	8002182 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 80020ea:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fe:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	4618      	mov	r0, r3
 8002106:	f001 f863 	bl	80031d0 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d117      	bne.n	8002144 <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	f241 1311 	movw	r3, #4369	; 0x1111
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a1a      	ldr	r2, [r3, #32]
 800212a:	f240 4344 	movw	r3, #1092	; 0x444
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	f241 1311 	movw	r3, #4369	; 0x1111
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10f      	bne.n	8002174 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	f240 4344 	movw	r3, #1092	; 0x444
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
 8002188:	e002      	b.n	8002190 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 800218a:	bf00      	nop
 800218c:	e000      	b.n	8002190 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 800218e:	bf00      	nop
}
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000674 	.word	0x20000674
 800219c:	2000062c 	.word	0x2000062c
 80021a0:	2000057c 	.word	0x2000057c
 80021a4:	200004a4 	.word	0x200004a4
 80021a8:	200004a2 	.word	0x200004a2
 80021ac:	200004a3 	.word	0x200004a3
 80021b0:	200004bc 	.word	0x200004bc
 80021b4:	2000051c 	.word	0x2000051c
 80021b8:	40010000 	.word	0x40010000
 80021bc:	2000057e 	.word	0x2000057e

080021c0 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a53      	ldr	r2, [pc, #332]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	f040 809e 	bne.w	8002314 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a52      	ldr	r2, [pc, #328]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	f040 8099 	bne.w	8002314 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80021e2:	4b51      	ldr	r3, [pc, #324]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8095 	beq.w	8002318 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80021ee:	4b4e      	ldr	r3, [pc, #312]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b07      	cmp	r3, #7
 80021f6:	d87b      	bhi.n	80022f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80021f8:	2300      	movs	r3, #0
 80021fa:	72fb      	strb	r3, [r7, #11]
 80021fc:	e06c      	b.n	80022d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80021fe:	4b4a      	ldr	r3, [pc, #296]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	4a47      	ldr	r2, [pc, #284]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	dd04      	ble.n	800222e <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8002224:	4b42      	ldr	r3, [pc, #264]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	e003      	b.n	8002236 <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 800223e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002242:	4b39      	ldr	r3, [pc, #228]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	3301      	adds	r3, #1
 8002252:	4a36      	ldr	r2, [pc, #216]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	dd04      	ble.n	8002274 <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4619      	mov	r1, r3
 8002272:	e003      	b.n	800227c <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 8002274:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	4619      	mov	r1, r3
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3308      	adds	r3, #8
 8002282:	4a2d      	ldr	r2, [pc, #180]	; (8002338 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	3302      	adds	r3, #2
 8002298:	4a24      	ldr	r2, [pc, #144]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	dd04      	ble.n	80022ba <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	4619      	mov	r1, r3
 80022b8:	e003      	b.n	80022c2 <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	4619      	mov	r1, r3
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3310      	adds	r3, #16
 80022c8:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80022ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80022ce:	7afb      	ldrb	r3, [r7, #11]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	72fb      	strb	r3, [r7, #11]
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b07      	cmp	r3, #7
 80022de:	d98e      	bls.n	80021fe <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	e014      	b.n	800231a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d80f      	bhi.n	800231a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80022fa:	2260      	movs	r2, #96	; 0x60
 80022fc:	2100      	movs	r1, #0
 80022fe:	480e      	ldr	r0, [pc, #56]	; (8002338 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002300:	f007 f88e 	bl	8009420 <memset>
        BUF_COUNTER++;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002310:	801a      	strh	r2, [r3, #0]
 8002312:	e002      	b.n	800231a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8002314:	bf00      	nop
 8002316:	e000      	b.n	800231a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8002318:	bf00      	nop
    }
}
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000674 	.word	0x20000674
 8002324:	2000062c 	.word	0x2000062c
 8002328:	2000057c 	.word	0x2000057c
 800232c:	200004a4 	.word	0x200004a4
 8002330:	200004a2 	.word	0x200004a2
 8002334:	200004a3 	.word	0x200004a3
 8002338:	200004bc 	.word	0x200004bc

0800233c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002342:	f000 fd0b 	bl	8002d5c <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002346:	f000 f8df 	bl	8002508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800234a:	f000 fa3d 	bl	80027c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800234e:	f000 fa1b 	bl	8002788 <MX_DMA_Init>
  MX_I2C1_Init();
 8002352:	f000 f941 	bl	80025d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002356:	f000 f96d 	bl	8002634 <MX_SPI1_Init>
  MX_TIM2_Init();
 800235a:	f000 f9a1 	bl	80026a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t num = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef type;
  for(uint8_t i = 0; i > 127 ; i++){
 8002362:	2300      	movs	r3, #0
 8002364:	75bb      	strb	r3, [r7, #22]
 8002366:	e013      	b.n	8002390 <main+0x54>
	  type = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 8002368:	7dbb      	ldrb	r3, [r7, #22]
 800236a:	b29b      	uxth	r3, r3
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	b299      	uxth	r1, r3
 8002370:	230a      	movs	r3, #10
 8002372:	2202      	movs	r2, #2
 8002374:	485b      	ldr	r0, [pc, #364]	; (80024e4 <main+0x1a8>)
 8002376:	f001 fea9 	bl	80040cc <HAL_I2C_IsDeviceReady>
 800237a:	4603      	mov	r3, r0
 800237c:	73fb      	strb	r3, [r7, #15]
	  if(type == HAL_OK){
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <main+0x4e>
		  num++;
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	3301      	adds	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
  for(uint8_t i = 0; i > 127 ; i++){
 800238a:	7dbb      	ldrb	r3, [r7, #22]
 800238c:	3301      	adds	r3, #1
 800238e:	75bb      	strb	r3, [r7, #22]
 8002390:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002394:	2b00      	cmp	r3, #0
 8002396:	dbe7      	blt.n	8002368 <main+0x2c>
	  }
  }
  ARGB_Init();  // Initialization
 8002398:	f7ff f976 	bl	8001688 <ARGB_Init>

  ARGB_Clear(); // Clear stirp
 800239c:	f7ff f9ec 	bl	8001778 <ARGB_Clear>
  while (ARGB_Show() != ARGB_OK); // Update - Option 1
 80023a0:	bf00      	nop
 80023a2:	f7ff fb0b 	bl	80019bc <ARGB_Show>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d1fa      	bne.n	80023a2 <main+0x66>

  ARGB_SetBrightness(100);  // Set global brightness to 40%
 80023ac:	2064      	movs	r0, #100	; 0x64
 80023ae:	f7ff f9ed 	bl	800178c <ARGB_SetBrightness>

  ARGB_SetRGB(2, 0, 255, 0); // Set LED №3 with 255 Green
 80023b2:	2300      	movs	r3, #0
 80023b4:	22ff      	movs	r2, #255	; 0xff
 80023b6:	2100      	movs	r1, #0
 80023b8:	2002      	movs	r0, #2
 80023ba:	f7ff f9f7 	bl	80017ac <ARGB_SetRGB>
  while (!ARGB_Show());  // Update - Option 2
 80023be:	bf00      	nop
 80023c0:	f7ff fafc 	bl	80019bc <ARGB_Show>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0fa      	beq.n	80023c0 <main+0x84>

  ARGB_SetHSV(0, 0, 255, 255); // Set LED №1 with Red
 80023ca:	23ff      	movs	r3, #255	; 0xff
 80023cc:	22ff      	movs	r2, #255	; 0xff
 80023ce:	2100      	movs	r1, #0
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7ff fa5d 	bl	8001890 <ARGB_SetHSV>
  while (!ARGB_Ready()); // Update - Option 3
 80023d6:	bf00      	nop
 80023d8:	f7ff fae4 	bl	80019a4 <ARGB_Ready>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0fa      	beq.n	80023d8 <main+0x9c>
  ARGB_Show();
 80023e2:	f7ff faeb 	bl	80019bc <ARGB_Show>

  ARGB_FillWhite(230); // Fill all white component with 230
 80023e6:	20e6      	movs	r0, #230	; 0xe6
 80023e8:	f7ff fabf 	bl	800196a <ARGB_FillWhite>
  while (ARGB_Ready() == ARGB_BUSY); // Update - Option 4
 80023ec:	bf00      	nop
 80023ee:	f7ff fad9 	bl	80019a4 <ARGB_Ready>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0fa      	beq.n	80023ee <main+0xb2>
  ARGB_Show();
 80023f8:	f7ff fae0 	bl	80019bc <ARGB_Show>

  ARGB_FillRGB(200, 0, 0); // Fill all the strip with Red
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	20c8      	movs	r0, #200	; 0xc8
 8002402:	f7ff fa91 	bl	8001928 <ARGB_FillRGB>
  while (!ARGB_Show());
 8002406:	bf00      	nop
 8002408:	f7ff fad8 	bl	80019bc <ARGB_Show>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0fa      	beq.n	8002408 <main+0xcc>
  //extern  unsigned char *gImage_BW;
  //extern  unsigned char *gImage_R;
  ssd1306_Init();
 8002412:	f7fe fedd 	bl	80011d0 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002416:	2000      	movs	r0, #0
 8002418:	f7fe ff44 	bl	80012a4 <ssd1306_Fill>
  ssd1306_SetCursor(5, 10);
 800241c:	210a      	movs	r1, #10
 800241e:	2005      	movs	r0, #5
 8002420:	f7ff f88e 	bl	8001540 <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <main+0x1ac>)
 8002426:	2301      	movs	r3, #1
 8002428:	ca06      	ldmia	r2, {r1, r2}
 800242a:	4830      	ldr	r0, [pc, #192]	; (80024ec <main+0x1b0>)
 800242c:	f7ff f862 	bl	80014f4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002430:	f7fe ff5c 	bl	80012ec <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 8002434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002438:	f000 fcbe 	bl	8002db8 <HAL_Delay>
  ssd1306_Fill(Black);
 800243c:	2000      	movs	r0, #0
 800243e:	f7fe ff31 	bl	80012a4 <ssd1306_Fill>
  ssd1306_DrawBitmap(0, 0, default_dis, 128, 32, White);
 8002442:	2301      	movs	r3, #1
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	2320      	movs	r3, #32
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <main+0x1b4>)
 800244e:	2100      	movs	r1, #0
 8002450:	2000      	movs	r0, #0
 8002452:	f7ff f88d 	bl	8001570 <ssd1306_DrawBitmap>
  ssd1306_UpdateScreen();
 8002456:	f7fe ff49 	bl	80012ec <ssd1306_UpdateScreen>
  ssd1306_SetCursor(5, 15);
 800245a:	210f      	movs	r1, #15
 800245c:	2005      	movs	r0, #5
 800245e:	f7ff f86f 	bl	8001540 <ssd1306_SetCursor>
    ssd1306_WriteString("7A", Font_11x18, White);
 8002462:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <main+0x1ac>)
 8002464:	2301      	movs	r3, #1
 8002466:	ca06      	ldmia	r2, {r1, r2}
 8002468:	4822      	ldr	r0, [pc, #136]	; (80024f4 <main+0x1b8>)
 800246a:	f7ff f843 	bl	80014f4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800246e:	f7fe ff3d 	bl	80012ec <ssd1306_UpdateScreen>

  EPD_HW_Init(); //Electronic paper initialization
 8002472:	f7fe fdb3 	bl	8000fdc <EPD_HW_Init>
  //EPD_WhiteScreen_ALL(gqImage_BW,gqImage_R); //Refresh the picture in full screen
  EPD_WhiteScreen_ALL(default_dis,gqImage_R);
 8002476:	4920      	ldr	r1, [pc, #128]	; (80024f8 <main+0x1bc>)
 8002478:	481d      	ldr	r0, [pc, #116]	; (80024f0 <main+0x1b4>)
 800247a:	f7fe fe2c 	bl	80010d6 <EPD_WhiteScreen_ALL>
  EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
 800247e:	f7fe fe61 	bl	8001144 <EPD_DeepSleep>
  ADS1115_Config_t configReg;
  ADS1115_Handle_t *pADS;


  #define ADS1115_ADR 0x60
  configReg.channel = CHANNEL_AIN0_GND;
 8002482:	2304      	movs	r3, #4
 8002484:	713b      	strb	r3, [r7, #4]
  configReg.pgaConfig = PGA_6_144;
 8002486:	2300      	movs	r3, #0
 8002488:	717b      	strb	r3, [r7, #5]
  configReg.operatingMode = MODE_SINGLE_SHOT;
 800248a:	2301      	movs	r3, #1
 800248c:	71bb      	strb	r3, [r7, #6]
  configReg.dataRate = DRATE_475;
 800248e:	2306      	movs	r3, #6
 8002490:	71fb      	strb	r3, [r7, #7]
  configReg.compareMode = COMP_HYSTERESIS;
 8002492:	2300      	movs	r3, #0
 8002494:	723b      	strb	r3, [r7, #8]
  configReg.polarityMode = POLARITY_ACTIVE_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	727b      	strb	r3, [r7, #9]
  configReg.latchingMode = LATCHING_NONE;
 800249a:	2300      	movs	r3, #0
 800249c:	72bb      	strb	r3, [r7, #10]
  configReg.queueComparator = QUEUE_ONE;
 800249e:	2300      	movs	r3, #0
 80024a0:	72fb      	strb	r3, [r7, #11]
  pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configReg);
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	cb0c      	ldmia	r3, {r2, r3}
 80024a6:	2160      	movs	r1, #96	; 0x60
 80024a8:	480e      	ldr	r0, [pc, #56]	; (80024e4 <main+0x1a8>)
 80024aa:	f7fe fc09 	bl	8000cc0 <ADS1115_init>
 80024ae:	6138      	str	r0, [r7, #16]
  ADS1115_updateConfig(pADS, configReg);
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80024b6:	6938      	ldr	r0, [r7, #16]
 80024b8:	f7fe fc22 	bl	8000d00 <ADS1115_updateConfig>
  ADS1115_setConversionReadyPin(pADS);
 80024bc:	6938      	ldr	r0, [r7, #16]
 80024be:	f7fe fc93 	bl	8000de8 <ADS1115_setConversionReadyPin>
  ADS1115_startContinousMode(pADS);
 80024c2:	6938      	ldr	r0, [r7, #16]
 80024c4:	f7fe fc9e 	bl	8000e04 <ADS1115_startContinousMode>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80024c8:	f004 f9f0 	bl	80068ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 80024cc:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <main+0x1c0>)
 80024ce:	2100      	movs	r1, #0
 80024d0:	480b      	ldr	r0, [pc, #44]	; (8002500 <main+0x1c4>)
 80024d2:	f004 fa35 	bl	8006940 <osThreadNew>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <main+0x1c8>)
 80024da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80024dc:	f004 fa0a 	bl	80068f4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <main+0x1a4>
 80024e2:	bf00      	nop
 80024e4:	20000580 	.word	0x20000580
 80024e8:	20000000 	.word	0x20000000
 80024ec:	080097a8 	.word	0x080097a8
 80024f0:	0800b7ac 	.word	0x0800b7ac
 80024f4:	080097b4 	.word	0x080097b4
 80024f8:	0800a52c 	.word	0x0800a52c
 80024fc:	0800b9ac 	.word	0x0800b9ac
 8002500:	08002885 	.word	0x08002885
 8002504:	200006d4 	.word	0x200006d4

08002508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b094      	sub	sp, #80	; 0x50
 800250c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800250e:	f107 0320 	add.w	r3, r7, #32
 8002512:	2230      	movs	r2, #48	; 0x30
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f006 ff82 	bl	8009420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <SystemClock_Config+0xc8>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <SystemClock_Config+0xc8>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253a:	6413      	str	r3, [r2, #64]	; 0x40
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <SystemClock_Config+0xc8>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <SystemClock_Config+0xcc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a20      	ldr	r2, [pc, #128]	; (80025d4 <SystemClock_Config+0xcc>)
 8002552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <SystemClock_Config+0xcc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002564:	2301      	movs	r3, #1
 8002566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800256e:	2302      	movs	r3, #2
 8002570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002578:	2319      	movs	r3, #25
 800257a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800257c:	2390      	movs	r3, #144	; 0x90
 800257e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002580:	2302      	movs	r3, #2
 8002582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002584:	2304      	movs	r3, #4
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002588:	f107 0320 	add.w	r3, r7, #32
 800258c:	4618      	mov	r0, r3
 800258e:	f002 f96b 	bl	8004868 <HAL_RCC_OscConfig>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002598:	f000 f97c 	bl	8002894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800259c:	230f      	movs	r3, #15
 800259e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a0:	2302      	movs	r3, #2
 80025a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	2102      	movs	r1, #2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 fbcd 	bl	8004d58 <HAL_RCC_ClockConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80025c4:	f000 f966 	bl	8002894 <Error_Handler>
  }
}
 80025c8:	bf00      	nop
 80025ca:	3750      	adds	r7, #80	; 0x50
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40007000 	.word	0x40007000

080025d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <MX_I2C1_Init+0x50>)
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <MX_I2C1_Init+0x54>)
 80025e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_I2C1_Init+0x50>)
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <MX_I2C1_Init+0x58>)
 80025e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_I2C1_Init+0x50>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_I2C1_Init+0x50>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MX_I2C1_Init+0x50>)
 80025f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <MX_I2C1_Init+0x50>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_I2C1_Init+0x50>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <MX_I2C1_Init+0x50>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_I2C1_Init+0x50>)
 8002610:	2200      	movs	r2, #0
 8002612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <MX_I2C1_Init+0x50>)
 8002616:	f001 fa1d 	bl	8003a54 <HAL_I2C_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002620:	f000 f938 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000580 	.word	0x20000580
 800262c:	40005400 	.word	0x40005400
 8002630:	000186a0 	.word	0x000186a0

08002634 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <MX_SPI1_Init+0x64>)
 800263a:	4a18      	ldr	r2, [pc, #96]	; (800269c <MX_SPI1_Init+0x68>)
 800263c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <MX_SPI1_Init+0x64>)
 8002640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <MX_SPI1_Init+0x64>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <MX_SPI1_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_SPI1_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <MX_SPI1_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_SPI1_Init+0x64>)
 8002660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_SPI1_Init+0x64>)
 8002668:	2230      	movs	r2, #48	; 0x30
 800266a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <MX_SPI1_Init+0x64>)
 800266e:	2200      	movs	r2, #0
 8002670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_SPI1_Init+0x64>)
 8002674:	2200      	movs	r2, #0
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <MX_SPI1_Init+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_SPI1_Init+0x64>)
 8002680:	220a      	movs	r2, #10
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002684:	4804      	ldr	r0, [pc, #16]	; (8002698 <MX_SPI1_Init+0x64>)
 8002686:	f002 fd79 	bl	800517c <HAL_SPI_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002690:	f000 f900 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200005d4 	.word	0x200005d4
 800269c:	40013000 	.word	0x40013000

080026a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08e      	sub	sp, #56	; 0x38
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b4:	f107 0320 	add.w	r3, r7, #32
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
 80026cc:	615a      	str	r2, [r3, #20]
 80026ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026d0:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <MX_TIM2_Init+0xe4>)
 80026d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <MX_TIM2_Init+0xe4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <MX_TIM2_Init+0xe4>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <MX_TIM2_Init+0xe4>)
 80026e6:	2259      	movs	r2, #89	; 0x59
 80026e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ea:	4b26      	ldr	r3, [pc, #152]	; (8002784 <MX_TIM2_Init+0xe4>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <MX_TIM2_Init+0xe4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026f6:	4823      	ldr	r0, [pc, #140]	; (8002784 <MX_TIM2_Init+0xe4>)
 80026f8:	f003 f9ac 	bl	8005a54 <HAL_TIM_Base_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002702:	f000 f8c7 	bl	8002894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800270c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002710:	4619      	mov	r1, r3
 8002712:	481c      	ldr	r0, [pc, #112]	; (8002784 <MX_TIM2_Init+0xe4>)
 8002714:	f003 fc32 	bl	8005f7c <HAL_TIM_ConfigClockSource>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800271e:	f000 f8b9 	bl	8002894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002722:	4818      	ldr	r0, [pc, #96]	; (8002784 <MX_TIM2_Init+0xe4>)
 8002724:	f003 fa48 	bl	8005bb8 <HAL_TIM_PWM_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800272e:	f000 f8b1 	bl	8002894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800273a:	f107 0320 	add.w	r3, r7, #32
 800273e:	4619      	mov	r1, r3
 8002740:	4810      	ldr	r0, [pc, #64]	; (8002784 <MX_TIM2_Init+0xe4>)
 8002742:	f004 f801 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800274c:	f000 f8a2 	bl	8002894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002750:	2360      	movs	r3, #96	; 0x60
 8002752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	2204      	movs	r2, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4807      	ldr	r0, [pc, #28]	; (8002784 <MX_TIM2_Init+0xe4>)
 8002768:	f003 fb46 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002772:	f000 f88f 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002776:	4803      	ldr	r0, [pc, #12]	; (8002784 <MX_TIM2_Init+0xe4>)
 8002778:	f000 f9ae 	bl	8002ad8 <HAL_TIM_MspPostInit>

}
 800277c:	bf00      	nop
 800277e:	3738      	adds	r7, #56	; 0x38
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	2000062c 	.word	0x2000062c

08002788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_DMA_Init+0x3c>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <MX_DMA_Init+0x3c>)
 8002798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_DMA_Init+0x3c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2105      	movs	r1, #5
 80027ae:	2011      	movs	r0, #17
 80027b0:	f000 fbde 	bl	8002f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027b4:	2011      	movs	r0, #17
 80027b6:	f000 fbf7 	bl	8002fa8 <HAL_NVIC_EnableIRQ>

}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800

080027c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
 80027dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <MX_GPIO_Init+0xb4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a25      	ldr	r2, [pc, #148]	; (800287c <MX_GPIO_Init+0xb4>)
 80027e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b23      	ldr	r3, [pc, #140]	; (800287c <MX_GPIO_Init+0xb4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <MX_GPIO_Init+0xb4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <MX_GPIO_Init+0xb4>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <MX_GPIO_Init+0xb4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <MX_GPIO_Init+0xb4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <MX_GPIO_Init+0xb4>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <MX_GPIO_Init+0xb4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8002832:	2200      	movs	r2, #0
 8002834:	2107      	movs	r1, #7
 8002836:	4812      	ldr	r0, [pc, #72]	; (8002880 <MX_GPIO_Init+0xb8>)
 8002838:	f001 f8f2 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 800283c:	2307      	movs	r3, #7
 800283e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002840:	2301      	movs	r3, #1
 8002842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	4619      	mov	r1, r3
 8002852:	480b      	ldr	r0, [pc, #44]	; (8002880 <MX_GPIO_Init+0xb8>)
 8002854:	f000 ff48 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002862:	2302      	movs	r3, #2
 8002864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	4619      	mov	r1, r3
 800286c:	4804      	ldr	r0, [pc, #16]	; (8002880 <MX_GPIO_Init+0xb8>)
 800286e:	f000 ff3b 	bl	80036e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002872:	bf00      	nop
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40020400 	.word	0x40020400

08002884 <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800288c:	2001      	movs	r0, #1
 800288e:	f004 f8e9 	bl	8006a64 <osDelay>
 8002892:	e7fb      	b.n	800288c <StartInitTask+0x8>

08002894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002898:	b672      	cpsid	i
}
 800289a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800289c:	e7fe      	b.n	800289c <Error_Handler+0x8>
	...

080028a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_MspInit+0x54>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_MspInit+0x54>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <HAL_MspInit+0x54>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_MspInit+0x54>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <HAL_MspInit+0x54>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_MspInit+0x54>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	210f      	movs	r1, #15
 80028e2:	f06f 0001 	mvn.w	r0, #1
 80028e6:	f000 fb43 	bl	8002f70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_I2C_MspInit+0x84>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d12b      	bne.n	8002972 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_I2C_MspInit+0x88>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <HAL_I2C_MspInit+0x88>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_I2C_MspInit+0x88>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002936:	23c0      	movs	r3, #192	; 0xc0
 8002938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293a:	2312      	movs	r3, #18
 800293c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002946:	2304      	movs	r3, #4
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	480c      	ldr	r0, [pc, #48]	; (8002984 <HAL_I2C_MspInit+0x8c>)
 8002952:	f000 fec9 	bl	80036e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_I2C_MspInit+0x88>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <HAL_I2C_MspInit+0x88>)
 8002960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_I2C_MspInit+0x88>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002972:	bf00      	nop
 8002974:	3728      	adds	r7, #40	; 0x28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40005400 	.word	0x40005400
 8002980:	40023800 	.word	0x40023800
 8002984:	40020400 	.word	0x40020400

08002988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_SPI_MspInit+0x84>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12b      	bne.n	8002a02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <HAL_SPI_MspInit+0x88>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_SPI_MspInit+0x88>)
 80029b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_SPI_MspInit+0x88>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_SPI_MspInit+0x88>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_SPI_MspInit+0x88>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_SPI_MspInit+0x88>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80029e2:	23a0      	movs	r3, #160	; 0xa0
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029f2:	2305      	movs	r3, #5
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	; (8002a14 <HAL_SPI_MspInit+0x8c>)
 80029fe:	f000 fe73 	bl	80036e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a02:	bf00      	nop
 8002a04:	3728      	adds	r7, #40	; 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40013000 	.word	0x40013000
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020000 	.word	0x40020000

08002a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d14c      	bne.n	8002ac4 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_TIM_Base_MspInit+0xb4>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a26      	ldr	r2, [pc, #152]	; (8002acc <HAL_TIM_Base_MspInit+0xb4>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_TIM_Base_MspInit+0xb4>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <HAL_TIM_Base_MspInit+0xbc>)
 8002a4a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a4e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002a52:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a56:	2240      	movs	r2, #64	; 0x40
 8002a58:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a66:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a6e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a7c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a86:	2204      	movs	r2, #4
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002a9c:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a9e:	f000 fa91 	bl	8002fc4 <HAL_DMA_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8002aa8:	f7ff fef4 	bl	8002894 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab2:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	20000674 	.word	0x20000674
 8002ad4:	400260a0 	.word	0x400260a0

08002ad8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d11d      	bne.n	8002b36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a0f      	ldr	r2, [pc, #60]	; (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b16:	2302      	movs	r3, #2
 8002b18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4804      	ldr	r0, [pc, #16]	; (8002b44 <HAL_TIM_MspPostInit+0x6c>)
 8002b32:	f000 fdd9 	bl	80036e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b36:	bf00      	nop
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000

08002b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08c      	sub	sp, #48	; 0x30
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_InitTick+0xd0>)
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <HAL_InitTick+0xd0>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6453      	str	r3, [r2, #68]	; 0x44
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_InitTick+0xd0>)
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b74:	f107 020c 	add.w	r2, r7, #12
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 faca 	bl	8005118 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b84:	f002 fab4 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 8002b88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_InitTick+0xd4>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	0c9b      	lsrs	r3, r3, #18
 8002b94:	3b01      	subs	r3, #1
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002b98:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <HAL_InitTick+0xd8>)
 8002b9a:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <HAL_InitTick+0xdc>)
 8002b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_InitTick+0xd8>)
 8002ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ba4:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002ba6:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_InitTick+0xd8>)
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002bac:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <HAL_InitTick+0xd8>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_InitTick+0xd8>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_InitTick+0xd8>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8002bbe:	4818      	ldr	r0, [pc, #96]	; (8002c20 <HAL_InitTick+0xd8>)
 8002bc0:	f002 ff48 	bl	8005a54 <HAL_TIM_Base_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002bca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11b      	bne.n	8002c0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8002bd2:	4813      	ldr	r0, [pc, #76]	; (8002c20 <HAL_InitTick+0xd8>)
 8002bd4:	f002 ff8e 	bl	8005af4 <HAL_TIM_Base_Start_IT>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002bde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d111      	bne.n	8002c0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002be6:	2018      	movs	r0, #24
 8002be8:	f000 f9de 	bl	8002fa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b0f      	cmp	r3, #15
 8002bf0:	d808      	bhi.n	8002c04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	2018      	movs	r0, #24
 8002bf8:	f000 f9ba 	bl	8002f70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <HAL_InitTick+0xe0>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e002      	b.n	8002c0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3730      	adds	r7, #48	; 0x30
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	431bde83 	.word	0x431bde83
 8002c20:	200006d8 	.word	0x200006d8
 8002c24:	40014000 	.word	0x40014000
 8002c28:	20000010 	.word	0x20000010

08002c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <NMI_Handler+0x4>

08002c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c36:	e7fe      	b.n	8002c36 <HardFault_Handler+0x4>

08002c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <MemManage_Handler+0x4>

08002c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c42:	e7fe      	b.n	8002c42 <BusFault_Handler+0x4>

08002c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <UsageFault_Handler+0x4>

08002c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_2);
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	4804      	ldr	r0, [pc, #16]	; (8002c70 <DMA1_Stream6_IRQHandler+0x18>)
 8002c60:	f003 f804 	bl	8005c6c <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002c64:	4803      	ldr	r0, [pc, #12]	; (8002c74 <DMA1_Stream6_IRQHandler+0x1c>)
 8002c66:	f000 fad5 	bl	8003214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000062c 	.word	0x2000062c
 8002c74:	20000674 	.word	0x20000674

08002c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c80:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <_sbrk+0x5c>)
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <_sbrk+0x60>)
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <_sbrk+0x64>)
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <_sbrk+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d207      	bcs.n	8002cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca8:	f006 fb78 	bl	800939c <__errno>
 8002cac:	4603      	mov	r3, r0
 8002cae:	220c      	movs	r2, #12
 8002cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	e009      	b.n	8002ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <_sbrk+0x64>)
 8002cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20020000 	.word	0x20020000
 8002cd8:	00004000 	.word	0x00004000
 8002cdc:	20000720 	.word	0x20000720
 8002ce0:	20005148 	.word	0x20005148

08002ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <SystemInit+0x20>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <SystemInit+0x20>)
 8002cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d0c:	480d      	ldr	r0, [pc, #52]	; (8002d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d0e:	490e      	ldr	r1, [pc, #56]	; (8002d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d10:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d14:	e002      	b.n	8002d1c <LoopCopyDataInit>

08002d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1a:	3304      	adds	r3, #4

08002d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d20:	d3f9      	bcc.n	8002d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d24:	4c0b      	ldr	r4, [pc, #44]	; (8002d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d28:	e001      	b.n	8002d2e <LoopFillZerobss>

08002d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d2c:	3204      	adds	r2, #4

08002d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d30:	d3fb      	bcc.n	8002d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d32:	f7ff ffd7 	bl	8002ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d36:	f006 fb37 	bl	80093a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d3a:	f7ff faff 	bl	800233c <main>
  bx  lr    
 8002d3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d48:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002d4c:	0800ba60 	.word	0x0800ba60
  ldr r2, =_sbss
 8002d50:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002d54:	20005148 	.word	0x20005148

08002d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d58:	e7fe      	b.n	8002d58 <ADC_IRQHandler>
	...

08002d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d60:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <HAL_Init+0x40>)
 8002d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_Init+0x40>)
 8002d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_Init+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <HAL_Init+0x40>)
 8002d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d84:	2003      	movs	r0, #3
 8002d86:	f000 f8e8 	bl	8002f5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7ff fedc 	bl	8002b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d90:	f7ff fd86 	bl	80028a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023c00 	.word	0x40023c00

08002da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return uwTick;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_GetTick+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000724 	.word	0x20000724

08002db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc0:	f7ff ffee 	bl	8002da0 <HAL_GetTick>
 8002dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d005      	beq.n	8002dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_Delay+0x44>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4413      	add	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dde:	bf00      	nop
 8002de0:	f7ff ffde 	bl	8002da0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d8f7      	bhi.n	8002de0 <HAL_Delay+0x28>
  {
  }
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000014 	.word	0x20000014

08002e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e32:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	60d3      	str	r3, [r2, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <__NVIC_GetPriorityGrouping+0x18>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	f003 0307 	and.w	r3, r3, #7
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	db0b      	blt.n	8002e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	4907      	ldr	r1, [pc, #28]	; (8002e9c <__NVIC_EnableIRQ+0x38>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2001      	movs	r0, #1
 8002e86:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000e100 	.word	0xe000e100

08002ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	db0a      	blt.n	8002eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	490c      	ldr	r1, [pc, #48]	; (8002eec <__NVIC_SetPriority+0x4c>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	0112      	lsls	r2, r2, #4
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec8:	e00a      	b.n	8002ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4908      	ldr	r1, [pc, #32]	; (8002ef0 <__NVIC_SetPriority+0x50>)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3b04      	subs	r3, #4
 8002ed8:	0112      	lsls	r2, r2, #4
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	440b      	add	r3, r1
 8002ede:	761a      	strb	r2, [r3, #24]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f1c3 0307 	rsb	r3, r3, #7
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	bf28      	it	cs
 8002f12:	2304      	movcs	r3, #4
 8002f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d902      	bls.n	8002f24 <NVIC_EncodePriority+0x30>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3b03      	subs	r3, #3
 8002f22:	e000      	b.n	8002f26 <NVIC_EncodePriority+0x32>
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	401a      	ands	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	43d9      	mvns	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f4c:	4313      	orrs	r3, r2
         );
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ff4c 	bl	8002e00 <__NVIC_SetPriorityGrouping>
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f82:	f7ff ff61 	bl	8002e48 <__NVIC_GetPriorityGrouping>
 8002f86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	6978      	ldr	r0, [r7, #20]
 8002f8e:	f7ff ffb1 	bl	8002ef4 <NVIC_EncodePriority>
 8002f92:	4602      	mov	r2, r0
 8002f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ff80 	bl	8002ea0 <__NVIC_SetPriority>
}
 8002fa0:	bf00      	nop
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff54 	bl	8002e64 <__NVIC_EnableIRQ>
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff fee6 	bl	8002da0 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e099      	b.n	8003114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003000:	e00f      	b.n	8003022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003002:	f7ff fecd 	bl	8002da0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b05      	cmp	r3, #5
 800300e:	d908      	bls.n	8003022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e078      	b.n	8003114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e8      	bne.n	8003002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4b38      	ldr	r3, [pc, #224]	; (800311c <HAL_DMA_Init+0x158>)
 800303c:	4013      	ands	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b04      	cmp	r3, #4
 800307a:	d107      	bne.n	800308c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4313      	orrs	r3, r2
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0307 	bic.w	r3, r3, #7
 80030a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d117      	bne.n	80030e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00e      	beq.n	80030e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa91 	bl	80035f0 <DMA_CheckFifoParam>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2240      	movs	r2, #64	; 0x40
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030e2:	2301      	movs	r3, #1
 80030e4:	e016      	b.n	8003114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa48 	bl	8003584 <DMA_CalcBaseAndBitshift>
 80030f4:	4603      	mov	r3, r0
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	223f      	movs	r2, #63	; 0x3f
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	f010803f 	.word	0xf010803f

08003120 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_DMA_Start_IT+0x26>
 8003142:	2302      	movs	r3, #2
 8003144:	e040      	b.n	80031c8 <HAL_DMA_Start_IT+0xa8>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d12f      	bne.n	80031ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f9da 	bl	8003528 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	223f      	movs	r2, #63	; 0x3f
 800317a:	409a      	lsls	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0216 	orr.w	r2, r2, #22
 800318e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0208 	orr.w	r2, r2, #8
 80031a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e005      	b.n	80031c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2280      	movs	r2, #128	; 0x80
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00c      	b.n	8003208 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2205      	movs	r2, #5
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003220:	4b8e      	ldr	r3, [pc, #568]	; (800345c <HAL_DMA_IRQHandler+0x248>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a8e      	ldr	r2, [pc, #568]	; (8003460 <HAL_DMA_IRQHandler+0x24c>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0a9b      	lsrs	r3, r3, #10
 800322c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	2208      	movs	r2, #8
 8003240:	409a      	lsls	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01a      	beq.n	8003280 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	2208      	movs	r2, #8
 800326e:	409a      	lsls	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	2201      	movs	r2, #1
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0202 	orr.w	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	2204      	movs	r2, #4
 80032bc:	409a      	lsls	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d012      	beq.n	80032ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2204      	movs	r2, #4
 80032da:	409a      	lsls	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	2210      	movs	r2, #16
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d043      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d03c      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2210      	movs	r2, #16
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d018      	beq.n	8003356 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d108      	bne.n	8003344 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d024      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
 8003342:	e01f      	b.n	8003384 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
 8003354:	e016      	b.n	8003384 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0208 	bic.w	r2, r2, #8
 8003372:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	2220      	movs	r2, #32
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 808f 	beq.w	80034b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8087 	beq.w	80034b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2220      	movs	r2, #32
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d136      	bne.n	800342c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0216 	bic.w	r2, r2, #22
 80033cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <HAL_DMA_IRQHandler+0x1da>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0208 	bic.w	r2, r2, #8
 80033fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	223f      	movs	r2, #63	; 0x3f
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	2b00      	cmp	r3, #0
 8003420:	d07e      	beq.n	8003520 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
        }
        return;
 800342a:	e079      	b.n	8003520 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01d      	beq.n	8003476 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	2b00      	cmp	r3, #0
 800344e:	d031      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
 8003458:	e02c      	b.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
 800345a:	bf00      	nop
 800345c:	2000000c 	.word	0x2000000c
 8003460:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d023      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e01e      	b.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10f      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0210 	bic.w	r2, r2, #16
 8003492:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d032      	beq.n	8003522 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d022      	beq.n	800350e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2205      	movs	r2, #5
 80034cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	3301      	adds	r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d307      	bcc.n	80034fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f2      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x2cc>
 80034fa:	e000      	b.n	80034fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
 800351e:	e000      	b.n	8003522 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003520:	bf00      	nop
    }
  }
}
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003544:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d108      	bne.n	8003568 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003566:	e007      	b.n	8003578 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3b10      	subs	r3, #16
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800359e:	4a13      	ldr	r2, [pc, #76]	; (80035ec <DMA_CalcBaseAndBitshift+0x68>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d909      	bls.n	80035c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	659a      	str	r2, [r3, #88]	; 0x58
 80035c4:	e007      	b.n	80035d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	aaaaaaab 	.word	0xaaaaaaab
 80035ec:	0800b9e8 	.word	0x0800b9e8

080035f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11f      	bne.n	800364a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d856      	bhi.n	80036be <DMA_CheckFifoParam+0xce>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <DMA_CheckFifoParam+0x28>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	0800363b 	.word	0x0800363b
 8003620:	08003629 	.word	0x08003629
 8003624:	080036bf 	.word	0x080036bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d046      	beq.n	80036c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e043      	b.n	80036c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003642:	d140      	bne.n	80036c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e03d      	b.n	80036c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003652:	d121      	bne.n	8003698 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d837      	bhi.n	80036ca <DMA_CheckFifoParam+0xda>
 800365a:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <DMA_CheckFifoParam+0x70>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003671 	.word	0x08003671
 8003664:	08003677 	.word	0x08003677
 8003668:	08003671 	.word	0x08003671
 800366c:	08003689 	.word	0x08003689
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e030      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d025      	beq.n	80036ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003686:	e022      	b.n	80036ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003690:	d11f      	bne.n	80036d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003696:	e01c      	b.n	80036d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d903      	bls.n	80036a6 <DMA_CheckFifoParam+0xb6>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d003      	beq.n	80036ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036a4:	e018      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
      break;
 80036aa:	e015      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00e      	beq.n	80036d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e00b      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      break;
 80036be:	bf00      	nop
 80036c0:	e00a      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e008      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e006      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
 80036cc:	e004      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036d6:	bf00      	nop
    }
  } 
  
  return status; 
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	e159      	b.n	80039b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003704:	2201      	movs	r2, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	429a      	cmp	r2, r3
 800371e:	f040 8148 	bne.w	80039b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d005      	beq.n	800373a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003736:	2b02      	cmp	r3, #2
 8003738:	d130      	bne.n	800379c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	2203      	movs	r2, #3
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003770:	2201      	movs	r2, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 0201 	and.w	r2, r3, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d017      	beq.n	80037d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d123      	bne.n	800382c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	08da      	lsrs	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3208      	adds	r2, #8
 80037ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	220f      	movs	r2, #15
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	08da      	lsrs	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3208      	adds	r2, #8
 8003826:	69b9      	ldr	r1, [r7, #24]
 8003828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	2203      	movs	r2, #3
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0203 	and.w	r2, r3, #3
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80a2 	beq.w	80039b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b57      	ldr	r3, [pc, #348]	; (80039d0 <HAL_GPIO_Init+0x2e8>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	4a56      	ldr	r2, [pc, #344]	; (80039d0 <HAL_GPIO_Init+0x2e8>)
 8003878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800387c:	6453      	str	r3, [r2, #68]	; 0x44
 800387e:	4b54      	ldr	r3, [pc, #336]	; (80039d0 <HAL_GPIO_Init+0x2e8>)
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800388a:	4a52      	ldr	r2, [pc, #328]	; (80039d4 <HAL_GPIO_Init+0x2ec>)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	089b      	lsrs	r3, r3, #2
 8003890:	3302      	adds	r3, #2
 8003892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	220f      	movs	r2, #15
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a49      	ldr	r2, [pc, #292]	; (80039d8 <HAL_GPIO_Init+0x2f0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d019      	beq.n	80038ea <HAL_GPIO_Init+0x202>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a48      	ldr	r2, [pc, #288]	; (80039dc <HAL_GPIO_Init+0x2f4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0x1fe>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a47      	ldr	r2, [pc, #284]	; (80039e0 <HAL_GPIO_Init+0x2f8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00d      	beq.n	80038e2 <HAL_GPIO_Init+0x1fa>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a46      	ldr	r2, [pc, #280]	; (80039e4 <HAL_GPIO_Init+0x2fc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <HAL_GPIO_Init+0x1f6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a45      	ldr	r2, [pc, #276]	; (80039e8 <HAL_GPIO_Init+0x300>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_GPIO_Init+0x1f2>
 80038d6:	2304      	movs	r3, #4
 80038d8:	e008      	b.n	80038ec <HAL_GPIO_Init+0x204>
 80038da:	2307      	movs	r3, #7
 80038dc:	e006      	b.n	80038ec <HAL_GPIO_Init+0x204>
 80038de:	2303      	movs	r3, #3
 80038e0:	e004      	b.n	80038ec <HAL_GPIO_Init+0x204>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e002      	b.n	80038ec <HAL_GPIO_Init+0x204>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_GPIO_Init+0x204>
 80038ea:	2300      	movs	r3, #0
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	f002 0203 	and.w	r2, r2, #3
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	4093      	lsls	r3, r2
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038fc:	4935      	ldr	r1, [pc, #212]	; (80039d4 <HAL_GPIO_Init+0x2ec>)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800390a:	4b38      	ldr	r3, [pc, #224]	; (80039ec <HAL_GPIO_Init+0x304>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800392e:	4a2f      	ldr	r2, [pc, #188]	; (80039ec <HAL_GPIO_Init+0x304>)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_GPIO_Init+0x304>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003958:	4a24      	ldr	r2, [pc, #144]	; (80039ec <HAL_GPIO_Init+0x304>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_GPIO_Init+0x304>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003982:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <HAL_GPIO_Init+0x304>)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_GPIO_Init+0x304>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ac:	4a0f      	ldr	r2, [pc, #60]	; (80039ec <HAL_GPIO_Init+0x304>)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3301      	adds	r3, #1
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	2b0f      	cmp	r3, #15
 80039bc:	f67f aea2 	bls.w	8003704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3724      	adds	r7, #36	; 0x24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40013800 	.word	0x40013800
 80039d8:	40020000 	.word	0x40020000
 80039dc:	40020400 	.word	0x40020400
 80039e0:	40020800 	.word	0x40020800
 80039e4:	40020c00 	.word	0x40020c00
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40013c00 	.word	0x40013c00

080039f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	887b      	ldrh	r3, [r7, #2]
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
 8003a0c:	e001      	b.n	8003a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a30:	787b      	ldrb	r3, [r7, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a3c:	e003      	b.n	8003a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a3e:	887b      	ldrh	r3, [r7, #2]
 8003a40:	041a      	lsls	r2, r3, #16
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	619a      	str	r2, [r3, #24]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e12b      	b.n	8003cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe ff3c 	bl	80028f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f001 fb06 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a81      	ldr	r2, [pc, #516]	; (8003cc8 <HAL_I2C_Init+0x274>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d807      	bhi.n	8003ad8 <HAL_I2C_Init+0x84>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a80      	ldr	r2, [pc, #512]	; (8003ccc <HAL_I2C_Init+0x278>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	bf94      	ite	ls
 8003ad0:	2301      	movls	r3, #1
 8003ad2:	2300      	movhi	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e006      	b.n	8003ae6 <HAL_I2C_Init+0x92>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a7d      	ldr	r2, [pc, #500]	; (8003cd0 <HAL_I2C_Init+0x27c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf94      	ite	ls
 8003ae0:	2301      	movls	r3, #1
 8003ae2:	2300      	movhi	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0e7      	b.n	8003cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a78      	ldr	r2, [pc, #480]	; (8003cd4 <HAL_I2C_Init+0x280>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0c9b      	lsrs	r3, r3, #18
 8003af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a6a      	ldr	r2, [pc, #424]	; (8003cc8 <HAL_I2C_Init+0x274>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d802      	bhi.n	8003b28 <HAL_I2C_Init+0xd4>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	3301      	adds	r3, #1
 8003b26:	e009      	b.n	8003b3c <HAL_I2C_Init+0xe8>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	4a69      	ldr	r2, [pc, #420]	; (8003cd8 <HAL_I2C_Init+0x284>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	495c      	ldr	r1, [pc, #368]	; (8003cc8 <HAL_I2C_Init+0x274>)
 8003b58:	428b      	cmp	r3, r1
 8003b5a:	d819      	bhi.n	8003b90 <HAL_I2C_Init+0x13c>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e59      	subs	r1, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b70:	400b      	ands	r3, r1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_I2C_Init+0x138>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e59      	subs	r1, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8a:	e051      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e04f      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <HAL_I2C_Init+0x168>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e012      	b.n	8003be2 <HAL_I2C_Init+0x18e>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	0099      	lsls	r1, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Init+0x196>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e022      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10e      	bne.n	8003c10 <HAL_I2C_Init+0x1bc>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1e58      	subs	r0, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	440b      	add	r3, r1
 8003c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0e:	e00f      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6809      	ldr	r1, [r1, #0]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6911      	ldr	r1, [r2, #16]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	000186a0 	.word	0x000186a0
 8003ccc:	001e847f 	.word	0x001e847f
 8003cd0:	003d08ff 	.word	0x003d08ff
 8003cd4:	431bde83 	.word	0x431bde83
 8003cd8:	10624dd3 	.word	0x10624dd3

08003cdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	460b      	mov	r3, r1
 8003cea:	817b      	strh	r3, [r7, #10]
 8003cec:	4613      	mov	r3, r2
 8003cee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf0:	f7ff f856 	bl	8002da0 <HAL_GetTick>
 8003cf4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	f040 80e0 	bne.w	8003ec4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2319      	movs	r3, #25
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4970      	ldr	r1, [pc, #448]	; (8003ed0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fc22 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0d3      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_I2C_Master_Transmit+0x50>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0cc      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d007      	beq.n	8003d52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2221      	movs	r2, #33	; 0x21
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	893a      	ldrh	r2, [r7, #8]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4a50      	ldr	r2, [pc, #320]	; (8003ed4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d94:	8979      	ldrh	r1, [r7, #10]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fac4 	bl	8004328 <I2C_MasterRequestWrite>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e08d      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003dc0:	e066      	b.n	8003e90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	6a39      	ldr	r1, [r7, #32]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fc9c 	bl	8004704 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06b      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d11b      	bne.n	8003e64 <HAL_I2C_Master_Transmit+0x188>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d017      	beq.n	8003e64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	6a39      	ldr	r1, [r7, #32]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fc8c 	bl	8004786 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00d      	beq.n	8003e90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d107      	bne.n	8003e8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e01a      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d194      	bne.n	8003dc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	00100002 	.word	0x00100002
 8003ed4:	ffff0000 	.word	0xffff0000

08003ed8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	817b      	strh	r3, [r7, #10]
 8003eea:	460b      	mov	r3, r1
 8003eec:	813b      	strh	r3, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ef2:	f7fe ff55 	bl	8002da0 <HAL_GetTick>
 8003ef6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	f040 80d9 	bne.w	80040b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2319      	movs	r3, #25
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	496d      	ldr	r1, [pc, #436]	; (80040c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fb21 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0cc      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_I2C_Mem_Write+0x56>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e0c5      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d007      	beq.n	8003f54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2221      	movs	r2, #33	; 0x21
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a4d      	ldr	r2, [pc, #308]	; (80040c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f96:	88f8      	ldrh	r0, [r7, #6]
 8003f98:	893a      	ldrh	r2, [r7, #8]
 8003f9a:	8979      	ldrh	r1, [r7, #10]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fa40 	bl	800442c <I2C_RequestMemoryWrite>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d052      	beq.n	8004058 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e081      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fba2 	bl	8004704 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d107      	bne.n	8003fde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e06b      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d11b      	bne.n	8004058 <HAL_I2C_Mem_Write+0x180>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d017      	beq.n	8004058 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1aa      	bne.n	8003fb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fb8e 	bl	8004786 <I2C_WaitOnBTFFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00d      	beq.n	800408c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2b04      	cmp	r3, #4
 8004076:	d107      	bne.n	8004088 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004086:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e016      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	00100002 	.word	0x00100002
 80040c8:	ffff0000 	.word	0xffff0000

080040cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	460b      	mov	r3, r1
 80040da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80040dc:	f7fe fe60 	bl	8002da0 <HAL_GetTick>
 80040e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	f040 8111 	bne.w	8004316 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2319      	movs	r3, #25
 80040fa:	2201      	movs	r2, #1
 80040fc:	4988      	ldr	r1, [pc, #544]	; (8004320 <HAL_I2C_IsDeviceReady+0x254>)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fa2a 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	e104      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2C_IsDeviceReady+0x50>
 8004118:	2302      	movs	r3, #2
 800411a:	e0fd      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d007      	beq.n	8004142 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004150:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2224      	movs	r2, #36	; 0x24
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a70      	ldr	r2, [pc, #448]	; (8004324 <HAL_I2C_IsDeviceReady+0x258>)
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004174:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f9e8 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419c:	d103      	bne.n	80041a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0b6      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80041ba:	f7fe fdf1 	bl	8002da0 <HAL_GetTick>
 80041be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041ee:	e025      	b.n	800423c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7fe fdd6 	bl	8002da0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <HAL_I2C_IsDeviceReady+0x13a>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	22a0      	movs	r2, #160	; 0xa0
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2ba0      	cmp	r3, #160	; 0xa0
 8004246:	d005      	beq.n	8004254 <HAL_I2C_IsDeviceReady+0x188>
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <HAL_I2C_IsDeviceReady+0x188>
 800424e:	7dbb      	ldrb	r3, [r7, #22]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0cd      	beq.n	80041f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d129      	bne.n	80042be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004278:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2319      	movs	r3, #25
 8004296:	2201      	movs	r2, #1
 8004298:	4921      	ldr	r1, [pc, #132]	; (8004320 <HAL_I2C_IsDeviceReady+0x254>)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f95c 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e036      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e02c      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2319      	movs	r3, #25
 80042de:	2201      	movs	r2, #1
 80042e0:	490f      	ldr	r1, [pc, #60]	; (8004320 <HAL_I2C_IsDeviceReady+0x254>)
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f938 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e012      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	3301      	adds	r3, #1
 80042f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	f4ff af32 	bcc.w	8004166 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	00100002 	.word	0x00100002
 8004324:	ffff0000 	.word	0xffff0000

08004328 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	460b      	mov	r3, r1
 8004336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d006      	beq.n	8004352 <I2C_MasterRequestWrite+0x2a>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d003      	beq.n	8004352 <I2C_MasterRequestWrite+0x2a>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004350:	d108      	bne.n	8004364 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e00b      	b.n	800437c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	2b12      	cmp	r3, #18
 800436a:	d107      	bne.n	800437c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f8e5 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a2:	d103      	bne.n	80043ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e035      	b.n	800441c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b8:	d108      	bne.n	80043cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043c8:	611a      	str	r2, [r3, #16]
 80043ca:	e01b      	b.n	8004404 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043cc:	897b      	ldrh	r3, [r7, #10]
 80043ce:	11db      	asrs	r3, r3, #7
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f063 030f 	orn	r3, r3, #15
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	490e      	ldr	r1, [pc, #56]	; (8004424 <I2C_MasterRequestWrite+0xfc>)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f90b 	bl	8004606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e010      	b.n	800441c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4907      	ldr	r1, [pc, #28]	; (8004428 <I2C_MasterRequestWrite+0x100>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f8fb 	bl	8004606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010008 	.word	0x00010008
 8004428:	00010002 	.word	0x00010002

0800442c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	460b      	mov	r3, r1
 8004440:	813b      	strh	r3, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004454:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2200      	movs	r2, #0
 800445e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f878 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447c:	d103      	bne.n	8004486 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e05f      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004498:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	6a3a      	ldr	r2, [r7, #32]
 800449e:	492d      	ldr	r1, [pc, #180]	; (8004554 <I2C_RequestMemoryWrite+0x128>)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f8b0 	bl	8004606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e04c      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	6a39      	ldr	r1, [r7, #32]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f91a 	bl	8004704 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d107      	bne.n	80044ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e02b      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	e021      	b.n	8004548 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	b29b      	uxth	r3, r3
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	6a39      	ldr	r1, [r7, #32]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f8f4 	bl	8004704 <I2C_WaitOnTXEFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2b04      	cmp	r3, #4
 8004528:	d107      	bne.n	800453a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004538:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e005      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800453e:	893b      	ldrh	r3, [r7, #8]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	00010002 	.word	0x00010002

08004558 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004568:	e025      	b.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d021      	beq.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fe fc15 	bl	8002da0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d116      	bne.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e023      	b.n	80045fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d10d      	bne.n	80045dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	43da      	mvns	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	e00c      	b.n	80045f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	43da      	mvns	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4013      	ands	r3, r2
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d0b6      	beq.n	800456a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004614:	e051      	b.n	80046ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d123      	bne.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004634:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800463e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e046      	b.n	80046fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d021      	beq.n	80046ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fe fb93 	bl	8002da0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d116      	bne.n	80046ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f043 0220 	orr.w	r2, r3, #32
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e020      	b.n	80046fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d10c      	bne.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	43da      	mvns	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e00b      	b.n	80046f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	43da      	mvns	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d18d      	bne.n	8004616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004710:	e02d      	b.n	800476e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f878 	bl	8004808 <I2C_IsAcknowledgeFailed>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e02d      	b.n	800477e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d021      	beq.n	800476e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fe fb39 	bl	8002da0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d116      	bne.n	800476e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e007      	b.n	800477e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b80      	cmp	r3, #128	; 0x80
 800477a:	d1ca      	bne.n	8004712 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004792:	e02d      	b.n	80047f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f837 	bl	8004808 <I2C_IsAcknowledgeFailed>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e02d      	b.n	8004800 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d021      	beq.n	80047f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ac:	f7fe faf8 	bl	8002da0 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d302      	bcc.n	80047c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d116      	bne.n	80047f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e007      	b.n	8004800 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d1ca      	bne.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d11b      	bne.n	8004858 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004828:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	f043 0204 	orr.w	r2, r3, #4
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e267      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d075      	beq.n	8004972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004886:	4b88      	ldr	r3, [pc, #544]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b04      	cmp	r3, #4
 8004890:	d00c      	beq.n	80048ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004892:	4b85      	ldr	r3, [pc, #532]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800489a:	2b08      	cmp	r3, #8
 800489c:	d112      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489e:	4b82      	ldr	r3, [pc, #520]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048aa:	d10b      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ac:	4b7e      	ldr	r3, [pc, #504]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d05b      	beq.n	8004970 <HAL_RCC_OscConfig+0x108>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d157      	bne.n	8004970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e242      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d106      	bne.n	80048dc <HAL_RCC_OscConfig+0x74>
 80048ce:	4b76      	ldr	r3, [pc, #472]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a75      	ldr	r2, [pc, #468]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e01d      	b.n	8004918 <HAL_RCC_OscConfig+0xb0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x98>
 80048e6:	4b70      	ldr	r3, [pc, #448]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6f      	ldr	r2, [pc, #444]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a6c      	ldr	r2, [pc, #432]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e00b      	b.n	8004918 <HAL_RCC_OscConfig+0xb0>
 8004900:	4b69      	ldr	r3, [pc, #420]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a68      	ldr	r2, [pc, #416]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	4b66      	ldr	r3, [pc, #408]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a65      	ldr	r2, [pc, #404]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d013      	beq.n	8004948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fe fa3e 	bl	8002da0 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004928:	f7fe fa3a 	bl	8002da0 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	; 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e207      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	4b5b      	ldr	r3, [pc, #364]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0xc0>
 8004946:	e014      	b.n	8004972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fe fa2a 	bl	8002da0 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004950:	f7fe fa26 	bl	8002da0 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e1f3      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	4b51      	ldr	r3, [pc, #324]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0xe8>
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d063      	beq.n	8004a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497e:	4b4a      	ldr	r3, [pc, #296]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498a:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004992:	2b08      	cmp	r3, #8
 8004994:	d11c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004996:	4b44      	ldr	r3, [pc, #272]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d116      	bne.n	80049d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_RCC_OscConfig+0x152>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d001      	beq.n	80049ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e1c7      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ba:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4937      	ldr	r1, [pc, #220]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ce:	e03a      	b.n	8004a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d8:	4b34      	ldr	r3, [pc, #208]	; (8004aac <HAL_RCC_OscConfig+0x244>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fe f9df 	bl	8002da0 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fe f9db 	bl	8002da0 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e1a8      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4925      	ldr	r1, [pc, #148]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]
 8004a18:	e015      	b.n	8004a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_RCC_OscConfig+0x244>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fe f9be 	bl	8002da0 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a28:	f7fe f9ba 	bl	8002da0 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e187      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d036      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5a:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <HAL_RCC_OscConfig+0x248>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fe f99e 	bl	8002da0 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a68:	f7fe f99a 	bl	8002da0 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e167      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x200>
 8004a86:	e01b      	b.n	8004ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_RCC_OscConfig+0x248>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8e:	f7fe f987 	bl	8002da0 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a94:	e00e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a96:	f7fe f983 	bl	8002da0 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d907      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e150      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	42470000 	.word	0x42470000
 8004ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab4:	4b88      	ldr	r3, [pc, #544]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ea      	bne.n	8004a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8097 	beq.w	8004bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ad2:	4b81      	ldr	r3, [pc, #516]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10f      	bne.n	8004afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	4b7d      	ldr	r3, [pc, #500]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	4a7c      	ldr	r2, [pc, #496]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6413      	str	r3, [r2, #64]	; 0x40
 8004aee:	4b7a      	ldr	r3, [pc, #488]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afa:	2301      	movs	r3, #1
 8004afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afe:	4b77      	ldr	r3, [pc, #476]	; (8004cdc <HAL_RCC_OscConfig+0x474>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d118      	bne.n	8004b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b0a:	4b74      	ldr	r3, [pc, #464]	; (8004cdc <HAL_RCC_OscConfig+0x474>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a73      	ldr	r2, [pc, #460]	; (8004cdc <HAL_RCC_OscConfig+0x474>)
 8004b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b16:	f7fe f943 	bl	8002da0 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1e:	f7fe f93f 	bl	8002da0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e10c      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	4b6a      	ldr	r3, [pc, #424]	; (8004cdc <HAL_RCC_OscConfig+0x474>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d106      	bne.n	8004b52 <HAL_RCC_OscConfig+0x2ea>
 8004b44:	4b64      	ldr	r3, [pc, #400]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	4a63      	ldr	r2, [pc, #396]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b50:	e01c      	b.n	8004b8c <HAL_RCC_OscConfig+0x324>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b05      	cmp	r3, #5
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x30c>
 8004b5a:	4b5f      	ldr	r3, [pc, #380]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a5e      	ldr	r2, [pc, #376]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b60:	f043 0304 	orr.w	r3, r3, #4
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
 8004b66:	4b5c      	ldr	r3, [pc, #368]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a5b      	ldr	r2, [pc, #364]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
 8004b72:	e00b      	b.n	8004b8c <HAL_RCC_OscConfig+0x324>
 8004b74:	4b58      	ldr	r3, [pc, #352]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	4a57      	ldr	r2, [pc, #348]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b7a:	f023 0301 	bic.w	r3, r3, #1
 8004b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b80:	4b55      	ldr	r3, [pc, #340]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	4a54      	ldr	r2, [pc, #336]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b86:	f023 0304 	bic.w	r3, r3, #4
 8004b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d015      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fe f904 	bl	8002da0 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fe f900 	bl	8002da0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0cb      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0ee      	beq.n	8004b9c <HAL_RCC_OscConfig+0x334>
 8004bbe:	e014      	b.n	8004bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc0:	f7fe f8ee 	bl	8002da0 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc8:	f7fe f8ea 	bl	8002da0 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e0b5      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bde:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ee      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d105      	bne.n	8004bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf0:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	4a38      	ldr	r2, [pc, #224]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80a1 	beq.w	8004d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c06:	4b34      	ldr	r3, [pc, #208]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d05c      	beq.n	8004ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d141      	bne.n	8004c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fe f8be 	bl	8002da0 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fe f8ba 	bl	8002da0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e087      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	4b27      	ldr	r3, [pc, #156]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	019b      	lsls	r3, r3, #6
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	041b      	lsls	r3, r3, #16
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	491b      	ldr	r1, [pc, #108]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c70:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c76:	f7fe f893 	bl	8002da0 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7e:	f7fe f88f 	bl	8002da0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e05c      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x416>
 8004c9c:	e054      	b.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7fe f87c 	bl	8002da0 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fe f878 	bl	8002da0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e045      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x444>
 8004cca:	e03d      	b.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e038      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <HAL_RCC_OscConfig+0x4ec>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d028      	beq.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d121      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d11a      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d14:	4013      	ands	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d111      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40023800 	.word	0x40023800

08004d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0cc      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b68      	ldr	r3, [pc, #416]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d90c      	bls.n	8004d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b65      	ldr	r3, [pc, #404]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d82:	4b63      	ldr	r3, [pc, #396]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0b8      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dac:	4b59      	ldr	r3, [pc, #356]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a58      	ldr	r2, [pc, #352]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc4:	4b53      	ldr	r3, [pc, #332]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4a52      	ldr	r2, [pc, #328]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd0:	4b50      	ldr	r3, [pc, #320]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	494d      	ldr	r1, [pc, #308]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d044      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d119      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e07f      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d003      	beq.n	8004e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	4b3f      	ldr	r3, [pc, #252]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e06f      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e26:	4b3b      	ldr	r3, [pc, #236]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e067      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e36:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f023 0203 	bic.w	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4934      	ldr	r1, [pc, #208]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e48:	f7fd ffaa 	bl	8002da0 <HAL_GetTick>
 8004e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e50:	f7fd ffa6 	bl	8002da0 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e04f      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 020c 	and.w	r2, r3, #12
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d1eb      	bne.n	8004e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d20c      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e032      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4916      	ldr	r1, [pc, #88]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	490e      	ldr	r1, [pc, #56]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ede:	f000 f821 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	490a      	ldr	r1, [pc, #40]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef0:	5ccb      	ldrb	r3, [r1, r3]
 8004ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef6:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x1c8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fd fe22 	bl	8002b48 <HAL_InitTick>

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40023c00 	.word	0x40023c00
 8004f14:	40023800 	.word	0x40023800
 8004f18:	0800b9d0 	.word	0x0800b9d0
 8004f1c:	2000000c 	.word	0x2000000c
 8004f20:	20000010 	.word	0x20000010

08004f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f28:	b090      	sub	sp, #64	; 0x40
 8004f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f30:	2300      	movs	r3, #0
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f34:	2300      	movs	r3, #0
 8004f36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f3c:	4b59      	ldr	r3, [pc, #356]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 030c 	and.w	r3, r3, #12
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d00d      	beq.n	8004f64 <HAL_RCC_GetSysClockFreq+0x40>
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	f200 80a1 	bhi.w	8005090 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0x34>
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d003      	beq.n	8004f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f56:	e09b      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f58:	4b53      	ldr	r3, [pc, #332]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f5c:	e09b      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f5e:	4b53      	ldr	r3, [pc, #332]	; (80050ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004f60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f62:	e098      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f64:	4b4f      	ldr	r3, [pc, #316]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f6e:	4b4d      	ldr	r3, [pc, #308]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d028      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7a:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	099b      	lsrs	r3, r3, #6
 8004f80:	2200      	movs	r2, #0
 8004f82:	623b      	str	r3, [r7, #32]
 8004f84:	627a      	str	r2, [r7, #36]	; 0x24
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4b47      	ldr	r3, [pc, #284]	; (80050ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004f90:	fb03 f201 	mul.w	r2, r3, r1
 8004f94:	2300      	movs	r3, #0
 8004f96:	fb00 f303 	mul.w	r3, r0, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	4a43      	ldr	r2, [pc, #268]	; (80050ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004f9e:	fba0 1202 	umull	r1, r2, r0, r2
 8004fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa4:	460a      	mov	r2, r1
 8004fa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004faa:	4413      	add	r3, r2
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	61fa      	str	r2, [r7, #28]
 8004fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fbe:	f7fb fcfd 	bl	80009bc <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fca:	e053      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fcc:	4b35      	ldr	r3, [pc, #212]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	099b      	lsrs	r3, r3, #6
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	617a      	str	r2, [r7, #20]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fde:	f04f 0b00 	mov.w	fp, #0
 8004fe2:	4652      	mov	r2, sl
 8004fe4:	465b      	mov	r3, fp
 8004fe6:	f04f 0000 	mov.w	r0, #0
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	0159      	lsls	r1, r3, #5
 8004ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff4:	0150      	lsls	r0, r2, #5
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	ebb2 080a 	subs.w	r8, r2, sl
 8004ffe:	eb63 090b 	sbc.w	r9, r3, fp
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800500e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005012:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005016:	ebb2 0408 	subs.w	r4, r2, r8
 800501a:	eb63 0509 	sbc.w	r5, r3, r9
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	00eb      	lsls	r3, r5, #3
 8005028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800502c:	00e2      	lsls	r2, r4, #3
 800502e:	4614      	mov	r4, r2
 8005030:	461d      	mov	r5, r3
 8005032:	eb14 030a 	adds.w	r3, r4, sl
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	eb45 030b 	adc.w	r3, r5, fp
 800503c:	607b      	str	r3, [r7, #4]
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800504a:	4629      	mov	r1, r5
 800504c:	028b      	lsls	r3, r1, #10
 800504e:	4621      	mov	r1, r4
 8005050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005054:	4621      	mov	r1, r4
 8005056:	028a      	lsls	r2, r1, #10
 8005058:	4610      	mov	r0, r2
 800505a:	4619      	mov	r1, r3
 800505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505e:	2200      	movs	r2, #0
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	60fa      	str	r2, [r7, #12]
 8005064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005068:	f7fb fca8 	bl	80009bc <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4613      	mov	r3, r2
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	3301      	adds	r3, #1
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800508e:	e002      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005092:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005098:	4618      	mov	r0, r3
 800509a:	3740      	adds	r7, #64	; 0x40
 800509c:	46bd      	mov	sp, r7
 800509e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800
 80050a8:	00f42400 	.word	0x00f42400
 80050ac:	017d7840 	.word	0x017d7840

080050b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	2000000c 	.word	0x2000000c

080050c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050cc:	f7ff fff0 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0a9b      	lsrs	r3, r3, #10
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4903      	ldr	r1, [pc, #12]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	0800b9e0 	.word	0x0800b9e0

080050f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050f4:	f7ff ffdc 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	0b5b      	lsrs	r3, r3, #13
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	4903      	ldr	r1, [pc, #12]	; (8005114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40023800 	.word	0x40023800
 8005114:	0800b9e0 	.word	0x0800b9e0

08005118 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	220f      	movs	r2, #15
 8005126:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCC_GetClockConfig+0x5c>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 0203 	and.w	r2, r3, #3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <HAL_RCC_GetClockConfig+0x5c>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <HAL_RCC_GetClockConfig+0x5c>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_GetClockConfig+0x5c>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	08db      	lsrs	r3, r3, #3
 8005152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <HAL_RCC_GetClockConfig+0x60>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0207 	and.w	r2, r3, #7
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	601a      	str	r2, [r3, #0]
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40023800 	.word	0x40023800
 8005178:	40023c00 	.word	0x40023c00

0800517c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e07b      	b.n	8005286 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	d108      	bne.n	80051a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800519e:	d009      	beq.n	80051b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	61da      	str	r2, [r3, #28]
 80051a6:	e005      	b.n	80051b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fd fbda 	bl	8002988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	ea42 0103 	orr.w	r1, r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005240:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	f003 0104 	and.w	r1, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	f003 0210 	and.w	r2, r3, #16
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005274:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b088      	sub	sp, #32
 8005292:	af02      	add	r7, sp, #8
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052aa:	d112      	bne.n	80052d2 <HAL_SPI_Receive+0x44>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10e      	bne.n	80052d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2204      	movs	r2, #4
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052bc:	88fa      	ldrh	r2, [r7, #6]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	4613      	mov	r3, r2
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f8f1 	bl	80054b0 <HAL_SPI_TransmitReceive>
 80052ce:	4603      	mov	r3, r0
 80052d0:	e0ea      	b.n	80054a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_SPI_Receive+0x52>
 80052dc:	2302      	movs	r3, #2
 80052de:	e0e3      	b.n	80054a8 <HAL_SPI_Receive+0x21a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052e8:	f7fd fd5a 	bl	8002da0 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d002      	beq.n	8005300 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
 80052fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052fe:	e0ca      	b.n	8005496 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_SPI_Receive+0x7e>
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005310:	e0c1      	b.n	8005496 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2204      	movs	r2, #4
 8005316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88fa      	ldrh	r2, [r7, #6]
 8005330:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005358:	d10f      	bne.n	800537a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005368:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005378:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d007      	beq.n	8005398 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005396:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d162      	bne.n	8005466 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053a0:	e02e      	b.n	8005400 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d115      	bne.n	80053dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f103 020c 	add.w	r2, r3, #12
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	7812      	ldrb	r2, [r2, #0]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053da:	e011      	b.n	8005400 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053dc:	f7fd fce0 	bl	8002da0 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d803      	bhi.n	80053f4 <HAL_SPI_Receive+0x166>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d102      	bne.n	80053fa <HAL_SPI_Receive+0x16c>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053fe:	e04a      	b.n	8005496 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1cb      	bne.n	80053a2 <HAL_SPI_Receive+0x114>
 800540a:	e031      	b.n	8005470 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d113      	bne.n	8005442 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	b292      	uxth	r2, r2
 8005426:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	1c9a      	adds	r2, r3, #2
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005440:	e011      	b.n	8005466 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005442:	f7fd fcad 	bl	8002da0 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d803      	bhi.n	800545a <HAL_SPI_Receive+0x1cc>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d102      	bne.n	8005460 <HAL_SPI_Receive+0x1d2>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005464:	e017      	b.n	8005496 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1cd      	bne.n	800540c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	6839      	ldr	r1, [r7, #0]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fa45 	bl	8005904 <SPI_EndRxTransaction>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	75fb      	strb	r3, [r7, #23]
 8005492:	e000      	b.n	8005496 <HAL_SPI_Receive+0x208>
  }

error :
 8005494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054be:	2301      	movs	r3, #1
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_SPI_TransmitReceive+0x26>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e18a      	b.n	80057ec <HAL_SPI_TransmitReceive+0x33c>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054de:	f7fd fc5f 	bl	8002da0 <HAL_GetTick>
 80054e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054f4:	887b      	ldrh	r3, [r7, #2]
 80054f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d00f      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x70>
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005506:	d107      	bne.n	8005518 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <HAL_SPI_TransmitReceive+0x68>
 8005510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005514:	2b04      	cmp	r3, #4
 8005516:	d003      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005518:	2302      	movs	r3, #2
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800551e:	e15b      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_SPI_TransmitReceive+0x82>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_SPI_TransmitReceive+0x82>
 800552c:	887b      	ldrh	r3, [r7, #2]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005538:	e14e      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b04      	cmp	r3, #4
 8005544:	d003      	beq.n	800554e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2205      	movs	r2, #5
 800554a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	887a      	ldrh	r2, [r7, #2]
 800555e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	887a      	ldrh	r2, [r7, #2]
 8005564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	887a      	ldrh	r2, [r7, #2]
 8005570:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	887a      	ldrh	r2, [r7, #2]
 8005576:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d007      	beq.n	80055a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055aa:	d178      	bne.n	800569e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_SPI_TransmitReceive+0x10a>
 80055b4:	8b7b      	ldrh	r3, [r7, #26]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d166      	bne.n	8005688 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	881a      	ldrh	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	1c9a      	adds	r2, r3, #2
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055de:	e053      	b.n	8005688 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d11b      	bne.n	8005626 <HAL_SPI_TransmitReceive+0x176>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d016      	beq.n	8005626 <HAL_SPI_TransmitReceive+0x176>
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d113      	bne.n	8005626 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	881a      	ldrh	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	1c9a      	adds	r2, r3, #2
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d119      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x1b8>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d014      	beq.n	8005668 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	b292      	uxth	r2, r2
 800564a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	1c9a      	adds	r2, r3, #2
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565a:	b29b      	uxth	r3, r3
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005664:	2301      	movs	r3, #1
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005668:	f7fd fb9a 	bl	8002da0 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005674:	429a      	cmp	r2, r3
 8005676:	d807      	bhi.n	8005688 <HAL_SPI_TransmitReceive+0x1d8>
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d003      	beq.n	8005688 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005686:	e0a7      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1a6      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x130>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1a1      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x130>
 800569c:	e07c      	b.n	8005798 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_SPI_TransmitReceive+0x1fc>
 80056a6:	8b7b      	ldrh	r3, [r7, #26]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d16b      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	7812      	ldrb	r2, [r2, #0]
 80056b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d2:	e057      	b.n	8005784 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d11c      	bne.n	800571c <HAL_SPI_TransmitReceive+0x26c>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d017      	beq.n	800571c <HAL_SPI_TransmitReceive+0x26c>
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d114      	bne.n	800571c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	330c      	adds	r3, #12
 80056fc:	7812      	ldrb	r2, [r2, #0]
 80056fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d119      	bne.n	800575e <HAL_SPI_TransmitReceive+0x2ae>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d014      	beq.n	800575e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800575a:	2301      	movs	r3, #1
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800575e:	f7fd fb1f 	bl	8002da0 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800576a:	429a      	cmp	r2, r3
 800576c:	d803      	bhi.n	8005776 <HAL_SPI_TransmitReceive+0x2c6>
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d102      	bne.n	800577c <HAL_SPI_TransmitReceive+0x2cc>
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d103      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005782:	e029      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1a2      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x224>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d19d      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f917 	bl	80059d0 <SPI_EndRxTxTransaction>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d006      	beq.n	80057b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2220      	movs	r2, #32
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057b4:	e010      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10b      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	e000      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3730      	adds	r7, #48	; 0x30
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005804:	f7fd facc 	bl	8002da0 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	4413      	add	r3, r2
 8005812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005814:	f7fd fac4 	bl	8002da0 <HAL_GetTick>
 8005818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800581a:	4b39      	ldr	r3, [pc, #228]	; (8005900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	015b      	lsls	r3, r3, #5
 8005820:	0d1b      	lsrs	r3, r3, #20
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	fb02 f303 	mul.w	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800582a:	e054      	b.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d050      	beq.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005834:	f7fd fab4 	bl	8002da0 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	429a      	cmp	r2, r3
 8005842:	d902      	bls.n	800584a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d13d      	bne.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005862:	d111      	bne.n	8005888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586c:	d004      	beq.n	8005878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005876:	d107      	bne.n	8005888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005890:	d10f      	bne.n	80058b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e017      	b.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4013      	ands	r3, r2
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d19b      	bne.n	800582c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	2000000c 	.word	0x2000000c

08005904 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005918:	d111      	bne.n	800593e <SPI_EndRxTransaction+0x3a>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005922:	d004      	beq.n	800592e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592c:	d107      	bne.n	800593e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800593c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005946:	d12a      	bne.n	800599e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005950:	d012      	beq.n	8005978 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2200      	movs	r2, #0
 800595a:	2180      	movs	r1, #128	; 0x80
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f7ff ff49 	bl	80057f4 <SPI_WaitFlagStateUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d02d      	beq.n	80059c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	f043 0220 	orr.w	r2, r3, #32
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e026      	b.n	80059c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2200      	movs	r2, #0
 8005980:	2101      	movs	r1, #1
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f7ff ff36 	bl	80057f4 <SPI_WaitFlagStateUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01a      	beq.n	80059c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005992:	f043 0220 	orr.w	r2, r3, #32
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e013      	b.n	80059c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2200      	movs	r2, #0
 80059a6:	2101      	movs	r1, #1
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff ff23 	bl	80057f4 <SPI_WaitFlagStateUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e000      	b.n	80059c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <SPI_EndRxTxTransaction+0x7c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1b      	ldr	r2, [pc, #108]	; (8005a50 <SPI_EndRxTxTransaction+0x80>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	0d5b      	lsrs	r3, r3, #21
 80059e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fa:	d112      	bne.n	8005a22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	2180      	movs	r1, #128	; 0x80
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff fef4 	bl	80057f4 <SPI_WaitFlagStateUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d016      	beq.n	8005a40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e00f      	b.n	8005a42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a38:	2b80      	cmp	r3, #128	; 0x80
 8005a3a:	d0f2      	beq.n	8005a22 <SPI_EndRxTxTransaction+0x52>
 8005a3c:	e000      	b.n	8005a40 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a3e:	bf00      	nop
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	165e9f81 	.word	0x165e9f81

08005a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e041      	b.n	8005aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fc ffcc 	bl	8002a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	4619      	mov	r1, r3
 8005a92:	4610      	mov	r0, r2
 8005a94:	f000 fb8c 	bl	80061b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d001      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e044      	b.n	8005b96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1e      	ldr	r2, [pc, #120]	; (8005ba4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d018      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x6c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b36:	d013      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x6c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00e      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x6c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a19      	ldr	r2, [pc, #100]	; (8005bac <HAL_TIM_Base_Start_IT+0xb8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x6c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a17      	ldr	r2, [pc, #92]	; (8005bb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x6c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d111      	bne.n	8005b84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b06      	cmp	r3, #6
 8005b70:	d010      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	e007      	b.n	8005b94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	40000c00 	.word	0x40000c00
 8005bb4:	40014000 	.word	0x40014000

08005bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e041      	b.n	8005c4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f839 	bl	8005c56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f000 fada 	bl	80061b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d855      	bhi.n	8005d2c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005cbd 	.word	0x08005cbd
 8005c8c:	08005d2d 	.word	0x08005d2d
 8005c90:	08005d2d 	.word	0x08005d2d
 8005c94:	08005d2d 	.word	0x08005d2d
 8005c98:	08005cd9 	.word	0x08005cd9
 8005c9c:	08005d2d 	.word	0x08005d2d
 8005ca0:	08005d2d 	.word	0x08005d2d
 8005ca4:	08005d2d 	.word	0x08005d2d
 8005ca8:	08005cf5 	.word	0x08005cf5
 8005cac:	08005d2d 	.word	0x08005d2d
 8005cb0:	08005d2d 	.word	0x08005d2d
 8005cb4:	08005d2d 	.word	0x08005d2d
 8005cb8:	08005d11 	.word	0x08005d11
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fd fa7d 	bl	80031d0 <HAL_DMA_Abort_IT>
      break;
 8005cd6:	e02c      	b.n	8005d32 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fd fa6f 	bl	80031d0 <HAL_DMA_Abort_IT>
      break;
 8005cf2:	e01e      	b.n	8005d32 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fd fa61 	bl	80031d0 <HAL_DMA_Abort_IT>
      break;
 8005d0e:	e010      	b.n	8005d32 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fd fa53 	bl	80031d0 <HAL_DMA_Abort_IT>
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d30:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d157      	bne.n	8005de8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fcdb 	bl	80066fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d117      	bne.n	8005d80 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a1a      	ldr	r2, [r3, #32]
 8005d56:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10f      	bne.n	8005d80 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a1a      	ldr	r2, [r3, #32]
 8005d66:	f240 4344 	movw	r3, #1092	; 0x444
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d107      	bne.n	8005d80 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d7e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10f      	bne.n	8005db0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	f240 4344 	movw	r3, #1092	; 0x444
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d107      	bne.n	8005db0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dbe:	e013      	b.n	8005de8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d104      	bne.n	8005dd0 <HAL_TIM_PWM_Stop_DMA+0x164>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dce:	e00b      	b.n	8005de8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d104      	bne.n	8005de0 <HAL_TIM_PWM_Stop_DMA+0x174>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dde:	e003      	b.n	8005de8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40010000 	.word	0x40010000

08005df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e0ae      	b.n	8005f74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b0c      	cmp	r3, #12
 8005e22:	f200 809f 	bhi.w	8005f64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e26:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e61 	.word	0x08005e61
 8005e30:	08005f65 	.word	0x08005f65
 8005e34:	08005f65 	.word	0x08005f65
 8005e38:	08005f65 	.word	0x08005f65
 8005e3c:	08005ea1 	.word	0x08005ea1
 8005e40:	08005f65 	.word	0x08005f65
 8005e44:	08005f65 	.word	0x08005f65
 8005e48:	08005f65 	.word	0x08005f65
 8005e4c:	08005ee3 	.word	0x08005ee3
 8005e50:	08005f65 	.word	0x08005f65
 8005e54:	08005f65 	.word	0x08005f65
 8005e58:	08005f65 	.word	0x08005f65
 8005e5c:	08005f23 	.word	0x08005f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fa22 	bl	80062b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0208 	orr.w	r2, r2, #8
 8005e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0204 	bic.w	r2, r2, #4
 8005e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6999      	ldr	r1, [r3, #24]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	619a      	str	r2, [r3, #24]
      break;
 8005e9e:	e064      	b.n	8005f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fa68 	bl	800637c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6999      	ldr	r1, [r3, #24]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	021a      	lsls	r2, r3, #8
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	619a      	str	r2, [r3, #24]
      break;
 8005ee0:	e043      	b.n	8005f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fab3 	bl	8006454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0208 	orr.w	r2, r2, #8
 8005efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0204 	bic.w	r2, r2, #4
 8005f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69d9      	ldr	r1, [r3, #28]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	61da      	str	r2, [r3, #28]
      break;
 8005f20:	e023      	b.n	8005f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fafd 	bl	8006528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69d9      	ldr	r1, [r3, #28]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	021a      	lsls	r2, r3, #8
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	61da      	str	r2, [r3, #28]
      break;
 8005f62:	e002      	b.n	8005f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
      break;
 8005f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_TIM_ConfigClockSource+0x1c>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e0b4      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x186>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd0:	d03e      	beq.n	8006050 <HAL_TIM_ConfigClockSource+0xd4>
 8005fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd6:	f200 8087 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	f000 8086 	beq.w	80060ee <HAL_TIM_ConfigClockSource+0x172>
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe6:	d87f      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe8:	2b70      	cmp	r3, #112	; 0x70
 8005fea:	d01a      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0xa6>
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d87b      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff0:	2b60      	cmp	r3, #96	; 0x60
 8005ff2:	d050      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x11a>
 8005ff4:	2b60      	cmp	r3, #96	; 0x60
 8005ff6:	d877      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff8:	2b50      	cmp	r3, #80	; 0x50
 8005ffa:	d03c      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0xfa>
 8005ffc:	2b50      	cmp	r3, #80	; 0x50
 8005ffe:	d873      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d058      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d86f      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006008:	2b30      	cmp	r3, #48	; 0x30
 800600a:	d064      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15a>
 800600c:	2b30      	cmp	r3, #48	; 0x30
 800600e:	d86b      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006010:	2b20      	cmp	r3, #32
 8006012:	d060      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d867      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d05c      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15a>
 800601c:	2b10      	cmp	r3, #16
 800601e:	d05a      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006020:	e062      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6899      	ldr	r1, [r3, #8]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f000 fb43 	bl	80066bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	609a      	str	r2, [r3, #8]
      break;
 800604e:	e04f      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	6899      	ldr	r1, [r3, #8]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f000 fb2c 	bl	80066bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006072:	609a      	str	r2, [r3, #8]
      break;
 8006074:	e03c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6859      	ldr	r1, [r3, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	461a      	mov	r2, r3
 8006084:	f000 faa0 	bl	80065c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2150      	movs	r1, #80	; 0x50
 800608e:	4618      	mov	r0, r3
 8006090:	f000 faf9 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 8006094:	e02c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6859      	ldr	r1, [r3, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f000 fabf 	bl	8006626 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2160      	movs	r1, #96	; 0x60
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fae9 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 80060b4:	e01c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6859      	ldr	r1, [r3, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f000 fa80 	bl	80065c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2140      	movs	r1, #64	; 0x40
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fad9 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 80060d4:	e00c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f000 fad0 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 80060e6:	e003      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	e000      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d107      	bne.n	8006146 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006144:	e02a      	b.n	800619c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	429a      	cmp	r2, r3
 800614e:	d107      	bne.n	8006160 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2202      	movs	r2, #2
 8006154:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800615e:	e01d      	b.n	800619c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d107      	bne.n	800617a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2204      	movs	r2, #4
 800616e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006178:	e010      	b.n	800619c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	429a      	cmp	r2, r3
 8006182:	d107      	bne.n	8006194 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2208      	movs	r2, #8
 8006188:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006192:	e003      	b.n	800619c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff ffb4 	bl	800610a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a34      	ldr	r2, [pc, #208]	; (8006294 <TIM_Base_SetConfig+0xe4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00f      	beq.n	80061e8 <TIM_Base_SetConfig+0x38>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d00b      	beq.n	80061e8 <TIM_Base_SetConfig+0x38>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a31      	ldr	r2, [pc, #196]	; (8006298 <TIM_Base_SetConfig+0xe8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d007      	beq.n	80061e8 <TIM_Base_SetConfig+0x38>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a30      	ldr	r2, [pc, #192]	; (800629c <TIM_Base_SetConfig+0xec>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_Base_SetConfig+0x38>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a2f      	ldr	r2, [pc, #188]	; (80062a0 <TIM_Base_SetConfig+0xf0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d108      	bne.n	80061fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a25      	ldr	r2, [pc, #148]	; (8006294 <TIM_Base_SetConfig+0xe4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01b      	beq.n	800623a <TIM_Base_SetConfig+0x8a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	d017      	beq.n	800623a <TIM_Base_SetConfig+0x8a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a22      	ldr	r2, [pc, #136]	; (8006298 <TIM_Base_SetConfig+0xe8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <TIM_Base_SetConfig+0x8a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a21      	ldr	r2, [pc, #132]	; (800629c <TIM_Base_SetConfig+0xec>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00f      	beq.n	800623a <TIM_Base_SetConfig+0x8a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a20      	ldr	r2, [pc, #128]	; (80062a0 <TIM_Base_SetConfig+0xf0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00b      	beq.n	800623a <TIM_Base_SetConfig+0x8a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1f      	ldr	r2, [pc, #124]	; (80062a4 <TIM_Base_SetConfig+0xf4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d007      	beq.n	800623a <TIM_Base_SetConfig+0x8a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a1e      	ldr	r2, [pc, #120]	; (80062a8 <TIM_Base_SetConfig+0xf8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <TIM_Base_SetConfig+0x8a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <TIM_Base_SetConfig+0xfc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d108      	bne.n	800624c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a08      	ldr	r2, [pc, #32]	; (8006294 <TIM_Base_SetConfig+0xe4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d103      	bne.n	8006280 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	615a      	str	r2, [r3, #20]
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40010000 	.word	0x40010000
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40000c00 	.word	0x40000c00
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800

080062b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f023 0201 	bic.w	r2, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f023 0302 	bic.w	r3, r3, #2
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <TIM_OC1_SetConfig+0xc8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d10c      	bne.n	8006326 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0308 	bic.w	r3, r3, #8
 8006312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f023 0304 	bic.w	r3, r3, #4
 8006324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a13      	ldr	r2, [pc, #76]	; (8006378 <TIM_OC1_SetConfig+0xc8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d111      	bne.n	8006352 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	621a      	str	r2, [r3, #32]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	40010000 	.word	0x40010000

0800637c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0210 	bic.w	r2, r3, #16
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0320 	bic.w	r3, r3, #32
 80063c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <TIM_OC2_SetConfig+0xd4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d10d      	bne.n	80063f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a15      	ldr	r2, [pc, #84]	; (8006450 <TIM_OC2_SetConfig+0xd4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d113      	bne.n	8006428 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000

08006454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800649c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1d      	ldr	r2, [pc, #116]	; (8006524 <TIM_OC3_SetConfig+0xd0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10d      	bne.n	80064ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a14      	ldr	r2, [pc, #80]	; (8006524 <TIM_OC3_SetConfig+0xd0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d113      	bne.n	80064fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	621a      	str	r2, [r3, #32]
}
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	40010000 	.word	0x40010000

08006528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	031b      	lsls	r3, r3, #12
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a10      	ldr	r2, [pc, #64]	; (80065c4 <TIM_OC4_SetConfig+0x9c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d109      	bne.n	800659c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800658e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	019b      	lsls	r3, r3, #6
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	621a      	str	r2, [r3, #32]
}
 80065b6:	bf00      	nop
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40010000 	.word	0x40010000

080065c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 030a 	bic.w	r3, r3, #10
 8006604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006626:	b480      	push	{r7}
 8006628:	b087      	sub	sp, #28
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f023 0210 	bic.w	r2, r3, #16
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	031b      	lsls	r3, r3, #12
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f043 0307 	orr.w	r3, r3, #7
 80066a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	609a      	str	r2, [r3, #8]
}
 80066b0:	bf00      	nop
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	021a      	lsls	r2, r3, #8
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	431a      	orrs	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	609a      	str	r2, [r3, #8]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2201      	movs	r2, #1
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1a      	ldr	r2, [r3, #32]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	43db      	mvns	r3, r3
 800671e:	401a      	ands	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1a      	ldr	r2, [r3, #32]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	fa01 f303 	lsl.w	r3, r1, r3
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
	...

08006748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800675c:	2302      	movs	r3, #2
 800675e:	e050      	b.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1c      	ldr	r2, [pc, #112]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d018      	beq.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d013      	beq.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a18      	ldr	r2, [pc, #96]	; (8006814 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00e      	beq.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a16      	ldr	r2, [pc, #88]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d009      	beq.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a15      	ldr	r2, [pc, #84]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d004      	beq.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a13      	ldr	r2, [pc, #76]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d10c      	bne.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40010000 	.word	0x40010000
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800
 800681c:	40000c00 	.word	0x40000c00
 8006820:	40014000 	.word	0x40014000

08006824 <__NVIC_SetPriority>:
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	6039      	str	r1, [r7, #0]
 800682e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006834:	2b00      	cmp	r3, #0
 8006836:	db0a      	blt.n	800684e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	490c      	ldr	r1, [pc, #48]	; (8006870 <__NVIC_SetPriority+0x4c>)
 800683e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006842:	0112      	lsls	r2, r2, #4
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	440b      	add	r3, r1
 8006848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800684c:	e00a      	b.n	8006864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	4908      	ldr	r1, [pc, #32]	; (8006874 <__NVIC_SetPriority+0x50>)
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	3b04      	subs	r3, #4
 800685c:	0112      	lsls	r2, r2, #4
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	440b      	add	r3, r1
 8006862:	761a      	strb	r2, [r3, #24]
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	e000e100 	.word	0xe000e100
 8006874:	e000ed00 	.word	0xe000ed00

08006878 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <SysTick_Handler+0x1c>)
 800687e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006880:	f001 fd28 	bl	80082d4 <xTaskGetSchedulerState>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d001      	beq.n	800688e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800688a:	f002 fb0d 	bl	8008ea8 <xPortSysTickHandler>
  }
}
 800688e:	bf00      	nop
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	e000e010 	.word	0xe000e010

08006898 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800689c:	2100      	movs	r1, #0
 800689e:	f06f 0004 	mvn.w	r0, #4
 80068a2:	f7ff ffbf 	bl	8006824 <__NVIC_SetPriority>
#endif
}
 80068a6:	bf00      	nop
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b2:	f3ef 8305 	mrs	r3, IPSR
 80068b6:	603b      	str	r3, [r7, #0]
  return(result);
 80068b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068be:	f06f 0305 	mvn.w	r3, #5
 80068c2:	607b      	str	r3, [r7, #4]
 80068c4:	e00c      	b.n	80068e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <osKernelInitialize+0x44>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d105      	bne.n	80068da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068ce:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <osKernelInitialize+0x44>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	607b      	str	r3, [r7, #4]
 80068d8:	e002      	b.n	80068e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068da:	f04f 33ff 	mov.w	r3, #4294967295
 80068de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068e0:	687b      	ldr	r3, [r7, #4]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20000728 	.word	0x20000728

080068f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068fa:	f3ef 8305 	mrs	r3, IPSR
 80068fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006900:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006906:	f06f 0305 	mvn.w	r3, #5
 800690a:	607b      	str	r3, [r7, #4]
 800690c:	e010      	b.n	8006930 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800690e:	4b0b      	ldr	r3, [pc, #44]	; (800693c <osKernelStart+0x48>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d109      	bne.n	800692a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006916:	f7ff ffbf 	bl	8006898 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800691a:	4b08      	ldr	r3, [pc, #32]	; (800693c <osKernelStart+0x48>)
 800691c:	2202      	movs	r2, #2
 800691e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006920:	f001 f87c 	bl	8007a1c <vTaskStartScheduler>
      stat = osOK;
 8006924:	2300      	movs	r3, #0
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	e002      	b.n	8006930 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006930:	687b      	ldr	r3, [r7, #4]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000728 	.word	0x20000728

08006940 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006940:	b580      	push	{r7, lr}
 8006942:	b08e      	sub	sp, #56	; 0x38
 8006944:	af04      	add	r7, sp, #16
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006950:	f3ef 8305 	mrs	r3, IPSR
 8006954:	617b      	str	r3, [r7, #20]
  return(result);
 8006956:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006958:	2b00      	cmp	r3, #0
 800695a:	d17e      	bne.n	8006a5a <osThreadNew+0x11a>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d07b      	beq.n	8006a5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006962:	2380      	movs	r3, #128	; 0x80
 8006964:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006966:	2318      	movs	r3, #24
 8006968:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800696e:	f04f 33ff 	mov.w	r3, #4294967295
 8006972:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d045      	beq.n	8006a06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <osThreadNew+0x48>
        name = attr->name;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <osThreadNew+0x6e>
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	2b38      	cmp	r3, #56	; 0x38
 80069a0:	d805      	bhi.n	80069ae <osThreadNew+0x6e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <osThreadNew+0x72>
        return (NULL);
 80069ae:	2300      	movs	r3, #0
 80069b0:	e054      	b.n	8006a5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	089b      	lsrs	r3, r3, #2
 80069c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00e      	beq.n	80069e8 <osThreadNew+0xa8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2bbb      	cmp	r3, #187	; 0xbb
 80069d0:	d90a      	bls.n	80069e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d006      	beq.n	80069e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <osThreadNew+0xa8>
        mem = 1;
 80069e2:	2301      	movs	r3, #1
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	e010      	b.n	8006a0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10c      	bne.n	8006a0a <osThreadNew+0xca>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d108      	bne.n	8006a0a <osThreadNew+0xca>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <osThreadNew+0xca>
          mem = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	e001      	b.n	8006a0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d110      	bne.n	8006a32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a18:	9202      	str	r2, [sp, #8]
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6a3a      	ldr	r2, [r7, #32]
 8006a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fe0c 	bl	8007644 <xTaskCreateStatic>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	e013      	b.n	8006a5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d110      	bne.n	8006a5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f107 0310 	add.w	r3, r7, #16
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 fe57 	bl	80076fe <xTaskCreate>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d001      	beq.n	8006a5a <osThreadNew+0x11a>
            hTask = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a5a:	693b      	ldr	r3, [r7, #16]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3728      	adds	r7, #40	; 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a6c:	f3ef 8305 	mrs	r3, IPSR
 8006a70:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <osDelay+0x1c>
    stat = osErrorISR;
 8006a78:	f06f 0305 	mvn.w	r3, #5
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e007      	b.n	8006a90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 ff92 	bl	80079b4 <vTaskDelay>
    }
  }

  return (stat);
 8006a90:	68fb      	ldr	r3, [r7, #12]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4a07      	ldr	r2, [pc, #28]	; (8006ac8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006aac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4a06      	ldr	r2, [pc, #24]	; (8006acc <vApplicationGetIdleTaskMemory+0x30>)
 8006ab2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2280      	movs	r2, #128	; 0x80
 8006ab8:	601a      	str	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	2000072c 	.word	0x2000072c
 8006acc:	200007e8 	.word	0x200007e8

08006ad0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a07      	ldr	r2, [pc, #28]	; (8006afc <vApplicationGetTimerTaskMemory+0x2c>)
 8006ae0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4a06      	ldr	r2, [pc, #24]	; (8006b00 <vApplicationGetTimerTaskMemory+0x30>)
 8006ae6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006aee:	601a      	str	r2, [r3, #0]
}
 8006af0:	bf00      	nop
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	200009e8 	.word	0x200009e8
 8006b00:	20000aa4 	.word	0x20000aa4

08006b04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f103 0208 	add.w	r2, r3, #8
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f103 0208 	add.w	r2, r3, #8
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f103 0208 	add.w	r2, r3, #8
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	601a      	str	r2, [r3, #0]
}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d103      	bne.n	8006bc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	e00c      	b.n	8006be0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3308      	adds	r3, #8
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e002      	b.n	8006bd4 <vListInsert+0x2e>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d2f6      	bcs.n	8006bce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	601a      	str	r2, [r3, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6892      	ldr	r2, [r2, #8]
 8006c2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6852      	ldr	r2, [r2, #4]
 8006c38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d103      	bne.n	8006c4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	1e5a      	subs	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c96:	f002 f875 	bl	8008d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca2:	68f9      	ldr	r1, [r7, #12]
 8006ca4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ca6:	fb01 f303 	mul.w	r3, r1, r3
 8006caa:	441a      	add	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	68f9      	ldr	r1, [r7, #12]
 8006cca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ccc:	fb01 f303 	mul.w	r3, r1, r3
 8006cd0:	441a      	add	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	22ff      	movs	r2, #255	; 0xff
 8006cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	22ff      	movs	r2, #255	; 0xff
 8006ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d114      	bne.n	8006d16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01a      	beq.n	8006d2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3310      	adds	r3, #16
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 f929 	bl	8007f50 <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d012      	beq.n	8006d2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d04:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <xQueueGenericReset+0xcc>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	e009      	b.n	8006d2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3310      	adds	r3, #16
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff fef2 	bl	8006b04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3324      	adds	r3, #36	; 0x24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff feed 	bl	8006b04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d2a:	f002 f85b 	bl	8008de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d2e:	2301      	movs	r3, #1
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08e      	sub	sp, #56	; 0x38
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <xQueueGenericCreateStatic+0x52>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <xQueueGenericCreateStatic+0x56>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueGenericCreateStatic+0x58>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	623b      	str	r3, [r7, #32]
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <xQueueGenericCreateStatic+0x7e>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <xQueueGenericCreateStatic+0x82>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <xQueueGenericCreateStatic+0x84>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	61fb      	str	r3, [r7, #28]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dda:	2350      	movs	r3, #80	; 0x50
 8006ddc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b50      	cmp	r3, #80	; 0x50
 8006de2:	d00a      	beq.n	8006dfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	61bb      	str	r3, [r7, #24]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dfa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00d      	beq.n	8006e22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4613      	mov	r3, r2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f805 	bl	8006e2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3730      	adds	r7, #48	; 0x30
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d103      	bne.n	8006e48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e002      	b.n	8006e4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	69b8      	ldr	r0, [r7, #24]
 8006e5e:	f7ff ff05 	bl	8006c6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08e      	sub	sp, #56	; 0x38
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e82:	2300      	movs	r3, #0
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <xQueueGenericSend+0x32>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <xQueueGenericSend+0x40>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <xQueueGenericSend+0x44>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <xQueueGenericSend+0x46>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <xQueueGenericSend+0x60>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d103      	bne.n	8006ee2 <xQueueGenericSend+0x6e>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <xQueueGenericSend+0x72>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <xQueueGenericSend+0x74>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <xQueueGenericSend+0x8e>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	623b      	str	r3, [r7, #32]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f02:	f001 f9e7 	bl	80082d4 <xTaskGetSchedulerState>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <xQueueGenericSend+0x9e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <xQueueGenericSend+0xa2>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <xQueueGenericSend+0xa4>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	61fb      	str	r3, [r7, #28]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f32:	f001 ff27 	bl	8008d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <xQueueGenericSend+0xd4>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d129      	bne.n	8006f9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f4e:	f000 fa0b 	bl	8007368 <prvCopyDataToQueue>
 8006f52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d010      	beq.n	8006f7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fff5 	bl	8007f50 <xTaskRemoveFromEventList>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d013      	beq.n	8006f94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f6c:	4b3f      	ldr	r3, [pc, #252]	; (800706c <xQueueGenericSend+0x1f8>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	e00a      	b.n	8006f94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f84:	4b39      	ldr	r3, [pc, #228]	; (800706c <xQueueGenericSend+0x1f8>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f94:	f001 ff26 	bl	8008de4 <vPortExitCritical>
				return pdPASS;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e063      	b.n	8007064 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fa2:	f001 ff1f 	bl	8008de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e05c      	b.n	8007064 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fb0:	f107 0314 	add.w	r3, r7, #20
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 f82f 	bl	8008018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fbe:	f001 ff11 	bl	8008de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fc2:	f000 fd9b 	bl	8007afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fc6:	f001 fedd 	bl	8008d84 <vPortEnterCritical>
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd0:	b25b      	sxtb	r3, r3
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d103      	bne.n	8006fe0 <xQueueGenericSend+0x16c>
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe6:	b25b      	sxtb	r3, r3
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fec:	d103      	bne.n	8006ff6 <xQueueGenericSend+0x182>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ff6:	f001 fef5 	bl	8008de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ffa:	1d3a      	adds	r2, r7, #4
 8006ffc:	f107 0314 	add.w	r3, r7, #20
 8007000:	4611      	mov	r1, r2
 8007002:	4618      	mov	r0, r3
 8007004:	f001 f81e 	bl	8008044 <xTaskCheckForTimeOut>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d124      	bne.n	8007058 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800700e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007010:	f000 faa2 	bl	8007558 <prvIsQueueFull>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d018      	beq.n	800704c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	3310      	adds	r3, #16
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	4611      	mov	r1, r2
 8007022:	4618      	mov	r0, r3
 8007024:	f000 ff44 	bl	8007eb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702a:	f000 fa2d 	bl	8007488 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800702e:	f000 fd73 	bl	8007b18 <xTaskResumeAll>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	f47f af7c 	bne.w	8006f32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800703a:	4b0c      	ldr	r3, [pc, #48]	; (800706c <xQueueGenericSend+0x1f8>)
 800703c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	e772      	b.n	8006f32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800704c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800704e:	f000 fa1b 	bl	8007488 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007052:	f000 fd61 	bl	8007b18 <xTaskResumeAll>
 8007056:	e76c      	b.n	8006f32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800705a:	f000 fa15 	bl	8007488 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800705e:	f000 fd5b 	bl	8007b18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007062:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007064:	4618      	mov	r0, r3
 8007066:	3738      	adds	r7, #56	; 0x38
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b090      	sub	sp, #64	; 0x40
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d103      	bne.n	80070ac <xQueueGenericSendFromISR+0x3c>
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <xQueueGenericSendFromISR+0x40>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <xQueueGenericSendFromISR+0x42>
 80070b0:	2300      	movs	r3, #0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d103      	bne.n	80070da <xQueueGenericSendFromISR+0x6a>
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <xQueueGenericSendFromISR+0x6e>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xQueueGenericSendFromISR+0x70>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	623b      	str	r3, [r7, #32]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070fa:	f001 ff25 	bl	8008f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	61fa      	str	r2, [r7, #28]
 8007114:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007116:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007118:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007122:	429a      	cmp	r2, r3
 8007124:	d302      	bcc.n	800712c <xQueueGenericSendFromISR+0xbc>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d12f      	bne.n	800718c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007142:	f000 f911 	bl	8007368 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007146:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714e:	d112      	bne.n	8007176 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	d016      	beq.n	8007186 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	3324      	adds	r3, #36	; 0x24
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fef7 	bl	8007f50 <xTaskRemoveFromEventList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00e      	beq.n	8007186 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e007      	b.n	8007186 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007176:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800717a:	3301      	adds	r3, #1
 800717c:	b2db      	uxtb	r3, r3
 800717e:	b25a      	sxtb	r2, r3
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007186:	2301      	movs	r3, #1
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800718a:	e001      	b.n	8007190 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800718c:	2300      	movs	r3, #0
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800719a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800719c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3740      	adds	r7, #64	; 0x40
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08c      	sub	sp, #48	; 0x30
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <xQueueReceive+0x30>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	623b      	str	r3, [r7, #32]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <xQueueReceive+0x3e>
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <xQueueReceive+0x42>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <xQueueReceive+0x44>
 80071ea:	2300      	movs	r3, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <xQueueReceive+0x5e>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	61fb      	str	r3, [r7, #28]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007206:	f001 f865 	bl	80082d4 <xTaskGetSchedulerState>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <xQueueReceive+0x6e>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <xQueueReceive+0x72>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <xQueueReceive+0x74>
 800721a:	2300      	movs	r3, #0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <xQueueReceive+0x8e>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	61bb      	str	r3, [r7, #24]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007236:	f001 fda5 	bl	8008d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d01f      	beq.n	8007286 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724a:	f000 f8f7 	bl	800743c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	1e5a      	subs	r2, r3, #1
 8007252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007254:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00f      	beq.n	800727e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	3310      	adds	r3, #16
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fe74 	bl	8007f50 <xTaskRemoveFromEventList>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800726e:	4b3d      	ldr	r3, [pc, #244]	; (8007364 <xQueueReceive+0x1bc>)
 8007270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800727e:	f001 fdb1 	bl	8008de4 <vPortExitCritical>
				return pdPASS;
 8007282:	2301      	movs	r3, #1
 8007284:	e069      	b.n	800735a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d103      	bne.n	8007294 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800728c:	f001 fdaa 	bl	8008de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007290:	2300      	movs	r3, #0
 8007292:	e062      	b.n	800735a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800729a:	f107 0310 	add.w	r3, r7, #16
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 feba 	bl	8008018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072a4:	2301      	movs	r3, #1
 80072a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072a8:	f001 fd9c 	bl	8008de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072ac:	f000 fc26 	bl	8007afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072b0:	f001 fd68 	bl	8008d84 <vPortEnterCritical>
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	d103      	bne.n	80072ca <xQueueReceive+0x122>
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d6:	d103      	bne.n	80072e0 <xQueueReceive+0x138>
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e0:	f001 fd80 	bl	8008de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072e4:	1d3a      	adds	r2, r7, #4
 80072e6:	f107 0310 	add.w	r3, r7, #16
 80072ea:	4611      	mov	r1, r2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fea9 	bl	8008044 <xTaskCheckForTimeOut>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d123      	bne.n	8007340 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072fa:	f000 f917 	bl	800752c <prvIsQueueEmpty>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d017      	beq.n	8007334 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	3324      	adds	r3, #36	; 0x24
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	4611      	mov	r1, r2
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fdcf 	bl	8007eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007314:	f000 f8b8 	bl	8007488 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007318:	f000 fbfe 	bl	8007b18 <xTaskResumeAll>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d189      	bne.n	8007236 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <xQueueReceive+0x1bc>)
 8007324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	e780      	b.n	8007236 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007336:	f000 f8a7 	bl	8007488 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800733a:	f000 fbed 	bl	8007b18 <xTaskResumeAll>
 800733e:	e77a      	b.n	8007236 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007342:	f000 f8a1 	bl	8007488 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007346:	f000 fbe7 	bl	8007b18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800734a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800734c:	f000 f8ee 	bl	800752c <prvIsQueueEmpty>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	f43f af6f 	beq.w	8007236 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007358:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800735a:	4618      	mov	r0, r3
 800735c:	3730      	adds	r7, #48	; 0x30
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10d      	bne.n	80073a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d14d      	bne.n	800742a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 ffbc 	bl	8008310 <xTaskPriorityDisinherit>
 8007398:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	609a      	str	r2, [r3, #8]
 80073a0:	e043      	b.n	800742a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d119      	bne.n	80073dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6858      	ldr	r0, [r3, #4]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	461a      	mov	r2, r3
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	f002 f826 	bl	8009404 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	441a      	add	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d32b      	bcc.n	800742a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	605a      	str	r2, [r3, #4]
 80073da:	e026      	b.n	800742a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68d8      	ldr	r0, [r3, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	461a      	mov	r2, r3
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	f002 f80c 	bl	8009404 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	425b      	negs	r3, r3
 80073f6:	441a      	add	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d207      	bcs.n	8007418 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	425b      	negs	r3, r3
 8007412:	441a      	add	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d105      	bne.n	800742a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	3b01      	subs	r3, #1
 8007428:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007432:	697b      	ldr	r3, [r7, #20]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d018      	beq.n	8007480 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	441a      	add	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	d303      	bcc.n	8007470 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68d9      	ldr	r1, [r3, #12]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	461a      	mov	r2, r3
 800747a:	6838      	ldr	r0, [r7, #0]
 800747c:	f001 ffc2 	bl	8009404 <memcpy>
	}
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007490:	f001 fc78 	bl	8008d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800749a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800749c:	e011      	b.n	80074c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d012      	beq.n	80074cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3324      	adds	r3, #36	; 0x24
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fd50 	bl	8007f50 <xTaskRemoveFromEventList>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074b6:	f000 fe27 	bl	8008108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	3b01      	subs	r3, #1
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	dce9      	bgt.n	800749e <prvUnlockQueue+0x16>
 80074ca:	e000      	b.n	80074ce <prvUnlockQueue+0x46>
					break;
 80074cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	22ff      	movs	r2, #255	; 0xff
 80074d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074d6:	f001 fc85 	bl	8008de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074da:	f001 fc53 	bl	8008d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074e6:	e011      	b.n	800750c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d012      	beq.n	8007516 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3310      	adds	r3, #16
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fd2b 	bl	8007f50 <xTaskRemoveFromEventList>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007500:	f000 fe02 	bl	8008108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	3b01      	subs	r3, #1
 8007508:	b2db      	uxtb	r3, r3
 800750a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800750c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007510:	2b00      	cmp	r3, #0
 8007512:	dce9      	bgt.n	80074e8 <prvUnlockQueue+0x60>
 8007514:	e000      	b.n	8007518 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007516:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	22ff      	movs	r2, #255	; 0xff
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007520:	f001 fc60 	bl	8008de4 <vPortExitCritical>
}
 8007524:	bf00      	nop
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007534:	f001 fc26 	bl	8008d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	2b00      	cmp	r3, #0
 800753e:	d102      	bne.n	8007546 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007540:	2301      	movs	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e001      	b.n	800754a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800754a:	f001 fc4b 	bl	8008de4 <vPortExitCritical>

	return xReturn;
 800754e:	68fb      	ldr	r3, [r7, #12]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007560:	f001 fc10 	bl	8008d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756c:	429a      	cmp	r2, r3
 800756e:	d102      	bne.n	8007576 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007570:	2301      	movs	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e001      	b.n	800757a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800757a:	f001 fc33 	bl	8008de4 <vPortExitCritical>

	return xReturn;
 800757e:	68fb      	ldr	r3, [r7, #12]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	e014      	b.n	80075c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007598:	4a0f      	ldr	r2, [pc, #60]	; (80075d8 <vQueueAddToRegistry+0x50>)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10b      	bne.n	80075bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075a4:	490c      	ldr	r1, [pc, #48]	; (80075d8 <vQueueAddToRegistry+0x50>)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075ae:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <vQueueAddToRegistry+0x50>)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	4413      	add	r3, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075ba:	e006      	b.n	80075ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b07      	cmp	r3, #7
 80075c6:	d9e7      	bls.n	8007598 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000ea4 	.word	0x20000ea4

080075dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075ec:	f001 fbca 	bl	8008d84 <vPortEnterCritical>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fc:	d103      	bne.n	8007606 <vQueueWaitForMessageRestricted+0x2a>
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800760c:	b25b      	sxtb	r3, r3
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007612:	d103      	bne.n	800761c <vQueueWaitForMessageRestricted+0x40>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800761c:	f001 fbe2 	bl	8008de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	3324      	adds	r3, #36	; 0x24
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	68b9      	ldr	r1, [r7, #8]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 fc61 	bl	8007ef8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007636:	6978      	ldr	r0, [r7, #20]
 8007638:	f7ff ff26 	bl	8007488 <prvUnlockQueue>
	}
 800763c:	bf00      	nop
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007644:	b580      	push	{r7, lr}
 8007646:	b08e      	sub	sp, #56	; 0x38
 8007648:	af04      	add	r7, sp, #16
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	623b      	str	r3, [r7, #32]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800766e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <xTaskCreateStatic+0x46>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	61fb      	str	r3, [r7, #28]
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800768a:	23bc      	movs	r3, #188	; 0xbc
 800768c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2bbc      	cmp	r3, #188	; 0xbc
 8007692:	d00a      	beq.n	80076aa <xTaskCreateStatic+0x66>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	61bb      	str	r3, [r7, #24]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d01e      	beq.n	80076f0 <xTaskCreateStatic+0xac>
 80076b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01b      	beq.n	80076f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	2202      	movs	r2, #2
 80076c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076ca:	2300      	movs	r3, #0
 80076cc:	9303      	str	r3, [sp, #12]
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	9302      	str	r3, [sp, #8]
 80076d2:	f107 0314 	add.w	r3, r7, #20
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 f850 	bl	8007788 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ea:	f000 f8f3 	bl	80078d4 <prvAddNewTaskToReadyList>
 80076ee:	e001      	b.n	80076f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076f4:	697b      	ldr	r3, [r7, #20]
	}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3728      	adds	r7, #40	; 0x28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b08c      	sub	sp, #48	; 0x30
 8007702:	af04      	add	r7, sp, #16
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	603b      	str	r3, [r7, #0]
 800770a:	4613      	mov	r3, r2
 800770c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800770e:	88fb      	ldrh	r3, [r7, #6]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4618      	mov	r0, r3
 8007714:	f001 fc58 	bl	8008fc8 <pvPortMalloc>
 8007718:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00e      	beq.n	800773e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007720:	20bc      	movs	r0, #188	; 0xbc
 8007722:	f001 fc51 	bl	8008fc8 <pvPortMalloc>
 8007726:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	631a      	str	r2, [r3, #48]	; 0x30
 8007734:	e005      	b.n	8007742 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007736:	6978      	ldr	r0, [r7, #20]
 8007738:	f001 fd12 	bl	8009160 <vPortFree>
 800773c:	e001      	b.n	8007742 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d017      	beq.n	8007778 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	2300      	movs	r3, #0
 8007754:	9303      	str	r3, [sp, #12]
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	9302      	str	r3, [sp, #8]
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f80e 	bl	8007788 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800776c:	69f8      	ldr	r0, [r7, #28]
 800776e:	f000 f8b1 	bl	80078d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007772:	2301      	movs	r3, #1
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	e002      	b.n	800777e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007778:	f04f 33ff 	mov.w	r3, #4294967295
 800777c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800777e:	69bb      	ldr	r3, [r7, #24]
	}
 8007780:	4618      	mov	r0, r3
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	461a      	mov	r2, r3
 80077a0:	21a5      	movs	r1, #165	; 0xa5
 80077a2:	f001 fe3d 	bl	8009420 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077b0:	3b01      	subs	r3, #1
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	f023 0307 	bic.w	r3, r3, #7
 80077be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	617b      	str	r3, [r7, #20]
}
 80077dc:	bf00      	nop
 80077de:	e7fe      	b.n	80077de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01f      	beq.n	8007826 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	e012      	b.n	8007812 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	7819      	ldrb	r1, [r3, #0]
 80077f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	4413      	add	r3, r2
 80077fa:	3334      	adds	r3, #52	; 0x34
 80077fc:	460a      	mov	r2, r1
 80077fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	4413      	add	r3, r2
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d006      	beq.n	800781a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	3301      	adds	r3, #1
 8007810:	61fb      	str	r3, [r7, #28]
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	2b0f      	cmp	r3, #15
 8007816:	d9e9      	bls.n	80077ec <prvInitialiseNewTask+0x64>
 8007818:	e000      	b.n	800781c <prvInitialiseNewTask+0x94>
			{
				break;
 800781a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007824:	e003      	b.n	800782e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	2b37      	cmp	r3, #55	; 0x37
 8007832:	d901      	bls.n	8007838 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007834:	2337      	movs	r3, #55	; 0x37
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007842:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	2200      	movs	r2, #0
 8007848:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	3304      	adds	r3, #4
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff f978 	bl	8006b44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	3318      	adds	r3, #24
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff f973 	bl	8006b44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007862:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007872:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	2200      	movs	r2, #0
 8007880:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	3354      	adds	r3, #84	; 0x54
 8007888:	2260      	movs	r2, #96	; 0x60
 800788a:	2100      	movs	r1, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f001 fdc7 	bl	8009420 <memset>
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	4a0c      	ldr	r2, [pc, #48]	; (80078c8 <prvInitialiseNewTask+0x140>)
 8007896:	659a      	str	r2, [r3, #88]	; 0x58
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	4a0c      	ldr	r2, [pc, #48]	; (80078cc <prvInitialiseNewTask+0x144>)
 800789c:	65da      	str	r2, [r3, #92]	; 0x5c
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <prvInitialiseNewTask+0x148>)
 80078a2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	69b8      	ldr	r0, [r7, #24]
 80078aa:	f001 f941 	bl	8008b30 <pxPortInitialiseStack>
 80078ae:	4602      	mov	r2, r0
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078c0:	bf00      	nop
 80078c2:	3720      	adds	r7, #32
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	0800ba10 	.word	0x0800ba10
 80078cc:	0800ba30 	.word	0x0800ba30
 80078d0:	0800b9f0 	.word	0x0800b9f0

080078d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078dc:	f001 fa52 	bl	8008d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078e0:	4b2d      	ldr	r3, [pc, #180]	; (8007998 <prvAddNewTaskToReadyList+0xc4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	4a2c      	ldr	r2, [pc, #176]	; (8007998 <prvAddNewTaskToReadyList+0xc4>)
 80078e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ea:	4b2c      	ldr	r3, [pc, #176]	; (800799c <prvAddNewTaskToReadyList+0xc8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078f2:	4a2a      	ldr	r2, [pc, #168]	; (800799c <prvAddNewTaskToReadyList+0xc8>)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078f8:	4b27      	ldr	r3, [pc, #156]	; (8007998 <prvAddNewTaskToReadyList+0xc4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d110      	bne.n	8007922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007900:	f000 fc26 	bl	8008150 <prvInitialiseTaskLists>
 8007904:	e00d      	b.n	8007922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007906:	4b26      	ldr	r3, [pc, #152]	; (80079a0 <prvAddNewTaskToReadyList+0xcc>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800790e:	4b23      	ldr	r3, [pc, #140]	; (800799c <prvAddNewTaskToReadyList+0xc8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	429a      	cmp	r2, r3
 800791a:	d802      	bhi.n	8007922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800791c:	4a1f      	ldr	r2, [pc, #124]	; (800799c <prvAddNewTaskToReadyList+0xc8>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007922:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <prvAddNewTaskToReadyList+0xd0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	4a1e      	ldr	r2, [pc, #120]	; (80079a4 <prvAddNewTaskToReadyList+0xd0>)
 800792a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800792c:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <prvAddNewTaskToReadyList+0xd0>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <prvAddNewTaskToReadyList+0xd4>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d903      	bls.n	8007948 <prvAddNewTaskToReadyList+0x74>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	4a18      	ldr	r2, [pc, #96]	; (80079a8 <prvAddNewTaskToReadyList+0xd4>)
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4a15      	ldr	r2, [pc, #84]	; (80079ac <prvAddNewTaskToReadyList+0xd8>)
 8007956:	441a      	add	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	4619      	mov	r1, r3
 800795e:	4610      	mov	r0, r2
 8007960:	f7ff f8fd 	bl	8006b5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007964:	f001 fa3e 	bl	8008de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007968:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <prvAddNewTaskToReadyList+0xcc>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00e      	beq.n	800798e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007970:	4b0a      	ldr	r3, [pc, #40]	; (800799c <prvAddNewTaskToReadyList+0xc8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	429a      	cmp	r2, r3
 800797c:	d207      	bcs.n	800798e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800797e:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <prvAddNewTaskToReadyList+0xdc>)
 8007980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	200013b8 	.word	0x200013b8
 800799c:	20000ee4 	.word	0x20000ee4
 80079a0:	200013c4 	.word	0x200013c4
 80079a4:	200013d4 	.word	0x200013d4
 80079a8:	200013c0 	.word	0x200013c0
 80079ac:	20000ee8 	.word	0x20000ee8
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d017      	beq.n	80079f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079c6:	4b13      	ldr	r3, [pc, #76]	; (8007a14 <vTaskDelay+0x60>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <vTaskDelay+0x30>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60bb      	str	r3, [r7, #8]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079e4:	f000 f88a 	bl	8007afc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fcfe 	bl	80083ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079f0:	f000 f892 	bl	8007b18 <xTaskResumeAll>
 80079f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d107      	bne.n	8007a0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <vTaskDelay+0x64>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	200013e0 	.word	0x200013e0
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	; 0x28
 8007a20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	1d39      	adds	r1, r7, #4
 8007a2e:	f107 0308 	add.w	r3, r7, #8
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff f832 	bl	8006a9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	9202      	str	r2, [sp, #8]
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	2300      	movs	r3, #0
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	2300      	movs	r3, #0
 8007a48:	460a      	mov	r2, r1
 8007a4a:	4924      	ldr	r1, [pc, #144]	; (8007adc <vTaskStartScheduler+0xc0>)
 8007a4c:	4824      	ldr	r0, [pc, #144]	; (8007ae0 <vTaskStartScheduler+0xc4>)
 8007a4e:	f7ff fdf9 	bl	8007644 <xTaskCreateStatic>
 8007a52:	4603      	mov	r3, r0
 8007a54:	4a23      	ldr	r2, [pc, #140]	; (8007ae4 <vTaskStartScheduler+0xc8>)
 8007a56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a58:	4b22      	ldr	r3, [pc, #136]	; (8007ae4 <vTaskStartScheduler+0xc8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a60:	2301      	movs	r3, #1
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e001      	b.n	8007a6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d102      	bne.n	8007a76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a70:	f000 fd10 	bl	8008494 <xTimerCreateTimerTask>
 8007a74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d11b      	bne.n	8007ab4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	613b      	str	r3, [r7, #16]
}
 8007a8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a90:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <vTaskStartScheduler+0xcc>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3354      	adds	r3, #84	; 0x54
 8007a96:	4a15      	ldr	r2, [pc, #84]	; (8007aec <vTaskStartScheduler+0xd0>)
 8007a98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a9a:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <vTaskStartScheduler+0xd4>)
 8007a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007aa2:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <vTaskStartScheduler+0xd8>)
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007aa8:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <vTaskStartScheduler+0xdc>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007aae:	f001 f8c7 	bl	8008c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ab2:	e00e      	b.n	8007ad2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d10a      	bne.n	8007ad2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	60fb      	str	r3, [r7, #12]
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <vTaskStartScheduler+0xb4>
}
 8007ad2:	bf00      	nop
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	080097b8 	.word	0x080097b8
 8007ae0:	08008121 	.word	0x08008121
 8007ae4:	200013dc 	.word	0x200013dc
 8007ae8:	20000ee4 	.word	0x20000ee4
 8007aec:	2000001c 	.word	0x2000001c
 8007af0:	200013d8 	.word	0x200013d8
 8007af4:	200013c4 	.word	0x200013c4
 8007af8:	200013bc 	.word	0x200013bc

08007afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b00:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <vTaskSuspendAll+0x18>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	4a03      	ldr	r2, [pc, #12]	; (8007b14 <vTaskSuspendAll+0x18>)
 8007b08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b0a:	bf00      	nop
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	200013e0 	.word	0x200013e0

08007b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b26:	4b42      	ldr	r3, [pc, #264]	; (8007c30 <xTaskResumeAll+0x118>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	603b      	str	r3, [r7, #0]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b44:	f001 f91e 	bl	8008d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b48:	4b39      	ldr	r3, [pc, #228]	; (8007c30 <xTaskResumeAll+0x118>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	4a38      	ldr	r2, [pc, #224]	; (8007c30 <xTaskResumeAll+0x118>)
 8007b50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b52:	4b37      	ldr	r3, [pc, #220]	; (8007c30 <xTaskResumeAll+0x118>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d162      	bne.n	8007c20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b5a:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <xTaskResumeAll+0x11c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d05e      	beq.n	8007c20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b62:	e02f      	b.n	8007bc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b64:	4b34      	ldr	r3, [pc, #208]	; (8007c38 <xTaskResumeAll+0x120>)
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3318      	adds	r3, #24
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff f851 	bl	8006c18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff f84c 	bl	8006c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	4b2d      	ldr	r3, [pc, #180]	; (8007c3c <xTaskResumeAll+0x124>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d903      	bls.n	8007b94 <xTaskResumeAll+0x7c>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	4a2a      	ldr	r2, [pc, #168]	; (8007c3c <xTaskResumeAll+0x124>)
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4a27      	ldr	r2, [pc, #156]	; (8007c40 <xTaskResumeAll+0x128>)
 8007ba2:	441a      	add	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4610      	mov	r0, r2
 8007bac:	f7fe ffd7 	bl	8006b5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb4:	4b23      	ldr	r3, [pc, #140]	; (8007c44 <xTaskResumeAll+0x12c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d302      	bcc.n	8007bc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007bbe:	4b22      	ldr	r3, [pc, #136]	; (8007c48 <xTaskResumeAll+0x130>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bc4:	4b1c      	ldr	r3, [pc, #112]	; (8007c38 <xTaskResumeAll+0x120>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1cb      	bne.n	8007b64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bd2:	f000 fb5f 	bl	8008294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bd6:	4b1d      	ldr	r3, [pc, #116]	; (8007c4c <xTaskResumeAll+0x134>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d010      	beq.n	8007c04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007be2:	f000 f847 	bl	8007c74 <xTaskIncrementTick>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007bec:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <xTaskResumeAll+0x130>)
 8007bee:	2201      	movs	r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f1      	bne.n	8007be2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <xTaskResumeAll+0x134>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c04:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <xTaskResumeAll+0x130>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d009      	beq.n	8007c20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c10:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <xTaskResumeAll+0x138>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c20:	f001 f8e0 	bl	8008de4 <vPortExitCritical>

	return xAlreadyYielded;
 8007c24:	68bb      	ldr	r3, [r7, #8]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	200013e0 	.word	0x200013e0
 8007c34:	200013b8 	.word	0x200013b8
 8007c38:	20001378 	.word	0x20001378
 8007c3c:	200013c0 	.word	0x200013c0
 8007c40:	20000ee8 	.word	0x20000ee8
 8007c44:	20000ee4 	.word	0x20000ee4
 8007c48:	200013cc 	.word	0x200013cc
 8007c4c:	200013c8 	.word	0x200013c8
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c5a:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <xTaskGetTickCount+0x1c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c60:	687b      	ldr	r3, [r7, #4]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	200013bc 	.word	0x200013bc

08007c74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c7e:	4b4f      	ldr	r3, [pc, #316]	; (8007dbc <xTaskIncrementTick+0x148>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f040 808f 	bne.w	8007da6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c88:	4b4d      	ldr	r3, [pc, #308]	; (8007dc0 <xTaskIncrementTick+0x14c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c90:	4a4b      	ldr	r2, [pc, #300]	; (8007dc0 <xTaskIncrementTick+0x14c>)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d120      	bne.n	8007cde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c9c:	4b49      	ldr	r3, [pc, #292]	; (8007dc4 <xTaskIncrementTick+0x150>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <xTaskIncrementTick+0x48>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	603b      	str	r3, [r7, #0]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <xTaskIncrementTick+0x46>
 8007cbc:	4b41      	ldr	r3, [pc, #260]	; (8007dc4 <xTaskIncrementTick+0x150>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	4b41      	ldr	r3, [pc, #260]	; (8007dc8 <xTaskIncrementTick+0x154>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a3f      	ldr	r2, [pc, #252]	; (8007dc4 <xTaskIncrementTick+0x150>)
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	4a3f      	ldr	r2, [pc, #252]	; (8007dc8 <xTaskIncrementTick+0x154>)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	4b3e      	ldr	r3, [pc, #248]	; (8007dcc <xTaskIncrementTick+0x158>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	4a3d      	ldr	r2, [pc, #244]	; (8007dcc <xTaskIncrementTick+0x158>)
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	f000 fadb 	bl	8008294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cde:	4b3c      	ldr	r3, [pc, #240]	; (8007dd0 <xTaskIncrementTick+0x15c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d349      	bcc.n	8007d7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ce8:	4b36      	ldr	r3, [pc, #216]	; (8007dc4 <xTaskIncrementTick+0x150>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf2:	4b37      	ldr	r3, [pc, #220]	; (8007dd0 <xTaskIncrementTick+0x15c>)
 8007cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf8:	601a      	str	r2, [r3, #0]
					break;
 8007cfa:	e03f      	b.n	8007d7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cfc:	4b31      	ldr	r3, [pc, #196]	; (8007dc4 <xTaskIncrementTick+0x150>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d203      	bcs.n	8007d1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d14:	4a2e      	ldr	r2, [pc, #184]	; (8007dd0 <xTaskIncrementTick+0x15c>)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d1a:	e02f      	b.n	8007d7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe ff79 	bl	8006c18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	3318      	adds	r3, #24
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe ff70 	bl	8006c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3c:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <xTaskIncrementTick+0x160>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d903      	bls.n	8007d4c <xTaskIncrementTick+0xd8>
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	4a22      	ldr	r2, [pc, #136]	; (8007dd4 <xTaskIncrementTick+0x160>)
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4a1f      	ldr	r2, [pc, #124]	; (8007dd8 <xTaskIncrementTick+0x164>)
 8007d5a:	441a      	add	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f7fe fefb 	bl	8006b5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6c:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <xTaskIncrementTick+0x168>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d3b8      	bcc.n	8007ce8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d76:	2301      	movs	r3, #1
 8007d78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d7a:	e7b5      	b.n	8007ce8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d7c:	4b17      	ldr	r3, [pc, #92]	; (8007ddc <xTaskIncrementTick+0x168>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d82:	4915      	ldr	r1, [pc, #84]	; (8007dd8 <xTaskIncrementTick+0x164>)
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d901      	bls.n	8007d98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d98:	4b11      	ldr	r3, [pc, #68]	; (8007de0 <xTaskIncrementTick+0x16c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d007      	beq.n	8007db0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007da0:	2301      	movs	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	e004      	b.n	8007db0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007da6:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <xTaskIncrementTick+0x170>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	4a0d      	ldr	r2, [pc, #52]	; (8007de4 <xTaskIncrementTick+0x170>)
 8007dae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007db0:	697b      	ldr	r3, [r7, #20]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	200013e0 	.word	0x200013e0
 8007dc0:	200013bc 	.word	0x200013bc
 8007dc4:	20001370 	.word	0x20001370
 8007dc8:	20001374 	.word	0x20001374
 8007dcc:	200013d0 	.word	0x200013d0
 8007dd0:	200013d8 	.word	0x200013d8
 8007dd4:	200013c0 	.word	0x200013c0
 8007dd8:	20000ee8 	.word	0x20000ee8
 8007ddc:	20000ee4 	.word	0x20000ee4
 8007de0:	200013cc 	.word	0x200013cc
 8007de4:	200013c8 	.word	0x200013c8

08007de8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dee:	4b2a      	ldr	r3, [pc, #168]	; (8007e98 <vTaskSwitchContext+0xb0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007df6:	4b29      	ldr	r3, [pc, #164]	; (8007e9c <vTaskSwitchContext+0xb4>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dfc:	e046      	b.n	8007e8c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007dfe:	4b27      	ldr	r3, [pc, #156]	; (8007e9c <vTaskSwitchContext+0xb4>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e04:	4b26      	ldr	r3, [pc, #152]	; (8007ea0 <vTaskSwitchContext+0xb8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e010      	b.n	8007e2e <vTaskSwitchContext+0x46>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <vTaskSwitchContext+0x40>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	607b      	str	r3, [r7, #4]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <vTaskSwitchContext+0x3e>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	491d      	ldr	r1, [pc, #116]	; (8007ea4 <vTaskSwitchContext+0xbc>)
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0e4      	beq.n	8007e0c <vTaskSwitchContext+0x24>
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4613      	mov	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4a15      	ldr	r2, [pc, #84]	; (8007ea4 <vTaskSwitchContext+0xbc>)
 8007e4e:	4413      	add	r3, r2
 8007e50:	60bb      	str	r3, [r7, #8]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	605a      	str	r2, [r3, #4]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	3308      	adds	r3, #8
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d104      	bne.n	8007e72 <vTaskSwitchContext+0x8a>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	4a0b      	ldr	r2, [pc, #44]	; (8007ea8 <vTaskSwitchContext+0xc0>)
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	4a08      	ldr	r2, [pc, #32]	; (8007ea0 <vTaskSwitchContext+0xb8>)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e82:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <vTaskSwitchContext+0xc0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3354      	adds	r3, #84	; 0x54
 8007e88:	4a08      	ldr	r2, [pc, #32]	; (8007eac <vTaskSwitchContext+0xc4>)
 8007e8a:	6013      	str	r3, [r2, #0]
}
 8007e8c:	bf00      	nop
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	200013e0 	.word	0x200013e0
 8007e9c:	200013cc 	.word	0x200013cc
 8007ea0:	200013c0 	.word	0x200013c0
 8007ea4:	20000ee8 	.word	0x20000ee8
 8007ea8:	20000ee4 	.word	0x20000ee4
 8007eac:	2000001c 	.word	0x2000001c

08007eb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	60fb      	str	r3, [r7, #12]
}
 8007ed2:	bf00      	nop
 8007ed4:	e7fe      	b.n	8007ed4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ed6:	4b07      	ldr	r3, [pc, #28]	; (8007ef4 <vTaskPlaceOnEventList+0x44>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3318      	adds	r3, #24
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7fe fe61 	bl	8006ba6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	6838      	ldr	r0, [r7, #0]
 8007ee8:	f000 fa80 	bl	80083ec <prvAddCurrentTaskToDelayedList>
}
 8007eec:	bf00      	nop
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000ee4 	.word	0x20000ee4

08007ef8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10a      	bne.n	8007f20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	617b      	str	r3, [r7, #20]
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f20:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <vTaskPlaceOnEventListRestricted+0x54>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3318      	adds	r3, #24
 8007f26:	4619      	mov	r1, r3
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7fe fe18 	bl	8006b5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f34:	f04f 33ff 	mov.w	r3, #4294967295
 8007f38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	68b8      	ldr	r0, [r7, #8]
 8007f3e:	f000 fa55 	bl	80083ec <prvAddCurrentTaskToDelayedList>
	}
 8007f42:	bf00      	nop
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000ee4 	.word	0x20000ee4

08007f50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	60fb      	str	r3, [r7, #12]
}
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	3318      	adds	r3, #24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fe49 	bl	8006c18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f86:	4b1e      	ldr	r3, [pc, #120]	; (8008000 <xTaskRemoveFromEventList+0xb0>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d11d      	bne.n	8007fca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	3304      	adds	r3, #4
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fe40 	bl	8006c18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9c:	4b19      	ldr	r3, [pc, #100]	; (8008004 <xTaskRemoveFromEventList+0xb4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d903      	bls.n	8007fac <xTaskRemoveFromEventList+0x5c>
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4a16      	ldr	r2, [pc, #88]	; (8008004 <xTaskRemoveFromEventList+0xb4>)
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4a13      	ldr	r2, [pc, #76]	; (8008008 <xTaskRemoveFromEventList+0xb8>)
 8007fba:	441a      	add	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	f7fe fdcb 	bl	8006b5e <vListInsertEnd>
 8007fc8:	e005      	b.n	8007fd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	3318      	adds	r3, #24
 8007fce:	4619      	mov	r1, r3
 8007fd0:	480e      	ldr	r0, [pc, #56]	; (800800c <xTaskRemoveFromEventList+0xbc>)
 8007fd2:	f7fe fdc4 	bl	8006b5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <xTaskRemoveFromEventList+0xc0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d905      	bls.n	8007ff0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <xTaskRemoveFromEventList+0xc4>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e001      	b.n	8007ff4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ff4:	697b      	ldr	r3, [r7, #20]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	200013e0 	.word	0x200013e0
 8008004:	200013c0 	.word	0x200013c0
 8008008:	20000ee8 	.word	0x20000ee8
 800800c:	20001378 	.word	0x20001378
 8008010:	20000ee4 	.word	0x20000ee4
 8008014:	200013cc 	.word	0x200013cc

08008018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <vTaskInternalSetTimeOutState+0x24>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <vTaskInternalSetTimeOutState+0x28>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	605a      	str	r2, [r3, #4]
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	200013d0 	.word	0x200013d0
 8008040:	200013bc 	.word	0x200013bc

08008044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	613b      	str	r3, [r7, #16]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008086:	f000 fe7d 	bl	8008d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800808a:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <xTaskCheckForTimeOut+0xbc>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d102      	bne.n	80080aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	e023      	b.n	80080f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b15      	ldr	r3, [pc, #84]	; (8008104 <xTaskCheckForTimeOut+0xc0>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d007      	beq.n	80080c6 <xTaskCheckForTimeOut+0x82>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d302      	bcc.n	80080c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	61fb      	str	r3, [r7, #28]
 80080c4:	e015      	b.n	80080f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d20b      	bcs.n	80080e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff ff9b 	bl	8008018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	e004      	b.n	80080f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080ee:	2301      	movs	r3, #1
 80080f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080f2:	f000 fe77 	bl	8008de4 <vPortExitCritical>

	return xReturn;
 80080f6:	69fb      	ldr	r3, [r7, #28]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3720      	adds	r7, #32
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	200013bc 	.word	0x200013bc
 8008104:	200013d0 	.word	0x200013d0

08008108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800810c:	4b03      	ldr	r3, [pc, #12]	; (800811c <vTaskMissedYield+0x14>)
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]
}
 8008112:	bf00      	nop
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	200013cc 	.word	0x200013cc

08008120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008128:	f000 f852 	bl	80081d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <prvIdleTask+0x28>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d9f9      	bls.n	8008128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008134:	4b05      	ldr	r3, [pc, #20]	; (800814c <prvIdleTask+0x2c>)
 8008136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008144:	e7f0      	b.n	8008128 <prvIdleTask+0x8>
 8008146:	bf00      	nop
 8008148:	20000ee8 	.word	0x20000ee8
 800814c:	e000ed04 	.word	0xe000ed04

08008150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
 800815a:	e00c      	b.n	8008176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4a12      	ldr	r2, [pc, #72]	; (80081b0 <prvInitialiseTaskLists+0x60>)
 8008168:	4413      	add	r3, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe fcca 	bl	8006b04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3301      	adds	r3, #1
 8008174:	607b      	str	r3, [r7, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b37      	cmp	r3, #55	; 0x37
 800817a:	d9ef      	bls.n	800815c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800817c:	480d      	ldr	r0, [pc, #52]	; (80081b4 <prvInitialiseTaskLists+0x64>)
 800817e:	f7fe fcc1 	bl	8006b04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008182:	480d      	ldr	r0, [pc, #52]	; (80081b8 <prvInitialiseTaskLists+0x68>)
 8008184:	f7fe fcbe 	bl	8006b04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008188:	480c      	ldr	r0, [pc, #48]	; (80081bc <prvInitialiseTaskLists+0x6c>)
 800818a:	f7fe fcbb 	bl	8006b04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800818e:	480c      	ldr	r0, [pc, #48]	; (80081c0 <prvInitialiseTaskLists+0x70>)
 8008190:	f7fe fcb8 	bl	8006b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008194:	480b      	ldr	r0, [pc, #44]	; (80081c4 <prvInitialiseTaskLists+0x74>)
 8008196:	f7fe fcb5 	bl	8006b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800819a:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <prvInitialiseTaskLists+0x78>)
 800819c:	4a05      	ldr	r2, [pc, #20]	; (80081b4 <prvInitialiseTaskLists+0x64>)
 800819e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <prvInitialiseTaskLists+0x7c>)
 80081a2:	4a05      	ldr	r2, [pc, #20]	; (80081b8 <prvInitialiseTaskLists+0x68>)
 80081a4:	601a      	str	r2, [r3, #0]
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000ee8 	.word	0x20000ee8
 80081b4:	20001348 	.word	0x20001348
 80081b8:	2000135c 	.word	0x2000135c
 80081bc:	20001378 	.word	0x20001378
 80081c0:	2000138c 	.word	0x2000138c
 80081c4:	200013a4 	.word	0x200013a4
 80081c8:	20001370 	.word	0x20001370
 80081cc:	20001374 	.word	0x20001374

080081d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081d6:	e019      	b.n	800820c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081d8:	f000 fdd4 	bl	8008d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081dc:	4b10      	ldr	r3, [pc, #64]	; (8008220 <prvCheckTasksWaitingTermination+0x50>)
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fd15 	bl	8006c18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081ee:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <prvCheckTasksWaitingTermination+0x54>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	4a0b      	ldr	r2, [pc, #44]	; (8008224 <prvCheckTasksWaitingTermination+0x54>)
 80081f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081f8:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <prvCheckTasksWaitingTermination+0x58>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	4a0a      	ldr	r2, [pc, #40]	; (8008228 <prvCheckTasksWaitingTermination+0x58>)
 8008200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008202:	f000 fdef 	bl	8008de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f810 	bl	800822c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800820c:	4b06      	ldr	r3, [pc, #24]	; (8008228 <prvCheckTasksWaitingTermination+0x58>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e1      	bne.n	80081d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	2000138c 	.word	0x2000138c
 8008224:	200013b8 	.word	0x200013b8
 8008228:	200013a0 	.word	0x200013a0

0800822c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3354      	adds	r3, #84	; 0x54
 8008238:	4618      	mov	r0, r3
 800823a:	f001 f9e7 	bl	800960c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008244:	2b00      	cmp	r3, #0
 8008246:	d108      	bne.n	800825a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824c:	4618      	mov	r0, r3
 800824e:	f000 ff87 	bl	8009160 <vPortFree>
				vPortFree( pxTCB );
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 ff84 	bl	8009160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008258:	e018      	b.n	800828c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008260:	2b01      	cmp	r3, #1
 8008262:	d103      	bne.n	800826c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 ff7b 	bl	8009160 <vPortFree>
	}
 800826a:	e00f      	b.n	800828c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008272:	2b02      	cmp	r3, #2
 8008274:	d00a      	beq.n	800828c <prvDeleteTCB+0x60>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	60fb      	str	r3, [r7, #12]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <prvDeleteTCB+0x5e>
	}
 800828c:	bf00      	nop
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800829a:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <prvResetNextTaskUnblockTime+0x38>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d104      	bne.n	80082ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082a4:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <prvResetNextTaskUnblockTime+0x3c>)
 80082a6:	f04f 32ff 	mov.w	r2, #4294967295
 80082aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082ac:	e008      	b.n	80082c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ae:	4b07      	ldr	r3, [pc, #28]	; (80082cc <prvResetNextTaskUnblockTime+0x38>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4a04      	ldr	r2, [pc, #16]	; (80082d0 <prvResetNextTaskUnblockTime+0x3c>)
 80082be:	6013      	str	r3, [r2, #0]
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	20001370 	.word	0x20001370
 80082d0:	200013d8 	.word	0x200013d8

080082d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082da:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <xTaskGetSchedulerState+0x34>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082e2:	2301      	movs	r3, #1
 80082e4:	607b      	str	r3, [r7, #4]
 80082e6:	e008      	b.n	80082fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e8:	4b08      	ldr	r3, [pc, #32]	; (800830c <xTaskGetSchedulerState+0x38>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082f0:	2302      	movs	r3, #2
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e001      	b.n	80082fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082f6:	2300      	movs	r3, #0
 80082f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082fa:	687b      	ldr	r3, [r7, #4]
	}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	200013c4 	.word	0x200013c4
 800830c:	200013e0 	.word	0x200013e0

08008310 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d056      	beq.n	80083d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008326:	4b2e      	ldr	r3, [pc, #184]	; (80083e0 <xTaskPriorityDisinherit+0xd0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	429a      	cmp	r2, r3
 800832e:	d00a      	beq.n	8008346 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	60fb      	str	r3, [r7, #12]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10a      	bne.n	8008364 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	60bb      	str	r3, [r7, #8]
}
 8008360:	bf00      	nop
 8008362:	e7fe      	b.n	8008362 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008368:	1e5a      	subs	r2, r3, #1
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008376:	429a      	cmp	r2, r3
 8008378:	d02c      	beq.n	80083d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800837e:	2b00      	cmp	r3, #0
 8008380:	d128      	bne.n	80083d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	3304      	adds	r3, #4
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe fc46 	bl	8006c18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <xTaskPriorityDisinherit+0xd4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d903      	bls.n	80083b4 <xTaskPriorityDisinherit+0xa4>
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	4a0c      	ldr	r2, [pc, #48]	; (80083e4 <xTaskPriorityDisinherit+0xd4>)
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4a09      	ldr	r2, [pc, #36]	; (80083e8 <xTaskPriorityDisinherit+0xd8>)
 80083c2:	441a      	add	r2, r3
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f7fe fbc7 	bl	8006b5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083d0:	2301      	movs	r3, #1
 80083d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083d4:	697b      	ldr	r3, [r7, #20]
	}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000ee4 	.word	0x20000ee4
 80083e4:	200013c0 	.word	0x200013c0
 80083e8:	20000ee8 	.word	0x20000ee8

080083ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083f6:	4b21      	ldr	r3, [pc, #132]	; (800847c <prvAddCurrentTaskToDelayedList+0x90>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083fc:	4b20      	ldr	r3, [pc, #128]	; (8008480 <prvAddCurrentTaskToDelayedList+0x94>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3304      	adds	r3, #4
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fc08 	bl	8006c18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d10a      	bne.n	8008426 <prvAddCurrentTaskToDelayedList+0x3a>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d007      	beq.n	8008426 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008416:	4b1a      	ldr	r3, [pc, #104]	; (8008480 <prvAddCurrentTaskToDelayedList+0x94>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3304      	adds	r3, #4
 800841c:	4619      	mov	r1, r3
 800841e:	4819      	ldr	r0, [pc, #100]	; (8008484 <prvAddCurrentTaskToDelayedList+0x98>)
 8008420:	f7fe fb9d 	bl	8006b5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008424:	e026      	b.n	8008474 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4413      	add	r3, r2
 800842c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800842e:	4b14      	ldr	r3, [pc, #80]	; (8008480 <prvAddCurrentTaskToDelayedList+0x94>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	429a      	cmp	r2, r3
 800843c:	d209      	bcs.n	8008452 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800843e:	4b12      	ldr	r3, [pc, #72]	; (8008488 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <prvAddCurrentTaskToDelayedList+0x94>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3304      	adds	r3, #4
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f7fe fbab 	bl	8006ba6 <vListInsert>
}
 8008450:	e010      	b.n	8008474 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008452:	4b0e      	ldr	r3, [pc, #56]	; (800848c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <prvAddCurrentTaskToDelayedList+0x94>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3304      	adds	r3, #4
 800845c:	4619      	mov	r1, r3
 800845e:	4610      	mov	r0, r2
 8008460:	f7fe fba1 	bl	8006ba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008464:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	429a      	cmp	r2, r3
 800846c:	d202      	bcs.n	8008474 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800846e:	4a08      	ldr	r2, [pc, #32]	; (8008490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6013      	str	r3, [r2, #0]
}
 8008474:	bf00      	nop
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	200013bc 	.word	0x200013bc
 8008480:	20000ee4 	.word	0x20000ee4
 8008484:	200013a4 	.word	0x200013a4
 8008488:	20001374 	.word	0x20001374
 800848c:	20001370 	.word	0x20001370
 8008490:	200013d8 	.word	0x200013d8

08008494 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08a      	sub	sp, #40	; 0x28
 8008498:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800849e:	f000 fb07 	bl	8008ab0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084a2:	4b1c      	ldr	r3, [pc, #112]	; (8008514 <xTimerCreateTimerTask+0x80>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d021      	beq.n	80084ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084b2:	1d3a      	adds	r2, r7, #4
 80084b4:	f107 0108 	add.w	r1, r7, #8
 80084b8:	f107 030c 	add.w	r3, r7, #12
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fe fb07 	bl	8006ad0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	9202      	str	r2, [sp, #8]
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	2302      	movs	r3, #2
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	2300      	movs	r3, #0
 80084d2:	460a      	mov	r2, r1
 80084d4:	4910      	ldr	r1, [pc, #64]	; (8008518 <xTimerCreateTimerTask+0x84>)
 80084d6:	4811      	ldr	r0, [pc, #68]	; (800851c <xTimerCreateTimerTask+0x88>)
 80084d8:	f7ff f8b4 	bl	8007644 <xTaskCreateStatic>
 80084dc:	4603      	mov	r3, r0
 80084de:	4a10      	ldr	r2, [pc, #64]	; (8008520 <xTimerCreateTimerTask+0x8c>)
 80084e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084e2:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <xTimerCreateTimerTask+0x8c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084ea:	2301      	movs	r3, #1
 80084ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	613b      	str	r3, [r7, #16]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800850a:	697b      	ldr	r3, [r7, #20]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	20001414 	.word	0x20001414
 8008518:	080097c0 	.word	0x080097c0
 800851c:	08008659 	.word	0x08008659
 8008520:	20001418 	.word	0x20001418

08008524 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008532:	2300      	movs	r3, #0
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <xTimerGenericCommand+0x2e>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	623b      	str	r3, [r7, #32]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008552:	4b1a      	ldr	r3, [pc, #104]	; (80085bc <xTimerGenericCommand+0x98>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d02a      	beq.n	80085b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b05      	cmp	r3, #5
 800856a:	dc18      	bgt.n	800859e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800856c:	f7ff feb2 	bl	80082d4 <xTaskGetSchedulerState>
 8008570:	4603      	mov	r3, r0
 8008572:	2b02      	cmp	r3, #2
 8008574:	d109      	bne.n	800858a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008576:	4b11      	ldr	r3, [pc, #68]	; (80085bc <xTimerGenericCommand+0x98>)
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	f107 0110 	add.w	r1, r7, #16
 800857e:	2300      	movs	r3, #0
 8008580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008582:	f7fe fc77 	bl	8006e74 <xQueueGenericSend>
 8008586:	6278      	str	r0, [r7, #36]	; 0x24
 8008588:	e012      	b.n	80085b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800858a:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <xTimerGenericCommand+0x98>)
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	f107 0110 	add.w	r1, r7, #16
 8008592:	2300      	movs	r3, #0
 8008594:	2200      	movs	r2, #0
 8008596:	f7fe fc6d 	bl	8006e74 <xQueueGenericSend>
 800859a:	6278      	str	r0, [r7, #36]	; 0x24
 800859c:	e008      	b.n	80085b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800859e:	4b07      	ldr	r3, [pc, #28]	; (80085bc <xTimerGenericCommand+0x98>)
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	f107 0110 	add.w	r1, r7, #16
 80085a6:	2300      	movs	r3, #0
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	f7fe fd61 	bl	8007070 <xQueueGenericSendFromISR>
 80085ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3728      	adds	r7, #40	; 0x28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20001414 	.word	0x20001414

080085c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ca:	4b22      	ldr	r3, [pc, #136]	; (8008654 <prvProcessExpiredTimer+0x94>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	3304      	adds	r3, #4
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fe fb1d 	bl	8006c18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d022      	beq.n	8008632 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	18d1      	adds	r1, r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	6978      	ldr	r0, [r7, #20]
 80085fa:	f000 f8d1 	bl	80087a0 <prvInsertTimerInActiveList>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01f      	beq.n	8008644 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008604:	2300      	movs	r3, #0
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	2300      	movs	r3, #0
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	2100      	movs	r1, #0
 800860e:	6978      	ldr	r0, [r7, #20]
 8008610:	f7ff ff88 	bl	8008524 <xTimerGenericCommand>
 8008614:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d113      	bne.n	8008644 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008638:	f023 0301 	bic.w	r3, r3, #1
 800863c:	b2da      	uxtb	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	6978      	ldr	r0, [r7, #20]
 800864a:	4798      	blx	r3
}
 800864c:	bf00      	nop
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	2000140c 	.word	0x2000140c

08008658 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008660:	f107 0308 	add.w	r3, r7, #8
 8008664:	4618      	mov	r0, r3
 8008666:	f000 f857 	bl	8008718 <prvGetNextExpireTime>
 800866a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4619      	mov	r1, r3
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 f803 	bl	800867c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008676:	f000 f8d5 	bl	8008824 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800867a:	e7f1      	b.n	8008660 <prvTimerTask+0x8>

0800867c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008686:	f7ff fa39 	bl	8007afc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800868a:	f107 0308 	add.w	r3, r7, #8
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f866 	bl	8008760 <prvSampleTimeNow>
 8008694:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d130      	bne.n	80086fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10a      	bne.n	80086b8 <prvProcessTimerOrBlockTask+0x3c>
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d806      	bhi.n	80086b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086aa:	f7ff fa35 	bl	8007b18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff ff85 	bl	80085c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086b6:	e024      	b.n	8008702 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d008      	beq.n	80086d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086be:	4b13      	ldr	r3, [pc, #76]	; (800870c <prvProcessTimerOrBlockTask+0x90>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <prvProcessTimerOrBlockTask+0x50>
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <prvProcessTimerOrBlockTask+0x52>
 80086cc:	2300      	movs	r3, #0
 80086ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086d0:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <prvProcessTimerOrBlockTask+0x94>)
 80086d2:	6818      	ldr	r0, [r3, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4619      	mov	r1, r3
 80086de:	f7fe ff7d 	bl	80075dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086e2:	f7ff fa19 	bl	8007b18 <xTaskResumeAll>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <prvProcessTimerOrBlockTask+0x98>)
 80086ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	f3bf 8f6f 	isb	sy
}
 80086fc:	e001      	b.n	8008702 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086fe:	f7ff fa0b 	bl	8007b18 <xTaskResumeAll>
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20001410 	.word	0x20001410
 8008710:	20001414 	.word	0x20001414
 8008714:	e000ed04 	.word	0xe000ed04

08008718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008720:	4b0e      	ldr	r3, [pc, #56]	; (800875c <prvGetNextExpireTime+0x44>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <prvGetNextExpireTime+0x16>
 800872a:	2201      	movs	r2, #1
 800872c:	e000      	b.n	8008730 <prvGetNextExpireTime+0x18>
 800872e:	2200      	movs	r2, #0
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d105      	bne.n	8008748 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800873c:	4b07      	ldr	r3, [pc, #28]	; (800875c <prvGetNextExpireTime+0x44>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	e001      	b.n	800874c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800874c:	68fb      	ldr	r3, [r7, #12]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	2000140c 	.word	0x2000140c

08008760 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008768:	f7ff fa74 	bl	8007c54 <xTaskGetTickCount>
 800876c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800876e:	4b0b      	ldr	r3, [pc, #44]	; (800879c <prvSampleTimeNow+0x3c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	429a      	cmp	r2, r3
 8008776:	d205      	bcs.n	8008784 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008778:	f000 f936 	bl	80089e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	e002      	b.n	800878a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800878a:	4a04      	ldr	r2, [pc, #16]	; (800879c <prvSampleTimeNow+0x3c>)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008790:	68fb      	ldr	r3, [r7, #12]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	2000141c 	.word	0x2000141c

080087a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d812      	bhi.n	80087ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	1ad2      	subs	r2, r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d302      	bcc.n	80087da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087d4:	2301      	movs	r3, #1
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e01b      	b.n	8008812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087da:	4b10      	ldr	r3, [pc, #64]	; (800881c <prvInsertTimerInActiveList+0x7c>)
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	4610      	mov	r0, r2
 80087e6:	f7fe f9de 	bl	8006ba6 <vListInsert>
 80087ea:	e012      	b.n	8008812 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d206      	bcs.n	8008802 <prvInsertTimerInActiveList+0x62>
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d302      	bcc.n	8008802 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087fc:	2301      	movs	r3, #1
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	e007      	b.n	8008812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008802:	4b07      	ldr	r3, [pc, #28]	; (8008820 <prvInsertTimerInActiveList+0x80>)
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3304      	adds	r3, #4
 800880a:	4619      	mov	r1, r3
 800880c:	4610      	mov	r0, r2
 800880e:	f7fe f9ca 	bl	8006ba6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008812:	697b      	ldr	r3, [r7, #20]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20001410 	.word	0x20001410
 8008820:	2000140c 	.word	0x2000140c

08008824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08e      	sub	sp, #56	; 0x38
 8008828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800882a:	e0ca      	b.n	80089c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	da18      	bge.n	8008864 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008832:	1d3b      	adds	r3, r7, #4
 8008834:	3304      	adds	r3, #4
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	61fb      	str	r3, [r7, #28]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885a:	6850      	ldr	r0, [r2, #4]
 800885c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885e:	6892      	ldr	r2, [r2, #8]
 8008860:	4611      	mov	r1, r2
 8008862:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f2c0 80aa 	blt.w	80089c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	3304      	adds	r3, #4
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe f9cb 	bl	8006c18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008882:	463b      	mov	r3, r7
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff ff6b 	bl	8008760 <prvSampleTimeNow>
 800888a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b09      	cmp	r3, #9
 8008890:	f200 8097 	bhi.w	80089c2 <prvProcessReceivedCommands+0x19e>
 8008894:	a201      	add	r2, pc, #4	; (adr r2, 800889c <prvProcessReceivedCommands+0x78>)
 8008896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889a:	bf00      	nop
 800889c:	080088c5 	.word	0x080088c5
 80088a0:	080088c5 	.word	0x080088c5
 80088a4:	080088c5 	.word	0x080088c5
 80088a8:	08008939 	.word	0x08008939
 80088ac:	0800894d 	.word	0x0800894d
 80088b0:	08008997 	.word	0x08008997
 80088b4:	080088c5 	.word	0x080088c5
 80088b8:	080088c5 	.word	0x080088c5
 80088bc:	08008939 	.word	0x08008939
 80088c0:	0800894d 	.word	0x0800894d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ca:	f043 0301 	orr.w	r3, r3, #1
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	18d1      	adds	r1, r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088e4:	f7ff ff5c 	bl	80087a0 <prvInsertTimerInActiveList>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d069      	beq.n	80089c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088fc:	f003 0304 	and.w	r3, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d05e      	beq.n	80089c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	441a      	add	r2, r3
 800890c:	2300      	movs	r3, #0
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	2300      	movs	r3, #0
 8008912:	2100      	movs	r1, #0
 8008914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008916:	f7ff fe05 	bl	8008524 <xTimerGenericCommand>
 800891a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d14f      	bne.n	80089c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	61bb      	str	r3, [r7, #24]
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800893e:	f023 0301 	bic.w	r3, r3, #1
 8008942:	b2da      	uxtb	r2, r3
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800894a:	e03a      	b.n	80089c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008952:	f043 0301 	orr.w	r3, r3, #1
 8008956:	b2da      	uxtb	r2, r3
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	617b      	str	r3, [r7, #20]
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	18d1      	adds	r1, r2, r3
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008990:	f7ff ff06 	bl	80087a0 <prvInsertTimerInActiveList>
					break;
 8008994:	e015      	b.n	80089c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800899c:	f003 0302 	and.w	r3, r3, #2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80089a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a6:	f000 fbdb 	bl	8009160 <vPortFree>
 80089aa:	e00a      	b.n	80089c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089b2:	f023 0301 	bic.w	r3, r3, #1
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089be:	e000      	b.n	80089c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80089c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089c2:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <prvProcessReceivedCommands+0x1c0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	1d39      	adds	r1, r7, #4
 80089c8:	2200      	movs	r2, #0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe fbec 	bl	80071a8 <xQueueReceive>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f47f af2a 	bne.w	800882c <prvProcessReceivedCommands+0x8>
	}
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	3730      	adds	r7, #48	; 0x30
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20001414 	.word	0x20001414

080089e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089ee:	e048      	b.n	8008a82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089f0:	4b2d      	ldr	r3, [pc, #180]	; (8008aa8 <prvSwitchTimerLists+0xc0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089fa:	4b2b      	ldr	r3, [pc, #172]	; (8008aa8 <prvSwitchTimerLists+0xc0>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe f905 	bl	8006c18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d02e      	beq.n	8008a82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d90e      	bls.n	8008a54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a42:	4b19      	ldr	r3, [pc, #100]	; (8008aa8 <prvSwitchTimerLists+0xc0>)
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	f7fe f8aa 	bl	8006ba6 <vListInsert>
 8008a52:	e016      	b.n	8008a82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a54:	2300      	movs	r3, #0
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f7ff fd60 	bl	8008524 <xTimerGenericCommand>
 8008a64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	603b      	str	r3, [r7, #0]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a82:	4b09      	ldr	r3, [pc, #36]	; (8008aa8 <prvSwitchTimerLists+0xc0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1b1      	bne.n	80089f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a8c:	4b06      	ldr	r3, [pc, #24]	; (8008aa8 <prvSwitchTimerLists+0xc0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a92:	4b06      	ldr	r3, [pc, #24]	; (8008aac <prvSwitchTimerLists+0xc4>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a04      	ldr	r2, [pc, #16]	; (8008aa8 <prvSwitchTimerLists+0xc0>)
 8008a98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a9a:	4a04      	ldr	r2, [pc, #16]	; (8008aac <prvSwitchTimerLists+0xc4>)
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	6013      	str	r3, [r2, #0]
}
 8008aa0:	bf00      	nop
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	2000140c 	.word	0x2000140c
 8008aac:	20001410 	.word	0x20001410

08008ab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ab6:	f000 f965 	bl	8008d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008aba:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <prvCheckForValidListAndQueue+0x60>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d120      	bne.n	8008b04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ac2:	4814      	ldr	r0, [pc, #80]	; (8008b14 <prvCheckForValidListAndQueue+0x64>)
 8008ac4:	f7fe f81e 	bl	8006b04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ac8:	4813      	ldr	r0, [pc, #76]	; (8008b18 <prvCheckForValidListAndQueue+0x68>)
 8008aca:	f7fe f81b 	bl	8006b04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008ace:	4b13      	ldr	r3, [pc, #76]	; (8008b1c <prvCheckForValidListAndQueue+0x6c>)
 8008ad0:	4a10      	ldr	r2, [pc, #64]	; (8008b14 <prvCheckForValidListAndQueue+0x64>)
 8008ad2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ad4:	4b12      	ldr	r3, [pc, #72]	; (8008b20 <prvCheckForValidListAndQueue+0x70>)
 8008ad6:	4a10      	ldr	r2, [pc, #64]	; (8008b18 <prvCheckForValidListAndQueue+0x68>)
 8008ad8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ada:	2300      	movs	r3, #0
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	4b11      	ldr	r3, [pc, #68]	; (8008b24 <prvCheckForValidListAndQueue+0x74>)
 8008ae0:	4a11      	ldr	r2, [pc, #68]	; (8008b28 <prvCheckForValidListAndQueue+0x78>)
 8008ae2:	2110      	movs	r1, #16
 8008ae4:	200a      	movs	r0, #10
 8008ae6:	f7fe f929 	bl	8006d3c <xQueueGenericCreateStatic>
 8008aea:	4603      	mov	r3, r0
 8008aec:	4a08      	ldr	r2, [pc, #32]	; (8008b10 <prvCheckForValidListAndQueue+0x60>)
 8008aee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008af0:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <prvCheckForValidListAndQueue+0x60>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d005      	beq.n	8008b04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008af8:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <prvCheckForValidListAndQueue+0x60>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	490b      	ldr	r1, [pc, #44]	; (8008b2c <prvCheckForValidListAndQueue+0x7c>)
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fd42 	bl	8007588 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b04:	f000 f96e 	bl	8008de4 <vPortExitCritical>
}
 8008b08:	bf00      	nop
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20001414 	.word	0x20001414
 8008b14:	200013e4 	.word	0x200013e4
 8008b18:	200013f8 	.word	0x200013f8
 8008b1c:	2000140c 	.word	0x2000140c
 8008b20:	20001410 	.word	0x20001410
 8008b24:	200014c0 	.word	0x200014c0
 8008b28:	20001420 	.word	0x20001420
 8008b2c:	080097c8 	.word	0x080097c8

08008b30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3b04      	subs	r3, #4
 8008b40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f023 0201 	bic.w	r2, r3, #1
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3b04      	subs	r3, #4
 8008b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b60:	4a0c      	ldr	r2, [pc, #48]	; (8008b94 <pxPortInitialiseStack+0x64>)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3b14      	subs	r3, #20
 8008b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3b04      	subs	r3, #4
 8008b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f06f 0202 	mvn.w	r2, #2
 8008b7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3b20      	subs	r3, #32
 8008b84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b86:	68fb      	ldr	r3, [r7, #12]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	08008b99 	.word	0x08008b99

08008b98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ba2:	4b12      	ldr	r3, [pc, #72]	; (8008bec <prvTaskExitError+0x54>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008baa:	d00a      	beq.n	8008bc2 <prvTaskExitError+0x2a>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	60fb      	str	r3, [r7, #12]
}
 8008bbe:	bf00      	nop
 8008bc0:	e7fe      	b.n	8008bc0 <prvTaskExitError+0x28>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	60bb      	str	r3, [r7, #8]
}
 8008bd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bd6:	bf00      	nop
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0fc      	beq.n	8008bd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bde:	bf00      	nop
 8008be0:	bf00      	nop
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	20000018 	.word	0x20000018

08008bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bf0:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <pxCurrentTCBConst2>)
 8008bf2:	6819      	ldr	r1, [r3, #0]
 8008bf4:	6808      	ldr	r0, [r1, #0]
 8008bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfa:	f380 8809 	msr	PSP, r0
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8811 	msr	BASEPRI, r0
 8008c0a:	4770      	bx	lr
 8008c0c:	f3af 8000 	nop.w

08008c10 <pxCurrentTCBConst2>:
 8008c10:	20000ee4 	.word	0x20000ee4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop

08008c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c18:	4808      	ldr	r0, [pc, #32]	; (8008c3c <prvPortStartFirstTask+0x24>)
 8008c1a:	6800      	ldr	r0, [r0, #0]
 8008c1c:	6800      	ldr	r0, [r0, #0]
 8008c1e:	f380 8808 	msr	MSP, r0
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f380 8814 	msr	CONTROL, r0
 8008c2a:	b662      	cpsie	i
 8008c2c:	b661      	cpsie	f
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	df00      	svc	0
 8008c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c3a:	bf00      	nop
 8008c3c:	e000ed08 	.word	0xe000ed08

08008c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c46:	4b46      	ldr	r3, [pc, #280]	; (8008d60 <xPortStartScheduler+0x120>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a46      	ldr	r2, [pc, #280]	; (8008d64 <xPortStartScheduler+0x124>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d10a      	bne.n	8008c66 <xPortStartScheduler+0x26>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	613b      	str	r3, [r7, #16]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c66:	4b3e      	ldr	r3, [pc, #248]	; (8008d60 <xPortStartScheduler+0x120>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a3f      	ldr	r2, [pc, #252]	; (8008d68 <xPortStartScheduler+0x128>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d10a      	bne.n	8008c86 <xPortStartScheduler+0x46>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60fb      	str	r3, [r7, #12]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c86:	4b39      	ldr	r3, [pc, #228]	; (8008d6c <xPortStartScheduler+0x12c>)
 8008c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	22ff      	movs	r2, #255	; 0xff
 8008c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	4b31      	ldr	r3, [pc, #196]	; (8008d70 <xPortStartScheduler+0x130>)
 8008cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cae:	4b31      	ldr	r3, [pc, #196]	; (8008d74 <xPortStartScheduler+0x134>)
 8008cb0:	2207      	movs	r2, #7
 8008cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cb4:	e009      	b.n	8008cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008cb6:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <xPortStartScheduler+0x134>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	4a2d      	ldr	r2, [pc, #180]	; (8008d74 <xPortStartScheduler+0x134>)
 8008cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd2:	2b80      	cmp	r3, #128	; 0x80
 8008cd4:	d0ef      	beq.n	8008cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cd6:	4b27      	ldr	r3, [pc, #156]	; (8008d74 <xPortStartScheduler+0x134>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f1c3 0307 	rsb	r3, r3, #7
 8008cde:	2b04      	cmp	r3, #4
 8008ce0:	d00a      	beq.n	8008cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	60bb      	str	r3, [r7, #8]
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cf8:	4b1e      	ldr	r3, [pc, #120]	; (8008d74 <xPortStartScheduler+0x134>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	021b      	lsls	r3, r3, #8
 8008cfe:	4a1d      	ldr	r2, [pc, #116]	; (8008d74 <xPortStartScheduler+0x134>)
 8008d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d02:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <xPortStartScheduler+0x134>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d0a:	4a1a      	ldr	r2, [pc, #104]	; (8008d74 <xPortStartScheduler+0x134>)
 8008d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d16:	4b18      	ldr	r3, [pc, #96]	; (8008d78 <xPortStartScheduler+0x138>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a17      	ldr	r2, [pc, #92]	; (8008d78 <xPortStartScheduler+0x138>)
 8008d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d22:	4b15      	ldr	r3, [pc, #84]	; (8008d78 <xPortStartScheduler+0x138>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a14      	ldr	r2, [pc, #80]	; (8008d78 <xPortStartScheduler+0x138>)
 8008d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d2e:	f000 f8dd 	bl	8008eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d32:	4b12      	ldr	r3, [pc, #72]	; (8008d7c <xPortStartScheduler+0x13c>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d38:	f000 f8fc 	bl	8008f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d3c:	4b10      	ldr	r3, [pc, #64]	; (8008d80 <xPortStartScheduler+0x140>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0f      	ldr	r2, [pc, #60]	; (8008d80 <xPortStartScheduler+0x140>)
 8008d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d48:	f7ff ff66 	bl	8008c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d4c:	f7ff f84c 	bl	8007de8 <vTaskSwitchContext>
	prvTaskExitError();
 8008d50:	f7ff ff22 	bl	8008b98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	e000ed00 	.word	0xe000ed00
 8008d64:	410fc271 	.word	0x410fc271
 8008d68:	410fc270 	.word	0x410fc270
 8008d6c:	e000e400 	.word	0xe000e400
 8008d70:	20001510 	.word	0x20001510
 8008d74:	20001514 	.word	0x20001514
 8008d78:	e000ed20 	.word	0xe000ed20
 8008d7c:	20000018 	.word	0x20000018
 8008d80:	e000ef34 	.word	0xe000ef34

08008d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	607b      	str	r3, [r7, #4]
}
 8008d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d9e:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <vPortEnterCritical+0x58>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3301      	adds	r3, #1
 8008da4:	4a0d      	ldr	r2, [pc, #52]	; (8008ddc <vPortEnterCritical+0x58>)
 8008da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008da8:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <vPortEnterCritical+0x58>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d10f      	bne.n	8008dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <vPortEnterCritical+0x5c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	603b      	str	r3, [r7, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <vPortEnterCritical+0x4a>
	}
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	20000018 	.word	0x20000018
 8008de0:	e000ed04 	.word	0xe000ed04

08008de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dea:	4b12      	ldr	r3, [pc, #72]	; (8008e34 <vPortExitCritical+0x50>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10a      	bne.n	8008e08 <vPortExitCritical+0x24>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	607b      	str	r3, [r7, #4]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <vPortExitCritical+0x50>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <vPortExitCritical+0x50>)
 8008e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e12:	4b08      	ldr	r3, [pc, #32]	; (8008e34 <vPortExitCritical+0x50>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d105      	bne.n	8008e26 <vPortExitCritical+0x42>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	f383 8811 	msr	BASEPRI, r3
}
 8008e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20000018 	.word	0x20000018
	...

08008e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e40:	f3ef 8009 	mrs	r0, PSP
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	4b15      	ldr	r3, [pc, #84]	; (8008ea0 <pxCurrentTCBConst>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	f01e 0f10 	tst.w	lr, #16
 8008e50:	bf08      	it	eq
 8008e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5a:	6010      	str	r0, [r2, #0]
 8008e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e64:	f380 8811 	msr	BASEPRI, r0
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f7fe ffba 	bl	8007de8 <vTaskSwitchContext>
 8008e74:	f04f 0000 	mov.w	r0, #0
 8008e78:	f380 8811 	msr	BASEPRI, r0
 8008e7c:	bc09      	pop	{r0, r3}
 8008e7e:	6819      	ldr	r1, [r3, #0]
 8008e80:	6808      	ldr	r0, [r1, #0]
 8008e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e86:	f01e 0f10 	tst.w	lr, #16
 8008e8a:	bf08      	it	eq
 8008e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e90:	f380 8809 	msr	PSP, r0
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	f3af 8000 	nop.w

08008ea0 <pxCurrentTCBConst>:
 8008ea0:	20000ee4 	.word	0x20000ee4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop

08008ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	607b      	str	r3, [r7, #4]
}
 8008ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ec2:	f7fe fed7 	bl	8007c74 <xTaskIncrementTick>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <xPortSysTickHandler+0x40>)
 8008ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	f383 8811 	msr	BASEPRI, r3
}
 8008ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	e000ed04 	.word	0xe000ed04

08008eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ef0:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <vPortSetupTimerInterrupt+0x34>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <vPortSetupTimerInterrupt+0x38>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <vPortSetupTimerInterrupt+0x3c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a0a      	ldr	r2, [pc, #40]	; (8008f2c <vPortSetupTimerInterrupt+0x40>)
 8008f02:	fba2 2303 	umull	r2, r3, r2, r3
 8008f06:	099b      	lsrs	r3, r3, #6
 8008f08:	4a09      	ldr	r2, [pc, #36]	; (8008f30 <vPortSetupTimerInterrupt+0x44>)
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f0e:	4b04      	ldr	r3, [pc, #16]	; (8008f20 <vPortSetupTimerInterrupt+0x34>)
 8008f10:	2207      	movs	r2, #7
 8008f12:	601a      	str	r2, [r3, #0]
}
 8008f14:	bf00      	nop
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	e000e010 	.word	0xe000e010
 8008f24:	e000e018 	.word	0xe000e018
 8008f28:	2000000c 	.word	0x2000000c
 8008f2c:	10624dd3 	.word	0x10624dd3
 8008f30:	e000e014 	.word	0xe000e014

08008f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f44 <vPortEnableVFP+0x10>
 8008f38:	6801      	ldr	r1, [r0, #0]
 8008f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f3e:	6001      	str	r1, [r0, #0]
 8008f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f42:	bf00      	nop
 8008f44:	e000ed88 	.word	0xe000ed88

08008f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f4e:	f3ef 8305 	mrs	r3, IPSR
 8008f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b0f      	cmp	r3, #15
 8008f58:	d914      	bls.n	8008f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f5a:	4a17      	ldr	r2, [pc, #92]	; (8008fb8 <vPortValidateInterruptPriority+0x70>)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4413      	add	r3, r2
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f64:	4b15      	ldr	r3, [pc, #84]	; (8008fbc <vPortValidateInterruptPriority+0x74>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	7afa      	ldrb	r2, [r7, #11]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d20a      	bcs.n	8008f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	607b      	str	r3, [r7, #4]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f84:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <vPortValidateInterruptPriority+0x78>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f8c:	4b0d      	ldr	r3, [pc, #52]	; (8008fc4 <vPortValidateInterruptPriority+0x7c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d90a      	bls.n	8008faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	603b      	str	r3, [r7, #0]
}
 8008fa6:	bf00      	nop
 8008fa8:	e7fe      	b.n	8008fa8 <vPortValidateInterruptPriority+0x60>
	}
 8008faa:	bf00      	nop
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	e000e3f0 	.word	0xe000e3f0
 8008fbc:	20001510 	.word	0x20001510
 8008fc0:	e000ed0c 	.word	0xe000ed0c
 8008fc4:	20001514 	.word	0x20001514

08008fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fd4:	f7fe fd92 	bl	8007afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fd8:	4b5b      	ldr	r3, [pc, #364]	; (8009148 <pvPortMalloc+0x180>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fe0:	f000 f920 	bl	8009224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fe4:	4b59      	ldr	r3, [pc, #356]	; (800914c <pvPortMalloc+0x184>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 8093 	bne.w	8009118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01d      	beq.n	8009034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	2b00      	cmp	r3, #0
 8009008:	d014      	beq.n	8009034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f023 0307 	bic.w	r3, r3, #7
 8009010:	3308      	adds	r3, #8
 8009012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <pvPortMalloc+0x6c>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	617b      	str	r3, [r7, #20]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d06e      	beq.n	8009118 <pvPortMalloc+0x150>
 800903a:	4b45      	ldr	r3, [pc, #276]	; (8009150 <pvPortMalloc+0x188>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d869      	bhi.n	8009118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009044:	4b43      	ldr	r3, [pc, #268]	; (8009154 <pvPortMalloc+0x18c>)
 8009046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009048:	4b42      	ldr	r3, [pc, #264]	; (8009154 <pvPortMalloc+0x18c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800904e:	e004      	b.n	800905a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d903      	bls.n	800906c <pvPortMalloc+0xa4>
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f1      	bne.n	8009050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800906c:	4b36      	ldr	r3, [pc, #216]	; (8009148 <pvPortMalloc+0x180>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009072:	429a      	cmp	r2, r3
 8009074:	d050      	beq.n	8009118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2208      	movs	r2, #8
 800907c:	4413      	add	r3, r2
 800907e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	2308      	movs	r3, #8
 8009092:	005b      	lsls	r3, r3, #1
 8009094:	429a      	cmp	r2, r3
 8009096:	d91f      	bls.n	80090d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <pvPortMalloc+0xf8>
	__asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	613b      	str	r3, [r7, #16]
}
 80090bc:	bf00      	nop
 80090be:	e7fe      	b.n	80090be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	1ad2      	subs	r2, r2, r3
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090d2:	69b8      	ldr	r0, [r7, #24]
 80090d4:	f000 f908 	bl	80092e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090d8:	4b1d      	ldr	r3, [pc, #116]	; (8009150 <pvPortMalloc+0x188>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	4a1b      	ldr	r2, [pc, #108]	; (8009150 <pvPortMalloc+0x188>)
 80090e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090e6:	4b1a      	ldr	r3, [pc, #104]	; (8009150 <pvPortMalloc+0x188>)
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	4b1b      	ldr	r3, [pc, #108]	; (8009158 <pvPortMalloc+0x190>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d203      	bcs.n	80090fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090f2:	4b17      	ldr	r3, [pc, #92]	; (8009150 <pvPortMalloc+0x188>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a18      	ldr	r2, [pc, #96]	; (8009158 <pvPortMalloc+0x190>)
 80090f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	4b13      	ldr	r3, [pc, #76]	; (800914c <pvPortMalloc+0x184>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	431a      	orrs	r2, r3
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800910e:	4b13      	ldr	r3, [pc, #76]	; (800915c <pvPortMalloc+0x194>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3301      	adds	r3, #1
 8009114:	4a11      	ldr	r2, [pc, #68]	; (800915c <pvPortMalloc+0x194>)
 8009116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009118:	f7fe fcfe 	bl	8007b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00a      	beq.n	800913c <pvPortMalloc+0x174>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	60fb      	str	r3, [r7, #12]
}
 8009138:	bf00      	nop
 800913a:	e7fe      	b.n	800913a <pvPortMalloc+0x172>
	return pvReturn;
 800913c:	69fb      	ldr	r3, [r7, #28]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3728      	adds	r7, #40	; 0x28
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20005120 	.word	0x20005120
 800914c:	20005134 	.word	0x20005134
 8009150:	20005124 	.word	0x20005124
 8009154:	20005118 	.word	0x20005118
 8009158:	20005128 	.word	0x20005128
 800915c:	2000512c 	.word	0x2000512c

08009160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d04d      	beq.n	800920e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009172:	2308      	movs	r3, #8
 8009174:	425b      	negs	r3, r3
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	4413      	add	r3, r2
 800917a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	4b24      	ldr	r3, [pc, #144]	; (8009218 <vPortFree+0xb8>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4013      	ands	r3, r2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10a      	bne.n	80091a4 <vPortFree+0x44>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	60fb      	str	r3, [r7, #12]
}
 80091a0:	bf00      	nop
 80091a2:	e7fe      	b.n	80091a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00a      	beq.n	80091c2 <vPortFree+0x62>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60bb      	str	r3, [r7, #8]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	4b14      	ldr	r3, [pc, #80]	; (8009218 <vPortFree+0xb8>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4013      	ands	r3, r2
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d01e      	beq.n	800920e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d11a      	bne.n	800920e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	4b0e      	ldr	r3, [pc, #56]	; (8009218 <vPortFree+0xb8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	43db      	mvns	r3, r3
 80091e2:	401a      	ands	r2, r3
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091e8:	f7fe fc88 	bl	8007afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	4b0a      	ldr	r3, [pc, #40]	; (800921c <vPortFree+0xbc>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4413      	add	r3, r2
 80091f6:	4a09      	ldr	r2, [pc, #36]	; (800921c <vPortFree+0xbc>)
 80091f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091fa:	6938      	ldr	r0, [r7, #16]
 80091fc:	f000 f874 	bl	80092e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <vPortFree+0xc0>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3301      	adds	r3, #1
 8009206:	4a06      	ldr	r2, [pc, #24]	; (8009220 <vPortFree+0xc0>)
 8009208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800920a:	f7fe fc85 	bl	8007b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800920e:	bf00      	nop
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20005134 	.word	0x20005134
 800921c:	20005124 	.word	0x20005124
 8009220:	20005130 	.word	0x20005130

08009224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800922a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800922e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009230:	4b27      	ldr	r3, [pc, #156]	; (80092d0 <prvHeapInit+0xac>)
 8009232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00c      	beq.n	8009258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3307      	adds	r3, #7
 8009242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 0307 	bic.w	r3, r3, #7
 800924a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	4a1f      	ldr	r2, [pc, #124]	; (80092d0 <prvHeapInit+0xac>)
 8009254:	4413      	add	r3, r2
 8009256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800925c:	4a1d      	ldr	r2, [pc, #116]	; (80092d4 <prvHeapInit+0xb0>)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009262:	4b1c      	ldr	r3, [pc, #112]	; (80092d4 <prvHeapInit+0xb0>)
 8009264:	2200      	movs	r2, #0
 8009266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	4413      	add	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009270:	2208      	movs	r2, #8
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0307 	bic.w	r3, r3, #7
 800927e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4a15      	ldr	r2, [pc, #84]	; (80092d8 <prvHeapInit+0xb4>)
 8009284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <prvHeapInit+0xb4>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2200      	movs	r2, #0
 800928c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800928e:	4b12      	ldr	r3, [pc, #72]	; (80092d8 <prvHeapInit+0xb4>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2200      	movs	r2, #0
 8009294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	1ad2      	subs	r2, r2, r3
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092a4:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <prvHeapInit+0xb4>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	4a0a      	ldr	r2, [pc, #40]	; (80092dc <prvHeapInit+0xb8>)
 80092b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4a09      	ldr	r2, [pc, #36]	; (80092e0 <prvHeapInit+0xbc>)
 80092ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092bc:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <prvHeapInit+0xc0>)
 80092be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092c2:	601a      	str	r2, [r3, #0]
}
 80092c4:	bf00      	nop
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	20001518 	.word	0x20001518
 80092d4:	20005118 	.word	0x20005118
 80092d8:	20005120 	.word	0x20005120
 80092dc:	20005128 	.word	0x20005128
 80092e0:	20005124 	.word	0x20005124
 80092e4:	20005134 	.word	0x20005134

080092e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092f0:	4b28      	ldr	r3, [pc, #160]	; (8009394 <prvInsertBlockIntoFreeList+0xac>)
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	e002      	b.n	80092fc <prvInsertBlockIntoFreeList+0x14>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	429a      	cmp	r2, r3
 8009304:	d8f7      	bhi.n	80092f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	4413      	add	r3, r2
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	d108      	bne.n	800932a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	441a      	add	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	441a      	add	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d118      	bne.n	8009370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	4b15      	ldr	r3, [pc, #84]	; (8009398 <prvInsertBlockIntoFreeList+0xb0>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d00d      	beq.n	8009366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	441a      	add	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	e008      	b.n	8009378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <prvInsertBlockIntoFreeList+0xb0>)
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	e003      	b.n	8009378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	429a      	cmp	r2, r3
 800937e:	d002      	beq.n	8009386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009386:	bf00      	nop
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	20005118 	.word	0x20005118
 8009398:	20005120 	.word	0x20005120

0800939c <__errno>:
 800939c:	4b01      	ldr	r3, [pc, #4]	; (80093a4 <__errno+0x8>)
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	2000001c 	.word	0x2000001c

080093a8 <__libc_init_array>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	4d0d      	ldr	r5, [pc, #52]	; (80093e0 <__libc_init_array+0x38>)
 80093ac:	4c0d      	ldr	r4, [pc, #52]	; (80093e4 <__libc_init_array+0x3c>)
 80093ae:	1b64      	subs	r4, r4, r5
 80093b0:	10a4      	asrs	r4, r4, #2
 80093b2:	2600      	movs	r6, #0
 80093b4:	42a6      	cmp	r6, r4
 80093b6:	d109      	bne.n	80093cc <__libc_init_array+0x24>
 80093b8:	4d0b      	ldr	r5, [pc, #44]	; (80093e8 <__libc_init_array+0x40>)
 80093ba:	4c0c      	ldr	r4, [pc, #48]	; (80093ec <__libc_init_array+0x44>)
 80093bc:	f000 f9e0 	bl	8009780 <_init>
 80093c0:	1b64      	subs	r4, r4, r5
 80093c2:	10a4      	asrs	r4, r4, #2
 80093c4:	2600      	movs	r6, #0
 80093c6:	42a6      	cmp	r6, r4
 80093c8:	d105      	bne.n	80093d6 <__libc_init_array+0x2e>
 80093ca:	bd70      	pop	{r4, r5, r6, pc}
 80093cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d0:	4798      	blx	r3
 80093d2:	3601      	adds	r6, #1
 80093d4:	e7ee      	b.n	80093b4 <__libc_init_array+0xc>
 80093d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093da:	4798      	blx	r3
 80093dc:	3601      	adds	r6, #1
 80093de:	e7f2      	b.n	80093c6 <__libc_init_array+0x1e>
 80093e0:	0800ba58 	.word	0x0800ba58
 80093e4:	0800ba58 	.word	0x0800ba58
 80093e8:	0800ba58 	.word	0x0800ba58
 80093ec:	0800ba5c 	.word	0x0800ba5c

080093f0 <__retarget_lock_acquire_recursive>:
 80093f0:	4770      	bx	lr

080093f2 <__retarget_lock_release_recursive>:
 80093f2:	4770      	bx	lr

080093f4 <malloc>:
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <malloc+0xc>)
 80093f6:	4601      	mov	r1, r0
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	f000 b885 	b.w	8009508 <_malloc_r>
 80093fe:	bf00      	nop
 8009400:	2000001c 	.word	0x2000001c

08009404 <memcpy>:
 8009404:	440a      	add	r2, r1
 8009406:	4291      	cmp	r1, r2
 8009408:	f100 33ff 	add.w	r3, r0, #4294967295
 800940c:	d100      	bne.n	8009410 <memcpy+0xc>
 800940e:	4770      	bx	lr
 8009410:	b510      	push	{r4, lr}
 8009412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800941a:	4291      	cmp	r1, r2
 800941c:	d1f9      	bne.n	8009412 <memcpy+0xe>
 800941e:	bd10      	pop	{r4, pc}

08009420 <memset>:
 8009420:	4402      	add	r2, r0
 8009422:	4603      	mov	r3, r0
 8009424:	4293      	cmp	r3, r2
 8009426:	d100      	bne.n	800942a <memset+0xa>
 8009428:	4770      	bx	lr
 800942a:	f803 1b01 	strb.w	r1, [r3], #1
 800942e:	e7f9      	b.n	8009424 <memset+0x4>

08009430 <_free_r>:
 8009430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009432:	2900      	cmp	r1, #0
 8009434:	d044      	beq.n	80094c0 <_free_r+0x90>
 8009436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800943a:	9001      	str	r0, [sp, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	f1a1 0404 	sub.w	r4, r1, #4
 8009442:	bfb8      	it	lt
 8009444:	18e4      	addlt	r4, r4, r3
 8009446:	f000 f94d 	bl	80096e4 <__malloc_lock>
 800944a:	4a1e      	ldr	r2, [pc, #120]	; (80094c4 <_free_r+0x94>)
 800944c:	9801      	ldr	r0, [sp, #4]
 800944e:	6813      	ldr	r3, [r2, #0]
 8009450:	b933      	cbnz	r3, 8009460 <_free_r+0x30>
 8009452:	6063      	str	r3, [r4, #4]
 8009454:	6014      	str	r4, [r2, #0]
 8009456:	b003      	add	sp, #12
 8009458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800945c:	f000 b948 	b.w	80096f0 <__malloc_unlock>
 8009460:	42a3      	cmp	r3, r4
 8009462:	d908      	bls.n	8009476 <_free_r+0x46>
 8009464:	6825      	ldr	r5, [r4, #0]
 8009466:	1961      	adds	r1, r4, r5
 8009468:	428b      	cmp	r3, r1
 800946a:	bf01      	itttt	eq
 800946c:	6819      	ldreq	r1, [r3, #0]
 800946e:	685b      	ldreq	r3, [r3, #4]
 8009470:	1949      	addeq	r1, r1, r5
 8009472:	6021      	streq	r1, [r4, #0]
 8009474:	e7ed      	b.n	8009452 <_free_r+0x22>
 8009476:	461a      	mov	r2, r3
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	b10b      	cbz	r3, 8009480 <_free_r+0x50>
 800947c:	42a3      	cmp	r3, r4
 800947e:	d9fa      	bls.n	8009476 <_free_r+0x46>
 8009480:	6811      	ldr	r1, [r2, #0]
 8009482:	1855      	adds	r5, r2, r1
 8009484:	42a5      	cmp	r5, r4
 8009486:	d10b      	bne.n	80094a0 <_free_r+0x70>
 8009488:	6824      	ldr	r4, [r4, #0]
 800948a:	4421      	add	r1, r4
 800948c:	1854      	adds	r4, r2, r1
 800948e:	42a3      	cmp	r3, r4
 8009490:	6011      	str	r1, [r2, #0]
 8009492:	d1e0      	bne.n	8009456 <_free_r+0x26>
 8009494:	681c      	ldr	r4, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	6053      	str	r3, [r2, #4]
 800949a:	4421      	add	r1, r4
 800949c:	6011      	str	r1, [r2, #0]
 800949e:	e7da      	b.n	8009456 <_free_r+0x26>
 80094a0:	d902      	bls.n	80094a8 <_free_r+0x78>
 80094a2:	230c      	movs	r3, #12
 80094a4:	6003      	str	r3, [r0, #0]
 80094a6:	e7d6      	b.n	8009456 <_free_r+0x26>
 80094a8:	6825      	ldr	r5, [r4, #0]
 80094aa:	1961      	adds	r1, r4, r5
 80094ac:	428b      	cmp	r3, r1
 80094ae:	bf04      	itt	eq
 80094b0:	6819      	ldreq	r1, [r3, #0]
 80094b2:	685b      	ldreq	r3, [r3, #4]
 80094b4:	6063      	str	r3, [r4, #4]
 80094b6:	bf04      	itt	eq
 80094b8:	1949      	addeq	r1, r1, r5
 80094ba:	6021      	streq	r1, [r4, #0]
 80094bc:	6054      	str	r4, [r2, #4]
 80094be:	e7ca      	b.n	8009456 <_free_r+0x26>
 80094c0:	b003      	add	sp, #12
 80094c2:	bd30      	pop	{r4, r5, pc}
 80094c4:	2000513c 	.word	0x2000513c

080094c8 <sbrk_aligned>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	4e0e      	ldr	r6, [pc, #56]	; (8009504 <sbrk_aligned+0x3c>)
 80094cc:	460c      	mov	r4, r1
 80094ce:	6831      	ldr	r1, [r6, #0]
 80094d0:	4605      	mov	r5, r0
 80094d2:	b911      	cbnz	r1, 80094da <sbrk_aligned+0x12>
 80094d4:	f000 f8f6 	bl	80096c4 <_sbrk_r>
 80094d8:	6030      	str	r0, [r6, #0]
 80094da:	4621      	mov	r1, r4
 80094dc:	4628      	mov	r0, r5
 80094de:	f000 f8f1 	bl	80096c4 <_sbrk_r>
 80094e2:	1c43      	adds	r3, r0, #1
 80094e4:	d00a      	beq.n	80094fc <sbrk_aligned+0x34>
 80094e6:	1cc4      	adds	r4, r0, #3
 80094e8:	f024 0403 	bic.w	r4, r4, #3
 80094ec:	42a0      	cmp	r0, r4
 80094ee:	d007      	beq.n	8009500 <sbrk_aligned+0x38>
 80094f0:	1a21      	subs	r1, r4, r0
 80094f2:	4628      	mov	r0, r5
 80094f4:	f000 f8e6 	bl	80096c4 <_sbrk_r>
 80094f8:	3001      	adds	r0, #1
 80094fa:	d101      	bne.n	8009500 <sbrk_aligned+0x38>
 80094fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009500:	4620      	mov	r0, r4
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	20005140 	.word	0x20005140

08009508 <_malloc_r>:
 8009508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800950c:	1ccd      	adds	r5, r1, #3
 800950e:	f025 0503 	bic.w	r5, r5, #3
 8009512:	3508      	adds	r5, #8
 8009514:	2d0c      	cmp	r5, #12
 8009516:	bf38      	it	cc
 8009518:	250c      	movcc	r5, #12
 800951a:	2d00      	cmp	r5, #0
 800951c:	4607      	mov	r7, r0
 800951e:	db01      	blt.n	8009524 <_malloc_r+0x1c>
 8009520:	42a9      	cmp	r1, r5
 8009522:	d905      	bls.n	8009530 <_malloc_r+0x28>
 8009524:	230c      	movs	r3, #12
 8009526:	603b      	str	r3, [r7, #0]
 8009528:	2600      	movs	r6, #0
 800952a:	4630      	mov	r0, r6
 800952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009530:	4e2e      	ldr	r6, [pc, #184]	; (80095ec <_malloc_r+0xe4>)
 8009532:	f000 f8d7 	bl	80096e4 <__malloc_lock>
 8009536:	6833      	ldr	r3, [r6, #0]
 8009538:	461c      	mov	r4, r3
 800953a:	bb34      	cbnz	r4, 800958a <_malloc_r+0x82>
 800953c:	4629      	mov	r1, r5
 800953e:	4638      	mov	r0, r7
 8009540:	f7ff ffc2 	bl	80094c8 <sbrk_aligned>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	4604      	mov	r4, r0
 8009548:	d14d      	bne.n	80095e6 <_malloc_r+0xde>
 800954a:	6834      	ldr	r4, [r6, #0]
 800954c:	4626      	mov	r6, r4
 800954e:	2e00      	cmp	r6, #0
 8009550:	d140      	bne.n	80095d4 <_malloc_r+0xcc>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	4631      	mov	r1, r6
 8009556:	4638      	mov	r0, r7
 8009558:	eb04 0803 	add.w	r8, r4, r3
 800955c:	f000 f8b2 	bl	80096c4 <_sbrk_r>
 8009560:	4580      	cmp	r8, r0
 8009562:	d13a      	bne.n	80095da <_malloc_r+0xd2>
 8009564:	6821      	ldr	r1, [r4, #0]
 8009566:	3503      	adds	r5, #3
 8009568:	1a6d      	subs	r5, r5, r1
 800956a:	f025 0503 	bic.w	r5, r5, #3
 800956e:	3508      	adds	r5, #8
 8009570:	2d0c      	cmp	r5, #12
 8009572:	bf38      	it	cc
 8009574:	250c      	movcc	r5, #12
 8009576:	4629      	mov	r1, r5
 8009578:	4638      	mov	r0, r7
 800957a:	f7ff ffa5 	bl	80094c8 <sbrk_aligned>
 800957e:	3001      	adds	r0, #1
 8009580:	d02b      	beq.n	80095da <_malloc_r+0xd2>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	442b      	add	r3, r5
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	e00e      	b.n	80095a8 <_malloc_r+0xa0>
 800958a:	6822      	ldr	r2, [r4, #0]
 800958c:	1b52      	subs	r2, r2, r5
 800958e:	d41e      	bmi.n	80095ce <_malloc_r+0xc6>
 8009590:	2a0b      	cmp	r2, #11
 8009592:	d916      	bls.n	80095c2 <_malloc_r+0xba>
 8009594:	1961      	adds	r1, r4, r5
 8009596:	42a3      	cmp	r3, r4
 8009598:	6025      	str	r5, [r4, #0]
 800959a:	bf18      	it	ne
 800959c:	6059      	strne	r1, [r3, #4]
 800959e:	6863      	ldr	r3, [r4, #4]
 80095a0:	bf08      	it	eq
 80095a2:	6031      	streq	r1, [r6, #0]
 80095a4:	5162      	str	r2, [r4, r5]
 80095a6:	604b      	str	r3, [r1, #4]
 80095a8:	4638      	mov	r0, r7
 80095aa:	f104 060b 	add.w	r6, r4, #11
 80095ae:	f000 f89f 	bl	80096f0 <__malloc_unlock>
 80095b2:	f026 0607 	bic.w	r6, r6, #7
 80095b6:	1d23      	adds	r3, r4, #4
 80095b8:	1af2      	subs	r2, r6, r3
 80095ba:	d0b6      	beq.n	800952a <_malloc_r+0x22>
 80095bc:	1b9b      	subs	r3, r3, r6
 80095be:	50a3      	str	r3, [r4, r2]
 80095c0:	e7b3      	b.n	800952a <_malloc_r+0x22>
 80095c2:	6862      	ldr	r2, [r4, #4]
 80095c4:	42a3      	cmp	r3, r4
 80095c6:	bf0c      	ite	eq
 80095c8:	6032      	streq	r2, [r6, #0]
 80095ca:	605a      	strne	r2, [r3, #4]
 80095cc:	e7ec      	b.n	80095a8 <_malloc_r+0xa0>
 80095ce:	4623      	mov	r3, r4
 80095d0:	6864      	ldr	r4, [r4, #4]
 80095d2:	e7b2      	b.n	800953a <_malloc_r+0x32>
 80095d4:	4634      	mov	r4, r6
 80095d6:	6876      	ldr	r6, [r6, #4]
 80095d8:	e7b9      	b.n	800954e <_malloc_r+0x46>
 80095da:	230c      	movs	r3, #12
 80095dc:	603b      	str	r3, [r7, #0]
 80095de:	4638      	mov	r0, r7
 80095e0:	f000 f886 	bl	80096f0 <__malloc_unlock>
 80095e4:	e7a1      	b.n	800952a <_malloc_r+0x22>
 80095e6:	6025      	str	r5, [r4, #0]
 80095e8:	e7de      	b.n	80095a8 <_malloc_r+0xa0>
 80095ea:	bf00      	nop
 80095ec:	2000513c 	.word	0x2000513c

080095f0 <cleanup_glue>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	460c      	mov	r4, r1
 80095f4:	6809      	ldr	r1, [r1, #0]
 80095f6:	4605      	mov	r5, r0
 80095f8:	b109      	cbz	r1, 80095fe <cleanup_glue+0xe>
 80095fa:	f7ff fff9 	bl	80095f0 <cleanup_glue>
 80095fe:	4621      	mov	r1, r4
 8009600:	4628      	mov	r0, r5
 8009602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009606:	f7ff bf13 	b.w	8009430 <_free_r>
	...

0800960c <_reclaim_reent>:
 800960c:	4b2c      	ldr	r3, [pc, #176]	; (80096c0 <_reclaim_reent+0xb4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4283      	cmp	r3, r0
 8009612:	b570      	push	{r4, r5, r6, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	d051      	beq.n	80096bc <_reclaim_reent+0xb0>
 8009618:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800961a:	b143      	cbz	r3, 800962e <_reclaim_reent+0x22>
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d14a      	bne.n	80096b8 <_reclaim_reent+0xac>
 8009622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009624:	6819      	ldr	r1, [r3, #0]
 8009626:	b111      	cbz	r1, 800962e <_reclaim_reent+0x22>
 8009628:	4620      	mov	r0, r4
 800962a:	f7ff ff01 	bl	8009430 <_free_r>
 800962e:	6961      	ldr	r1, [r4, #20]
 8009630:	b111      	cbz	r1, 8009638 <_reclaim_reent+0x2c>
 8009632:	4620      	mov	r0, r4
 8009634:	f7ff fefc 	bl	8009430 <_free_r>
 8009638:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800963a:	b111      	cbz	r1, 8009642 <_reclaim_reent+0x36>
 800963c:	4620      	mov	r0, r4
 800963e:	f7ff fef7 	bl	8009430 <_free_r>
 8009642:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009644:	b111      	cbz	r1, 800964c <_reclaim_reent+0x40>
 8009646:	4620      	mov	r0, r4
 8009648:	f7ff fef2 	bl	8009430 <_free_r>
 800964c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800964e:	b111      	cbz	r1, 8009656 <_reclaim_reent+0x4a>
 8009650:	4620      	mov	r0, r4
 8009652:	f7ff feed 	bl	8009430 <_free_r>
 8009656:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009658:	b111      	cbz	r1, 8009660 <_reclaim_reent+0x54>
 800965a:	4620      	mov	r0, r4
 800965c:	f7ff fee8 	bl	8009430 <_free_r>
 8009660:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009662:	b111      	cbz	r1, 800966a <_reclaim_reent+0x5e>
 8009664:	4620      	mov	r0, r4
 8009666:	f7ff fee3 	bl	8009430 <_free_r>
 800966a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800966c:	b111      	cbz	r1, 8009674 <_reclaim_reent+0x68>
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff fede 	bl	8009430 <_free_r>
 8009674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009676:	b111      	cbz	r1, 800967e <_reclaim_reent+0x72>
 8009678:	4620      	mov	r0, r4
 800967a:	f7ff fed9 	bl	8009430 <_free_r>
 800967e:	69a3      	ldr	r3, [r4, #24]
 8009680:	b1e3      	cbz	r3, 80096bc <_reclaim_reent+0xb0>
 8009682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009684:	4620      	mov	r0, r4
 8009686:	4798      	blx	r3
 8009688:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800968a:	b1b9      	cbz	r1, 80096bc <_reclaim_reent+0xb0>
 800968c:	4620      	mov	r0, r4
 800968e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009692:	f7ff bfad 	b.w	80095f0 <cleanup_glue>
 8009696:	5949      	ldr	r1, [r1, r5]
 8009698:	b941      	cbnz	r1, 80096ac <_reclaim_reent+0xa0>
 800969a:	3504      	adds	r5, #4
 800969c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800969e:	2d80      	cmp	r5, #128	; 0x80
 80096a0:	68d9      	ldr	r1, [r3, #12]
 80096a2:	d1f8      	bne.n	8009696 <_reclaim_reent+0x8a>
 80096a4:	4620      	mov	r0, r4
 80096a6:	f7ff fec3 	bl	8009430 <_free_r>
 80096aa:	e7ba      	b.n	8009622 <_reclaim_reent+0x16>
 80096ac:	680e      	ldr	r6, [r1, #0]
 80096ae:	4620      	mov	r0, r4
 80096b0:	f7ff febe 	bl	8009430 <_free_r>
 80096b4:	4631      	mov	r1, r6
 80096b6:	e7ef      	b.n	8009698 <_reclaim_reent+0x8c>
 80096b8:	2500      	movs	r5, #0
 80096ba:	e7ef      	b.n	800969c <_reclaim_reent+0x90>
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
 80096be:	bf00      	nop
 80096c0:	2000001c 	.word	0x2000001c

080096c4 <_sbrk_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4d06      	ldr	r5, [pc, #24]	; (80096e0 <_sbrk_r+0x1c>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	f7f9 fad2 	bl	8002c78 <_sbrk>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_sbrk_r+0x1a>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_sbrk_r+0x1a>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	20005144 	.word	0x20005144

080096e4 <__malloc_lock>:
 80096e4:	4801      	ldr	r0, [pc, #4]	; (80096ec <__malloc_lock+0x8>)
 80096e6:	f7ff be83 	b.w	80093f0 <__retarget_lock_acquire_recursive>
 80096ea:	bf00      	nop
 80096ec:	20005138 	.word	0x20005138

080096f0 <__malloc_unlock>:
 80096f0:	4801      	ldr	r0, [pc, #4]	; (80096f8 <__malloc_unlock+0x8>)
 80096f2:	f7ff be7e 	b.w	80093f2 <__retarget_lock_release_recursive>
 80096f6:	bf00      	nop
 80096f8:	20005138 	.word	0x20005138

080096fc <floorf>:
 80096fc:	ee10 3a10 	vmov	r3, s0
 8009700:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009704:	3a7f      	subs	r2, #127	; 0x7f
 8009706:	2a16      	cmp	r2, #22
 8009708:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800970c:	dc2a      	bgt.n	8009764 <floorf+0x68>
 800970e:	2a00      	cmp	r2, #0
 8009710:	da11      	bge.n	8009736 <floorf+0x3a>
 8009712:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009774 <floorf+0x78>
 8009716:	ee30 0a27 	vadd.f32	s0, s0, s15
 800971a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800971e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009722:	dd05      	ble.n	8009730 <floorf+0x34>
 8009724:	2b00      	cmp	r3, #0
 8009726:	da23      	bge.n	8009770 <floorf+0x74>
 8009728:	4a13      	ldr	r2, [pc, #76]	; (8009778 <floorf+0x7c>)
 800972a:	2900      	cmp	r1, #0
 800972c:	bf18      	it	ne
 800972e:	4613      	movne	r3, r2
 8009730:	ee00 3a10 	vmov	s0, r3
 8009734:	4770      	bx	lr
 8009736:	4911      	ldr	r1, [pc, #68]	; (800977c <floorf+0x80>)
 8009738:	4111      	asrs	r1, r2
 800973a:	420b      	tst	r3, r1
 800973c:	d0fa      	beq.n	8009734 <floorf+0x38>
 800973e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009774 <floorf+0x78>
 8009742:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009746:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974e:	ddef      	ble.n	8009730 <floorf+0x34>
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfbe      	ittt	lt
 8009754:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009758:	fa40 f202 	asrlt.w	r2, r0, r2
 800975c:	189b      	addlt	r3, r3, r2
 800975e:	ea23 0301 	bic.w	r3, r3, r1
 8009762:	e7e5      	b.n	8009730 <floorf+0x34>
 8009764:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009768:	d3e4      	bcc.n	8009734 <floorf+0x38>
 800976a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800976e:	4770      	bx	lr
 8009770:	2300      	movs	r3, #0
 8009772:	e7dd      	b.n	8009730 <floorf+0x34>
 8009774:	7149f2ca 	.word	0x7149f2ca
 8009778:	bf800000 	.word	0xbf800000
 800977c:	007fffff 	.word	0x007fffff

08009780 <_init>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr

0800978c <_fini>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr
