
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002110  08009ebc  08009ebc  00019ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfcc  0800bfcc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfcc  0800bfcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfd4  0800bfd4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd4  0800bfd4  0001bfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800bfdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050d8  200000a4  0800c080  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000517c  0800c080  0002517c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020357  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004858  00000000  00000000  0004042b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  00044c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00046740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd09  00000000  00000000  00048000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e74  00000000  00000000  00063d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d0f6  00000000  00000000  00084b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121c73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007484  00000000  00000000  00121cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ea4 	.word	0x08009ea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08009ea4 	.word	0x08009ea4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

//static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4639      	mov	r1, r7
 8000ccc:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f008 ff1f 	bl	8009b18 <malloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	897a      	ldrh	r2, [r7, #10]
 8000ce8:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	1d9a      	adds	r2, r3, #6
 8000cee:	463b      	mov	r3, r7
 8000cf0:	cb03      	ldmia	r3!, {r0, r1}
 8000cf2:	6010      	str	r0, [r2, #0]
 8000cf4:	6051      	str	r1, [r2, #4]
	return pConfig;
 8000cf6:	697b      	ldr	r3, [r7, #20]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1d9a      	adds	r2, r3, #6
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	cb03      	ldmia	r3!, {r0, r1}
 8000d16:	6010      	str	r0, [r2, #0]
 8000d18:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ADS1115_updateConfig+0x60>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	82bb      	strh	r3, [r7, #20]
 8000d20:	2300      	movs	r3, #0
 8000d22:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000d34:	460b      	mov	r3, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f000 f875 	bl	8000e28 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2303      	movs	r3, #3
 8000d54:	f003 f844 	bl	8003de0 <HAL_I2C_Master_Transmit>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08009ebc 	.word	0x08009ebc

08000d64 <ADS1115_getData>:
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);

	return ADS1115_getData(pConfig);
}

int16_t ADS1115_getData(ADS1115_Handle_t *pConfig){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t bytes[2] = {0};
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	81bb      	strh	r3, [r7, #12]
	bytes[0] = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 1, 50);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	f107 020c 	add.w	r2, r7, #12
 8000d84:	2332      	movs	r3, #50	; 0x32
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f003 f829 	bl	8003de0 <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(pConfig->hi2c, (pConfig->address << 1), bytes, 2, 50) != HAL_OK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	889b      	ldrh	r3, [r3, #4]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	f107 020c 	add.w	r2, r7, #12
 8000d9e:	2332      	movs	r3, #50	; 0x32
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2302      	movs	r3, #2
 8000da4:	f003 f91a 	bl	8003fdc <HAL_I2C_Master_Receive>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <ADS1115_getData+0x4e>
		return 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e008      	b.n	8000dc4 <ADS1115_getData+0x60>

	int16_t readValue = ((bytes[0] << 8) | bytes[1]);
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	7b7b      	ldrb	r3, [r7, #13]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	81fb      	strh	r3, [r7, #14]

	return readValue;
 8000dc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ADS1115_startContinousMode>:

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
}

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <ADS1115_startContinousMode+0x58>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	82bb      	strh	r3, [r7, #20]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	3206      	adds	r2, #6
 8000de6:	6810      	ldr	r0, [r2, #0]
 8000de8:	6851      	ldr	r1, [r2, #4]
 8000dea:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000df0:	f107 0014 	add.w	r0, r7, #20
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000dfc:	f000 f814 	bl	8000e28 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	889b      	ldrh	r3, [r3, #4]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2303      	movs	r3, #3
 8000e16:	f002 ffe3 	bl	8003de0 <HAL_I2C_Master_Transmit>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	08009ebc 	.word	0x08009ebc

08000e28 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t temp[3] = {0};
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <prepareConfigFrame+0xac>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	82bb      	strh	r3, [r7, #20]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	75bb      	strb	r3, [r7, #22]
	pOutFrame[0] = 0x01;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25a      	sxtb	r2, r3
 8000e4e:	793b      	ldrb	r3, [r7, #4]
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	b259      	sxtb	r1, r3
 8000e54:	797b      	ldrb	r3, [r7, #5]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	430b      	orrs	r3, r1
 8000e64:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3302      	adds	r3, #2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	b259      	sxtb	r1, r3
 8000e80:	7a3b      	ldrb	r3, [r7, #8]
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	430b      	orrs	r3, r1
 8000e88:	b259      	sxtb	r1, r3
 8000e8a:	7a7b      	ldrb	r3, [r7, #9]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	430b      	orrs	r3, r1
 8000e92:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 8000e94:	7abb      	ldrb	r3, [r7, #10]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	b259      	sxtb	r1, r3
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25a      	sxtb	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3302      	adds	r3, #2
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
	temp[0] = pOutFrame[0];
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	753b      	strb	r3, [r7, #20]
	temp[1] = pOutFrame[1];
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	757b      	strb	r3, [r7, #21]
	temp[2] = pOutFrame[2];
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	75bb      	strb	r3, [r7, #22]
}
 8000ec6:	bf00      	nop
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	08009ebc 	.word	0x08009ebc

08000ed8 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	ed87 0a00 	vstr	s0, [r7]
 8000ee8:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	ed97 0a00 	vldr	s0, [r7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f822 	bl	8000f48 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	461c      	mov	r4, r3
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}

08000f1a <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f003 fd9a 	bl	8004a68 <HAL_I2C_IsDeviceReady>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf0c      	ite	eq
 8000f3a:	2301      	moveq	r3, #1
 8000f3c:	2300      	movne	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000f54:	edd7 7a00 	vldr	s15, [r7]
 8000f58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	d103      	bne.n	8000f6a <MCP4725_setReferenceVoltage+0x22>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <MCP4725_setReferenceVoltage+0x50>)
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	e002      	b.n	8000f70 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f76:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f9c <MCP4725_setReferenceVoltage+0x54>
 8000f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f82:	ee17 3a90 	vmov	r3, s15
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	819a      	strh	r2, [r3, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40533333 	.word	0x40533333
 8000f9c:	45800000 	.word	0x45800000

08000fa0 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	4608      	mov	r0, r1
 8000faa:	4611      	mov	r1, r2
 8000fac:	461a      	mov	r2, r3
 8000fae:	4603      	mov	r3, r0
 8000fb0:	807b      	strh	r3, [r7, #2]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	707b      	strb	r3, [r7, #1]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000fba:	783b      	ldrb	r3, [r7, #0]
 8000fbc:	787a      	ldrb	r2, [r7, #1]
 8000fbe:	8879      	ldrh	r1, [r7, #2]
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f822 	bl	800100a <MCP4725_writeComand>
 8000fc6:	4603      	mov	r3, r0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000fd8:	2101      	movs	r1, #1
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f895 	bl	800110a <MCP4725_readRegister>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d008      	beq.n	8001000 <MCP4725_getEepromBusyFlag+0x30>
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	e000      	b.n	8001002 <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af02      	add	r7, sp, #8
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	4608      	mov	r0, r1
 8001014:	4611      	mov	r1, r2
 8001016:	461a      	mov	r2, r3
 8001018:	4603      	mov	r3, r0
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	460b      	mov	r3, r1
 800101e:	707b      	strb	r3, [r7, #1]
 8001020:	4613      	mov	r3, r2
 8001022:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b60      	cmp	r3, #96	; 0x60
 8001028:	d028      	beq.n	800107c <MCP4725_writeComand+0x72>
 800102a:	2b60      	cmp	r3, #96	; 0x60
 800102c:	dc4a      	bgt.n	80010c4 <MCP4725_writeComand+0xba>
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <MCP4725_writeComand+0x2e>
 8001032:	2b40      	cmp	r3, #64	; 0x40
 8001034:	d022      	beq.n	800107c <MCP4725_writeComand+0x72>
 8001036:	e045      	b.n	80010c4 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8001038:	783b      	ldrb	r3, [r7, #0]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	b25a      	sxtb	r2, r3
 800103e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001042:	4313      	orrs	r3, r2
 8001044:	b25a      	sxtb	r2, r3
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	b25b      	sxtb	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b25b      	sxtb	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	b299      	uxth	r1, r3
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	f002 feb5 	bl	8003de0 <HAL_I2C_Master_Transmit>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
		
      break;
 800107a:	e023      	b.n	80010c4 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 8001082:	783b      	ldrb	r3, [r7, #0]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b25a      	sxtb	r2, r3
 8001088:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800108c:	4313      	orrs	r3, r2
 800108e:	b25b      	sxtb	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	f107 020c 	add.w	r2, r7, #12
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2303      	movs	r3, #3
 80010ba:	f002 fe91 	bl	8003de0 <HAL_I2C_Master_Transmit>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
		
			break;
 80010c2:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MCP4725_writeComand+0xc4>
 80010ca:	2300      	movs	r3, #0
 80010cc:	e019      	b.n	8001102 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 80010ce:	787b      	ldrb	r3, [r7, #1]
 80010d0:	2b60      	cmp	r3, #96	; 0x60
 80010d2:	d115      	bne.n	8001100 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff7b 	bl	8000fd0 <MCP4725_getEepromBusyFlag>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <MCP4725_writeComand+0xda>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e00e      	b.n	8001102 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80010e4:	2019      	movs	r0, #25
 80010e6:	f001 fee9 	bl	8002ebc <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff70 	bl	8000fd0 <MCP4725_getEepromBusyFlag>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <MCP4725_writeComand+0xf0>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e003      	b.n	8001102 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 80010fa:	2019      	movs	r0, #25
 80010fc:	f001 fede 	bl	8002ebc <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 800110a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	466b      	mov	r3, sp
 800111a:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001120:	2300      	movs	r3, #0
 8001122:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001124:	78f9      	ldrb	r1, [r7, #3]
 8001126:	460b      	mov	r3, r1
 8001128:	3b01      	subs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	b2cb      	uxtb	r3, r1
 800112e:	2200      	movs	r2, #0
 8001130:	4698      	mov	r8, r3
 8001132:	4691      	mov	r9, r2
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001140:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001144:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001148:	b2cb      	uxtb	r3, r1
 800114a:	2200      	movs	r2, #0
 800114c:	461c      	mov	r4, r3
 800114e:	4615      	mov	r5, r2
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	00eb      	lsls	r3, r5, #3
 800115a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800115e:	00e2      	lsls	r2, r4, #3
 8001160:	460b      	mov	r3, r1
 8001162:	3307      	adds	r3, #7
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	ebad 0d03 	sub.w	sp, sp, r3
 800116c:	ab02      	add	r3, sp, #8
 800116e:	3300      	adds	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	791b      	ldrb	r3, [r3, #4]
 800117a:	b299      	uxth	r1, r3
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	b29b      	uxth	r3, r3
 8001180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001184:	9200      	str	r2, [sp, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	f002 ff28 	bl	8003fdc <HAL_I2C_Master_Receive>
 800118c:	4603      	mov	r3, r0
 800118e:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <MCP4725_readRegister+0x92>
 8001196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119a:	e01f      	b.n	80011dc <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d00a      	beq.n	80011b8 <MCP4725_readRegister+0xae>
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	dc19      	bgt.n	80011da <MCP4725_readRegister+0xd0>
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d002      	beq.n	80011b0 <MCP4725_readRegister+0xa6>
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d004      	beq.n	80011b8 <MCP4725_readRegister+0xae>
 80011ae:	e014      	b.n	80011da <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	82fb      	strh	r3, [r7, #22]

      break;
 80011b6:	e010      	b.n	80011da <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 80011b8:	8abb      	ldrh	r3, [r7, #20]
 80011ba:	3b02      	subs	r3, #2
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80011c2:	8afb      	ldrh	r3, [r7, #22]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	8abb      	ldrh	r3, [r7, #20]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	5ccb      	ldrb	r3, [r1, r3]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	82fb      	strh	r3, [r7, #22]
      break;
 80011d8:	bf00      	nop
  }

  return ret_val;
 80011da:	8afb      	ldrh	r3, [r7, #22]
 80011dc:	46b5      	mov	sp, r6
}
 80011de:	4618      	mov	r0, r3
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011e8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	2301      	movs	r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2200      	movs	r2, #0
 8001214:	2178      	movs	r1, #120	; 0x78
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <ssd1306_WriteCommand+0x2c>)
 8001218:	f003 f906 	bl	8004428 <HAL_I2C_Mem_Write>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200005a4 	.word	0x200005a4

08001228 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af04      	add	r7, sp, #16
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	f04f 32ff 	mov.w	r2, #4294967295
 800123a:	9202      	str	r2, [sp, #8]
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	2178      	movs	r1, #120	; 0x78
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <ssd1306_WriteData+0x30>)
 800124a:	f003 f8ed 	bl	8004428 <HAL_I2C_Mem_Write>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200005a4 	.word	0x200005a4

0800125c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001260:	f7ff ffc2 	bl	80011e8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001264:	2064      	movs	r0, #100	; 0x64
 8001266:	f001 fe29 	bl	8002ebc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f9da 	bl	8001624 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001270:	2020      	movs	r0, #32
 8001272:	f7ff ffc1 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff ffbe 	bl	80011f8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800127c:	20b0      	movs	r0, #176	; 0xb0
 800127e:	f7ff ffbb 	bl	80011f8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001282:	20c8      	movs	r0, #200	; 0xc8
 8001284:	f7ff ffb8 	bl	80011f8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff ffb5 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800128e:	2010      	movs	r0, #16
 8001290:	f7ff ffb2 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001294:	2040      	movs	r0, #64	; 0x40
 8001296:	f7ff ffaf 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800129a:	20ff      	movs	r0, #255	; 0xff
 800129c:	f000 f9ae 	bl	80015fc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012a0:	20a1      	movs	r0, #161	; 0xa1
 80012a2:	f7ff ffa9 	bl	80011f8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012a6:	20a6      	movs	r0, #166	; 0xa6
 80012a8:	f7ff ffa6 	bl	80011f8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012ac:	20a8      	movs	r0, #168	; 0xa8
 80012ae:	f7ff ffa3 	bl	80011f8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012b2:	203f      	movs	r0, #63	; 0x3f
 80012b4:	f7ff ffa0 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012b8:	20a4      	movs	r0, #164	; 0xa4
 80012ba:	f7ff ff9d 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012be:	20d3      	movs	r0, #211	; 0xd3
 80012c0:	f7ff ff9a 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff ff97 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012ca:	20d5      	movs	r0, #213	; 0xd5
 80012cc:	f7ff ff94 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012d0:	20f0      	movs	r0, #240	; 0xf0
 80012d2:	f7ff ff91 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012d6:	20d9      	movs	r0, #217	; 0xd9
 80012d8:	f7ff ff8e 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012dc:	2022      	movs	r0, #34	; 0x22
 80012de:	f7ff ff8b 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012e2:	20da      	movs	r0, #218	; 0xda
 80012e4:	f7ff ff88 	bl	80011f8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012e8:	2012      	movs	r0, #18
 80012ea:	f7ff ff85 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012ee:	20db      	movs	r0, #219	; 0xdb
 80012f0:	f7ff ff82 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012f4:	2020      	movs	r0, #32
 80012f6:	f7ff ff7f 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012fa:	208d      	movs	r0, #141	; 0x8d
 80012fc:	f7ff ff7c 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001300:	2014      	movs	r0, #20
 8001302:	f7ff ff79 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001306:	2001      	movs	r0, #1
 8001308:	f000 f98c 	bl	8001624 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800130c:	2000      	movs	r0, #0
 800130e:	f000 f80f 	bl	8001330 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001312:	f000 f831 	bl	8001378 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <ssd1306_Init+0xd0>)
 8001318:	2200      	movs	r2, #0
 800131a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <ssd1306_Init+0xd0>)
 800131e:	2200      	movs	r2, #0
 8001320:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001322:	4b02      	ldr	r3, [pc, #8]	; (800132c <ssd1306_Init+0xd0>)
 8001324:	2201      	movs	r2, #1
 8001326:	711a      	strb	r2, [r3, #4]
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200004c0 	.word	0x200004c0

08001330 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e00d      	b.n	800135c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <ssd1306_Fill+0x1a>
 8001346:	2100      	movs	r1, #0
 8001348:	e000      	b.n	800134c <ssd1306_Fill+0x1c>
 800134a:	21ff      	movs	r1, #255	; 0xff
 800134c:	4a09      	ldr	r2, [pc, #36]	; (8001374 <ssd1306_Fill+0x44>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4413      	add	r3, r2
 8001352:	460a      	mov	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001362:	d3ed      	bcc.n	8001340 <ssd1306_Fill+0x10>
    }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200000c0 	.word	0x200000c0

08001378 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800137e:	2300      	movs	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	e016      	b.n	80013b2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	3b50      	subs	r3, #80	; 0x50
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff34 	bl	80011f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff ff31 	bl	80011f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001396:	2010      	movs	r0, #16
 8001398:	f7ff ff2e 	bl	80011f8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	01db      	lsls	r3, r3, #7
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <ssd1306_UpdateScreen+0x4c>)
 80013a2:	4413      	add	r3, r2
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff3e 	bl	8001228 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	3301      	adds	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	d9e5      	bls.n	8001384 <ssd1306_UpdateScreen+0xc>
    }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200000c0 	.word	0x200000c0

080013c8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	460b      	mov	r3, r1
 80013d4:	71bb      	strb	r3, [r7, #6]
 80013d6:	4613      	mov	r3, r2
 80013d8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db3d      	blt.n	800145e <ssd1306_DrawPixel+0x96>
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	2b3f      	cmp	r3, #63	; 0x3f
 80013e6:	d83a      	bhi.n	800145e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d11a      	bne.n	8001424 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	b2d8      	uxtb	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	01db      	lsls	r3, r3, #7
 80013fa:	4413      	add	r3, r2
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <ssd1306_DrawPixel+0xa4>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	b25a      	sxtb	r2, r3
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	2101      	movs	r1, #1
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	b25b      	sxtb	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b259      	sxtb	r1, r3
 8001414:	79fa      	ldrb	r2, [r7, #7]
 8001416:	4603      	mov	r3, r0
 8001418:	01db      	lsls	r3, r3, #7
 800141a:	4413      	add	r3, r2
 800141c:	b2c9      	uxtb	r1, r1
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <ssd1306_DrawPixel+0xa4>)
 8001420:	54d1      	strb	r1, [r2, r3]
 8001422:	e01d      	b.n	8001460 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	b2d8      	uxtb	r0, r3
 800142c:	4603      	mov	r3, r0
 800142e:	01db      	lsls	r3, r3, #7
 8001430:	4413      	add	r3, r2
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <ssd1306_DrawPixel+0xa4>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	b25a      	sxtb	r2, r3
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	2101      	movs	r1, #1
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	b25b      	sxtb	r3, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4013      	ands	r3, r2
 800144c:	b259      	sxtb	r1, r3
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	4603      	mov	r3, r0
 8001452:	01db      	lsls	r3, r3, #7
 8001454:	4413      	add	r3, r2
 8001456:	b2c9      	uxtb	r1, r1
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <ssd1306_DrawPixel+0xa4>)
 800145a:	54d1      	strb	r1, [r2, r3]
 800145c:	e000      	b.n	8001460 <ssd1306_DrawPixel+0x98>
        return;
 800145e:	bf00      	nop
    }
}
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200000c0 	.word	0x200000c0

08001470 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	4604      	mov	r4, r0
 8001478:	1d38      	adds	r0, r7, #4
 800147a:	e880 0006 	stmia.w	r0, {r1, r2}
 800147e:	461a      	mov	r2, r3
 8001480:	4623      	mov	r3, r4
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	4613      	mov	r3, r2
 8001486:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b1f      	cmp	r3, #31
 800148c:	d902      	bls.n	8001494 <ssd1306_WriteChar+0x24>
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b7e      	cmp	r3, #126	; 0x7e
 8001492:	d901      	bls.n	8001498 <ssd1306_WriteChar+0x28>
        return 0;
 8001494:	2300      	movs	r3, #0
 8001496:	e06d      	b.n	8001574 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <ssd1306_WriteChar+0x10c>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	793b      	ldrb	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	2b80      	cmp	r3, #128	; 0x80
 80014a4:	dc06      	bgt.n	80014b4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <ssd1306_WriteChar+0x10c>)
 80014a8:	885b      	ldrh	r3, [r3, #2]
 80014aa:	461a      	mov	r2, r3
 80014ac:	797b      	ldrb	r3, [r7, #5]
 80014ae:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014b0:	2b40      	cmp	r3, #64	; 0x40
 80014b2:	dd01      	ble.n	80014b8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e05d      	b.n	8001574 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	e04c      	b.n	8001558 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3b20      	subs	r3, #32
 80014c4:	7979      	ldrb	r1, [r7, #5]
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4619      	mov	r1, r3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	440b      	add	r3, r1
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
 80014dc:	e034      	b.n	8001548 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d012      	beq.n	8001514 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <ssd1306_WriteChar+0x10c>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	b2d8      	uxtb	r0, r3
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <ssd1306_WriteChar+0x10c>)
 80014fe:	885b      	ldrh	r3, [r3, #2]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4413      	add	r3, r2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	7bba      	ldrb	r2, [r7, #14]
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff ff5b 	bl	80013c8 <ssd1306_DrawPixel>
 8001512:	e016      	b.n	8001542 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <ssd1306_WriteChar+0x10c>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4413      	add	r3, r2
 8001520:	b2d8      	uxtb	r0, r3
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <ssd1306_WriteChar+0x10c>)
 8001524:	885b      	ldrh	r3, [r3, #2]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b2d9      	uxtb	r1, r3
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	2b00      	cmp	r3, #0
 8001534:	bf0c      	ite	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	2300      	movne	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	f7ff ff43 	bl	80013c8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	3301      	adds	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	793b      	ldrb	r3, [r7, #4]
 800154a:	461a      	mov	r2, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	4293      	cmp	r3, r2
 8001550:	d3c5      	bcc.n	80014de <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	797b      	ldrb	r3, [r7, #5]
 800155a:	461a      	mov	r2, r3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4293      	cmp	r3, r2
 8001560:	d3ad      	bcc.n	80014be <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <ssd1306_WriteChar+0x10c>)
 8001564:	881a      	ldrh	r2, [r3, #0]
 8001566:	793b      	ldrb	r3, [r7, #4]
 8001568:	b29b      	uxth	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b03      	ldr	r3, [pc, #12]	; (800157c <ssd1306_WriteChar+0x10c>)
 8001570:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3724      	adds	r7, #36	; 0x24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	200004c0 	.word	0x200004c0

08001580 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	1d38      	adds	r0, r7, #4
 800158a:	e880 0006 	stmia.w	r0, {r1, r2}
 800158e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001590:	e012      	b.n	80015b8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	7818      	ldrb	r0, [r3, #0]
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	1d3a      	adds	r2, r7, #4
 800159a:	ca06      	ldmia	r2, {r1, r2}
 800159c:	f7ff ff68 	bl	8001470 <ssd1306_WriteChar>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d002      	beq.n	80015b2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	e008      	b.n	80015c4 <ssd1306_WriteString+0x44>
        }
        str++;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e8      	bne.n	8001592 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	781b      	ldrb	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	460a      	mov	r2, r1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <ssd1306_SetCursor+0x2c>)
 80015e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <ssd1306_SetCursor+0x2c>)
 80015ea:	805a      	strh	r2, [r3, #2]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	200004c0 	.word	0x200004c0

080015fc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001606:	2381      	movs	r3, #129	; 0x81
 8001608:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fdf3 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fdef 	bl	80011f8 <ssd1306_WriteCommand>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001634:	23af      	movs	r3, #175	; 0xaf
 8001636:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <ssd1306_SetDisplayOn+0x38>)
 800163a:	2201      	movs	r2, #1
 800163c:	715a      	strb	r2, [r3, #5]
 800163e:	e004      	b.n	800164a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001640:	23ae      	movs	r3, #174	; 0xae
 8001642:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <ssd1306_SetDisplayOn+0x38>)
 8001646:	2200      	movs	r2, #0
 8001648:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fdd3 	bl	80011f8 <ssd1306_WriteCommand>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200004c0 	.word	0x200004c0

08001660 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8001666:	f004 fc1d 	bl	8005ea4 <HAL_RCC_GetPCLK2Freq>
 800166a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <ARGB_Init+0xd8>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <ARGB_Init+0x1c>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <ARGB_Init+0x1e>
 800167c:	2302      	movs	r3, #2
 800167e:	461a      	mov	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	4a2b      	ldr	r2, [pc, #172]	; (800173c <ARGB_Init+0xdc>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <ARGB_Init+0xe0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <ARGB_Init+0xe0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <ARGB_Init+0xe0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2201      	movs	r2, #1
 80016b2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7fe fed5 	bl	8000464 <__aeabi_ui2d>
 80016ba:	a31b      	add	r3, pc, #108	; (adr r3, 8001728 <ARGB_Init+0xc8>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ff4a 	bl	8000558 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f956 	bl	800097c <__aeabi_d2uiz>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <ARGB_Init+0xe4>)
 80016da:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7fe fec1 	bl	8000464 <__aeabi_ui2d>
 80016e2:	a313      	add	r3, pc, #76	; (adr r3, 8001730 <ARGB_Init+0xd0>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ff36 	bl	8000558 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f942 	bl	800097c <__aeabi_d2uiz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <ARGB_Init+0xe8>)
 8001702:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <ARGB_Init+0xec>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <ARGB_Init+0xe0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	2104      	movs	r1, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f005 fb52 	bl	8006dbc <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001718:	2001      	movs	r0, #1
 800171a:	f001 fbcf 	bl	8002ebc <HAL_Delay>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	1eb851ec 	.word	0x1eb851ec
 800172c:	3fe1eb85 	.word	0x3fe1eb85
 8001730:	1eb851ec 	.word	0x1eb851ec
 8001734:	3fd1eb85 	.word	0x3fd1eb85
 8001738:	40023800 	.word	0x40023800
 800173c:	014f8b59 	.word	0x014f8b59
 8001740:	20000650 	.word	0x20000650
 8001744:	200004c6 	.word	0x200004c6
 8001748:	200004c7 	.word	0x200004c7
 800174c:	200005a2 	.word	0x200005a2

08001750 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2000      	movs	r0, #0
 800175a:	f000 f885 	bl	8001868 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <ARGB_SetBrightness+0x1c>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	7013      	strb	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	20000010 	.word	0x20000010

08001784 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	4604      	mov	r4, r0
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	461a      	mov	r2, r3
 8001792:	4623      	mov	r3, r4
 8001794:	80fb      	strh	r3, [r7, #6]
 8001796:	4603      	mov	r3, r0
 8001798:	717b      	strb	r3, [r7, #5]
 800179a:	460b      	mov	r3, r1
 800179c:	713b      	strb	r3, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	2b07      	cmp	r3, #7
 80017a6:	d908      	bls.n	80017ba <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <ARGB_SetRGB+0xdc>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ca:	797a      	ldrb	r2, [r7, #5]
 80017cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d0:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <ARGB_SetRGB+0xdc>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017de:	fb92 f3f3 	sdiv	r3, r2, r3
 80017e2:	793a      	ldrb	r2, [r7, #4]
 80017e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80017e8:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <ARGB_SetRGB+0xdc>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	3301      	adds	r3, #1
 80017f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001800:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001802:	793b      	ldrb	r3, [r7, #4]
 8001804:	21b0      	movs	r1, #176	; 0xb0
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f9ca 	bl	8001ba0 <scale8>
 800180c:	4603      	mov	r3, r0
 800180e:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	21f0      	movs	r1, #240	; 0xf0
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f9c3 	bl	8001ba0 <scale8>
 800181a:	4603      	mov	r3, r0
 800181c:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 800181e:	793b      	ldrb	r3, [r7, #4]
 8001820:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8001822:	797b      	ldrb	r3, [r7, #5]
 8001824:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	490c      	ldr	r1, [pc, #48]	; (8001864 <ARGB_SetRGB+0xe0>)
 8001834:	7b7a      	ldrb	r2, [r7, #13]
 8001836:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8001838:	88fa      	ldrh	r2, [r7, #6]
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	3301      	adds	r3, #1
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <ARGB_SetRGB+0xe0>)
 8001844:	7b3a      	ldrb	r2, [r7, #12]
 8001846:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	3302      	adds	r3, #2
 8001852:	4904      	ldr	r1, [pc, #16]	; (8001864 <ARGB_SetRGB+0xe0>)
 8001854:	7afa      	ldrb	r2, [r7, #11]
 8001856:	54ca      	strb	r2, [r1, r3]
#endif
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	20000010 	.word	0x20000010
 8001864:	200004c8 	.word	0x200004c8

08001868 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	460b      	mov	r3, r1
 8001874:	71bb      	strb	r3, [r7, #6]
 8001876:	4613      	mov	r3, r2
 8001878:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	81fb      	strh	r3, [r7, #14]
 800187e:	e00b      	b.n	8001898 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	b298      	uxth	r0, r3
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	79ba      	ldrb	r2, [r7, #6]
 8001888:	79f9      	ldrb	r1, [r7, #7]
 800188a:	f7ff ff7b 	bl	8001784 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	b29b      	uxth	r3, r3
 8001896:	81fb      	strh	r3, [r7, #14]
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	b29b      	uxth	r3, r3
 800189c:	2b07      	cmp	r3, #7
 800189e:	d9ef      	bls.n	8001880 <ARGB_FillRGB+0x18>
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 80018b2:	4b9d      	ldr	r3, [pc, #628]	; (8001b28 <ARGB_Show+0x27c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 80018b8:	4b9c      	ldr	r3, [pc, #624]	; (8001b2c <ARGB_Show+0x280>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <ARGB_Show+0x22>
 80018c2:	4b9b      	ldr	r3, [pc, #620]	; (8001b30 <ARGB_Show+0x284>)
 80018c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d001      	beq.n	80018d2 <ARGB_Show+0x26>
        return ARGB_BUSY;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e15e      	b.n	8001b90 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	e0a6      	b.n	8001a26 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018d8:	4b96      	ldr	r3, [pc, #600]	; (8001b34 <ARGB_Show+0x288>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd04      	ble.n	80018fa <ARGB_Show+0x4e>
 80018f0:	4b91      	ldr	r3, [pc, #580]	; (8001b38 <ARGB_Show+0x28c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	e003      	b.n	8001902 <ARGB_Show+0x56>
 80018fa:	4b90      	ldr	r3, [pc, #576]	; (8001b3c <ARGB_Show+0x290>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	4619      	mov	r1, r3
 8001908:	4b8d      	ldr	r3, [pc, #564]	; (8001b40 <ARGB_Show+0x294>)
 800190a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <ARGB_Show+0x288>)
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	dd04      	ble.n	8001930 <ARGB_Show+0x84>
 8001926:	4b84      	ldr	r3, [pc, #528]	; (8001b38 <ARGB_Show+0x28c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	e003      	b.n	8001938 <ARGB_Show+0x8c>
 8001930:	4b82      	ldr	r3, [pc, #520]	; (8001b3c <ARGB_Show+0x290>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3308      	adds	r3, #8
 800193e:	4a80      	ldr	r2, [pc, #512]	; (8001b40 <ARGB_Show+0x294>)
 8001940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001944:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <ARGB_Show+0x288>)
 8001946:	789b      	ldrb	r3, [r3, #2]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd04      	ble.n	8001966 <ARGB_Show+0xba>
 800195c:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <ARGB_Show+0x28c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	e003      	b.n	800196e <ARGB_Show+0xc2>
 8001966:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <ARGB_Show+0x290>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3310      	adds	r3, #16
 8001974:	4a72      	ldr	r2, [pc, #456]	; (8001b40 <ARGB_Show+0x294>)
 8001976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800197a:	4b6e      	ldr	r3, [pc, #440]	; (8001b34 <ARGB_Show+0x288>)
 800197c:	78db      	ldrb	r3, [r3, #3]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	dd04      	ble.n	800199c <ARGB_Show+0xf0>
 8001992:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <ARGB_Show+0x28c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	e003      	b.n	80019a4 <ARGB_Show+0xf8>
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <ARGB_Show+0x290>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3318      	adds	r3, #24
 80019aa:	4a65      	ldr	r2, [pc, #404]	; (8001b40 <ARGB_Show+0x294>)
 80019ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019b0:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <ARGB_Show+0x288>)
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	dd04      	ble.n	80019d2 <ARGB_Show+0x126>
 80019c8:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <ARGB_Show+0x28c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4619      	mov	r1, r3
 80019d0:	e003      	b.n	80019da <ARGB_Show+0x12e>
 80019d2:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <ARGB_Show+0x290>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	3320      	adds	r3, #32
 80019e0:	4a57      	ldr	r2, [pc, #348]	; (8001b40 <ARGB_Show+0x294>)
 80019e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <ARGB_Show+0x288>)
 80019e8:	795b      	ldrb	r3, [r3, #5]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dd04      	ble.n	8001a08 <ARGB_Show+0x15c>
 80019fe:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <ARGB_Show+0x28c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	e003      	b.n	8001a10 <ARGB_Show+0x164>
 8001a08:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <ARGB_Show+0x290>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3328      	adds	r3, #40	; 0x28
 8001a16:	4a4a      	ldr	r2, [pc, #296]	; (8001b40 <ARGB_Show+0x294>)
 8001a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	f67f af54 	bls.w	80018d8 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001a34:	e0a4      	b.n	8001b80 <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <ARGB_Show+0x298>)
 8001a38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d102      	bne.n	8001a48 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
 8001a44:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a46:	e09b      	b.n	8001b80 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8001a48:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <ARGB_Show+0x298>)
 8001a4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d11d      	bne.n	8001a90 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <ARGB_Show+0x298>)
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8001a5c:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <ARGB_Show+0x298>)
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	4a39      	ldr	r2, [pc, #228]	; (8001b48 <ARGB_Show+0x29c>)
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <ARGB_Show+0x298>)
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	4a38      	ldr	r2, [pc, #224]	; (8001b4c <ARGB_Show+0x2a0>)
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001a6c:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <ARGB_Show+0x298>)
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	4a37      	ldr	r2, [pc, #220]	; (8001b50 <ARGB_Show+0x2a4>)
 8001a72:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <ARGB_Show+0x298>)
 8001a76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a78:	4931      	ldr	r1, [pc, #196]	; (8001b40 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001a7a:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <ARGB_Show+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001a80:	461a      	mov	r2, r3
 8001a82:	2330      	movs	r3, #48	; 0x30
 8001a84:	f001 fbce 	bl	8003224 <HAL_DMA_Start_IT>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <ARGB_Show+0x1f0>
 8001a8e:	e002      	b.n	8001a96 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a94:	e074      	b.n	8001b80 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a9a:	e071      	b.n	8001b80 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <ARGB_Show+0x298>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <ARGB_Show+0x298>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001aaa:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <ARGB_Show+0x298>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a28      	ldr	r2, [pc, #160]	; (8001b54 <ARGB_Show+0x2a8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d107      	bne.n	8001ac6 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <ARGB_Show+0x298>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <ARGB_Show+0x298>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <ARGB_Show+0x298>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <ARGB_Show+0x2a8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <ARGB_Show+0x256>
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <ARGB_Show+0x298>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad8:	d013      	beq.n	8001b02 <ARGB_Show+0x256>
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <ARGB_Show+0x298>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <ARGB_Show+0x2ac>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <ARGB_Show+0x256>
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <ARGB_Show+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <ARGB_Show+0x2b0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <ARGB_Show+0x256>
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <ARGB_Show+0x298>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <ARGB_Show+0x2b4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <ARGB_Show+0x256>
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <ARGB_Show+0x298>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <ARGB_Show+0x2b8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d132      	bne.n	8001b68 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <ARGB_Show+0x298>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d032      	beq.n	8001b7a <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <ARGB_Show+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <ARGB_Show+0x298>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b24:	e029      	b.n	8001b7a <ARGB_Show+0x2ce>
 8001b26:	bf00      	nop
 8001b28:	200005a2 	.word	0x200005a2
 8001b2c:	200005a0 	.word	0x200005a0
 8001b30:	20000698 	.word	0x20000698
 8001b34:	200004c8 	.word	0x200004c8
 8001b38:	200004c6 	.word	0x200004c6
 8001b3c:	200004c7 	.word	0x200004c7
 8001b40:	200004e0 	.word	0x200004e0
 8001b44:	20000650 	.word	0x20000650
 8001b48:	08001bc9 	.word	0x08001bc9
 8001b4c:	08001e79 	.word	0x08001e79
 8001b50:	080067df 	.word	0x080067df
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40000800 	.word	0x40000800
 8001b60:	40000c00 	.word	0x40000c00
 8001b64:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <ARGB_Show+0x2ec>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <ARGB_Show+0x2ec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e000      	b.n	8001b7c <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b7a:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f47f af57 	bne.w	8001a36 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <ARGB_Show+0x2f0>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001b8e:	2302      	movs	r3, #2
    }
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000650 	.word	0x20000650
 8001b9c:	200005a0 	.word	0x200005a0

08001ba0 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460a      	mov	r2, r1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4613      	mov	r3, r2
 8001bae:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	79ba      	ldrb	r2, [r7, #6]
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	121b      	asrs	r3, r3, #8
 8001bba:	b2db      	uxtb	r3, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a9d      	ldr	r2, [pc, #628]	; (8001e50 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f040 8131 	bne.w	8001e42 <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4a9c      	ldr	r2, [pc, #624]	; (8001e54 <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	f040 812c 	bne.w	8001e42 <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001bea:	4b9b      	ldr	r3, [pc, #620]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8128 	beq.w	8001e46 <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d10b      	bne.n	8001c18 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d136      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c16:	e031      	b.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d10b      	bne.n	8001c3a <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2202      	movs	r2, #2
 8001c26:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d125      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c38:	e020      	b.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d10b      	bne.n	8001c5c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2204      	movs	r2, #4
 8001c48:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d114      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c5a:	e00f      	b.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d10a      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001c7c:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b07      	cmp	r3, #7
 8001c84:	d87b      	bhi.n	8001d7e <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	72fb      	strb	r3, [r7, #11]
 8001c8a:	e06c      	b.n	8001d66 <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c8c:	4b72      	ldr	r3, [pc, #456]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a70      	ldr	r2, [pc, #448]	; (8001e5c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dd04      	ble.n	8001cbc <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001cb2:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4619      	mov	r1, r3
 8001cba:	e003      	b.n	8001cc4 <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8001cbc:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3318      	adds	r3, #24
 8001cca:	4a67      	ldr	r2, [pc, #412]	; (8001e68 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001ccc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001cd0:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	dd04      	ble.n	8001d02 <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	e003      	b.n	8001d0a <ARGB_TIM_DMADelayPulseCplt+0x142>
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	3320      	adds	r3, #32
 8001d10:	4a55      	ldr	r2, [pc, #340]	; (8001e68 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d16:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	3302      	adds	r3, #2
 8001d26:	4a4d      	ldr	r2, [pc, #308]	; (8001e5c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dd04      	ble.n	8001d48 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	e003      	b.n	8001d50 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4619      	mov	r1, r3
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3328      	adds	r3, #40	; 0x28
 8001d56:	4a44      	ldr	r2, [pc, #272]	; (8001e68 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001d58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	3301      	adds	r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	72fb      	strb	r3, [r7, #11]
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b07      	cmp	r3, #7
 8001d6c:	d98e      	bls.n	8001c8c <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	e05d      	b.n	8001e3a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	d80c      	bhi.n	8001da2 <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001d88:	2260      	movs	r2, #96	; 0x60
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4837      	ldr	r0, [pc, #220]	; (8001e6c <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8001d8e:	f007 fed9 	bl	8009b44 <memset>
        BUF_COUNTER++;
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d9e:	801a      	strh	r2, [r3, #0]
 8001da0:	e04b      	b.n	8001e3a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8001da2:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db6:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fa89 	bl	80032d4 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d117      	bne.n	8001dfc <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a1a      	ldr	r2, [r3, #32]
 8001dd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6a1a      	ldr	r2, [r3, #32]
 8001de2:	f240 4344 	movw	r3, #1092	; 0x444
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10f      	bne.n	8001e2c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	f240 4344 	movw	r3, #1092	; 0x444
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
 8001e40:	e002      	b.n	8001e48 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001e42:	bf00      	nop
 8001e44:	e000      	b.n	8001e48 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001e46:	bf00      	nop
}
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000698 	.word	0x20000698
 8001e54:	20000650 	.word	0x20000650
 8001e58:	200005a0 	.word	0x200005a0
 8001e5c:	200004c8 	.word	0x200004c8
 8001e60:	200004c6 	.word	0x200004c6
 8001e64:	200004c7 	.word	0x200004c7
 8001e68:	200004e0 	.word	0x200004e0
 8001e6c:	20000540 	.word	0x20000540
 8001e70:	40010000 	.word	0x40010000
 8001e74:	200005a2 	.word	0x200005a2

08001e78 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a53      	ldr	r2, [pc, #332]	; (8001fd8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	f040 809e 	bne.w	8001fcc <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a52      	ldr	r2, [pc, #328]	; (8001fdc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	f040 8099 	bne.w	8001fcc <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001e9a:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8095 	beq.w	8001fd0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b07      	cmp	r3, #7
 8001eae:	d87b      	bhi.n	8001fa8 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	72fb      	strb	r3, [r7, #11]
 8001eb4:	e06c      	b.n	8001f90 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	dd04      	ble.n	8001ee6 <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	e003      	b.n	8001eee <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001ef6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001efa:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	7afb      	ldrb	r3, [r7, #11]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	dd04      	ble.n	8001f2c <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4619      	mov	r1, r3
 8001f2a:	e003      	b.n	8001f34 <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	7afb      	ldrb	r3, [r7, #11]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	3308      	adds	r3, #8
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001f3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	7afb      	ldrb	r3, [r7, #11]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	dd04      	ble.n	8001f72 <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	4619      	mov	r1, r3
 8001f70:	e003      	b.n	8001f7a <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3310      	adds	r3, #16
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001f82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f86:	7afb      	ldrb	r3, [r7, #11]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	72fb      	strb	r3, [r7, #11]
 8001f90:	7afb      	ldrb	r3, [r7, #11]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b07      	cmp	r3, #7
 8001f96:	d98e      	bls.n	8001eb6 <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fa4:	801a      	strh	r2, [r3, #0]
 8001fa6:	e014      	b.n	8001fd2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b09      	cmp	r3, #9
 8001fb0:	d80f      	bhi.n	8001fd2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8001fb2:	2260      	movs	r2, #96	; 0x60
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001fb8:	f007 fdc4 	bl	8009b44 <memset>
        BUF_COUNTER++;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fc8:	801a      	strh	r2, [r3, #0]
 8001fca:	e002      	b.n	8001fd2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001fcc:	bf00      	nop
 8001fce:	e000      	b.n	8001fd2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001fd0:	bf00      	nop
    }
}
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000698 	.word	0x20000698
 8001fdc:	20000650 	.word	0x20000650
 8001fe0:	200005a0 	.word	0x200005a0
 8001fe4:	200004c8 	.word	0x200004c8
 8001fe8:	200004c6 	.word	0x200004c6
 8001fec:	200004c7 	.word	0x200004c7
 8001ff0:	200004e0 	.word	0x200004e0

08001ff4 <AS5600_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1,AS5600_ADDR,&Data,1,10);	
	HAL_I2C_Mem_Write(&hi2c1,(AS5600_ADDR << 1),Reg,1,&Data,1,100);
}

uint8_t AS5600_ReadReg(uint8_t Reg)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af04      	add	r7, sp, #16
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead=0;	
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1,(AS5600_ADDR << 1),Reg,1,&DataRead,1,100);
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	b29a      	uxth	r2, r3
 8002006:	2364      	movs	r3, #100	; 0x64
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	2301      	movs	r3, #1
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	f107 030f 	add.w	r3, r7, #15
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2301      	movs	r3, #1
 8002016:	216c      	movs	r1, #108	; 0x6c
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <AS5600_ReadReg+0x34>)
 800201a:	f002 faff 	bl	800461c <HAL_I2C_Mem_Read>
	
	
	return DataRead;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200005a4 	.word	0x200005a4

0800202c <AS5600_GetAngle>:

uint16_t AS5600_GetAngle()
{
 800202c:	b598      	push	{r3, r4, r7, lr}
 800202e:	af00      	add	r7, sp, #0
	return (int)((float)(AS5600_ReadReg(ANGLE_L) + (AS5600_ReadReg(ANGLE_H) << 8))/4096*360);	
 8002030:	200f      	movs	r0, #15
 8002032:	f7ff ffdf 	bl	8001ff4 <AS5600_ReadReg>
 8002036:	4603      	mov	r3, r0
 8002038:	461c      	mov	r4, r3
 800203a:	200e      	movs	r0, #14
 800203c:	f7ff ffda 	bl	8001ff4 <AS5600_ReadReg>
 8002040:	4603      	mov	r3, r0
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4423      	add	r3, r4
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800206c <AS5600_GetAngle+0x40>
 8002052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002056:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002070 <AS5600_GetAngle+0x44>
 800205a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800205e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002062:	ee17 3a90 	vmov	r3, s15
 8002066:	b29b      	uxth	r3, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd98      	pop	{r3, r4, r7, pc}
 800206c:	45800000 	.word	0x45800000
 8002070:	43b40000 	.word	0x43b40000

08002074 <AS5600_GetRawAngle>:


uint16_t AS5600_GetRawAngle()
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
	uint16_t AngleVal=AS5600_ReadReg(RAWANG_L) + (AS5600_ReadReg(RAWANG_H) << 8);
 800207a:	200d      	movs	r0, #13
 800207c:	f7ff ffba 	bl	8001ff4 <AS5600_ReadReg>
 8002080:	4603      	mov	r3, r0
 8002082:	b29c      	uxth	r4, r3
 8002084:	200c      	movs	r0, #12
 8002086:	f7ff ffb5 	bl	8001ff4 <AS5600_ReadReg>
 800208a:	4603      	mov	r3, r0
 800208c:	b29b      	uxth	r3, r3
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	4423      	add	r3, r4
 8002094:	80fb      	strh	r3, [r7, #6]
	return AngleVal;	
 8002096:	88fb      	ldrh	r3, [r7, #6]
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}

080020a0 <AS5600_GetStatus>:

uint8_t AS5600_GetStatus()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	return AS5600_ReadReg(STATUS) & 0x38;	
 80020a4:	200b      	movs	r0, #11
 80020a6:	f7ff ffa5 	bl	8001ff4 <AS5600_ReadReg>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020b0:	b2db      	uxtb	r3, r3
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <buttonEnSet>:


void buttonUpSet(uint8_t i){
	buttonUpper = i;
}
void buttonEnSet(uint8_t i){
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
	buttonEnable = i;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <buttonEnSet+0x1c>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	7013      	strb	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	200005a3 	.word	0x200005a3

080020d8 <buttonEn>:
}

uint8_t buttonUp(){
	return buttonUpper;
}
uint8_t buttonEn(){
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	return buttonEnable;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <buttonEn+0x14>)
 80020de:	781b      	ldrb	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	200005a3 	.word	0x200005a3

080020f0 <drawMainMenu>:
void drawItemNum06(){

}
*/

void drawMainMenu() {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7ff f91a 	bl	8001330 <ssd1306_Fill>
    uint8_t exit = 1;
 80020fc:	2301      	movs	r3, #1
 80020fe:	713b      	strb	r3, [r7, #4]
    uint8_t current_item_menu = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	71fb      	strb	r3, [r7, #7]
    uint8_t next_item_menu = current_item_menu + 1;
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	3301      	adds	r3, #1
 8002108:	71bb      	strb	r3, [r7, #6]
    uint8_t prev_item_menu = MENU_ITEMS_COUNT - 1;
 800210a:	2306      	movs	r3, #6
 800210c:	717b      	strb	r3, [r7, #5]
    while( exit ){
 800210e:	e053      	b.n	80021b8 <drawMainMenu+0xc8>
         next_item_menu = current_item_menu + 1;
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	3301      	adds	r3, #1
 8002114:	71bb      	strb	r3, [r7, #6]
         prev_item_menu = current_item_menu - 1;
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	3b01      	subs	r3, #1
 800211a:	717b      	strb	r3, [r7, #5]
    	if(current_item_menu == (MENU_ITEMS_COUNT-1))
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d101      	bne.n	8002126 <drawMainMenu+0x36>
    		next_item_menu = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	71bb      	strb	r3, [r7, #6]
    	if(current_item_menu == 0) // Для нулевого элемента предыдущий символ будет последним
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <drawMainMenu+0x40>
    		prev_item_menu = MENU_ITEMS_COUNT - 1;
 800212c:	2306      	movs	r3, #6
 800212e:	717b      	strb	r3, [r7, #5]

    	ssd1306_SetCursor(0, 0);
 8002130:	2100      	movs	r1, #0
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff fa4a 	bl	80015cc <ssd1306_SetCursor>
    	ssd1306_WriteString(menuItems[prev_item_menu], Font_11x18, White);
 8002138:	797b      	ldrb	r3, [r7, #5]
 800213a:	4a23      	ldr	r2, [pc, #140]	; (80021c8 <drawMainMenu+0xd8>)
 800213c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <drawMainMenu+0xdc>)
 8002142:	2301      	movs	r3, #1
 8002144:	ca06      	ldmia	r2, {r1, r2}
 8002146:	f7ff fa1b 	bl	8001580 <ssd1306_WriteString>

    	ssd1306_SetCursor(0, MENU_ITEM_HEIGHT);
 800214a:	2112      	movs	r1, #18
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fa3d 	bl	80015cc <ssd1306_SetCursor>
    	ssd1306_WriteString("> ", Font_16x24, White);
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <drawMainMenu+0xe0>)
 8002154:	2301      	movs	r3, #1
 8002156:	ca06      	ldmia	r2, {r1, r2}
 8002158:	481e      	ldr	r0, [pc, #120]	; (80021d4 <drawMainMenu+0xe4>)
 800215a:	f7ff fa11 	bl	8001580 <ssd1306_WriteString>
    	ssd1306_SetCursor(17, MENU_ITEM_HEIGHT);
 800215e:	2112      	movs	r1, #18
 8002160:	2011      	movs	r0, #17
 8002162:	f7ff fa33 	bl	80015cc <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[current_item_menu], Font_16x24, White);
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <drawMainMenu+0xd8>)
 800216a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800216e:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <drawMainMenu+0xe0>)
 8002170:	2301      	movs	r3, #1
 8002172:	ca06      	ldmia	r2, {r1, r2}
 8002174:	f7ff fa04 	bl	8001580 <ssd1306_WriteString>

    	ssd1306_SetCursor(0, MENU_ITEM_MAIN_HEIGHT+MENU_ITEM_HEIGHT);
 8002178:	212a      	movs	r1, #42	; 0x2a
 800217a:	2000      	movs	r0, #0
 800217c:	f7ff fa26 	bl	80015cc <ssd1306_SetCursor>
    	ssd1306_WriteString(menuItems[next_item_menu], Font_11x18, White);
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <drawMainMenu+0xd8>)
 8002184:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <drawMainMenu+0xdc>)
 800218a:	2301      	movs	r3, #1
 800218c:	ca06      	ldmia	r2, {r1, r2}
 800218e:	f7ff f9f7 	bl	8001580 <ssd1306_WriteString>

    	ssd1306_UpdateScreen();
 8002192:	f7ff f8f1 	bl	8001378 <ssd1306_UpdateScreen>
    	buttonEnSet(OFF);
 8002196:	2000      	movs	r0, #0
 8002198:	f7ff ff8e 	bl	80020b8 <buttonEnSet>
    	while(buttonEn() != ON){}
 800219c:	bf00      	nop
 800219e:	f7ff ff9b 	bl	80020d8 <buttonEn>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d1fa      	bne.n	800219e <drawMainMenu+0xae>
    		current_item_menu++;
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	3301      	adds	r3, #1
 80021ac:	71fb      	strb	r3, [r7, #7]
    		if(current_item_menu >= MENU_ITEMS_COUNT )
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	d901      	bls.n	80021b8 <drawMainMenu+0xc8>
    			current_item_menu = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	71fb      	strb	r3, [r7, #7]
    while( exit ){
 80021b8:	793b      	ldrb	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1a8      	bne.n	8002110 <drawMainMenu+0x20>
    }

}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000014 	.word	0x20000014
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000008 	.word	0x20000008
 80021d4:	08009f14 	.word	0x08009f14

080021d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b092      	sub	sp, #72	; 0x48
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021de:	f000 fe2b 	bl	8002e38 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e2:	f000 f97d 	bl	80024e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e6:	f000 fadb 	bl	80027a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80021ea:	f000 fab9 	bl	8002760 <MX_DMA_Init>
  MX_I2C1_Init();
 80021ee:	f000 f9df 	bl	80025b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80021f2:	f000 fa0b 	bl	800260c <MX_SPI1_Init>
  MX_TIM2_Init();
 80021f6:	f000 fa3f 	bl	8002678 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t num[10] ={0};
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	809a      	strh	r2, [r3, #4]
  uint8_t coutn = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_StatusTypeDef type;
  // Подсчёт устройств в сети I2C 60-display, 72-ацп, 54-encoder, 96 -dac/
  for(uint8_t i = 1; i < 127 ; i++){
 800220e:	2301      	movs	r3, #1
 8002210:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002214:	e020      	b.n	8002258 <main+0x80>
	  type = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 8002216:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800221a:	b29b      	uxth	r3, r3
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	b299      	uxth	r1, r3
 8002220:	230a      	movs	r3, #10
 8002222:	2202      	movs	r2, #2
 8002224:	48a0      	ldr	r0, [pc, #640]	; (80024a8 <main+0x2d0>)
 8002226:	f002 fc1f 	bl	8004a68 <HAL_I2C_IsDeviceReady>
 800222a:	4603      	mov	r3, r0
 800222c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	  if(type == HAL_OK){
 8002230:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <main+0x76>
		  num[coutn++] = i;
 8002238:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8002242:	3348      	adds	r3, #72	; 0x48
 8002244:	443b      	add	r3, r7
 8002246:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800224a:	f803 2c24 	strb.w	r2, [r3, #-36]
  for(uint8_t i = 1; i < 127 ; i++){
 800224e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002252:	3301      	adds	r3, #1
 8002254:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002258:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800225c:	2b7e      	cmp	r3, #126	; 0x7e
 800225e:	d9da      	bls.n	8002216 <main+0x3e>
	  }
  }
  ARGB_Init();  // Initialization
 8002260:	f7ff f9fe 	bl	8001660 <ARGB_Init>
  //ARGB_STATE ARGB_GetState;
  ARGB_Clear();
 8002264:	f7ff fa74 	bl	8001750 <ARGB_Clear>
  while (ARGB_Show() != ARGB_OK);
 8002268:	bf00      	nop
 800226a:	f7ff fb1f 	bl	80018ac <ARGB_Show>
 800226e:	4603      	mov	r3, r0
 8002270:	2b02      	cmp	r3, #2
 8002272:	d1fa      	bne.n	800226a <main+0x92>
  ARGB_SetBrightness(80);
 8002274:	2050      	movs	r0, #80	; 0x50
 8002276:	f7ff fa75 	bl	8001764 <ARGB_SetBrightness>
 // ARGB_SetRGB(0, 255, 0, 128);

  // Update - Option 1
  //extern  unsigned char *gImage_BW;
  //extern  unsigned char *gImage_R;
  ssd1306_Init();
 800227a:	f7fe ffef 	bl	800125c <ssd1306_Init>
  ssd1306_Fill(Black);
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff f856 	bl	8001330 <ssd1306_Fill>
  ssd1306_SetCursor(5, 10);
 8002284:	210a      	movs	r1, #10
 8002286:	2005      	movs	r0, #5
 8002288:	f7ff f9a0 	bl	80015cc <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 800228c:	4a87      	ldr	r2, [pc, #540]	; (80024ac <main+0x2d4>)
 800228e:	2301      	movs	r3, #1
 8002290:	ca06      	ldmia	r2, {r1, r2}
 8002292:	4887      	ldr	r0, [pc, #540]	; (80024b0 <main+0x2d8>)
 8002294:	f7ff f974 	bl	8001580 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002298:	f7ff f86e 	bl	8001378 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 800229c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a0:	f000 fe0c 	bl	8002ebc <HAL_Delay>
  ssd1306_Fill(Black);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff f843 	bl	8001330 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80022aa:	f7ff f865 	bl	8001378 <ssd1306_UpdateScreen>

  ssd1306_SetCursor(0, 0);
 80022ae:	2100      	movs	r1, #0
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff f98b 	bl	80015cc <ssd1306_SetCursor>
    ssd1306_WriteString("ANG - ", Font_11x18, White);
 80022b6:	4a7d      	ldr	r2, [pc, #500]	; (80024ac <main+0x2d4>)
 80022b8:	2301      	movs	r3, #1
 80022ba:	ca06      	ldmia	r2, {r1, r2}
 80022bc:	487d      	ldr	r0, [pc, #500]	; (80024b4 <main+0x2dc>)
 80022be:	f7ff f95f 	bl	8001580 <ssd1306_WriteString>
    ssd1306_SetCursor(100, 0);
 80022c2:	2100      	movs	r1, #0
 80022c4:	2064      	movs	r0, #100	; 0x64
 80022c6:	f7ff f981 	bl	80015cc <ssd1306_SetCursor>
                   ssd1306_WriteString("°", Font_11x18, White);
 80022ca:	4a78      	ldr	r2, [pc, #480]	; (80024ac <main+0x2d4>)
 80022cc:	2301      	movs	r3, #1
 80022ce:	ca06      	ldmia	r2, {r1, r2}
 80022d0:	4879      	ldr	r0, [pc, #484]	; (80024b8 <main+0x2e0>)
 80022d2:	f7ff f955 	bl	8001580 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 19);
 80022d6:	2113      	movs	r1, #19
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff f977 	bl	80015cc <ssd1306_SetCursor>
      ssd1306_WriteString("BAT - ", Font_11x18, White);
 80022de:	4a73      	ldr	r2, [pc, #460]	; (80024ac <main+0x2d4>)
 80022e0:	2301      	movs	r3, #1
 80022e2:	ca06      	ldmia	r2, {r1, r2}
 80022e4:	4875      	ldr	r0, [pc, #468]	; (80024bc <main+0x2e4>)
 80022e6:	f7ff f94b 	bl	8001580 <ssd1306_WriteString>
      ssd1306_SetCursor(100, 19);
 80022ea:	2113      	movs	r1, #19
 80022ec:	2064      	movs	r0, #100	; 0x64
 80022ee:	f7ff f96d 	bl	80015cc <ssd1306_SetCursor>
            ssd1306_WriteString("%", Font_11x18, White);
 80022f2:	4a6e      	ldr	r2, [pc, #440]	; (80024ac <main+0x2d4>)
 80022f4:	2301      	movs	r3, #1
 80022f6:	ca06      	ldmia	r2, {r1, r2}
 80022f8:	4871      	ldr	r0, [pc, #452]	; (80024c0 <main+0x2e8>)
 80022fa:	f7ff f941 	bl	8001580 <ssd1306_WriteString>
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  //driver_delay_xms(5000);
  ADS1115_Config_t configReg;
  ADS1115_Handle_t *pADS;
	#define ADS1115_ADR 72
  configReg.channel = CHANNEL_AIN1_GND;
 80022fe:	2305      	movs	r3, #5
 8002300:	773b      	strb	r3, [r7, #28]
  configReg.pgaConfig = PGA_4_096;
 8002302:	2301      	movs	r3, #1
 8002304:	777b      	strb	r3, [r7, #29]
  configReg.operatingMode = MODE_CONTINOUS;
 8002306:	2300      	movs	r3, #0
 8002308:	77bb      	strb	r3, [r7, #30]
  configReg.dataRate = DRATE_250;
 800230a:	2305      	movs	r3, #5
 800230c:	77fb      	strb	r3, [r7, #31]
  configReg.compareMode = COMP_HYSTERESIS;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3020 	strb.w	r3, [r7, #32]
  configReg.polarityMode = POLARITY_ACTIVE_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  configReg.latchingMode = LATCHING_NONE;
 800231a:	2300      	movs	r3, #0
 800231c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  configReg.queueComparator = QUEUE_ONE;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t bytes[3] = {0};
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <main+0x2ec>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	833b      	strh	r3, [r7, #24]
 800232c:	2300      	movs	r3, #0
 800232e:	76bb      	strb	r3, [r7, #26]
  pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configReg);
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	cb0c      	ldmia	r3, {r2, r3}
 8002336:	2148      	movs	r1, #72	; 0x48
 8002338:	485b      	ldr	r0, [pc, #364]	; (80024a8 <main+0x2d0>)
 800233a:	f7fe fcc1 	bl	8000cc0 <ADS1115_init>
 800233e:	63f8      	str	r0, [r7, #60]	; 0x3c
  ADS1115_updateConfig(pADS, configReg);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002348:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800234a:	f7fe fcd9 	bl	8000d00 <ADS1115_updateConfig>
  ADS1115_startContinousMode(pADS);
 800234e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002350:	f7fe fd3c 	bl	8000dcc <ADS1115_startContinousMode>
  //ADS1115_setConversionReadyPin(pADS);
  float data_from_adc_0 = 0;
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
  MCP4725 myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80024c8 <main+0x2f0>
 8002362:	2260      	movs	r2, #96	; 0x60
 8002364:	4950      	ldr	r1, [pc, #320]	; (80024a8 <main+0x2d0>)
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fdb6 	bl	8000ed8 <MCP4725_init>
	// Check the connection:
	uint8_t state_dac = MCP4725_isConnected(&myMCP4725);
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fdd2 	bl	8000f1a <MCP4725_isConnected>
 8002376:	4603      	mov	r3, r0
 8002378:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t v_out = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  for(uint8_t temp = 0; temp < 80; temp++){
 8002382:	2300      	movs	r3, #0
 8002384:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002388:	e027      	b.n	80023da <main+0x202>
	  MCP4725_setValue(&myMCP4725, v_out, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 800238a:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800238e:	f107 0008 	add.w	r0, r7, #8
 8002392:	2300      	movs	r3, #0
 8002394:	2200      	movs	r2, #0
 8002396:	f7fe fe03 	bl	8000fa0 <MCP4725_setValue>
	  HAL_Delay(50);
 800239a:	2032      	movs	r0, #50	; 0x32
 800239c:	f000 fd8e 	bl	8002ebc <HAL_Delay>
	  data_from_adc_0 = (ADS1115_getData(pADS));
 80023a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80023a2:	f7fe fcdf 	bl	8000d64 <ADS1115_getData>
 80023a6:	4603      	mov	r3, r0
 80023a8:	ee07 3a90 	vmov	s15, r3
 80023ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023b0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  v_out+= 150;
 80023b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80023b8:	3396      	adds	r3, #150	; 0x96
 80023ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	  if(v_out > 4060)
 80023be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80023c2:	f640 72dc 	movw	r2, #4060	; 0xfdc
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d902      	bls.n	80023d0 <main+0x1f8>
		  v_out = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  for(uint8_t temp = 0; temp < 80; temp++){
 80023d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80023d4:	3301      	adds	r3, #1
 80023d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80023da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80023de:	2b4f      	cmp	r3, #79	; 0x4f
 80023e0:	d9d3      	bls.n	800238a <main+0x1b2>
  }

  uint16_t angle = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint8_t staty_encoder = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  for(uint8_t test = 0; test < 50; test++){
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80023f2:	e011      	b.n	8002418 <main+0x240>
	  angle = AS5600_GetAngle();
 80023f4:	f7ff fe1a 	bl	800202c <AS5600_GetAngle>
 80023f8:	4603      	mov	r3, r0
 80023fa:	86bb      	strh	r3, [r7, #52]	; 0x34
	  raw_angle = AS5600_GetRawAngle();
 80023fc:	f7ff fe3a 	bl	8002074 <AS5600_GetRawAngle>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <main+0x2f4>)
 8002406:	801a      	strh	r2, [r3, #0]

	  HAL_Delay(10);
 8002408:	200a      	movs	r0, #10
 800240a:	f000 fd57 	bl	8002ebc <HAL_Delay>
  for(uint8_t test = 0; test < 50; test++){
 800240e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002412:	3301      	adds	r3, #1
 8002414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8002418:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800241c:	2b31      	cmp	r3, #49	; 0x31
 800241e:	d9e9      	bls.n	80023f4 <main+0x21c>
  }
  uint8_t color = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  		  magnituda.data = AS5600_GetStatus();
 8002426:	f7ff fe3b 	bl	80020a0 <AS5600_GetStatus>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <main+0x2f8>)
 8002430:	701a      	strb	r2, [r3, #0]
  		  raw_angle = AS5600_GetAngle();
 8002432:	f7ff fdfb 	bl	800202c <AS5600_GetAngle>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <main+0x2f4>)
 800243c:	801a      	strh	r2, [r3, #0]
  		  if(magnituda.state_magnit.MD != 1){
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <main+0x2f8>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <main+0x27a>
  			  raw_angle = 0;
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <main+0x2f4>)
 800244e:	2200      	movs	r2, #0
 8002450:	801a      	strh	r2, [r3, #0]
  		  }

		  char sym[3];
		  itoa(raw_angle,sym,10);
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <main+0x2f4>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	220a      	movs	r2, #10
 800245c:	4619      	mov	r1, r3
 800245e:	f007 fb57 	bl	8009b10 <itoa>
		  	  ssd1306_SetCursor(67, 0);
 8002462:	2100      	movs	r1, #0
 8002464:	2043      	movs	r0, #67	; 0x43
 8002466:	f7ff f8b1 	bl	80015cc <ssd1306_SetCursor>
		      ssd1306_WriteString(sym, Font_11x18, White);
 800246a:	4a10      	ldr	r2, [pc, #64]	; (80024ac <main+0x2d4>)
 800246c:	1d38      	adds	r0, r7, #4
 800246e:	2301      	movs	r3, #1
 8002470:	ca06      	ldmia	r2, {r1, r2}
 8002472:	f7ff f885 	bl	8001580 <ssd1306_WriteString>
		      ssd1306_SetCursor(67, 19);
 8002476:	2113      	movs	r1, #19
 8002478:	2043      	movs	r0, #67	; 0x43
 800247a:	f7ff f8a7 	bl	80015cc <ssd1306_SetCursor>
		      ssd1306_UpdateScreen();
 800247e:	f7fe ff7b 	bl	8001378 <ssd1306_UpdateScreen>
		      HAL_Delay(40);
 8002482:	2028      	movs	r0, #40	; 0x28
 8002484:	f000 fd1a 	bl	8002ebc <HAL_Delay>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002488:	f004 fd84 	bl	8006f94 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 800248c:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <main+0x2fc>)
 800248e:	2100      	movs	r1, #0
 8002490:	4811      	ldr	r0, [pc, #68]	; (80024d8 <main+0x300>)
 8002492:	f004 fdc9 	bl	8007028 <osThreadNew>
 8002496:	4603      	mov	r3, r0
 8002498:	4a10      	ldr	r2, [pc, #64]	; (80024dc <main+0x304>)
 800249a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 800249c:	f000 fc82 	bl	8002da4 <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80024a0:	f004 fd9c 	bl	8006fdc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <main+0x2cc>
 80024a6:	bf00      	nop
 80024a8:	200005a4 	.word	0x200005a4
 80024ac:	20000000 	.word	0x20000000
 80024b0:	08009f24 	.word	0x08009f24
 80024b4:	08009f30 	.word	0x08009f30
 80024b8:	08009f38 	.word	0x08009f38
 80024bc:	08009f3c 	.word	0x08009f3c
 80024c0:	08009f44 	.word	0x08009f44
 80024c4:	08009f48 	.word	0x08009f48
 80024c8:	40533333 	.word	0x40533333
 80024cc:	200006fc 	.word	0x200006fc
 80024d0:	20000700 	.word	0x20000700
 80024d4:	0800beb8 	.word	0x0800beb8
 80024d8:	080028a9 	.word	0x080028a9
 80024dc:	200006f8 	.word	0x200006f8

080024e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b094      	sub	sp, #80	; 0x50
 80024e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e6:	f107 0320 	add.w	r3, r7, #32
 80024ea:	2230      	movs	r2, #48	; 0x30
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f007 fb28 	bl	8009b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <SystemClock_Config+0xc8>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <SystemClock_Config+0xc8>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	; 0x40
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <SystemClock_Config+0xc8>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <SystemClock_Config+0xcc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <SystemClock_Config+0xcc>)
 800252a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <SystemClock_Config+0xcc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800253c:	2301      	movs	r3, #1
 800253e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002546:	2302      	movs	r3, #2
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800254a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002550:	2319      	movs	r3, #25
 8002552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002554:	2390      	movs	r3, #144	; 0x90
 8002556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002558:	2302      	movs	r3, #2
 800255a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800255c:	2304      	movs	r3, #4
 800255e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002560:	f107 0320 	add.w	r3, r7, #32
 8002564:	4618      	mov	r0, r3
 8002566:	f003 f859 	bl	800561c <HAL_RCC_OscConfig>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002570:	f000 f9b4 	bl	80028dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002574:	230f      	movs	r3, #15
 8002576:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002578:	2302      	movs	r3, #2
 800257a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	2102      	movs	r1, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fabb 	bl	8005b0c <HAL_RCC_ClockConfig>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800259c:	f000 f99e 	bl	80028dc <Error_Handler>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3750      	adds	r7, #80	; 0x50
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000

080025b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <MX_I2C1_Init+0x50>)
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <MX_I2C1_Init+0x54>)
 80025b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <MX_I2C1_Init+0x50>)
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <MX_I2C1_Init+0x58>)
 80025be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <MX_I2C1_Init+0x50>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <MX_I2C1_Init+0x50>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <MX_I2C1_Init+0x50>)
 80025ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <MX_I2C1_Init+0x50>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <MX_I2C1_Init+0x50>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <MX_I2C1_Init+0x50>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <MX_I2C1_Init+0x50>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025ec:	4804      	ldr	r0, [pc, #16]	; (8002600 <MX_I2C1_Init+0x50>)
 80025ee:	f001 fab3 	bl	8003b58 <HAL_I2C_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025f8:	f000 f970 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200005a4 	.word	0x200005a4
 8002604:	40005400 	.word	0x40005400
 8002608:	00061a80 	.word	0x00061a80

0800260c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002610:	4b17      	ldr	r3, [pc, #92]	; (8002670 <MX_SPI1_Init+0x64>)
 8002612:	4a18      	ldr	r2, [pc, #96]	; (8002674 <MX_SPI1_Init+0x68>)
 8002614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <MX_SPI1_Init+0x64>)
 8002618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800261c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <MX_SPI1_Init+0x64>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <MX_SPI1_Init+0x64>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_SPI1_Init+0x64>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <MX_SPI1_Init+0x64>)
 8002632:	2200      	movs	r2, #0
 8002634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_SPI1_Init+0x64>)
 8002638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MX_SPI1_Init+0x64>)
 8002640:	2230      	movs	r2, #48	; 0x30
 8002642:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <MX_SPI1_Init+0x64>)
 8002646:	2200      	movs	r2, #0
 8002648:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <MX_SPI1_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <MX_SPI1_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_SPI1_Init+0x64>)
 8002658:	220a      	movs	r2, #10
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <MX_SPI1_Init+0x64>)
 800265e:	f003 fc67 	bl	8005f30 <HAL_SPI_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002668:	f000 f938 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200005f8 	.word	0x200005f8
 8002674:	40013000 	.word	0x40013000

08002678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08e      	sub	sp, #56	; 0x38
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268c:	f107 0320 	add.w	r3, r7, #32
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	615a      	str	r2, [r3, #20]
 80026a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026a8:	4b2c      	ldr	r3, [pc, #176]	; (800275c <MX_TIM2_Init+0xe4>)
 80026aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026b0:	4b2a      	ldr	r3, [pc, #168]	; (800275c <MX_TIM2_Init+0xe4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b6:	4b29      	ldr	r3, [pc, #164]	; (800275c <MX_TIM2_Init+0xe4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <MX_TIM2_Init+0xe4>)
 80026be:	2259      	movs	r2, #89	; 0x59
 80026c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <MX_TIM2_Init+0xe4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <MX_TIM2_Init+0xe4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026ce:	4823      	ldr	r0, [pc, #140]	; (800275c <MX_TIM2_Init+0xe4>)
 80026d0:	f003 fcb7 	bl	8006042 <HAL_TIM_Base_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80026da:	f000 f8ff 	bl	80028dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026e8:	4619      	mov	r1, r3
 80026ea:	481c      	ldr	r0, [pc, #112]	; (800275c <MX_TIM2_Init+0xe4>)
 80026ec:	f003 ff7e 	bl	80065ec <HAL_TIM_ConfigClockSource>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80026f6:	f000 f8f1 	bl	80028dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026fa:	4818      	ldr	r0, [pc, #96]	; (800275c <MX_TIM2_Init+0xe4>)
 80026fc:	f003 fd52 	bl	80061a4 <HAL_TIM_PWM_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002706:	f000 f8e9 	bl	80028dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002712:	f107 0320 	add.w	r3, r7, #32
 8002716:	4619      	mov	r1, r3
 8002718:	4810      	ldr	r0, [pc, #64]	; (800275c <MX_TIM2_Init+0xe4>)
 800271a:	f004 fb75 	bl	8006e08 <HAL_TIMEx_MasterConfigSynchronization>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002724:	f000 f8da 	bl	80028dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002728:	2360      	movs	r3, #96	; 0x60
 800272a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	2204      	movs	r2, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4807      	ldr	r0, [pc, #28]	; (800275c <MX_TIM2_Init+0xe4>)
 8002740:	f003 fe92 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800274a:	f000 f8c7 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800274e:	4803      	ldr	r0, [pc, #12]	; (800275c <MX_TIM2_Init+0xe4>)
 8002750:	f000 f9e6 	bl	8002b20 <HAL_TIM_MspPostInit>

}
 8002754:	bf00      	nop
 8002756:	3738      	adds	r7, #56	; 0x38
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000650 	.word	0x20000650

08002760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <MX_DMA_Init+0x3c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <MX_DMA_Init+0x3c>)
 8002770:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_DMA_Init+0x3c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2105      	movs	r1, #5
 8002786:	2011      	movs	r0, #17
 8002788:	f000 fc74 	bl	8003074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800278c:	2011      	movs	r0, #17
 800278e:	f000 fc8d 	bl	80030ac <HAL_NVIC_EnableIRQ>

}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800

080027a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <MX_GPIO_Init+0xe0>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a30      	ldr	r2, [pc, #192]	; (8002880 <MX_GPIO_Init+0xe0>)
 80027c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <MX_GPIO_Init+0xe0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <MX_GPIO_Init+0xe0>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a29      	ldr	r2, [pc, #164]	; (8002880 <MX_GPIO_Init+0xe0>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <MX_GPIO_Init+0xe0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	4b23      	ldr	r3, [pc, #140]	; (8002880 <MX_GPIO_Init+0xe0>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a22      	ldr	r2, [pc, #136]	; (8002880 <MX_GPIO_Init+0xe0>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <MX_GPIO_Init+0xe0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	2107      	movs	r1, #7
 800280e:	481d      	ldr	r0, [pc, #116]	; (8002884 <MX_GPIO_Init+0xe4>)
 8002810:	f001 f970 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8002814:	2307      	movs	r3, #7
 8002816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002818:	2301      	movs	r3, #1
 800281a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	4619      	mov	r1, r3
 800282a:	4816      	ldr	r0, [pc, #88]	; (8002884 <MX_GPIO_Init+0xe4>)
 800282c:	f000 ffde 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800283a:	2302      	movs	r3, #2
 800283c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	4619      	mov	r1, r3
 8002844:	480f      	ldr	r0, [pc, #60]	; (8002884 <MX_GPIO_Init+0xe4>)
 8002846:	f000 ffd1 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 800284a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800284e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002850:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002856:	2301      	movs	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 800285a:	f107 030c 	add.w	r3, r7, #12
 800285e:	4619      	mov	r1, r3
 8002860:	4808      	ldr	r0, [pc, #32]	; (8002884 <MX_GPIO_Init+0xe4>)
 8002862:	f000 ffc3 	bl	80037ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2105      	movs	r1, #5
 800286a:	2028      	movs	r0, #40	; 0x28
 800286c:	f000 fc02 	bl	8003074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002870:	2028      	movs	r0, #40	; 0x28
 8002872:	f000 fc1b 	bl	80030ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002876:	bf00      	nop
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40020400 	.word	0x40020400

08002888 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
uint8_t ButtonUp = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_button_on_Pin){
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002898:	d102      	bne.n	80028a0 <HAL_GPIO_EXTI_Callback+0x18>
		buttonEnSet(ON);
 800289a:	2001      	movs	r0, #1
 800289c:	f7ff fc0c 	bl	80020b8 <buttonEnSet>
	}
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f004 fc4b 	bl	800714c <osDelay>
 80028b6:	e7fb      	b.n	80028b0 <StartEmptyTask+0x8>

080028b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028ca:	f000 fad7 	bl	8002e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40014000 	.word	0x40014000

080028dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <Error_Handler+0x8>
	...

080028e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_MspInit+0x54>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <HAL_MspInit+0x54>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HAL_MspInit+0x54>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_MspInit+0x54>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_MspInit+0x54>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_MspInit+0x54>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	210f      	movs	r1, #15
 800292a:	f06f 0001 	mvn.w	r0, #1
 800292e:	f000 fba1 	bl	8003074 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_I2C_MspInit+0x84>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12b      	bne.n	80029ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800297e:	23c0      	movs	r3, #192	; 0xc0
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002982:	2312      	movs	r3, #18
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298a:	2303      	movs	r3, #3
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800298e:	2304      	movs	r3, #4
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	4619      	mov	r1, r3
 8002998:	480c      	ldr	r0, [pc, #48]	; (80029cc <HAL_I2C_MspInit+0x8c>)
 800299a:	f000 ff27 	bl	80037ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 80029a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029ba:	bf00      	nop
 80029bc:	3728      	adds	r7, #40	; 0x28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40005400 	.word	0x40005400
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020400 	.word	0x40020400

080029d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_SPI_MspInit+0x84>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12b      	bne.n	8002a4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 80029fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a2a:	23a0      	movs	r3, #160	; 0xa0
 8002a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	4805      	ldr	r0, [pc, #20]	; (8002a5c <HAL_SPI_MspInit+0x8c>)
 8002a46:	f000 fed1 	bl	80037ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40013000 	.word	0x40013000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020000 	.word	0x40020000

08002a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d14c      	bne.n	8002b0c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_TIM_Base_MspInit+0xb4>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a26      	ldr	r2, [pc, #152]	; (8002b14 <HAL_TIM_Base_MspInit+0xb4>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_TIM_Base_MspInit+0xb4>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002a90:	4a22      	ldr	r2, [pc, #136]	; (8002b1c <HAL_TIM_Base_MspInit+0xbc>)
 8002a92:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002a96:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002a9a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aae:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002ace:	2204      	movs	r2, #4
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002ae4:	480c      	ldr	r0, [pc, #48]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002ae6:	f000 faef 	bl	80030c8 <HAL_DMA_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8002af0:	f7ff fef4 	bl	80028dc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002af8:	629a      	str	r2, [r3, #40]	; 0x28
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_TIM_Base_MspInit+0xb8>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	20000698 	.word	0x20000698
 8002b1c:	400260a0 	.word	0x400260a0

08002b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d11d      	bne.n	8002b7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_TIM_MspPostInit+0x68>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <HAL_TIM_MspPostInit+0x68>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_TIM_MspPostInit+0x68>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	4619      	mov	r1, r3
 8002b78:	4804      	ldr	r0, [pc, #16]	; (8002b8c <HAL_TIM_MspPostInit+0x6c>)
 8002b7a:	f000 fe37 	bl	80037ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b7e:	bf00      	nop
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020000 	.word	0x40020000

08002b90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08c      	sub	sp, #48	; 0x30
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_InitTick+0xd0>)
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba8:	4a2d      	ldr	r2, [pc, #180]	; (8002c60 <HAL_InitTick+0xd0>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_InitTick+0xd0>)
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bbc:	f107 020c 	add.w	r2, r7, #12
 8002bc0:	f107 0310 	add.w	r3, r7, #16
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 f980 	bl	8005ecc <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002bcc:	f003 f96a 	bl	8005ea4 <HAL_RCC_GetPCLK2Freq>
 8002bd0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <HAL_InitTick+0xd4>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0c9b      	lsrs	r3, r3, #18
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_InitTick+0xd8>)
 8002be2:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_InitTick+0xdc>)
 8002be4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_InitTick+0xd8>)
 8002be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bec:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002bee:	4a1e      	ldr	r2, [pc, #120]	; (8002c68 <HAL_InitTick+0xd8>)
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_InitTick+0xd8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_InitTick+0xd8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_InitTick+0xd8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8002c06:	4818      	ldr	r0, [pc, #96]	; (8002c68 <HAL_InitTick+0xd8>)
 8002c08:	f003 fa1b 	bl	8006042 <HAL_TIM_Base_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002c12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11b      	bne.n	8002c52 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8002c1a:	4813      	ldr	r0, [pc, #76]	; (8002c68 <HAL_InitTick+0xd8>)
 8002c1c:	f003 fa60 	bl	80060e0 <HAL_TIM_Base_Start_IT>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d111      	bne.n	8002c52 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002c2e:	2018      	movs	r0, #24
 8002c30:	f000 fa3c 	bl	80030ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	d808      	bhi.n	8002c4c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	2018      	movs	r0, #24
 8002c40:	f000 fa18 	bl	8003074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c44:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_InitTick+0xe0>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e002      	b.n	8002c52 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3730      	adds	r7, #48	; 0x30
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	431bde83 	.word	0x431bde83
 8002c68:	20000704 	.word	0x20000704
 8002c6c:	40014000 	.word	0x40014000
 8002c70:	20000034 	.word	0x20000034

08002c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <NMI_Handler+0x4>

08002c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <HardFault_Handler+0x4>

08002c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <MemManage_Handler+0x4>

08002c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c8a:	e7fe      	b.n	8002c8a <BusFault_Handler+0x4>

08002c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <UsageFault_Handler+0x4>

08002c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <DMA1_Stream6_IRQHandler+0x10>)
 8002ca6:	f000 fb37 	bl	8003318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000698 	.word	0x20000698

08002cb4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002cba:	f003 facc 	bl	8006256 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000704 	.word	0x20000704

08002cc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 8002ccc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cd0:	f000 ff2a 	bl	8003b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce0:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <_sbrk+0x5c>)
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <_sbrk+0x60>)
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <_sbrk+0x64>)
 8002cf6:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <_sbrk+0x68>)
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d207      	bcs.n	8002d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d08:	f006 fec0 	bl	8009a8c <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	220c      	movs	r2, #12
 8002d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
 8002d16:	e009      	b.n	8002d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <_sbrk+0x64>)
 8002d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20020000 	.word	0x20020000
 8002d38:	00004000 	.word	0x00004000
 8002d3c:	2000074c 	.word	0x2000074c
 8002d40:	20005180 	.word	0x20005180

08002d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <SystemInit+0x20>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <SystemInit+0x20>)
 8002d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
		if(buttonEn() == ON){
 8002d70:	f7ff f9b2 	bl	80020d8 <buttonEn>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d104      	bne.n	8002d84 <StartOledMenuTask+0x1c>
			drawMainMenu();
 8002d7a:	f7ff f9b9 	bl	80020f0 <drawMainMenu>
			buttonEnSet(OFF);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7ff f99a 	bl	80020b8 <buttonEnSet>
		}
	    osDelay(100);
 8002d84:	2064      	movs	r0, #100	; 0x64
 8002d86:	f004 f9e1 	bl	800714c <osDelay>
	  {
 8002d8a:	e7f1      	b.n	8002d70 <StartOledMenuTask+0x8>

08002d8c <StartSensOutTask>:
#include "tasks/SensOut.h"

void StartSensOutTask(void *argument){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
	    osDelay(1000);
 8002d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d98:	f004 f9d8 	bl	800714c <osDelay>
	    buttonEnSet(ON);
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff f98b 	bl	80020b8 <buttonEnSet>
	  {
 8002da2:	e7f7      	b.n	8002d94 <StartSensOutTask+0x8>

08002da4 <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityBelowNormal,
};

void initUserTasks(){
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
	OledMenuTaskHandle = osThreadNew(StartOledMenuTask, NULL, &OledMenuTask_attributes);
 8002da8:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <initUserTasks+0x28>)
 8002daa:	2100      	movs	r1, #0
 8002dac:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <initUserTasks+0x2c>)
 8002dae:	f004 f93b 	bl	8007028 <osThreadNew>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <initUserTasks+0x30>)
 8002db6:	6013      	str	r3, [r2, #0]
	//OledOutTaskHandle  = osThreadNew(StartOledOutTask,  NULL, &OledOutTask_attributes);
	SensOutTaskHandle  = osThreadNew(StartSensOutTask,  NULL, &SensOutTask_attributes);
 8002db8:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <initUserTasks+0x34>)
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4807      	ldr	r0, [pc, #28]	; (8002ddc <initUserTasks+0x38>)
 8002dbe:	f004 f933 	bl	8007028 <osThreadNew>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <initUserTasks+0x3c>)
 8002dc6:	6013      	str	r3, [r2, #0]
};
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	0800bef4 	.word	0x0800bef4
 8002dd0:	08002d69 	.word	0x08002d69
 8002dd4:	20000750 	.word	0x20000750
 8002dd8:	0800bf18 	.word	0x0800bf18
 8002ddc:	08002d8d 	.word	0x08002d8d
 8002de0:	20000754 	.word	0x20000754

08002de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002de8:	480d      	ldr	r0, [pc, #52]	; (8002e20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dea:	490e      	ldr	r1, [pc, #56]	; (8002e24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df0:	e002      	b.n	8002df8 <LoopCopyDataInit>

08002df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002df6:	3304      	adds	r3, #4

08002df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dfc:	d3f9      	bcc.n	8002df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dfe:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e00:	4c0b      	ldr	r4, [pc, #44]	; (8002e30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e04:	e001      	b.n	8002e0a <LoopFillZerobss>

08002e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e08:	3204      	adds	r2, #4

08002e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e0c:	d3fb      	bcc.n	8002e06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e0e:	f7ff ff99 	bl	8002d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e12:	f006 fe41 	bl	8009a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e16:	f7ff f9df 	bl	80021d8 <main>
  bx  lr    
 8002e1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e24:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002e28:	0800bfdc 	.word	0x0800bfdc
  ldr r2, =_sbss
 8002e2c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002e30:	2000517c 	.word	0x2000517c

08002e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e34:	e7fe      	b.n	8002e34 <ADC_IRQHandler>
	...

08002e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <HAL_Init+0x40>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0d      	ldr	r2, [pc, #52]	; (8002e78 <HAL_Init+0x40>)
 8002e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_Init+0x40>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <HAL_Init+0x40>)
 8002e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_Init+0x40>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <HAL_Init+0x40>)
 8002e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e60:	2003      	movs	r0, #3
 8002e62:	f000 f8fc 	bl	800305e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7ff fe92 	bl	8002b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e6c:	f7ff fd3c 	bl	80028e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023c00 	.word	0x40023c00

08002e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_IncTick+0x20>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_IncTick+0x24>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_IncTick+0x24>)
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000038 	.word	0x20000038
 8002ea0:	20000758 	.word	0x20000758

08002ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_GetTick+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000758 	.word	0x20000758

08002ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff ffee 	bl	8002ea4 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d005      	beq.n	8002ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <HAL_Delay+0x44>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ee2:	bf00      	nop
 8002ee4:	f7ff ffde 	bl	8002ea4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d8f7      	bhi.n	8002ee4 <HAL_Delay+0x28>
  {
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000038 	.word	0x20000038

08002f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <__NVIC_GetPriorityGrouping+0x18>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0307 	and.w	r3, r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db0b      	blt.n	8002f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	4907      	ldr	r1, [pc, #28]	; (8002fa0 <__NVIC_EnableIRQ+0x38>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100

08002fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db0a      	blt.n	8002fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <__NVIC_SetPriority+0x4c>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4908      	ldr	r1, [pc, #32]	; (8002ff4 <__NVIC_SetPriority+0x50>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3b04      	subs	r3, #4
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	761a      	strb	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f1c3 0307 	rsb	r3, r3, #7
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf28      	it	cs
 8003016:	2304      	movcs	r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3304      	adds	r3, #4
 800301e:	2b06      	cmp	r3, #6
 8003020:	d902      	bls.n	8003028 <NVIC_EncodePriority+0x30>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3b03      	subs	r3, #3
 8003026:	e000      	b.n	800302a <NVIC_EncodePriority+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	401a      	ands	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43d9      	mvns	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	4313      	orrs	r3, r2
         );
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff4c 	bl	8002f04 <__NVIC_SetPriorityGrouping>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003086:	f7ff ff61 	bl	8002f4c <__NVIC_GetPriorityGrouping>
 800308a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	6978      	ldr	r0, [r7, #20]
 8003092:	f7ff ffb1 	bl	8002ff8 <NVIC_EncodePriority>
 8003096:	4602      	mov	r2, r0
 8003098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff80 	bl	8002fa4 <__NVIC_SetPriority>
}
 80030a4:	bf00      	nop
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff54 	bl	8002f68 <__NVIC_EnableIRQ>
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff fee6 	bl	8002ea4 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e099      	b.n	8003218 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003104:	e00f      	b.n	8003126 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003106:	f7ff fecd 	bl	8002ea4 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b05      	cmp	r3, #5
 8003112:	d908      	bls.n	8003126 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e078      	b.n	8003218 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e8      	bne.n	8003106 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4b38      	ldr	r3, [pc, #224]	; (8003220 <HAL_DMA_Init+0x158>)
 8003140:	4013      	ands	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003152:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	2b04      	cmp	r3, #4
 800317e:	d107      	bne.n	8003190 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4313      	orrs	r3, r2
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0307 	bic.w	r3, r3, #7
 80031a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d117      	bne.n	80031ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fa91 	bl	80036f4 <DMA_CheckFifoParam>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2240      	movs	r2, #64	; 0x40
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031e6:	2301      	movs	r3, #1
 80031e8:	e016      	b.n	8003218 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fa48 	bl	8003688 <DMA_CalcBaseAndBitshift>
 80031f8:	4603      	mov	r3, r0
 80031fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	223f      	movs	r2, #63	; 0x3f
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	f010803f 	.word	0xf010803f

08003224 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_DMA_Start_IT+0x26>
 8003246:	2302      	movs	r3, #2
 8003248:	e040      	b.n	80032cc <HAL_DMA_Start_IT+0xa8>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d12f      	bne.n	80032be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f9da 	bl	800362c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	223f      	movs	r2, #63	; 0x3f
 800327e:	409a      	lsls	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0216 	orr.w	r2, r2, #22
 8003292:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0208 	orr.w	r2, r2, #8
 80032aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e005      	b.n	80032ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
 80032c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d004      	beq.n	80032f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00c      	b.n	800330c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2205      	movs	r2, #5
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003324:	4b8e      	ldr	r3, [pc, #568]	; (8003560 <HAL_DMA_IRQHandler+0x248>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a8e      	ldr	r2, [pc, #568]	; (8003564 <HAL_DMA_IRQHandler+0x24c>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0a9b      	lsrs	r3, r3, #10
 8003330:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003342:	2208      	movs	r2, #8
 8003344:	409a      	lsls	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01a      	beq.n	8003384 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d013      	beq.n	8003384 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0204 	bic.w	r2, r2, #4
 800336a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	2208      	movs	r2, #8
 8003372:	409a      	lsls	r2, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	2201      	movs	r2, #1
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d012      	beq.n	80033ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a6:	2201      	movs	r2, #1
 80033a8:	409a      	lsls	r2, r3
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	f043 0202 	orr.w	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	2204      	movs	r2, #4
 80033c0:	409a      	lsls	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00b      	beq.n	80033f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	2204      	movs	r2, #4
 80033de:	409a      	lsls	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f043 0204 	orr.w	r2, r3, #4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	2210      	movs	r2, #16
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d043      	beq.n	8003488 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d03c      	beq.n	8003488 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	2210      	movs	r2, #16
 8003414:	409a      	lsls	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d018      	beq.n	800345a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d108      	bne.n	8003448 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d024      	beq.n	8003488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
 8003446:	e01f      	b.n	8003488 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01b      	beq.n	8003488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
 8003458:	e016      	b.n	8003488 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0208 	bic.w	r2, r2, #8
 8003476:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	2220      	movs	r2, #32
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 808f 	beq.w	80035b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8087 	beq.w	80035b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ae:	2220      	movs	r2, #32
 80034b0:	409a      	lsls	r2, r3
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b05      	cmp	r3, #5
 80034c0:	d136      	bne.n	8003530 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0216 	bic.w	r2, r2, #22
 80034d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <HAL_DMA_IRQHandler+0x1da>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0208 	bic.w	r2, r2, #8
 8003500:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	223f      	movs	r2, #63	; 0x3f
 8003508:	409a      	lsls	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003522:	2b00      	cmp	r3, #0
 8003524:	d07e      	beq.n	8003624 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
        }
        return;
 800352e:	e079      	b.n	8003624 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01d      	beq.n	800357a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10d      	bne.n	8003568 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	2b00      	cmp	r3, #0
 8003552:	d031      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
 800355c:	e02c      	b.n	80035b8 <HAL_DMA_IRQHandler+0x2a0>
 800355e:	bf00      	nop
 8003560:	20000030 	.word	0x20000030
 8003564:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d023      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e01e      	b.n	80035b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10f      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0210 	bic.w	r2, r2, #16
 8003596:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d032      	beq.n	8003626 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d022      	beq.n	8003612 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2205      	movs	r2, #5
 80035d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	3301      	adds	r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d307      	bcc.n	8003600 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f2      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x2cc>
 80035fe:	e000      	b.n	8003602 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003600:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
 8003622:	e000      	b.n	8003626 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003624:	bf00      	nop
    }
  }
}
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003648:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d108      	bne.n	800366c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800366a:	e007      	b.n	800367c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3b10      	subs	r3, #16
 8003698:	4a14      	ldr	r2, [pc, #80]	; (80036ec <DMA_CalcBaseAndBitshift+0x64>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036a2:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <DMA_CalcBaseAndBitshift+0x68>)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d909      	bls.n	80036ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	1d1a      	adds	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	659a      	str	r2, [r3, #88]	; 0x58
 80036c8:	e007      	b.n	80036da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	aaaaaaab 	.word	0xaaaaaaab
 80036f0:	0800bf3c 	.word	0x0800bf3c

080036f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11f      	bne.n	800374e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d856      	bhi.n	80037c2 <DMA_CheckFifoParam+0xce>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <DMA_CheckFifoParam+0x28>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	0800372d 	.word	0x0800372d
 8003720:	0800373f 	.word	0x0800373f
 8003724:	0800372d 	.word	0x0800372d
 8003728:	080037c3 	.word	0x080037c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d046      	beq.n	80037c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373c:	e043      	b.n	80037c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003746:	d140      	bne.n	80037ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374c:	e03d      	b.n	80037ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003756:	d121      	bne.n	800379c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b03      	cmp	r3, #3
 800375c:	d837      	bhi.n	80037ce <DMA_CheckFifoParam+0xda>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <DMA_CheckFifoParam+0x70>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	08003775 	.word	0x08003775
 8003768:	0800377b 	.word	0x0800377b
 800376c:	08003775 	.word	0x08003775
 8003770:	0800378d 	.word	0x0800378d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
      break;
 8003778:	e030      	b.n	80037dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d025      	beq.n	80037d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378a:	e022      	b.n	80037d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003794:	d11f      	bne.n	80037d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800379a:	e01c      	b.n	80037d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d903      	bls.n	80037aa <DMA_CheckFifoParam+0xb6>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d003      	beq.n	80037b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037a8:	e018      	b.n	80037dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      break;
 80037ae:	e015      	b.n	80037dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e00b      	b.n	80037da <DMA_CheckFifoParam+0xe6>
      break;
 80037c2:	bf00      	nop
 80037c4:	e00a      	b.n	80037dc <DMA_CheckFifoParam+0xe8>
      break;
 80037c6:	bf00      	nop
 80037c8:	e008      	b.n	80037dc <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e006      	b.n	80037dc <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
 80037d0:	e004      	b.n	80037dc <DMA_CheckFifoParam+0xe8>
      break;
 80037d2:	bf00      	nop
 80037d4:	e002      	b.n	80037dc <DMA_CheckFifoParam+0xe8>
      break;   
 80037d6:	bf00      	nop
 80037d8:	e000      	b.n	80037dc <DMA_CheckFifoParam+0xe8>
      break;
 80037da:	bf00      	nop
    }
  } 
  
  return status; 
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop

080037ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	e159      	b.n	8003abc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003808:	2201      	movs	r2, #1
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	429a      	cmp	r2, r3
 8003822:	f040 8148 	bne.w	8003ab6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d005      	beq.n	800383e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383a:	2b02      	cmp	r3, #2
 800383c:	d130      	bne.n	80038a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003874:	2201      	movs	r2, #1
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 0201 	and.w	r2, r3, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d017      	beq.n	80038dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	2203      	movs	r2, #3
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d123      	bne.n	8003930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	08da      	lsrs	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3208      	adds	r2, #8
 80038f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	220f      	movs	r2, #15
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	08da      	lsrs	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3208      	adds	r2, #8
 800392a:	69b9      	ldr	r1, [r7, #24]
 800392c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a2 	beq.w	8003ab6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <HAL_GPIO_Init+0x2e8>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	4a56      	ldr	r2, [pc, #344]	; (8003ad4 <HAL_GPIO_Init+0x2e8>)
 800397c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003980:	6453      	str	r3, [r2, #68]	; 0x44
 8003982:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <HAL_GPIO_Init+0x2e8>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800398e:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <HAL_GPIO_Init+0x2ec>)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	3302      	adds	r3, #2
 8003996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	220f      	movs	r2, #15
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a49      	ldr	r2, [pc, #292]	; (8003adc <HAL_GPIO_Init+0x2f0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d019      	beq.n	80039ee <HAL_GPIO_Init+0x202>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a48      	ldr	r2, [pc, #288]	; (8003ae0 <HAL_GPIO_Init+0x2f4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_GPIO_Init+0x1fe>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a47      	ldr	r2, [pc, #284]	; (8003ae4 <HAL_GPIO_Init+0x2f8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00d      	beq.n	80039e6 <HAL_GPIO_Init+0x1fa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a46      	ldr	r2, [pc, #280]	; (8003ae8 <HAL_GPIO_Init+0x2fc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <HAL_GPIO_Init+0x1f6>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a45      	ldr	r2, [pc, #276]	; (8003aec <HAL_GPIO_Init+0x300>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <HAL_GPIO_Init+0x1f2>
 80039da:	2304      	movs	r3, #4
 80039dc:	e008      	b.n	80039f0 <HAL_GPIO_Init+0x204>
 80039de:	2307      	movs	r3, #7
 80039e0:	e006      	b.n	80039f0 <HAL_GPIO_Init+0x204>
 80039e2:	2303      	movs	r3, #3
 80039e4:	e004      	b.n	80039f0 <HAL_GPIO_Init+0x204>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e002      	b.n	80039f0 <HAL_GPIO_Init+0x204>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_GPIO_Init+0x204>
 80039ee:	2300      	movs	r3, #0
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	f002 0203 	and.w	r2, r2, #3
 80039f6:	0092      	lsls	r2, r2, #2
 80039f8:	4093      	lsls	r3, r2
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a00:	4935      	ldr	r1, [pc, #212]	; (8003ad8 <HAL_GPIO_Init+0x2ec>)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	3302      	adds	r3, #2
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0e:	4b38      	ldr	r3, [pc, #224]	; (8003af0 <HAL_GPIO_Init+0x304>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a32:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <HAL_GPIO_Init+0x304>)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a38:	4b2d      	ldr	r3, [pc, #180]	; (8003af0 <HAL_GPIO_Init+0x304>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a5c:	4a24      	ldr	r2, [pc, #144]	; (8003af0 <HAL_GPIO_Init+0x304>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a62:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_GPIO_Init+0x304>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a86:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <HAL_GPIO_Init+0x304>)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a8c:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <HAL_GPIO_Init+0x304>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab0:	4a0f      	ldr	r2, [pc, #60]	; (8003af0 <HAL_GPIO_Init+0x304>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b0f      	cmp	r3, #15
 8003ac0:	f67f aea2 	bls.w	8003808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3724      	adds	r7, #36	; 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	40020000 	.word	0x40020000
 8003ae0:	40020400 	.word	0x40020400
 8003ae4:	40020800 	.word	0x40020800
 8003ae8:	40020c00 	.word	0x40020c00
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40013c00 	.word	0x40013c00

08003af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
 8003b00:	4613      	mov	r3, r2
 8003b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b04:	787b      	ldrb	r3, [r7, #1]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b10:	e003      	b.n	8003b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	041a      	lsls	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	619a      	str	r2, [r3, #24]
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b3e:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fe fe9e 	bl	8002888 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40013c00 	.word	0x40013c00

08003b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e12b      	b.n	8003dc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe fede 	bl	8002940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f002 f95e 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8003bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a81      	ldr	r2, [pc, #516]	; (8003dcc <HAL_I2C_Init+0x274>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d807      	bhi.n	8003bdc <HAL_I2C_Init+0x84>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a80      	ldr	r2, [pc, #512]	; (8003dd0 <HAL_I2C_Init+0x278>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	bf94      	ite	ls
 8003bd4:	2301      	movls	r3, #1
 8003bd6:	2300      	movhi	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e006      	b.n	8003bea <HAL_I2C_Init+0x92>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a7d      	ldr	r2, [pc, #500]	; (8003dd4 <HAL_I2C_Init+0x27c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	bf94      	ite	ls
 8003be4:	2301      	movls	r3, #1
 8003be6:	2300      	movhi	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0e7      	b.n	8003dc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a78      	ldr	r2, [pc, #480]	; (8003dd8 <HAL_I2C_Init+0x280>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0c9b      	lsrs	r3, r3, #18
 8003bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a6a      	ldr	r2, [pc, #424]	; (8003dcc <HAL_I2C_Init+0x274>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d802      	bhi.n	8003c2c <HAL_I2C_Init+0xd4>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	e009      	b.n	8003c40 <HAL_I2C_Init+0xe8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	4a69      	ldr	r2, [pc, #420]	; (8003ddc <HAL_I2C_Init+0x284>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	3301      	adds	r3, #1
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	495c      	ldr	r1, [pc, #368]	; (8003dcc <HAL_I2C_Init+0x274>)
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	d819      	bhi.n	8003c94 <HAL_I2C_Init+0x13c>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e59      	subs	r1, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c6e:	1c59      	adds	r1, r3, #1
 8003c70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c74:	400b      	ands	r3, r1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_I2C_Init+0x138>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1e59      	subs	r1, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8e:	e051      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003c90:	2304      	movs	r3, #4
 8003c92:	e04f      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d111      	bne.n	8003cc0 <HAL_I2C_Init+0x168>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e58      	subs	r0, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	440b      	add	r3, r1
 8003caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	e012      	b.n	8003ce6 <HAL_I2C_Init+0x18e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1e58      	subs	r0, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	0099      	lsls	r1, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Init+0x196>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e022      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10e      	bne.n	8003d14 <HAL_I2C_Init+0x1bc>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1e58      	subs	r0, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	440b      	add	r3, r1
 8003d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d12:	e00f      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1e58      	subs	r0, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	0099      	lsls	r1, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	6809      	ldr	r1, [r1, #0]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6911      	ldr	r1, [r2, #16]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68d2      	ldr	r2, [r2, #12]
 8003d6e:	4311      	orrs	r1, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	000186a0 	.word	0x000186a0
 8003dd0:	001e847f 	.word	0x001e847f
 8003dd4:	003d08ff 	.word	0x003d08ff
 8003dd8:	431bde83 	.word	0x431bde83
 8003ddc:	10624dd3 	.word	0x10624dd3

08003de0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	461a      	mov	r2, r3
 8003dec:	460b      	mov	r3, r1
 8003dee:	817b      	strh	r3, [r7, #10]
 8003df0:	4613      	mov	r3, r2
 8003df2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7ff f856 	bl	8002ea4 <HAL_GetTick>
 8003df8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	f040 80e0 	bne.w	8003fc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2319      	movs	r3, #25
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4970      	ldr	r1, [pc, #448]	; (8003fd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f001 fa24 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0d3      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2C_Master_Transmit+0x50>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0cc      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d007      	beq.n	8003e56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0201 	orr.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2221      	movs	r2, #33	; 0x21
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2210      	movs	r2, #16
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	893a      	ldrh	r2, [r7, #8]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a50      	ldr	r2, [pc, #320]	; (8003fd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e98:	8979      	ldrh	r1, [r7, #10]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 ff10 	bl	8004cc4 <I2C_MasterRequestWrite>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e08d      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ec4:	e066      	b.n	8003f94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f001 fa9e 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06b      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d11b      	bne.n	8003f68 <HAL_I2C_Master_Transmit+0x188>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d017      	beq.n	8003f68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	6a39      	ldr	r1, [r7, #32]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f001 fa8e 	bl	800548e <I2C_WaitOnBTFFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00d      	beq.n	8003f94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d107      	bne.n	8003f90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e01a      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d194      	bne.n	8003ec6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e000      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
  }
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	00100002 	.word	0x00100002
 8003fd8:	ffff0000 	.word	0xffff0000

08003fdc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	; 0x30
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	460b      	mov	r3, r1
 8003fea:	817b      	strh	r3, [r7, #10]
 8003fec:	4613      	mov	r3, r2
 8003fee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ff0:	f7fe ff58 	bl	8002ea4 <HAL_GetTick>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	f040 820b 	bne.w	800441a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2319      	movs	r3, #25
 800400a:	2201      	movs	r2, #1
 800400c:	497c      	ldr	r1, [pc, #496]	; (8004200 <HAL_I2C_Master_Receive+0x224>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f001 f926 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
 800401c:	e1fe      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_I2C_Master_Receive+0x50>
 8004028:	2302      	movs	r3, #2
 800402a:	e1f7      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d007      	beq.n	8004052 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004060:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2222      	movs	r2, #34	; 0x22
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2210      	movs	r2, #16
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	893a      	ldrh	r2, [r7, #8]
 8004082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a5c      	ldr	r2, [pc, #368]	; (8004204 <HAL_I2C_Master_Receive+0x228>)
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004094:	8979      	ldrh	r1, [r7, #10]
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fe94 	bl	8004dc8 <I2C_MasterRequestRead>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e1b8      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d113      	bne.n	80040da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e18c      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d11b      	bne.n	800411a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e16c      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	2b02      	cmp	r3, #2
 8004120:	d11b      	bne.n	800415a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	e14c      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004180:	e138      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	2b03      	cmp	r3, #3
 8004188:	f200 80f1 	bhi.w	800436e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	2b01      	cmp	r3, #1
 8004192:	d123      	bne.n	80041dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f001 f9b9 	bl	8005510 <I2C_WaitOnRXNEFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e139      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041da:	e10b      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d14e      	bne.n	8004282 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	2200      	movs	r2, #0
 80041ec:	4906      	ldr	r1, [pc, #24]	; (8004208 <HAL_I2C_Master_Receive+0x22c>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f001 f836 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e10e      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
 80041fe:	bf00      	nop
 8004200:	00100002 	.word	0x00100002
 8004204:	ffff0000 	.word	0xffff0000
 8004208:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004280:	e0b8      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	2200      	movs	r2, #0
 800428a:	4966      	ldr	r1, [pc, #408]	; (8004424 <HAL_I2C_Master_Receive+0x448>)
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 ffe7 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0bf      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	2200      	movs	r2, #0
 80042e6:	494f      	ldr	r1, [pc, #316]	; (8004424 <HAL_I2C_Master_Receive+0x448>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 ffb9 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e091      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800436c:	e042      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f001 f8cc 	bl	8005510 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e04c      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d118      	bne.n	80043f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f47f aec2 	bne.w	8004182 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800441a:	2302      	movs	r3, #2
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010004 	.word	0x00010004

08004428 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	461a      	mov	r2, r3
 8004436:	4603      	mov	r3, r0
 8004438:	817b      	strh	r3, [r7, #10]
 800443a:	460b      	mov	r3, r1
 800443c:	813b      	strh	r3, [r7, #8]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004442:	f7fe fd2f 	bl	8002ea4 <HAL_GetTick>
 8004446:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b20      	cmp	r3, #32
 8004452:	f040 80d9 	bne.w	8004608 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2319      	movs	r3, #25
 800445c:	2201      	movs	r2, #1
 800445e:	496d      	ldr	r1, [pc, #436]	; (8004614 <HAL_I2C_Mem_Write+0x1ec>)
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fefd 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800446c:	2302      	movs	r3, #2
 800446e:	e0cc      	b.n	800460a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_I2C_Mem_Write+0x56>
 800447a:	2302      	movs	r3, #2
 800447c:	e0c5      	b.n	800460a <HAL_I2C_Mem_Write+0x1e2>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d007      	beq.n	80044a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2221      	movs	r2, #33	; 0x21
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2240      	movs	r2, #64	; 0x40
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a4d      	ldr	r2, [pc, #308]	; (8004618 <HAL_I2C_Mem_Write+0x1f0>)
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044e6:	88f8      	ldrh	r0, [r7, #6]
 80044e8:	893a      	ldrh	r2, [r7, #8]
 80044ea:	8979      	ldrh	r1, [r7, #10]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	4603      	mov	r3, r0
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fd34 	bl	8004f64 <I2C_RequestMemoryWrite>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d052      	beq.n	80045a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e081      	b.n	800460a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 ff7e 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b04      	cmp	r3, #4
 800451c:	d107      	bne.n	800452e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e06b      	b.n	800460a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	781a      	ldrb	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d11b      	bne.n	80045a8 <HAL_I2C_Mem_Write+0x180>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004574:	2b00      	cmp	r3, #0
 8004576:	d017      	beq.n	80045a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1aa      	bne.n	8004506 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 ff6a 	bl	800548e <I2C_WaitOnBTFFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00d      	beq.n	80045dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d107      	bne.n	80045d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e016      	b.n	800460a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e000      	b.n	800460a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
  }
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	00100002 	.word	0x00100002
 8004618:	ffff0000 	.word	0xffff0000

0800461c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	4608      	mov	r0, r1
 8004626:	4611      	mov	r1, r2
 8004628:	461a      	mov	r2, r3
 800462a:	4603      	mov	r3, r0
 800462c:	817b      	strh	r3, [r7, #10]
 800462e:	460b      	mov	r3, r1
 8004630:	813b      	strh	r3, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004636:	f7fe fc35 	bl	8002ea4 <HAL_GetTick>
 800463a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b20      	cmp	r3, #32
 8004646:	f040 8208 	bne.w	8004a5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	2319      	movs	r3, #25
 8004650:	2201      	movs	r2, #1
 8004652:	497b      	ldr	r1, [pc, #492]	; (8004840 <HAL_I2C_Mem_Read+0x224>)
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fe03 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
 8004662:	e1fb      	b.n	8004a5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_I2C_Mem_Read+0x56>
 800466e:	2302      	movs	r3, #2
 8004670:	e1f4      	b.n	8004a5c <HAL_I2C_Mem_Read+0x440>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d007      	beq.n	8004698 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2222      	movs	r2, #34	; 0x22
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2240      	movs	r2, #64	; 0x40
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a5b      	ldr	r2, [pc, #364]	; (8004844 <HAL_I2C_Mem_Read+0x228>)
 80046d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046da:	88f8      	ldrh	r0, [r7, #6]
 80046dc:	893a      	ldrh	r2, [r7, #8]
 80046de:	8979      	ldrh	r1, [r7, #10]
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	4603      	mov	r3, r0
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 fcd0 	bl	8005090 <I2C_RequestMemoryRead>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e1b0      	b.n	8004a5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d113      	bne.n	800472a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004702:	2300      	movs	r3, #0
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	623b      	str	r3, [r7, #32]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	623b      	str	r3, [r7, #32]
 8004716:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	e184      	b.n	8004a34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	2b01      	cmp	r3, #1
 8004730:	d11b      	bne.n	800476a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004740:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e164      	b.n	8004a34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	2b02      	cmp	r3, #2
 8004770:	d11b      	bne.n	80047aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004780:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004790:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	e144      	b.n	8004a34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047c0:	e138      	b.n	8004a34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	f200 80f1 	bhi.w	80049ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d123      	bne.n	800481c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fe99 	bl	8005510 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e139      	b.n	8004a5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	855a      	strh	r2, [r3, #42]	; 0x2a
 800481a:	e10b      	b.n	8004a34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	2b02      	cmp	r3, #2
 8004822:	d14e      	bne.n	80048c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	2200      	movs	r2, #0
 800482c:	4906      	ldr	r1, [pc, #24]	; (8004848 <HAL_I2C_Mem_Read+0x22c>)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fd16 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e10e      	b.n	8004a5c <HAL_I2C_Mem_Read+0x440>
 800483e:	bf00      	nop
 8004840:	00100002 	.word	0x00100002
 8004844:	ffff0000 	.word	0xffff0000
 8004848:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048c0:	e0b8      	b.n	8004a34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2200      	movs	r2, #0
 80048ca:	4966      	ldr	r1, [pc, #408]	; (8004a64 <HAL_I2C_Mem_Read+0x448>)
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fcc7 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0bf      	b.n	8004a5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2200      	movs	r2, #0
 8004926:	494f      	ldr	r1, [pc, #316]	; (8004a64 <HAL_I2C_Mem_Read+0x448>)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fc99 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e091      	b.n	8004a5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049ac:	e042      	b.n	8004a34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fdac 	bl	8005510 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e04c      	b.n	8004a5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d118      	bne.n	8004a34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f47f aec2 	bne.w	80047c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	00010004 	.word	0x00010004

08004a68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	460b      	mov	r3, r1
 8004a76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004a78:	f7fe fa14 	bl	8002ea4 <HAL_GetTick>
 8004a7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	f040 8111 	bne.w	8004cb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	2319      	movs	r3, #25
 8004a96:	2201      	movs	r2, #1
 8004a98:	4988      	ldr	r1, [pc, #544]	; (8004cbc <HAL_I2C_IsDeviceReady+0x254>)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fbe0 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e104      	b.n	8004cb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_I2C_IsDeviceReady+0x50>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e0fd      	b.n	8004cb4 <HAL_I2C_IsDeviceReady+0x24c>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d007      	beq.n	8004ade <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2224      	movs	r2, #36	; 0x24
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4a70      	ldr	r2, [pc, #448]	; (8004cc0 <HAL_I2C_IsDeviceReady+0x258>)
 8004b00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fb9e 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b38:	d103      	bne.n	8004b42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e0b6      	b.n	8004cb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b46:	897b      	ldrh	r3, [r7, #10]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004b56:	f7fe f9a5 	bl	8002ea4 <HAL_GetTick>
 8004b5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	bf0c      	ite	eq
 8004b6a:	2301      	moveq	r3, #1
 8004b6c:	2300      	movne	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b80:	bf0c      	ite	eq
 8004b82:	2301      	moveq	r3, #1
 8004b84:	2300      	movne	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b8a:	e025      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b8c:	f7fe f98a 	bl	8002ea4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d302      	bcc.n	8004ba2 <HAL_I2C_IsDeviceReady+0x13a>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	22a0      	movs	r2, #160	; 0xa0
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2ba0      	cmp	r3, #160	; 0xa0
 8004be2:	d005      	beq.n	8004bf0 <HAL_I2C_IsDeviceReady+0x188>
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <HAL_I2C_IsDeviceReady+0x188>
 8004bea:	7dbb      	ldrb	r3, [r7, #22]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0cd      	beq.n	8004b8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d129      	bne.n	8004c5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2319      	movs	r3, #25
 8004c32:	2201      	movs	r2, #1
 8004c34:	4921      	ldr	r1, [pc, #132]	; (8004cbc <HAL_I2C_IsDeviceReady+0x254>)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fb12 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e036      	b.n	8004cb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e02c      	b.n	8004cb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2319      	movs	r3, #25
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	490f      	ldr	r1, [pc, #60]	; (8004cbc <HAL_I2C_IsDeviceReady+0x254>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 faee 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e012      	b.n	8004cb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	3301      	adds	r3, #1
 8004c92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	f4ff af32 	bcc.w	8004b02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
  }
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	00100002 	.word	0x00100002
 8004cc0:	ffff0000 	.word	0xffff0000

08004cc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d006      	beq.n	8004cee <I2C_MasterRequestWrite+0x2a>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d003      	beq.n	8004cee <I2C_MasterRequestWrite+0x2a>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cec:	d108      	bne.n	8004d00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e00b      	b.n	8004d18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	2b12      	cmp	r3, #18
 8004d06:	d107      	bne.n	8004d18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fa9b 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00d      	beq.n	8004d4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3e:	d103      	bne.n	8004d48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e035      	b.n	8004db8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d54:	d108      	bne.n	8004d68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d56:	897b      	ldrh	r3, [r7, #10]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d64:	611a      	str	r2, [r3, #16]
 8004d66:	e01b      	b.n	8004da0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d68:	897b      	ldrh	r3, [r7, #10]
 8004d6a:	11db      	asrs	r3, r3, #7
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0306 	and.w	r3, r3, #6
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f063 030f 	orn	r3, r3, #15
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	490e      	ldr	r1, [pc, #56]	; (8004dc0 <I2C_MasterRequestWrite+0xfc>)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fac1 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e010      	b.n	8004db8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d96:	897b      	ldrh	r3, [r7, #10]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4907      	ldr	r1, [pc, #28]	; (8004dc4 <I2C_MasterRequestWrite+0x100>)
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fab1 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	00010008 	.word	0x00010008
 8004dc4:	00010002 	.word	0x00010002

08004dc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d006      	beq.n	8004e02 <I2C_MasterRequestRead+0x3a>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d003      	beq.n	8004e02 <I2C_MasterRequestRead+0x3a>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e00:	d108      	bne.n	8004e14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e00b      	b.n	8004e2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	2b11      	cmp	r3, #17
 8004e1a:	d107      	bne.n	8004e2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fa11 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e52:	d103      	bne.n	8004e5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e079      	b.n	8004f54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e68:	d108      	bne.n	8004e7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e6a:	897b      	ldrh	r3, [r7, #10]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	611a      	str	r2, [r3, #16]
 8004e7a:	e05f      	b.n	8004f3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e7c:	897b      	ldrh	r3, [r7, #10]
 8004e7e:	11db      	asrs	r3, r3, #7
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f003 0306 	and.w	r3, r3, #6
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f063 030f 	orn	r3, r3, #15
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4930      	ldr	r1, [pc, #192]	; (8004f5c <I2C_MasterRequestRead+0x194>)
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fa37 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e054      	b.n	8004f54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004eaa:	897b      	ldrh	r3, [r7, #10]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4929      	ldr	r1, [pc, #164]	; (8004f60 <I2C_MasterRequestRead+0x198>)
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fa27 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e044      	b.n	8004f54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f9af 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00d      	beq.n	8004f24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f16:	d103      	bne.n	8004f20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e017      	b.n	8004f54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f24:	897b      	ldrh	r3, [r7, #10]
 8004f26:	11db      	asrs	r3, r3, #7
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f003 0306 	and.w	r3, r3, #6
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f063 030e 	orn	r3, r3, #14
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4907      	ldr	r1, [pc, #28]	; (8004f60 <I2C_MasterRequestRead+0x198>)
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f9e3 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	00010008 	.word	0x00010008
 8004f60:	00010002 	.word	0x00010002

08004f64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	461a      	mov	r2, r3
 8004f72:	4603      	mov	r3, r0
 8004f74:	817b      	strh	r3, [r7, #10]
 8004f76:	460b      	mov	r3, r1
 8004f78:	813b      	strh	r3, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f960 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb4:	d103      	bne.n	8004fbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e05f      	b.n	8005082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fc2:	897b      	ldrh	r3, [r7, #10]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	6a3a      	ldr	r2, [r7, #32]
 8004fd6:	492d      	ldr	r1, [pc, #180]	; (800508c <I2C_RequestMemoryWrite+0x128>)
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f998 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e04c      	b.n	8005082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005000:	6a39      	ldr	r1, [r7, #32]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fa02 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00d      	beq.n	800502a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b04      	cmp	r3, #4
 8005014:	d107      	bne.n	8005026 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e02b      	b.n	8005082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d105      	bne.n	800503c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005030:	893b      	ldrh	r3, [r7, #8]
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	611a      	str	r2, [r3, #16]
 800503a:	e021      	b.n	8005080 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800503c:	893b      	ldrh	r3, [r7, #8]
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	b29b      	uxth	r3, r3
 8005042:	b2da      	uxtb	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504c:	6a39      	ldr	r1, [r7, #32]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f9dc 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00d      	beq.n	8005076 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	2b04      	cmp	r3, #4
 8005060:	d107      	bne.n	8005072 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e005      	b.n	8005082 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005076:	893b      	ldrh	r3, [r7, #8]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	00010002 	.word	0x00010002

08005090 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	817b      	strh	r3, [r7, #10]
 80050a2:	460b      	mov	r3, r1
 80050a4:	813b      	strh	r3, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f8c2 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f0:	d103      	bne.n	80050fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e0aa      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050fe:	897b      	ldrh	r3, [r7, #10]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800510c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	6a3a      	ldr	r2, [r7, #32]
 8005112:	4952      	ldr	r1, [pc, #328]	; (800525c <I2C_RequestMemoryRead+0x1cc>)
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f8fa 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e097      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513c:	6a39      	ldr	r1, [r7, #32]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f964 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2b04      	cmp	r3, #4
 8005150:	d107      	bne.n	8005162 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e076      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d105      	bne.n	8005178 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800516c:	893b      	ldrh	r3, [r7, #8]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]
 8005176:	e021      	b.n	80051bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005178:	893b      	ldrh	r3, [r7, #8]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	b29b      	uxth	r3, r3
 800517e:	b2da      	uxtb	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005188:	6a39      	ldr	r1, [r7, #32]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f93e 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00d      	beq.n	80051b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b04      	cmp	r3, #4
 800519c:	d107      	bne.n	80051ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e050      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b2:	893b      	ldrh	r3, [r7, #8]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051be:	6a39      	ldr	r1, [r7, #32]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f923 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00d      	beq.n	80051e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d107      	bne.n	80051e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e035      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	2200      	movs	r2, #0
 8005200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f82b 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00d      	beq.n	800522c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521e:	d103      	bne.n	8005228 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e013      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800522c:	897b      	ldrh	r3, [r7, #10]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	6a3a      	ldr	r2, [r7, #32]
 8005240:	4906      	ldr	r1, [pc, #24]	; (800525c <I2C_RequestMemoryRead+0x1cc>)
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f863 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	00010002 	.word	0x00010002

08005260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005270:	e025      	b.n	80052be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d021      	beq.n	80052be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7fd fe13 	bl	8002ea4 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <I2C_WaitOnFlagUntilTimeout+0x30>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d116      	bne.n	80052be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e023      	b.n	8005306 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d10d      	bne.n	80052e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	43da      	mvns	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4013      	ands	r3, r2
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bf0c      	ite	eq
 80052da:	2301      	moveq	r3, #1
 80052dc:	2300      	movne	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	e00c      	b.n	80052fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	43da      	mvns	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4013      	ands	r3, r2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bf0c      	ite	eq
 80052f6:	2301      	moveq	r3, #1
 80052f8:	2300      	movne	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	429a      	cmp	r2, r3
 8005302:	d0b6      	beq.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800531c:	e051      	b.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532c:	d123      	bne.n	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005346:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e046      	b.n	8005404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d021      	beq.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fd fd91 	bl	8002ea4 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d116      	bne.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e020      	b.n	8005404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10c      	bne.n	80053e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	43da      	mvns	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf14      	ite	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	e00b      	b.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	43da      	mvns	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d18d      	bne.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005418:	e02d      	b.n	8005476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f8ce 	bl	80055bc <I2C_IsAcknowledgeFailed>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e02d      	b.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d021      	beq.n	8005476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005432:	f7fd fd37 	bl	8002ea4 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d116      	bne.n	8005476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e007      	b.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d1ca      	bne.n	800541a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800549a:	e02d      	b.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f88d 	bl	80055bc <I2C_IsAcknowledgeFailed>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e02d      	b.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b2:	d021      	beq.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b4:	f7fd fcf6 	bl	8002ea4 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d302      	bcc.n	80054ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d116      	bne.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e007      	b.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b04      	cmp	r3, #4
 8005504:	d1ca      	bne.n	800549c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800551c:	e042      	b.n	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b10      	cmp	r3, #16
 800552a:	d119      	bne.n	8005560 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0210 	mvn.w	r2, #16
 8005534:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e029      	b.n	80055b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005560:	f7fd fca0 	bl	8002ea4 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	429a      	cmp	r2, r3
 800556e:	d302      	bcc.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d116      	bne.n	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e007      	b.n	80055b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d1b5      	bne.n	800551e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d2:	d11b      	bne.n	800560c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	f043 0204 	orr.w	r2, r3, #4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e267      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d075      	beq.n	8005726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800563a:	4b88      	ldr	r3, [pc, #544]	; (800585c <HAL_RCC_OscConfig+0x240>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b04      	cmp	r3, #4
 8005644:	d00c      	beq.n	8005660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005646:	4b85      	ldr	r3, [pc, #532]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800564e:	2b08      	cmp	r3, #8
 8005650:	d112      	bne.n	8005678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005652:	4b82      	ldr	r3, [pc, #520]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565e:	d10b      	bne.n	8005678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005660:	4b7e      	ldr	r3, [pc, #504]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d05b      	beq.n	8005724 <HAL_RCC_OscConfig+0x108>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d157      	bne.n	8005724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e242      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005680:	d106      	bne.n	8005690 <HAL_RCC_OscConfig+0x74>
 8005682:	4b76      	ldr	r3, [pc, #472]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a75      	ldr	r2, [pc, #468]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	e01d      	b.n	80056cc <HAL_RCC_OscConfig+0xb0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005698:	d10c      	bne.n	80056b4 <HAL_RCC_OscConfig+0x98>
 800569a:	4b70      	ldr	r3, [pc, #448]	; (800585c <HAL_RCC_OscConfig+0x240>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a6f      	ldr	r2, [pc, #444]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80056a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	4b6d      	ldr	r3, [pc, #436]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a6c      	ldr	r2, [pc, #432]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80056ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	e00b      	b.n	80056cc <HAL_RCC_OscConfig+0xb0>
 80056b4:	4b69      	ldr	r3, [pc, #420]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a68      	ldr	r2, [pc, #416]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80056ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	4b66      	ldr	r3, [pc, #408]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a65      	ldr	r2, [pc, #404]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80056c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d013      	beq.n	80056fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fd fbe6 	bl	8002ea4 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056dc:	f7fd fbe2 	bl	8002ea4 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b64      	cmp	r3, #100	; 0x64
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e207      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ee:	4b5b      	ldr	r3, [pc, #364]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0xc0>
 80056fa:	e014      	b.n	8005726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fc:	f7fd fbd2 	bl	8002ea4 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005704:	f7fd fbce 	bl	8002ea4 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b64      	cmp	r3, #100	; 0x64
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e1f3      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005716:	4b51      	ldr	r3, [pc, #324]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0xe8>
 8005722:	e000      	b.n	8005726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d063      	beq.n	80057fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005732:	4b4a      	ldr	r3, [pc, #296]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800573e:	4b47      	ldr	r3, [pc, #284]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005746:	2b08      	cmp	r3, #8
 8005748:	d11c      	bne.n	8005784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800574a:	4b44      	ldr	r3, [pc, #272]	; (800585c <HAL_RCC_OscConfig+0x240>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d116      	bne.n	8005784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005756:	4b41      	ldr	r3, [pc, #260]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_RCC_OscConfig+0x152>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d001      	beq.n	800576e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e1c7      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576e:	4b3b      	ldr	r3, [pc, #236]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4937      	ldr	r1, [pc, #220]	; (800585c <HAL_RCC_OscConfig+0x240>)
 800577e:	4313      	orrs	r3, r2
 8005780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005782:	e03a      	b.n	80057fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d020      	beq.n	80057ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800578c:	4b34      	ldr	r3, [pc, #208]	; (8005860 <HAL_RCC_OscConfig+0x244>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005792:	f7fd fb87 	bl	8002ea4 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800579a:	f7fd fb83 	bl	8002ea4 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e1a8      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ac:	4b2b      	ldr	r3, [pc, #172]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b8:	4b28      	ldr	r3, [pc, #160]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4925      	ldr	r1, [pc, #148]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	600b      	str	r3, [r1, #0]
 80057cc:	e015      	b.n	80057fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ce:	4b24      	ldr	r3, [pc, #144]	; (8005860 <HAL_RCC_OscConfig+0x244>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d4:	f7fd fb66 	bl	8002ea4 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057dc:	f7fd fb62 	bl	8002ea4 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e187      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ee:	4b1b      	ldr	r3, [pc, #108]	; (800585c <HAL_RCC_OscConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d036      	beq.n	8005874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d016      	beq.n	800583c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800580e:	4b15      	ldr	r3, [pc, #84]	; (8005864 <HAL_RCC_OscConfig+0x248>)
 8005810:	2201      	movs	r2, #1
 8005812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005814:	f7fd fb46 	bl	8002ea4 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800581c:	f7fd fb42 	bl	8002ea4 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e167      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582e:	4b0b      	ldr	r3, [pc, #44]	; (800585c <HAL_RCC_OscConfig+0x240>)
 8005830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0x200>
 800583a:	e01b      	b.n	8005874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_RCC_OscConfig+0x248>)
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005842:	f7fd fb2f 	bl	8002ea4 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005848:	e00e      	b.n	8005868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800584a:	f7fd fb2b 	bl	8002ea4 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d907      	bls.n	8005868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e150      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
 800585c:	40023800 	.word	0x40023800
 8005860:	42470000 	.word	0x42470000
 8005864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005868:	4b88      	ldr	r3, [pc, #544]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 800586a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1ea      	bne.n	800584a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 8097 	beq.w	80059b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005886:	4b81      	ldr	r3, [pc, #516]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10f      	bne.n	80058b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	4b7d      	ldr	r3, [pc, #500]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a7c      	ldr	r2, [pc, #496]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40
 80058a2:	4b7a      	ldr	r3, [pc, #488]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058aa:	60bb      	str	r3, [r7, #8]
 80058ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b2:	4b77      	ldr	r3, [pc, #476]	; (8005a90 <HAL_RCC_OscConfig+0x474>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d118      	bne.n	80058f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058be:	4b74      	ldr	r3, [pc, #464]	; (8005a90 <HAL_RCC_OscConfig+0x474>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a73      	ldr	r2, [pc, #460]	; (8005a90 <HAL_RCC_OscConfig+0x474>)
 80058c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ca:	f7fd faeb 	bl	8002ea4 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d2:	f7fd fae7 	bl	8002ea4 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e10c      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	4b6a      	ldr	r3, [pc, #424]	; (8005a90 <HAL_RCC_OscConfig+0x474>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d106      	bne.n	8005906 <HAL_RCC_OscConfig+0x2ea>
 80058f8:	4b64      	ldr	r3, [pc, #400]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fc:	4a63      	ldr	r2, [pc, #396]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	6713      	str	r3, [r2, #112]	; 0x70
 8005904:	e01c      	b.n	8005940 <HAL_RCC_OscConfig+0x324>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b05      	cmp	r3, #5
 800590c:	d10c      	bne.n	8005928 <HAL_RCC_OscConfig+0x30c>
 800590e:	4b5f      	ldr	r3, [pc, #380]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	4a5e      	ldr	r2, [pc, #376]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005914:	f043 0304 	orr.w	r3, r3, #4
 8005918:	6713      	str	r3, [r2, #112]	; 0x70
 800591a:	4b5c      	ldr	r3, [pc, #368]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	4a5b      	ldr	r2, [pc, #364]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	6713      	str	r3, [r2, #112]	; 0x70
 8005926:	e00b      	b.n	8005940 <HAL_RCC_OscConfig+0x324>
 8005928:	4b58      	ldr	r3, [pc, #352]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 800592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592c:	4a57      	ldr	r2, [pc, #348]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	6713      	str	r3, [r2, #112]	; 0x70
 8005934:	4b55      	ldr	r3, [pc, #340]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	4a54      	ldr	r2, [pc, #336]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 800593a:	f023 0304 	bic.w	r3, r3, #4
 800593e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d015      	beq.n	8005974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005948:	f7fd faac 	bl	8002ea4 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594e:	e00a      	b.n	8005966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005950:	f7fd faa8 	bl	8002ea4 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	; 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e0cb      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005966:	4b49      	ldr	r3, [pc, #292]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0ee      	beq.n	8005950 <HAL_RCC_OscConfig+0x334>
 8005972:	e014      	b.n	800599e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005974:	f7fd fa96 	bl	8002ea4 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597a:	e00a      	b.n	8005992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597c:	f7fd fa92 	bl	8002ea4 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f241 3288 	movw	r2, #5000	; 0x1388
 800598a:	4293      	cmp	r3, r2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e0b5      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005992:	4b3e      	ldr	r3, [pc, #248]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1ee      	bne.n	800597c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d105      	bne.n	80059b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a4:	4b39      	ldr	r3, [pc, #228]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	4a38      	ldr	r2, [pc, #224]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 80059aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80a1 	beq.w	8005afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ba:	4b34      	ldr	r3, [pc, #208]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d05c      	beq.n	8005a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d141      	bne.n	8005a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ce:	4b31      	ldr	r3, [pc, #196]	; (8005a94 <HAL_RCC_OscConfig+0x478>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d4:	f7fd fa66 	bl	8002ea4 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fd fa62 	bl	8002ea4 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e087      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ee:	4b27      	ldr	r3, [pc, #156]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69da      	ldr	r2, [r3, #28]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	3b01      	subs	r3, #1
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	061b      	lsls	r3, r3, #24
 8005a1e:	491b      	ldr	r1, [pc, #108]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a24:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <HAL_RCC_OscConfig+0x478>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2a:	f7fd fa3b 	bl	8002ea4 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a32:	f7fd fa37 	bl	8002ea4 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e05c      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a44:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0f0      	beq.n	8005a32 <HAL_RCC_OscConfig+0x416>
 8005a50:	e054      	b.n	8005afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a52:	4b10      	ldr	r3, [pc, #64]	; (8005a94 <HAL_RCC_OscConfig+0x478>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fd fa24 	bl	8002ea4 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a60:	f7fd fa20 	bl	8002ea4 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e045      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a72:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <HAL_RCC_OscConfig+0x470>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x444>
 8005a7e:	e03d      	b.n	8005afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d107      	bne.n	8005a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e038      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40007000 	.word	0x40007000
 8005a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a98:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_RCC_OscConfig+0x4ec>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d028      	beq.n	8005af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d121      	bne.n	8005af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d11a      	bne.n	8005af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ac8:	4013      	ands	r3, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d111      	bne.n	8005af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d107      	bne.n	8005af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40023800 	.word	0x40023800

08005b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0cc      	b.n	8005cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b20:	4b68      	ldr	r3, [pc, #416]	; (8005cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d90c      	bls.n	8005b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2e:	4b65      	ldr	r3, [pc, #404]	; (8005cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b36:	4b63      	ldr	r3, [pc, #396]	; (8005cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0b8      	b.n	8005cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d020      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b60:	4b59      	ldr	r3, [pc, #356]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	4a58      	ldr	r2, [pc, #352]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b78:	4b53      	ldr	r3, [pc, #332]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	4a52      	ldr	r2, [pc, #328]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b84:	4b50      	ldr	r3, [pc, #320]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	494d      	ldr	r1, [pc, #308]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d044      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d107      	bne.n	8005bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005baa:	4b47      	ldr	r3, [pc, #284]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d119      	bne.n	8005bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e07f      	b.n	8005cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d003      	beq.n	8005bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bca:	4b3f      	ldr	r3, [pc, #252]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e06f      	b.n	8005cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bda:	4b3b      	ldr	r3, [pc, #236]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e067      	b.n	8005cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bea:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f023 0203 	bic.w	r2, r3, #3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4934      	ldr	r1, [pc, #208]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bfc:	f7fd f952 	bl	8002ea4 <HAL_GetTick>
 8005c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c02:	e00a      	b.n	8005c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c04:	f7fd f94e 	bl	8002ea4 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e04f      	b.n	8005cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1a:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 020c 	and.w	r2, r3, #12
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d1eb      	bne.n	8005c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d20c      	bcs.n	8005c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c42:	4b20      	ldr	r3, [pc, #128]	; (8005cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e032      	b.n	8005cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c60:	4b19      	ldr	r3, [pc, #100]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4916      	ldr	r1, [pc, #88]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	490e      	ldr	r1, [pc, #56]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c92:	f000 f821 	bl	8005cd8 <HAL_RCC_GetSysClockFreq>
 8005c96:	4602      	mov	r2, r0
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	490a      	ldr	r1, [pc, #40]	; (8005ccc <HAL_RCC_ClockConfig+0x1c0>)
 8005ca4:	5ccb      	ldrb	r3, [r1, r3]
 8005ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cae:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fc ff6c 	bl	8002b90 <HAL_InitTick>

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40023c00 	.word	0x40023c00
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	0800bedc 	.word	0x0800bedc
 8005cd0:	20000030 	.word	0x20000030
 8005cd4:	20000034 	.word	0x20000034

08005cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cdc:	b090      	sub	sp, #64	; 0x40
 8005cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce8:	2300      	movs	r3, #0
 8005cea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cf0:	4b59      	ldr	r3, [pc, #356]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d00d      	beq.n	8005d18 <HAL_RCC_GetSysClockFreq+0x40>
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	f200 80a1 	bhi.w	8005e44 <HAL_RCC_GetSysClockFreq+0x16c>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_RCC_GetSysClockFreq+0x34>
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d003      	beq.n	8005d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d0a:	e09b      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d0c:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8005d0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005d10:	e09b      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d12:	4b53      	ldr	r3, [pc, #332]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d16:	e098      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d18:	4b4f      	ldr	r3, [pc, #316]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d22:	4b4d      	ldr	r3, [pc, #308]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d028      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d2e:	4b4a      	ldr	r3, [pc, #296]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	099b      	lsrs	r3, r3, #6
 8005d34:	2200      	movs	r2, #0
 8005d36:	623b      	str	r3, [r7, #32]
 8005d38:	627a      	str	r2, [r7, #36]	; 0x24
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005d40:	2100      	movs	r1, #0
 8005d42:	4b47      	ldr	r3, [pc, #284]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d44:	fb03 f201 	mul.w	r2, r3, r1
 8005d48:	2300      	movs	r3, #0
 8005d4a:	fb00 f303 	mul.w	r3, r0, r3
 8005d4e:	4413      	add	r3, r2
 8005d50:	4a43      	ldr	r2, [pc, #268]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d52:	fba0 1202 	umull	r1, r2, r0, r2
 8005d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d58:	460a      	mov	r2, r1
 8005d5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d5e:	4413      	add	r3, r2
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	2200      	movs	r2, #0
 8005d66:	61bb      	str	r3, [r7, #24]
 8005d68:	61fa      	str	r2, [r7, #28]
 8005d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d72:	f7fa fe23 	bl	80009bc <__aeabi_uldivmod>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7e:	e053      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d80:	4b35      	ldr	r3, [pc, #212]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	2200      	movs	r2, #0
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	617a      	str	r2, [r7, #20]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d92:	f04f 0b00 	mov.w	fp, #0
 8005d96:	4652      	mov	r2, sl
 8005d98:	465b      	mov	r3, fp
 8005d9a:	f04f 0000 	mov.w	r0, #0
 8005d9e:	f04f 0100 	mov.w	r1, #0
 8005da2:	0159      	lsls	r1, r3, #5
 8005da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da8:	0150      	lsls	r0, r2, #5
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	ebb2 080a 	subs.w	r8, r2, sl
 8005db2:	eb63 090b 	sbc.w	r9, r3, fp
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005dc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005dc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005dca:	ebb2 0408 	subs.w	r4, r2, r8
 8005dce:	eb63 0509 	sbc.w	r5, r3, r9
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	00eb      	lsls	r3, r5, #3
 8005ddc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005de0:	00e2      	lsls	r2, r4, #3
 8005de2:	4614      	mov	r4, r2
 8005de4:	461d      	mov	r5, r3
 8005de6:	eb14 030a 	adds.w	r3, r4, sl
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	eb45 030b 	adc.w	r3, r5, fp
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dfe:	4629      	mov	r1, r5
 8005e00:	028b      	lsls	r3, r1, #10
 8005e02:	4621      	mov	r1, r4
 8005e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e08:	4621      	mov	r1, r4
 8005e0a:	028a      	lsls	r2, r1, #10
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	2200      	movs	r2, #0
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	60fa      	str	r2, [r7, #12]
 8005e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e1c:	f7fa fdce 	bl	80009bc <__aeabi_uldivmod>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4613      	mov	r3, r2
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e28:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	0c1b      	lsrs	r3, r3, #16
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	3301      	adds	r3, #1
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e42:	e002      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8005e46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3740      	adds	r7, #64	; 0x40
 8005e50:	46bd      	mov	sp, r7
 8005e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e56:	bf00      	nop
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	017d7840 	.word	0x017d7840

08005e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e68:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	20000030 	.word	0x20000030

08005e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e80:	f7ff fff0 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0a9b      	lsrs	r3, r3, #10
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4903      	ldr	r1, [pc, #12]	; (8005ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	0800beec 	.word	0x0800beec

08005ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ea8:	f7ff ffdc 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	0b5b      	lsrs	r3, r3, #13
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	4903      	ldr	r1, [pc, #12]	; (8005ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eba:	5ccb      	ldrb	r3, [r1, r3]
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	0800beec 	.word	0x0800beec

08005ecc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	220f      	movs	r2, #15
 8005eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005edc:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <HAL_RCC_GetClockConfig+0x5c>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0203 	and.w	r2, r3, #3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ee8:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <HAL_RCC_GetClockConfig+0x5c>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <HAL_RCC_GetClockConfig+0x5c>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <HAL_RCC_GetClockConfig+0x5c>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	08db      	lsrs	r3, r3, #3
 8005f06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f0e:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <HAL_RCC_GetClockConfig+0x60>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0207 	and.w	r2, r3, #7
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	601a      	str	r2, [r3, #0]
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	40023c00 	.word	0x40023c00

08005f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e07b      	b.n	800603a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d108      	bne.n	8005f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f52:	d009      	beq.n	8005f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	61da      	str	r2, [r3, #28]
 8005f5a:	e005      	b.n	8005f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fc fd24 	bl	80029d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fec:	ea42 0103 	orr.w	r1, r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	f003 0104 	and.w	r1, r3, #4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	f003 0210 	and.w	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e041      	b.n	80060d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d106      	bne.n	800606e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7fc fcf9 	bl	8002a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f000 fbf5 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d001      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e044      	b.n	8006182 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <HAL_TIM_Base_Start_IT+0xb0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d018      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x6c>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006122:	d013      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x6c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <HAL_TIM_Base_Start_IT+0xb4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00e      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x6c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a19      	ldr	r2, [pc, #100]	; (8006198 <HAL_TIM_Base_Start_IT+0xb8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d009      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x6c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a17      	ldr	r2, [pc, #92]	; (800619c <HAL_TIM_Base_Start_IT+0xbc>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d004      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x6c>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d111      	bne.n	8006170 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b06      	cmp	r3, #6
 800615c:	d010      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0201 	orr.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616e:	e007      	b.n	8006180 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00
 80061a0:	40014000 	.word	0x40014000

080061a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e041      	b.n	800623a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f839 	bl	8006242 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f000 fb44 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d122      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d11b      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f06f 0202 	mvn.w	r2, #2
 8006282:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fa78 	bl	800678e <HAL_TIM_IC_CaptureCallback>
 800629e:	e005      	b.n	80062ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fa6a 	bl	800677a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa7b 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d122      	bne.n	8006306 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d11b      	bne.n	8006306 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f06f 0204 	mvn.w	r2, #4
 80062d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fa4e 	bl	800678e <HAL_TIM_IC_CaptureCallback>
 80062f2:	e005      	b.n	8006300 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fa40 	bl	800677a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa51 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b08      	cmp	r3, #8
 8006312:	d122      	bne.n	800635a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b08      	cmp	r3, #8
 8006320:	d11b      	bne.n	800635a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f06f 0208 	mvn.w	r2, #8
 800632a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2204      	movs	r2, #4
 8006330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fa24 	bl	800678e <HAL_TIM_IC_CaptureCallback>
 8006346:	e005      	b.n	8006354 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa16 	bl	800677a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa27 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b10      	cmp	r3, #16
 8006366:	d122      	bne.n	80063ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b10      	cmp	r3, #16
 8006374:	d11b      	bne.n	80063ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f06f 0210 	mvn.w	r2, #16
 800637e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2208      	movs	r2, #8
 8006384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f9fa 	bl	800678e <HAL_TIM_IC_CaptureCallback>
 800639a:	e005      	b.n	80063a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f9ec 	bl	800677a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f9fd 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d10e      	bne.n	80063da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d107      	bne.n	80063da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f06f 0201 	mvn.w	r2, #1
 80063d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fc fa6f 	bl	80028b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e4:	2b80      	cmp	r3, #128	; 0x80
 80063e6:	d10e      	bne.n	8006406 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f2:	2b80      	cmp	r3, #128	; 0x80
 80063f4:	d107      	bne.n	8006406 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fd79 	bl	8006ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d10e      	bne.n	8006432 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b40      	cmp	r3, #64	; 0x40
 8006420:	d107      	bne.n	8006432 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800642a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f9c2 	bl	80067b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b20      	cmp	r3, #32
 800643e:	d10e      	bne.n	800645e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b20      	cmp	r3, #32
 800644c:	d107      	bne.n	800645e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f06f 0220 	mvn.w	r2, #32
 8006456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fd43 	bl	8006ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006482:	2302      	movs	r3, #2
 8006484:	e0ae      	b.n	80065e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b0c      	cmp	r3, #12
 8006492:	f200 809f 	bhi.w	80065d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080065d5 	.word	0x080065d5
 80064a4:	080065d5 	.word	0x080065d5
 80064a8:	080065d5 	.word	0x080065d5
 80064ac:	08006511 	.word	0x08006511
 80064b0:	080065d5 	.word	0x080065d5
 80064b4:	080065d5 	.word	0x080065d5
 80064b8:	080065d5 	.word	0x080065d5
 80064bc:	08006553 	.word	0x08006553
 80064c0:	080065d5 	.word	0x080065d5
 80064c4:	080065d5 	.word	0x080065d5
 80064c8:	080065d5 	.word	0x080065d5
 80064cc:	08006593 	.word	0x08006593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fa4a 	bl	8006970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0208 	orr.w	r2, r2, #8
 80064ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0204 	bic.w	r2, r2, #4
 80064fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6999      	ldr	r1, [r3, #24]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	619a      	str	r2, [r3, #24]
      break;
 800650e:	e064      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fa90 	bl	8006a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6999      	ldr	r1, [r3, #24]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	619a      	str	r2, [r3, #24]
      break;
 8006550:	e043      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fadb 	bl	8006b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0208 	orr.w	r2, r2, #8
 800656c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0204 	bic.w	r2, r2, #4
 800657c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69d9      	ldr	r1, [r3, #28]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	61da      	str	r2, [r3, #28]
      break;
 8006590:	e023      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fb25 	bl	8006be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69d9      	ldr	r1, [r3, #28]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	021a      	lsls	r2, r3, #8
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	61da      	str	r2, [r3, #28]
      break;
 80065d2:	e002      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_TIM_ConfigClockSource+0x1c>
 8006604:	2302      	movs	r3, #2
 8006606:	e0b4      	b.n	8006772 <HAL_TIM_ConfigClockSource+0x186>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006640:	d03e      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	f200 8087 	bhi.w	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	f000 8086 	beq.w	800675e <HAL_TIM_ConfigClockSource+0x172>
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006656:	d87f      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b70      	cmp	r3, #112	; 0x70
 800665a:	d01a      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0xa6>
 800665c:	2b70      	cmp	r3, #112	; 0x70
 800665e:	d87b      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b60      	cmp	r3, #96	; 0x60
 8006662:	d050      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x11a>
 8006664:	2b60      	cmp	r3, #96	; 0x60
 8006666:	d877      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b50      	cmp	r3, #80	; 0x50
 800666a:	d03c      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0xfa>
 800666c:	2b50      	cmp	r3, #80	; 0x50
 800666e:	d873      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d058      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x13a>
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d86f      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d064      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b30      	cmp	r3, #48	; 0x30
 800667e:	d86b      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d060      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 8006684:	2b20      	cmp	r3, #32
 8006686:	d867      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d05c      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 800668c:	2b10      	cmp	r3, #16
 800668e:	d05a      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 8006690:	e062      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6899      	ldr	r1, [r3, #8]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f000 fb6b 	bl	8006d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	609a      	str	r2, [r3, #8]
      break;
 80066be:	e04f      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6899      	ldr	r1, [r3, #8]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f000 fb54 	bl	8006d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066e2:	609a      	str	r2, [r3, #8]
      break;
 80066e4:	e03c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6859      	ldr	r1, [r3, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f000 fac8 	bl	8006c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2150      	movs	r1, #80	; 0x50
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fb21 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 8006704:	e02c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	6859      	ldr	r1, [r3, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	461a      	mov	r2, r3
 8006714:	f000 fae7 	bl	8006ce6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2160      	movs	r1, #96	; 0x60
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fb11 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 8006724:	e01c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6859      	ldr	r1, [r3, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	461a      	mov	r2, r3
 8006734:	f000 faa8 	bl	8006c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2140      	movs	r1, #64	; 0x40
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fb01 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 8006744:	e00c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f000 faf8 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 8006756:	e003      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
      break;
 800675c:	e000      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800675e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d107      	bne.n	8006806 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006804:	e02a      	b.n	800685c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d107      	bne.n	8006820 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2202      	movs	r2, #2
 8006814:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800681e:	e01d      	b.n	800685c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	d107      	bne.n	800683a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2204      	movs	r2, #4
 800682e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006838:	e010      	b.n	800685c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d107      	bne.n	8006854 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2208      	movs	r2, #8
 8006848:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006852:	e003      	b.n	800685c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff ffb4 	bl	80067ca <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	771a      	strb	r2, [r3, #28]
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a34      	ldr	r2, [pc, #208]	; (8006954 <TIM_Base_SetConfig+0xe4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00f      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688e:	d00b      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a31      	ldr	r2, [pc, #196]	; (8006958 <TIM_Base_SetConfig+0xe8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a30      	ldr	r2, [pc, #192]	; (800695c <TIM_Base_SetConfig+0xec>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a2f      	ldr	r2, [pc, #188]	; (8006960 <TIM_Base_SetConfig+0xf0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d108      	bne.n	80068ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a25      	ldr	r2, [pc, #148]	; (8006954 <TIM_Base_SetConfig+0xe4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01b      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d017      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a22      	ldr	r2, [pc, #136]	; (8006958 <TIM_Base_SetConfig+0xe8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a21      	ldr	r2, [pc, #132]	; (800695c <TIM_Base_SetConfig+0xec>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00f      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a20      	ldr	r2, [pc, #128]	; (8006960 <TIM_Base_SetConfig+0xf0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00b      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a1f      	ldr	r2, [pc, #124]	; (8006964 <TIM_Base_SetConfig+0xf4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d007      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a1e      	ldr	r2, [pc, #120]	; (8006968 <TIM_Base_SetConfig+0xf8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d003      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a1d      	ldr	r2, [pc, #116]	; (800696c <TIM_Base_SetConfig+0xfc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d108      	bne.n	800690c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a08      	ldr	r2, [pc, #32]	; (8006954 <TIM_Base_SetConfig+0xe4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d103      	bne.n	8006940 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	615a      	str	r2, [r3, #20]
}
 8006946:	bf00      	nop
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40010000 	.word	0x40010000
 8006958:	40000400 	.word	0x40000400
 800695c:	40000800 	.word	0x40000800
 8006960:	40000c00 	.word	0x40000c00
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0201 	bic.w	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f023 0302 	bic.w	r3, r3, #2
 80069b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <TIM_OC1_SetConfig+0xc8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d10c      	bne.n	80069e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 0308 	bic.w	r3, r3, #8
 80069d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f023 0304 	bic.w	r3, r3, #4
 80069e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a13      	ldr	r2, [pc, #76]	; (8006a38 <TIM_OC1_SetConfig+0xc8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d111      	bne.n	8006a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	621a      	str	r2, [r3, #32]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	40010000 	.word	0x40010000

08006a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0210 	bic.w	r2, r3, #16
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 0320 	bic.w	r3, r3, #32
 8006a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <TIM_OC2_SetConfig+0xd4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d10d      	bne.n	8006ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <TIM_OC2_SetConfig+0xd4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d113      	bne.n	8006ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40010000 	.word	0x40010000

08006b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <TIM_OC3_SetConfig+0xd0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10d      	bne.n	8006b8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <TIM_OC3_SetConfig+0xd0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d113      	bne.n	8006bbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	40010000 	.word	0x40010000

08006be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	031b      	lsls	r3, r3, #12
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a10      	ldr	r2, [pc, #64]	; (8006c84 <TIM_OC4_SetConfig+0x9c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d109      	bne.n	8006c5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	019b      	lsls	r3, r3, #6
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000

08006c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f023 0201 	bic.w	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f023 030a 	bic.w	r3, r3, #10
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b087      	sub	sp, #28
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0210 	bic.w	r2, r3, #16
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b085      	sub	sp, #20
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f043 0307 	orr.w	r3, r3, #7
 8006d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	609a      	str	r2, [r3, #8]
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	609a      	str	r2, [r3, #8]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	2201      	movs	r2, #1
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a1a      	ldr	r2, [r3, #32]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	43db      	mvns	r3, r3
 8006dde:	401a      	ands	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	fa01 f303 	lsl.w	r3, r1, r3
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e050      	b.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d018      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6c:	d013      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00e      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a16      	ldr	r2, [pc, #88]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a15      	ldr	r2, [pc, #84]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a13      	ldr	r2, [pc, #76]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d10c      	bne.n	8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40000400 	.word	0x40000400
 8006ed8:	40000800 	.word	0x40000800
 8006edc:	40000c00 	.word	0x40000c00
 8006ee0:	40014000 	.word	0x40014000

08006ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <__NVIC_SetPriority>:
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	6039      	str	r1, [r7, #0]
 8006f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	db0a      	blt.n	8006f36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	490c      	ldr	r1, [pc, #48]	; (8006f58 <__NVIC_SetPriority+0x4c>)
 8006f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2a:	0112      	lsls	r2, r2, #4
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	440b      	add	r3, r1
 8006f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f34:	e00a      	b.n	8006f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	4908      	ldr	r1, [pc, #32]	; (8006f5c <__NVIC_SetPriority+0x50>)
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	3b04      	subs	r3, #4
 8006f44:	0112      	lsls	r2, r2, #4
 8006f46:	b2d2      	uxtb	r2, r2
 8006f48:	440b      	add	r3, r1
 8006f4a:	761a      	strb	r2, [r3, #24]
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	e000e100 	.word	0xe000e100
 8006f5c:	e000ed00 	.word	0xe000ed00

08006f60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f64:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <SysTick_Handler+0x1c>)
 8006f66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f68:	f001 fd28 	bl	80089bc <xTaskGetSchedulerState>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d001      	beq.n	8006f76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006f72:	f002 fb11 	bl	8009598 <xPortSysTickHandler>
  }
}
 8006f76:	bf00      	nop
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	e000e010 	.word	0xe000e010

08006f80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f84:	2100      	movs	r1, #0
 8006f86:	f06f 0004 	mvn.w	r0, #4
 8006f8a:	f7ff ffbf 	bl	8006f0c <__NVIC_SetPriority>
#endif
}
 8006f8e:	bf00      	nop
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f9a:	f3ef 8305 	mrs	r3, IPSR
 8006f9e:	603b      	str	r3, [r7, #0]
  return(result);
 8006fa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006fa6:	f06f 0305 	mvn.w	r3, #5
 8006faa:	607b      	str	r3, [r7, #4]
 8006fac:	e00c      	b.n	8006fc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <osKernelInitialize+0x44>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d105      	bne.n	8006fc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006fb6:	4b08      	ldr	r3, [pc, #32]	; (8006fd8 <osKernelInitialize+0x44>)
 8006fb8:	2201      	movs	r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	e002      	b.n	8006fc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fc8:	687b      	ldr	r3, [r7, #4]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	2000075c 	.word	0x2000075c

08006fdc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fe2:	f3ef 8305 	mrs	r3, IPSR
 8006fe6:	603b      	str	r3, [r7, #0]
  return(result);
 8006fe8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006fee:	f06f 0305 	mvn.w	r3, #5
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	e010      	b.n	8007018 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <osKernelStart+0x48>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d109      	bne.n	8007012 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ffe:	f7ff ffbf 	bl	8006f80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007002:	4b08      	ldr	r3, [pc, #32]	; (8007024 <osKernelStart+0x48>)
 8007004:	2202      	movs	r2, #2
 8007006:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007008:	f001 f87c 	bl	8008104 <vTaskStartScheduler>
      stat = osOK;
 800700c:	2300      	movs	r3, #0
 800700e:	607b      	str	r3, [r7, #4]
 8007010:	e002      	b.n	8007018 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007012:	f04f 33ff 	mov.w	r3, #4294967295
 8007016:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007018:	687b      	ldr	r3, [r7, #4]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	2000075c 	.word	0x2000075c

08007028 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007028:	b580      	push	{r7, lr}
 800702a:	b08e      	sub	sp, #56	; 0x38
 800702c:	af04      	add	r7, sp, #16
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007038:	f3ef 8305 	mrs	r3, IPSR
 800703c:	617b      	str	r3, [r7, #20]
  return(result);
 800703e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007040:	2b00      	cmp	r3, #0
 8007042:	d17e      	bne.n	8007142 <osThreadNew+0x11a>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d07b      	beq.n	8007142 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800704e:	2318      	movs	r3, #24
 8007050:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007052:	2300      	movs	r3, #0
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007056:	f04f 33ff 	mov.w	r3, #4294967295
 800705a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d045      	beq.n	80070ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <osThreadNew+0x48>
        name = attr->name;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <osThreadNew+0x6e>
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b38      	cmp	r3, #56	; 0x38
 8007088:	d805      	bhi.n	8007096 <osThreadNew+0x6e>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <osThreadNew+0x72>
        return (NULL);
 8007096:	2300      	movs	r3, #0
 8007098:	e054      	b.n	8007144 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	089b      	lsrs	r3, r3, #2
 80070a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <osThreadNew+0xa8>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	2bbb      	cmp	r3, #187	; 0xbb
 80070b8:	d90a      	bls.n	80070d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d006      	beq.n	80070d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <osThreadNew+0xa8>
        mem = 1;
 80070ca:	2301      	movs	r3, #1
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	e010      	b.n	80070f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10c      	bne.n	80070f2 <osThreadNew+0xca>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d108      	bne.n	80070f2 <osThreadNew+0xca>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <osThreadNew+0xca>
          mem = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	e001      	b.n	80070f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d110      	bne.n	800711a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007100:	9202      	str	r2, [sp, #8]
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fe0c 	bl	8007d2c <xTaskCreateStatic>
 8007114:	4603      	mov	r3, r0
 8007116:	613b      	str	r3, [r7, #16]
 8007118:	e013      	b.n	8007142 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d110      	bne.n	8007142 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	b29a      	uxth	r2, r3
 8007124:	f107 0310 	add.w	r3, r7, #16
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fe57 	bl	8007de6 <xTaskCreate>
 8007138:	4603      	mov	r3, r0
 800713a:	2b01      	cmp	r3, #1
 800713c:	d001      	beq.n	8007142 <osThreadNew+0x11a>
            hTask = NULL;
 800713e:	2300      	movs	r3, #0
 8007140:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007142:	693b      	ldr	r3, [r7, #16]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3728      	adds	r7, #40	; 0x28
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007154:	f3ef 8305 	mrs	r3, IPSR
 8007158:	60bb      	str	r3, [r7, #8]
  return(result);
 800715a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <osDelay+0x1c>
    stat = osErrorISR;
 8007160:	f06f 0305 	mvn.w	r3, #5
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	e007      	b.n	8007178 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 ff92 	bl	800809c <vTaskDelay>
    }
  }

  return (stat);
 8007178:	68fb      	ldr	r3, [r7, #12]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4a07      	ldr	r2, [pc, #28]	; (80071b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007194:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	4a06      	ldr	r2, [pc, #24]	; (80071b4 <vApplicationGetIdleTaskMemory+0x30>)
 800719a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2280      	movs	r2, #128	; 0x80
 80071a0:	601a      	str	r2, [r3, #0]
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000760 	.word	0x20000760
 80071b4:	2000081c 	.word	0x2000081c

080071b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a07      	ldr	r2, [pc, #28]	; (80071e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80071c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4a06      	ldr	r2, [pc, #24]	; (80071e8 <vApplicationGetTimerTaskMemory+0x30>)
 80071ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071d6:	601a      	str	r2, [r3, #0]
}
 80071d8:	bf00      	nop
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	20000a1c 	.word	0x20000a1c
 80071e8:	20000ad8 	.word	0x20000ad8

080071ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f103 0208 	add.w	r2, r3, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f04f 32ff 	mov.w	r2, #4294967295
 8007204:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f103 0208 	add.w	r2, r3, #8
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f103 0208 	add.w	r2, r3, #8
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800723a:	bf00      	nop
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800728e:	b480      	push	{r7}
 8007290:	b085      	sub	sp, #20
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d103      	bne.n	80072ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e00c      	b.n	80072c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3308      	adds	r3, #8
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	e002      	b.n	80072bc <vListInsert+0x2e>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d2f6      	bcs.n	80072b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	601a      	str	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6892      	ldr	r2, [r2, #8]
 8007316:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6852      	ldr	r2, [r2, #4]
 8007320:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	429a      	cmp	r2, r3
 800732a:	d103      	bne.n	8007334 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	1e5a      	subs	r2, r3, #1
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800737e:	f002 f879 	bl	8009474 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800738e:	fb01 f303 	mul.w	r3, r1, r3
 8007392:	441a      	add	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ae:	3b01      	subs	r3, #1
 80073b0:	68f9      	ldr	r1, [r7, #12]
 80073b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	441a      	add	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	22ff      	movs	r2, #255	; 0xff
 80073c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	22ff      	movs	r2, #255	; 0xff
 80073ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d114      	bne.n	80073fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01a      	beq.n	8007412 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3310      	adds	r3, #16
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 f929 	bl	8008638 <xTaskRemoveFromEventList>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d012      	beq.n	8007412 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <xQueueGenericReset+0xcc>)
 80073ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	e009      	b.n	8007412 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3310      	adds	r3, #16
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff fef2 	bl	80071ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff feed 	bl	80071ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007412:	f002 f85f 	bl	80094d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007416:	2301      	movs	r3, #1
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08e      	sub	sp, #56	; 0x38
 8007428:	af02      	add	r7, sp, #8
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <xQueueGenericCreateStatic+0x52>
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <xQueueGenericCreateStatic+0x56>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <xQueueGenericCreateStatic+0x58>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	623b      	str	r3, [r7, #32]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <xQueueGenericCreateStatic+0x7e>
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <xQueueGenericCreateStatic+0x82>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <xQueueGenericCreateStatic+0x84>
 80074a6:	2300      	movs	r3, #0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	61fb      	str	r3, [r7, #28]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074c2:	2350      	movs	r3, #80	; 0x50
 80074c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b50      	cmp	r3, #80	; 0x50
 80074ca:	d00a      	beq.n	80074e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	61bb      	str	r3, [r7, #24]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00d      	beq.n	800750a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	4613      	mov	r3, r2
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f805 	bl	8007514 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800750c:	4618      	mov	r0, r3
 800750e:	3730      	adds	r7, #48	; 0x30
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	e002      	b.n	8007536 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007542:	2101      	movs	r1, #1
 8007544:	69b8      	ldr	r0, [r7, #24]
 8007546:	f7ff ff05 	bl	8007354 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	78fa      	ldrb	r2, [r7, #3]
 800754e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08e      	sub	sp, #56	; 0x38
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800756a:	2300      	movs	r3, #0
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <xQueueGenericSend+0x32>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <xQueueGenericSend+0x40>
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <xQueueGenericSend+0x44>
 800759c:	2301      	movs	r3, #1
 800759e:	e000      	b.n	80075a2 <xQueueGenericSend+0x46>
 80075a0:	2300      	movs	r3, #0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <xQueueGenericSend+0x60>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075b8:	bf00      	nop
 80075ba:	e7fe      	b.n	80075ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d103      	bne.n	80075ca <xQueueGenericSend+0x6e>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <xQueueGenericSend+0x72>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e000      	b.n	80075d0 <xQueueGenericSend+0x74>
 80075ce:	2300      	movs	r3, #0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <xQueueGenericSend+0x8e>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	623b      	str	r3, [r7, #32]
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075ea:	f001 f9e7 	bl	80089bc <xTaskGetSchedulerState>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <xQueueGenericSend+0x9e>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <xQueueGenericSend+0xa2>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <xQueueGenericSend+0xa4>
 80075fe:	2300      	movs	r3, #0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xQueueGenericSend+0xbe>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	61fb      	str	r3, [r7, #28]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800761a:	f001 ff2b 	bl	8009474 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007626:	429a      	cmp	r2, r3
 8007628:	d302      	bcc.n	8007630 <xQueueGenericSend+0xd4>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d129      	bne.n	8007684 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007636:	f000 fa0b 	bl	8007a50 <prvCopyDataToQueue>
 800763a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	d010      	beq.n	8007666 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	3324      	adds	r3, #36	; 0x24
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fff5 	bl	8008638 <xTaskRemoveFromEventList>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d013      	beq.n	800767c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007654:	4b3f      	ldr	r3, [pc, #252]	; (8007754 <xQueueGenericSend+0x1f8>)
 8007656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	e00a      	b.n	800767c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800766c:	4b39      	ldr	r3, [pc, #228]	; (8007754 <xQueueGenericSend+0x1f8>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800767c:	f001 ff2a 	bl	80094d4 <vPortExitCritical>
				return pdPASS;
 8007680:	2301      	movs	r3, #1
 8007682:	e063      	b.n	800774c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d103      	bne.n	8007692 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800768a:	f001 ff23 	bl	80094d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800768e:	2300      	movs	r3, #0
 8007690:	e05c      	b.n	800774c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007694:	2b00      	cmp	r3, #0
 8007696:	d106      	bne.n	80076a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007698:	f107 0314 	add.w	r3, r7, #20
 800769c:	4618      	mov	r0, r3
 800769e:	f001 f82f 	bl	8008700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076a6:	f001 ff15 	bl	80094d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076aa:	f000 fd9b 	bl	80081e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076ae:	f001 fee1 	bl	8009474 <vPortEnterCritical>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076b8:	b25b      	sxtb	r3, r3
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076be:	d103      	bne.n	80076c8 <xQueueGenericSend+0x16c>
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ce:	b25b      	sxtb	r3, r3
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d103      	bne.n	80076de <xQueueGenericSend+0x182>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076de:	f001 fef9 	bl	80094d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076e2:	1d3a      	adds	r2, r7, #4
 80076e4:	f107 0314 	add.w	r3, r7, #20
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 f81e 	bl	800872c <xTaskCheckForTimeOut>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d124      	bne.n	8007740 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076f8:	f000 faa2 	bl	8007c40 <prvIsQueueFull>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d018      	beq.n	8007734 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	3310      	adds	r3, #16
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f000 ff44 	bl	8008598 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007712:	f000 fa2d 	bl	8007b70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007716:	f000 fd73 	bl	8008200 <xTaskResumeAll>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	f47f af7c 	bne.w	800761a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007722:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <xQueueGenericSend+0x1f8>)
 8007724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	e772      	b.n	800761a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007736:	f000 fa1b 	bl	8007b70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800773a:	f000 fd61 	bl	8008200 <xTaskResumeAll>
 800773e:	e76c      	b.n	800761a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007742:	f000 fa15 	bl	8007b70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007746:	f000 fd5b 	bl	8008200 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800774a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800774c:	4618      	mov	r0, r3
 800774e:	3738      	adds	r7, #56	; 0x38
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	e000ed04 	.word	0xe000ed04

08007758 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b090      	sub	sp, #64	; 0x40
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d103      	bne.n	8007794 <xQueueGenericSendFromISR+0x3c>
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <xQueueGenericSendFromISR+0x40>
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <xQueueGenericSendFromISR+0x42>
 8007798:	2300      	movs	r3, #0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d103      	bne.n	80077c2 <xQueueGenericSendFromISR+0x6a>
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <xQueueGenericSendFromISR+0x6e>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <xQueueGenericSendFromISR+0x70>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	623b      	str	r3, [r7, #32]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077e2:	f001 ff29 	bl	8009638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077e6:	f3ef 8211 	mrs	r2, BASEPRI
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	61fa      	str	r2, [r7, #28]
 80077fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780a:	429a      	cmp	r2, r3
 800780c:	d302      	bcc.n	8007814 <xQueueGenericSendFromISR+0xbc>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b02      	cmp	r3, #2
 8007812:	d12f      	bne.n	8007874 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800782a:	f000 f911 	bl	8007a50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800782e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007836:	d112      	bne.n	800785e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d016      	beq.n	800786e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	3324      	adds	r3, #36	; 0x24
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fef7 	bl	8008638 <xTaskRemoveFromEventList>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00e      	beq.n	800786e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e007      	b.n	800786e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800785e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007862:	3301      	adds	r3, #1
 8007864:	b2db      	uxtb	r3, r3
 8007866:	b25a      	sxtb	r2, r3
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800786e:	2301      	movs	r3, #1
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007872:	e001      	b.n	8007878 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007874:	2300      	movs	r3, #0
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007882:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007886:	4618      	mov	r0, r3
 8007888:	3740      	adds	r7, #64	; 0x40
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	; 0x30
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800789c:	2300      	movs	r3, #0
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <xQueueReceive+0x30>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	623b      	str	r3, [r7, #32]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d103      	bne.n	80078ce <xQueueReceive+0x3e>
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <xQueueReceive+0x42>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <xQueueReceive+0x44>
 80078d2:	2300      	movs	r3, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <xQueueReceive+0x5e>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	61fb      	str	r3, [r7, #28]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078ee:	f001 f865 	bl	80089bc <xTaskGetSchedulerState>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <xQueueReceive+0x6e>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <xQueueReceive+0x72>
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <xQueueReceive+0x74>
 8007902:	2300      	movs	r3, #0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <xQueueReceive+0x8e>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	61bb      	str	r3, [r7, #24]
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800791e:	f001 fda9 	bl	8009474 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01f      	beq.n	800796e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800792e:	68b9      	ldr	r1, [r7, #8]
 8007930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007932:	f000 f8f7 	bl	8007b24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	1e5a      	subs	r2, r3, #1
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00f      	beq.n	8007966 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	3310      	adds	r3, #16
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fe74 	bl	8008638 <xTaskRemoveFromEventList>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007956:	4b3d      	ldr	r3, [pc, #244]	; (8007a4c <xQueueReceive+0x1bc>)
 8007958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007966:	f001 fdb5 	bl	80094d4 <vPortExitCritical>
				return pdPASS;
 800796a:	2301      	movs	r3, #1
 800796c:	e069      	b.n	8007a42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d103      	bne.n	800797c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007974:	f001 fdae 	bl	80094d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007978:	2300      	movs	r3, #0
 800797a:	e062      	b.n	8007a42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	2b00      	cmp	r3, #0
 8007980:	d106      	bne.n	8007990 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007982:	f107 0310 	add.w	r3, r7, #16
 8007986:	4618      	mov	r0, r3
 8007988:	f000 feba 	bl	8008700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800798c:	2301      	movs	r3, #1
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007990:	f001 fda0 	bl	80094d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007994:	f000 fc26 	bl	80081e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007998:	f001 fd6c 	bl	8009474 <vPortEnterCritical>
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d103      	bne.n	80079b2 <xQueueReceive+0x122>
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b8:	b25b      	sxtb	r3, r3
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d103      	bne.n	80079c8 <xQueueReceive+0x138>
 80079c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c8:	f001 fd84 	bl	80094d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079cc:	1d3a      	adds	r2, r7, #4
 80079ce:	f107 0310 	add.w	r3, r7, #16
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fea9 	bl	800872c <xTaskCheckForTimeOut>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d123      	bne.n	8007a28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079e2:	f000 f917 	bl	8007c14 <prvIsQueueEmpty>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d017      	beq.n	8007a1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	3324      	adds	r3, #36	; 0x24
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 fdcf 	bl	8008598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079fc:	f000 f8b8 	bl	8007b70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a00:	f000 fbfe 	bl	8008200 <xTaskResumeAll>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d189      	bne.n	800791e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007a0a:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <xQueueReceive+0x1bc>)
 8007a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	e780      	b.n	800791e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a1e:	f000 f8a7 	bl	8007b70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a22:	f000 fbed 	bl	8008200 <xTaskResumeAll>
 8007a26:	e77a      	b.n	800791e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a2a:	f000 f8a1 	bl	8007b70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a2e:	f000 fbe7 	bl	8008200 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a34:	f000 f8ee 	bl	8007c14 <prvIsQueueEmpty>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f43f af6f 	beq.w	800791e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3730      	adds	r7, #48	; 0x30
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d14d      	bne.n	8007b12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 ffbc 	bl	80089f8 <xTaskPriorityDisinherit>
 8007a80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	609a      	str	r2, [r3, #8]
 8007a88:	e043      	b.n	8007b12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d119      	bne.n	8007ac4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6858      	ldr	r0, [r3, #4]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a98:	461a      	mov	r2, r3
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	f002 f844 	bl	8009b28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa8:	441a      	add	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d32b      	bcc.n	8007b12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	605a      	str	r2, [r3, #4]
 8007ac2:	e026      	b.n	8007b12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	68d8      	ldr	r0, [r3, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	461a      	mov	r2, r3
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	f002 f82a 	bl	8009b28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	425b      	negs	r3, r3
 8007ade:	441a      	add	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d207      	bcs.n	8007b00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af8:	425b      	negs	r3, r3
 8007afa:	441a      	add	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d105      	bne.n	8007b12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b1a:	697b      	ldr	r3, [r7, #20]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d018      	beq.n	8007b68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	441a      	add	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d303      	bcc.n	8007b58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68d9      	ldr	r1, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	461a      	mov	r2, r3
 8007b62:	6838      	ldr	r0, [r7, #0]
 8007b64:	f001 ffe0 	bl	8009b28 <memcpy>
	}
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b78:	f001 fc7c 	bl	8009474 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b84:	e011      	b.n	8007baa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d012      	beq.n	8007bb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3324      	adds	r3, #36	; 0x24
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fd50 	bl	8008638 <xTaskRemoveFromEventList>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b9e:	f000 fe27 	bl	80087f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dce9      	bgt.n	8007b86 <prvUnlockQueue+0x16>
 8007bb2:	e000      	b.n	8007bb6 <prvUnlockQueue+0x46>
					break;
 8007bb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	22ff      	movs	r2, #255	; 0xff
 8007bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007bbe:	f001 fc89 	bl	80094d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007bc2:	f001 fc57 	bl	8009474 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bce:	e011      	b.n	8007bf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d012      	beq.n	8007bfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3310      	adds	r3, #16
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fd2b 	bl	8008638 <xTaskRemoveFromEventList>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007be8:	f000 fe02 	bl	80087f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	dce9      	bgt.n	8007bd0 <prvUnlockQueue+0x60>
 8007bfc:	e000      	b.n	8007c00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	22ff      	movs	r2, #255	; 0xff
 8007c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c08:	f001 fc64 	bl	80094d4 <vPortExitCritical>
}
 8007c0c:	bf00      	nop
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c1c:	f001 fc2a 	bl	8009474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e001      	b.n	8007c32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c32:	f001 fc4f 	bl	80094d4 <vPortExitCritical>

	return xReturn;
 8007c36:	68fb      	ldr	r3, [r7, #12]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c48:	f001 fc14 	bl	8009474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d102      	bne.n	8007c5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	e001      	b.n	8007c62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c62:	f001 fc37 	bl	80094d4 <vPortExitCritical>

	return xReturn;
 8007c66:	68fb      	ldr	r3, [r7, #12]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	e014      	b.n	8007caa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c80:	4a0f      	ldr	r2, [pc, #60]	; (8007cc0 <vQueueAddToRegistry+0x50>)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c8c:	490c      	ldr	r1, [pc, #48]	; (8007cc0 <vQueueAddToRegistry+0x50>)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c96:	4a0a      	ldr	r2, [pc, #40]	; (8007cc0 <vQueueAddToRegistry+0x50>)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ca2:	e006      	b.n	8007cb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b07      	cmp	r3, #7
 8007cae:	d9e7      	bls.n	8007c80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	20000ed8 	.word	0x20000ed8

08007cc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007cd4:	f001 fbce 	bl	8009474 <vPortEnterCritical>
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cde:	b25b      	sxtb	r3, r3
 8007ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce4:	d103      	bne.n	8007cee <vQueueWaitForMessageRestricted+0x2a>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cf4:	b25b      	sxtb	r3, r3
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfa:	d103      	bne.n	8007d04 <vQueueWaitForMessageRestricted+0x40>
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d04:	f001 fbe6 	bl	80094d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	3324      	adds	r3, #36	; 0x24
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fc61 	bl	80085e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d1e:	6978      	ldr	r0, [r7, #20]
 8007d20:	f7ff ff26 	bl	8007b70 <prvUnlockQueue>
	}
 8007d24:	bf00      	nop
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08e      	sub	sp, #56	; 0x38
 8007d30:	af04      	add	r7, sp, #16
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	623b      	str	r3, [r7, #32]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <xTaskCreateStatic+0x46>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	61fb      	str	r3, [r7, #28]
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d72:	23bc      	movs	r3, #188	; 0xbc
 8007d74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	2bbc      	cmp	r3, #188	; 0xbc
 8007d7a:	d00a      	beq.n	8007d92 <xTaskCreateStatic+0x66>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	61bb      	str	r3, [r7, #24]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01e      	beq.n	8007dd8 <xTaskCreateStatic+0xac>
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01b      	beq.n	8007dd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	2202      	movs	r2, #2
 8007dae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007db2:	2300      	movs	r3, #0
 8007db4:	9303      	str	r3, [sp, #12]
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	9302      	str	r3, [sp, #8]
 8007dba:	f107 0314 	add.w	r3, r7, #20
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	68b9      	ldr	r1, [r7, #8]
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 f850 	bl	8007e70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dd2:	f000 f8f3 	bl	8007fbc <prvAddNewTaskToReadyList>
 8007dd6:	e001      	b.n	8007ddc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ddc:	697b      	ldr	r3, [r7, #20]
	}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3728      	adds	r7, #40	; 0x28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b08c      	sub	sp, #48	; 0x30
 8007dea:	af04      	add	r7, sp, #16
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	603b      	str	r3, [r7, #0]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007df6:	88fb      	ldrh	r3, [r7, #6]
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 fc5c 	bl	80096b8 <pvPortMalloc>
 8007e00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00e      	beq.n	8007e26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e08:	20bc      	movs	r0, #188	; 0xbc
 8007e0a:	f001 fc55 	bl	80096b8 <pvPortMalloc>
 8007e0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8007e1c:	e005      	b.n	8007e2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e1e:	6978      	ldr	r0, [r7, #20]
 8007e20:	f001 fd16 	bl	8009850 <vPortFree>
 8007e24:	e001      	b.n	8007e2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d017      	beq.n	8007e60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e38:	88fa      	ldrh	r2, [r7, #6]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9303      	str	r3, [sp, #12]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	9302      	str	r3, [sp, #8]
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 f80e 	bl	8007e70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e54:	69f8      	ldr	r0, [r7, #28]
 8007e56:	f000 f8b1 	bl	8007fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	e002      	b.n	8007e66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e60:	f04f 33ff 	mov.w	r3, #4294967295
 8007e64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e66:	69bb      	ldr	r3, [r7, #24]
	}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3720      	adds	r7, #32
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	461a      	mov	r2, r3
 8007e88:	21a5      	movs	r1, #165	; 0xa5
 8007e8a:	f001 fe5b 	bl	8009b44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f023 0307 	bic.w	r3, r3, #7
 8007ea6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	617b      	str	r3, [r7, #20]
}
 8007ec4:	bf00      	nop
 8007ec6:	e7fe      	b.n	8007ec6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01f      	beq.n	8007f0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61fb      	str	r3, [r7, #28]
 8007ed2:	e012      	b.n	8007efa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	7819      	ldrb	r1, [r3, #0]
 8007edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3334      	adds	r3, #52	; 0x34
 8007ee4:	460a      	mov	r2, r1
 8007ee6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	4413      	add	r3, r2
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d006      	beq.n	8007f02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	61fb      	str	r3, [r7, #28]
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	2b0f      	cmp	r3, #15
 8007efe:	d9e9      	bls.n	8007ed4 <prvInitialiseNewTask+0x64>
 8007f00:	e000      	b.n	8007f04 <prvInitialiseNewTask+0x94>
			{
				break;
 8007f02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f0c:	e003      	b.n	8007f16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	2b37      	cmp	r3, #55	; 0x37
 8007f1a:	d901      	bls.n	8007f20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f1c:	2337      	movs	r3, #55	; 0x37
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	2200      	movs	r2, #0
 8007f30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	3304      	adds	r3, #4
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff f978 	bl	800722c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	3318      	adds	r3, #24
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff f973 	bl	800722c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	3354      	adds	r3, #84	; 0x54
 8007f70:	2260      	movs	r2, #96	; 0x60
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f001 fde5 	bl	8009b44 <memset>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	4a0c      	ldr	r2, [pc, #48]	; (8007fb0 <prvInitialiseNewTask+0x140>)
 8007f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	4a0c      	ldr	r2, [pc, #48]	; (8007fb4 <prvInitialiseNewTask+0x144>)
 8007f84:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	4a0b      	ldr	r2, [pc, #44]	; (8007fb8 <prvInitialiseNewTask+0x148>)
 8007f8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	69b8      	ldr	r0, [r7, #24]
 8007f92:	f001 f941 	bl	8009218 <pxPortInitialiseStack>
 8007f96:	4602      	mov	r2, r0
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fa8:	bf00      	nop
 8007faa:	3720      	adds	r7, #32
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	0800bf64 	.word	0x0800bf64
 8007fb4:	0800bf84 	.word	0x0800bf84
 8007fb8:	0800bf44 	.word	0x0800bf44

08007fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fc4:	f001 fa56 	bl	8009474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fc8:	4b2d      	ldr	r3, [pc, #180]	; (8008080 <prvAddNewTaskToReadyList+0xc4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	4a2c      	ldr	r2, [pc, #176]	; (8008080 <prvAddNewTaskToReadyList+0xc4>)
 8007fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fd2:	4b2c      	ldr	r3, [pc, #176]	; (8008084 <prvAddNewTaskToReadyList+0xc8>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fda:	4a2a      	ldr	r2, [pc, #168]	; (8008084 <prvAddNewTaskToReadyList+0xc8>)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fe0:	4b27      	ldr	r3, [pc, #156]	; (8008080 <prvAddNewTaskToReadyList+0xc4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d110      	bne.n	800800a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fe8:	f000 fc26 	bl	8008838 <prvInitialiseTaskLists>
 8007fec:	e00d      	b.n	800800a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fee:	4b26      	ldr	r3, [pc, #152]	; (8008088 <prvAddNewTaskToReadyList+0xcc>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ff6:	4b23      	ldr	r3, [pc, #140]	; (8008084 <prvAddNewTaskToReadyList+0xc8>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	429a      	cmp	r2, r3
 8008002:	d802      	bhi.n	800800a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008004:	4a1f      	ldr	r2, [pc, #124]	; (8008084 <prvAddNewTaskToReadyList+0xc8>)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800800a:	4b20      	ldr	r3, [pc, #128]	; (800808c <prvAddNewTaskToReadyList+0xd0>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3301      	adds	r3, #1
 8008010:	4a1e      	ldr	r2, [pc, #120]	; (800808c <prvAddNewTaskToReadyList+0xd0>)
 8008012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008014:	4b1d      	ldr	r3, [pc, #116]	; (800808c <prvAddNewTaskToReadyList+0xd0>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4b1b      	ldr	r3, [pc, #108]	; (8008090 <prvAddNewTaskToReadyList+0xd4>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d903      	bls.n	8008030 <prvAddNewTaskToReadyList+0x74>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	4a18      	ldr	r2, [pc, #96]	; (8008090 <prvAddNewTaskToReadyList+0xd4>)
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4a15      	ldr	r2, [pc, #84]	; (8008094 <prvAddNewTaskToReadyList+0xd8>)
 800803e:	441a      	add	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f7ff f8fd 	bl	8007246 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800804c:	f001 fa42 	bl	80094d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008050:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <prvAddNewTaskToReadyList+0xcc>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00e      	beq.n	8008076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008058:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <prvAddNewTaskToReadyList+0xc8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	429a      	cmp	r2, r3
 8008064:	d207      	bcs.n	8008076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008066:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvAddNewTaskToReadyList+0xdc>)
 8008068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	200013ec 	.word	0x200013ec
 8008084:	20000f18 	.word	0x20000f18
 8008088:	200013f8 	.word	0x200013f8
 800808c:	20001408 	.word	0x20001408
 8008090:	200013f4 	.word	0x200013f4
 8008094:	20000f1c 	.word	0x20000f1c
 8008098:	e000ed04 	.word	0xe000ed04

0800809c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d017      	beq.n	80080de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080ae:	4b13      	ldr	r3, [pc, #76]	; (80080fc <vTaskDelay+0x60>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <vTaskDelay+0x30>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080cc:	f000 f88a 	bl	80081e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fcfe 	bl	8008ad4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080d8:	f000 f892 	bl	8008200 <xTaskResumeAll>
 80080dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d107      	bne.n	80080f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <vTaskDelay+0x64>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20001414 	.word	0x20001414
 8008100:	e000ed04 	.word	0xe000ed04

08008104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08a      	sub	sp, #40	; 0x28
 8008108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800810e:	2300      	movs	r3, #0
 8008110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008112:	463a      	mov	r2, r7
 8008114:	1d39      	adds	r1, r7, #4
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff f832 	bl	8007184 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	9202      	str	r2, [sp, #8]
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	2300      	movs	r3, #0
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	2300      	movs	r3, #0
 8008130:	460a      	mov	r2, r1
 8008132:	4924      	ldr	r1, [pc, #144]	; (80081c4 <vTaskStartScheduler+0xc0>)
 8008134:	4824      	ldr	r0, [pc, #144]	; (80081c8 <vTaskStartScheduler+0xc4>)
 8008136:	f7ff fdf9 	bl	8007d2c <xTaskCreateStatic>
 800813a:	4603      	mov	r3, r0
 800813c:	4a23      	ldr	r2, [pc, #140]	; (80081cc <vTaskStartScheduler+0xc8>)
 800813e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008140:	4b22      	ldr	r3, [pc, #136]	; (80081cc <vTaskStartScheduler+0xc8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008148:	2301      	movs	r3, #1
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e001      	b.n	8008152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d102      	bne.n	800815e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008158:	f000 fd10 	bl	8008b7c <xTimerCreateTimerTask>
 800815c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d11b      	bne.n	800819c <vTaskStartScheduler+0x98>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	613b      	str	r3, [r7, #16]
}
 8008176:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008178:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <vTaskStartScheduler+0xcc>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3354      	adds	r3, #84	; 0x54
 800817e:	4a15      	ldr	r2, [pc, #84]	; (80081d4 <vTaskStartScheduler+0xd0>)
 8008180:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008182:	4b15      	ldr	r3, [pc, #84]	; (80081d8 <vTaskStartScheduler+0xd4>)
 8008184:	f04f 32ff 	mov.w	r2, #4294967295
 8008188:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800818a:	4b14      	ldr	r3, [pc, #80]	; (80081dc <vTaskStartScheduler+0xd8>)
 800818c:	2201      	movs	r2, #1
 800818e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008190:	4b13      	ldr	r3, [pc, #76]	; (80081e0 <vTaskStartScheduler+0xdc>)
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008196:	f001 f8cb 	bl	8009330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800819a:	e00e      	b.n	80081ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a2:	d10a      	bne.n	80081ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	60fb      	str	r3, [r7, #12]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <vTaskStartScheduler+0xb4>
}
 80081ba:	bf00      	nop
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	08009f74 	.word	0x08009f74
 80081c8:	08008809 	.word	0x08008809
 80081cc:	20001410 	.word	0x20001410
 80081d0:	20000f18 	.word	0x20000f18
 80081d4:	20000040 	.word	0x20000040
 80081d8:	2000140c 	.word	0x2000140c
 80081dc:	200013f8 	.word	0x200013f8
 80081e0:	200013f0 	.word	0x200013f0

080081e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <vTaskSuspendAll+0x18>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3301      	adds	r3, #1
 80081ee:	4a03      	ldr	r2, [pc, #12]	; (80081fc <vTaskSuspendAll+0x18>)
 80081f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081f2:	bf00      	nop
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	20001414 	.word	0x20001414

08008200 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800820a:	2300      	movs	r3, #0
 800820c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800820e:	4b42      	ldr	r3, [pc, #264]	; (8008318 <xTaskResumeAll+0x118>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10a      	bne.n	800822c <xTaskResumeAll+0x2c>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	603b      	str	r3, [r7, #0]
}
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800822c:	f001 f922 	bl	8009474 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008230:	4b39      	ldr	r3, [pc, #228]	; (8008318 <xTaskResumeAll+0x118>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3b01      	subs	r3, #1
 8008236:	4a38      	ldr	r2, [pc, #224]	; (8008318 <xTaskResumeAll+0x118>)
 8008238:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800823a:	4b37      	ldr	r3, [pc, #220]	; (8008318 <xTaskResumeAll+0x118>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d162      	bne.n	8008308 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008242:	4b36      	ldr	r3, [pc, #216]	; (800831c <xTaskResumeAll+0x11c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d05e      	beq.n	8008308 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800824a:	e02f      	b.n	80082ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824c:	4b34      	ldr	r3, [pc, #208]	; (8008320 <xTaskResumeAll+0x120>)
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	3318      	adds	r3, #24
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff f851 	bl	8007300 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3304      	adds	r3, #4
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff f84c 	bl	8007300 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	4b2d      	ldr	r3, [pc, #180]	; (8008324 <xTaskResumeAll+0x124>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d903      	bls.n	800827c <xTaskResumeAll+0x7c>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	4a2a      	ldr	r2, [pc, #168]	; (8008324 <xTaskResumeAll+0x124>)
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4a27      	ldr	r2, [pc, #156]	; (8008328 <xTaskResumeAll+0x128>)
 800828a:	441a      	add	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fe ffd7 	bl	8007246 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829c:	4b23      	ldr	r3, [pc, #140]	; (800832c <xTaskResumeAll+0x12c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d302      	bcc.n	80082ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80082a6:	4b22      	ldr	r3, [pc, #136]	; (8008330 <xTaskResumeAll+0x130>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ac:	4b1c      	ldr	r3, [pc, #112]	; (8008320 <xTaskResumeAll+0x120>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1cb      	bne.n	800824c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082ba:	f000 fb5f 	bl	800897c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082be:	4b1d      	ldr	r3, [pc, #116]	; (8008334 <xTaskResumeAll+0x134>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d010      	beq.n	80082ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082ca:	f000 f847 	bl	800835c <xTaskIncrementTick>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80082d4:	4b16      	ldr	r3, [pc, #88]	; (8008330 <xTaskResumeAll+0x130>)
 80082d6:	2201      	movs	r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3b01      	subs	r3, #1
 80082de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1f1      	bne.n	80082ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80082e6:	4b13      	ldr	r3, [pc, #76]	; (8008334 <xTaskResumeAll+0x134>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082ec:	4b10      	ldr	r3, [pc, #64]	; (8008330 <xTaskResumeAll+0x130>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d009      	beq.n	8008308 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082f4:	2301      	movs	r3, #1
 80082f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082f8:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <xTaskResumeAll+0x138>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008308:	f001 f8e4 	bl	80094d4 <vPortExitCritical>

	return xAlreadyYielded;
 800830c:	68bb      	ldr	r3, [r7, #8]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20001414 	.word	0x20001414
 800831c:	200013ec 	.word	0x200013ec
 8008320:	200013ac 	.word	0x200013ac
 8008324:	200013f4 	.word	0x200013f4
 8008328:	20000f1c 	.word	0x20000f1c
 800832c:	20000f18 	.word	0x20000f18
 8008330:	20001400 	.word	0x20001400
 8008334:	200013fc 	.word	0x200013fc
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008342:	4b05      	ldr	r3, [pc, #20]	; (8008358 <xTaskGetTickCount+0x1c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008348:	687b      	ldr	r3, [r7, #4]
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	200013f0 	.word	0x200013f0

0800835c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008366:	4b4f      	ldr	r3, [pc, #316]	; (80084a4 <xTaskIncrementTick+0x148>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	f040 808f 	bne.w	800848e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008370:	4b4d      	ldr	r3, [pc, #308]	; (80084a8 <xTaskIncrementTick+0x14c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008378:	4a4b      	ldr	r2, [pc, #300]	; (80084a8 <xTaskIncrementTick+0x14c>)
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d120      	bne.n	80083c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008384:	4b49      	ldr	r3, [pc, #292]	; (80084ac <xTaskIncrementTick+0x150>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	603b      	str	r3, [r7, #0]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <xTaskIncrementTick+0x46>
 80083a4:	4b41      	ldr	r3, [pc, #260]	; (80084ac <xTaskIncrementTick+0x150>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	4b41      	ldr	r3, [pc, #260]	; (80084b0 <xTaskIncrementTick+0x154>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a3f      	ldr	r2, [pc, #252]	; (80084ac <xTaskIncrementTick+0x150>)
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	4a3f      	ldr	r2, [pc, #252]	; (80084b0 <xTaskIncrementTick+0x154>)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	4b3e      	ldr	r3, [pc, #248]	; (80084b4 <xTaskIncrementTick+0x158>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3301      	adds	r3, #1
 80083be:	4a3d      	ldr	r2, [pc, #244]	; (80084b4 <xTaskIncrementTick+0x158>)
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	f000 fadb 	bl	800897c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083c6:	4b3c      	ldr	r3, [pc, #240]	; (80084b8 <xTaskIncrementTick+0x15c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d349      	bcc.n	8008464 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083d0:	4b36      	ldr	r3, [pc, #216]	; (80084ac <xTaskIncrementTick+0x150>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d104      	bne.n	80083e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083da:	4b37      	ldr	r3, [pc, #220]	; (80084b8 <xTaskIncrementTick+0x15c>)
 80083dc:	f04f 32ff 	mov.w	r2, #4294967295
 80083e0:	601a      	str	r2, [r3, #0]
					break;
 80083e2:	e03f      	b.n	8008464 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e4:	4b31      	ldr	r3, [pc, #196]	; (80084ac <xTaskIncrementTick+0x150>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d203      	bcs.n	8008404 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083fc:	4a2e      	ldr	r2, [pc, #184]	; (80084b8 <xTaskIncrementTick+0x15c>)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008402:	e02f      	b.n	8008464 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3304      	adds	r3, #4
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe ff79 	bl	8007300 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008412:	2b00      	cmp	r3, #0
 8008414:	d004      	beq.n	8008420 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	3318      	adds	r3, #24
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe ff70 	bl	8007300 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008424:	4b25      	ldr	r3, [pc, #148]	; (80084bc <xTaskIncrementTick+0x160>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d903      	bls.n	8008434 <xTaskIncrementTick+0xd8>
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	4a22      	ldr	r2, [pc, #136]	; (80084bc <xTaskIncrementTick+0x160>)
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <xTaskIncrementTick+0x164>)
 8008442:	441a      	add	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	3304      	adds	r3, #4
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f7fe fefb 	bl	8007246 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008454:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <xTaskIncrementTick+0x168>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	429a      	cmp	r2, r3
 800845c:	d3b8      	bcc.n	80083d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800845e:	2301      	movs	r3, #1
 8008460:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008462:	e7b5      	b.n	80083d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008464:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <xTaskIncrementTick+0x168>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846a:	4915      	ldr	r1, [pc, #84]	; (80084c0 <xTaskIncrementTick+0x164>)
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d901      	bls.n	8008480 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800847c:	2301      	movs	r3, #1
 800847e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008480:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <xTaskIncrementTick+0x16c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d007      	beq.n	8008498 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	e004      	b.n	8008498 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800848e:	4b0f      	ldr	r3, [pc, #60]	; (80084cc <xTaskIncrementTick+0x170>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3301      	adds	r3, #1
 8008494:	4a0d      	ldr	r2, [pc, #52]	; (80084cc <xTaskIncrementTick+0x170>)
 8008496:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008498:	697b      	ldr	r3, [r7, #20]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20001414 	.word	0x20001414
 80084a8:	200013f0 	.word	0x200013f0
 80084ac:	200013a4 	.word	0x200013a4
 80084b0:	200013a8 	.word	0x200013a8
 80084b4:	20001404 	.word	0x20001404
 80084b8:	2000140c 	.word	0x2000140c
 80084bc:	200013f4 	.word	0x200013f4
 80084c0:	20000f1c 	.word	0x20000f1c
 80084c4:	20000f18 	.word	0x20000f18
 80084c8:	20001400 	.word	0x20001400
 80084cc:	200013fc 	.word	0x200013fc

080084d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084d6:	4b2a      	ldr	r3, [pc, #168]	; (8008580 <vTaskSwitchContext+0xb0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084de:	4b29      	ldr	r3, [pc, #164]	; (8008584 <vTaskSwitchContext+0xb4>)
 80084e0:	2201      	movs	r2, #1
 80084e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084e4:	e046      	b.n	8008574 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80084e6:	4b27      	ldr	r3, [pc, #156]	; (8008584 <vTaskSwitchContext+0xb4>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ec:	4b26      	ldr	r3, [pc, #152]	; (8008588 <vTaskSwitchContext+0xb8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	e010      	b.n	8008516 <vTaskSwitchContext+0x46>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <vTaskSwitchContext+0x40>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	607b      	str	r3, [r7, #4]
}
 800850c:	bf00      	nop
 800850e:	e7fe      	b.n	800850e <vTaskSwitchContext+0x3e>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3b01      	subs	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]
 8008516:	491d      	ldr	r1, [pc, #116]	; (800858c <vTaskSwitchContext+0xbc>)
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0e4      	beq.n	80084f4 <vTaskSwitchContext+0x24>
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4a15      	ldr	r2, [pc, #84]	; (800858c <vTaskSwitchContext+0xbc>)
 8008536:	4413      	add	r3, r2
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	605a      	str	r2, [r3, #4]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	3308      	adds	r3, #8
 800854c:	429a      	cmp	r2, r3
 800854e:	d104      	bne.n	800855a <vTaskSwitchContext+0x8a>
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	605a      	str	r2, [r3, #4]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	4a0b      	ldr	r2, [pc, #44]	; (8008590 <vTaskSwitchContext+0xc0>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	4a08      	ldr	r2, [pc, #32]	; (8008588 <vTaskSwitchContext+0xb8>)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800856a:	4b09      	ldr	r3, [pc, #36]	; (8008590 <vTaskSwitchContext+0xc0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3354      	adds	r3, #84	; 0x54
 8008570:	4a08      	ldr	r2, [pc, #32]	; (8008594 <vTaskSwitchContext+0xc4>)
 8008572:	6013      	str	r3, [r2, #0]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	20001414 	.word	0x20001414
 8008584:	20001400 	.word	0x20001400
 8008588:	200013f4 	.word	0x200013f4
 800858c:	20000f1c 	.word	0x20000f1c
 8008590:	20000f18 	.word	0x20000f18
 8008594:	20000040 	.word	0x20000040

08008598 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	60fb      	str	r3, [r7, #12]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085be:	4b07      	ldr	r3, [pc, #28]	; (80085dc <vTaskPlaceOnEventList+0x44>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3318      	adds	r3, #24
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fe fe61 	bl	800728e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085cc:	2101      	movs	r1, #1
 80085ce:	6838      	ldr	r0, [r7, #0]
 80085d0:	f000 fa80 	bl	8008ad4 <prvAddCurrentTaskToDelayedList>
}
 80085d4:	bf00      	nop
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20000f18 	.word	0x20000f18

080085e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	617b      	str	r3, [r7, #20]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <vTaskPlaceOnEventListRestricted+0x54>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3318      	adds	r3, #24
 800860e:	4619      	mov	r1, r3
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f7fe fe18 	bl	8007246 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800861c:	f04f 33ff 	mov.w	r3, #4294967295
 8008620:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	68b8      	ldr	r0, [r7, #8]
 8008626:	f000 fa55 	bl	8008ad4 <prvAddCurrentTaskToDelayedList>
	}
 800862a:	bf00      	nop
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000f18 	.word	0x20000f18

08008638 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	60fb      	str	r3, [r7, #12]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	3318      	adds	r3, #24
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fe49 	bl	8007300 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800866e:	4b1e      	ldr	r3, [pc, #120]	; (80086e8 <xTaskRemoveFromEventList+0xb0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d11d      	bne.n	80086b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	3304      	adds	r3, #4
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe fe40 	bl	8007300 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008684:	4b19      	ldr	r3, [pc, #100]	; (80086ec <xTaskRemoveFromEventList+0xb4>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d903      	bls.n	8008694 <xTaskRemoveFromEventList+0x5c>
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	4a16      	ldr	r2, [pc, #88]	; (80086ec <xTaskRemoveFromEventList+0xb4>)
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4a13      	ldr	r2, [pc, #76]	; (80086f0 <xTaskRemoveFromEventList+0xb8>)
 80086a2:	441a      	add	r2, r3
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	3304      	adds	r3, #4
 80086a8:	4619      	mov	r1, r3
 80086aa:	4610      	mov	r0, r2
 80086ac:	f7fe fdcb 	bl	8007246 <vListInsertEnd>
 80086b0:	e005      	b.n	80086be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	3318      	adds	r3, #24
 80086b6:	4619      	mov	r1, r3
 80086b8:	480e      	ldr	r0, [pc, #56]	; (80086f4 <xTaskRemoveFromEventList+0xbc>)
 80086ba:	f7fe fdc4 	bl	8007246 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c2:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <xTaskRemoveFromEventList+0xc0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d905      	bls.n	80086d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086cc:	2301      	movs	r3, #1
 80086ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086d0:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <xTaskRemoveFromEventList+0xc4>)
 80086d2:	2201      	movs	r2, #1
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e001      	b.n	80086dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80086d8:	2300      	movs	r3, #0
 80086da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086dc:	697b      	ldr	r3, [r7, #20]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20001414 	.word	0x20001414
 80086ec:	200013f4 	.word	0x200013f4
 80086f0:	20000f1c 	.word	0x20000f1c
 80086f4:	200013ac 	.word	0x200013ac
 80086f8:	20000f18 	.word	0x20000f18
 80086fc:	20001400 	.word	0x20001400

08008700 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <vTaskInternalSetTimeOutState+0x24>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008710:	4b05      	ldr	r3, [pc, #20]	; (8008728 <vTaskInternalSetTimeOutState+0x28>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	605a      	str	r2, [r3, #4]
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	20001404 	.word	0x20001404
 8008728:	200013f0 	.word	0x200013f0

0800872c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	613b      	str	r3, [r7, #16]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	60fb      	str	r3, [r7, #12]
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800876e:	f000 fe81 	bl	8009474 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008772:	4b1d      	ldr	r3, [pc, #116]	; (80087e8 <xTaskCheckForTimeOut+0xbc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d102      	bne.n	8008792 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800878c:	2300      	movs	r3, #0
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	e023      	b.n	80087da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	4b15      	ldr	r3, [pc, #84]	; (80087ec <xTaskCheckForTimeOut+0xc0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	429a      	cmp	r2, r3
 800879c:	d007      	beq.n	80087ae <xTaskCheckForTimeOut+0x82>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d302      	bcc.n	80087ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087a8:	2301      	movs	r3, #1
 80087aa:	61fb      	str	r3, [r7, #28]
 80087ac:	e015      	b.n	80087da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d20b      	bcs.n	80087d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff ff9b 	bl	8008700 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61fb      	str	r3, [r7, #28]
 80087ce:	e004      	b.n	80087da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087d6:	2301      	movs	r3, #1
 80087d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087da:	f000 fe7b 	bl	80094d4 <vPortExitCritical>

	return xReturn;
 80087de:	69fb      	ldr	r3, [r7, #28]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3720      	adds	r7, #32
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	200013f0 	.word	0x200013f0
 80087ec:	20001404 	.word	0x20001404

080087f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087f4:	4b03      	ldr	r3, [pc, #12]	; (8008804 <vTaskMissedYield+0x14>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
}
 80087fa:	bf00      	nop
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	20001400 	.word	0x20001400

08008808 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008810:	f000 f852 	bl	80088b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008814:	4b06      	ldr	r3, [pc, #24]	; (8008830 <prvIdleTask+0x28>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d9f9      	bls.n	8008810 <prvIdleTask+0x8>
			{
				taskYIELD();
 800881c:	4b05      	ldr	r3, [pc, #20]	; (8008834 <prvIdleTask+0x2c>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800882c:	e7f0      	b.n	8008810 <prvIdleTask+0x8>
 800882e:	bf00      	nop
 8008830:	20000f1c 	.word	0x20000f1c
 8008834:	e000ed04 	.word	0xe000ed04

08008838 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800883e:	2300      	movs	r3, #0
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	e00c      	b.n	800885e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4a12      	ldr	r2, [pc, #72]	; (8008898 <prvInitialiseTaskLists+0x60>)
 8008850:	4413      	add	r3, r2
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe fcca 	bl	80071ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3301      	adds	r3, #1
 800885c:	607b      	str	r3, [r7, #4]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b37      	cmp	r3, #55	; 0x37
 8008862:	d9ef      	bls.n	8008844 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008864:	480d      	ldr	r0, [pc, #52]	; (800889c <prvInitialiseTaskLists+0x64>)
 8008866:	f7fe fcc1 	bl	80071ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800886a:	480d      	ldr	r0, [pc, #52]	; (80088a0 <prvInitialiseTaskLists+0x68>)
 800886c:	f7fe fcbe 	bl	80071ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008870:	480c      	ldr	r0, [pc, #48]	; (80088a4 <prvInitialiseTaskLists+0x6c>)
 8008872:	f7fe fcbb 	bl	80071ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008876:	480c      	ldr	r0, [pc, #48]	; (80088a8 <prvInitialiseTaskLists+0x70>)
 8008878:	f7fe fcb8 	bl	80071ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800887c:	480b      	ldr	r0, [pc, #44]	; (80088ac <prvInitialiseTaskLists+0x74>)
 800887e:	f7fe fcb5 	bl	80071ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008882:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <prvInitialiseTaskLists+0x78>)
 8008884:	4a05      	ldr	r2, [pc, #20]	; (800889c <prvInitialiseTaskLists+0x64>)
 8008886:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <prvInitialiseTaskLists+0x7c>)
 800888a:	4a05      	ldr	r2, [pc, #20]	; (80088a0 <prvInitialiseTaskLists+0x68>)
 800888c:	601a      	str	r2, [r3, #0]
}
 800888e:	bf00      	nop
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000f1c 	.word	0x20000f1c
 800889c:	2000137c 	.word	0x2000137c
 80088a0:	20001390 	.word	0x20001390
 80088a4:	200013ac 	.word	0x200013ac
 80088a8:	200013c0 	.word	0x200013c0
 80088ac:	200013d8 	.word	0x200013d8
 80088b0:	200013a4 	.word	0x200013a4
 80088b4:	200013a8 	.word	0x200013a8

080088b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088be:	e019      	b.n	80088f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088c0:	f000 fdd8 	bl	8009474 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c4:	4b10      	ldr	r3, [pc, #64]	; (8008908 <prvCheckTasksWaitingTermination+0x50>)
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3304      	adds	r3, #4
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fd15 	bl	8007300 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088d6:	4b0d      	ldr	r3, [pc, #52]	; (800890c <prvCheckTasksWaitingTermination+0x54>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3b01      	subs	r3, #1
 80088dc:	4a0b      	ldr	r2, [pc, #44]	; (800890c <prvCheckTasksWaitingTermination+0x54>)
 80088de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088e0:	4b0b      	ldr	r3, [pc, #44]	; (8008910 <prvCheckTasksWaitingTermination+0x58>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	4a0a      	ldr	r2, [pc, #40]	; (8008910 <prvCheckTasksWaitingTermination+0x58>)
 80088e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088ea:	f000 fdf3 	bl	80094d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f810 	bl	8008914 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088f4:	4b06      	ldr	r3, [pc, #24]	; (8008910 <prvCheckTasksWaitingTermination+0x58>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e1      	bne.n	80088c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088fc:	bf00      	nop
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	200013c0 	.word	0x200013c0
 800890c:	200013ec 	.word	0x200013ec
 8008910:	200013d4 	.word	0x200013d4

08008914 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3354      	adds	r3, #84	; 0x54
 8008920:	4618      	mov	r0, r3
 8008922:	f001 fa05 	bl	8009d30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800892c:	2b00      	cmp	r3, #0
 800892e:	d108      	bne.n	8008942 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	4618      	mov	r0, r3
 8008936:	f000 ff8b 	bl	8009850 <vPortFree>
				vPortFree( pxTCB );
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 ff88 	bl	8009850 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008940:	e018      	b.n	8008974 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008948:	2b01      	cmp	r3, #1
 800894a:	d103      	bne.n	8008954 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 ff7f 	bl	8009850 <vPortFree>
	}
 8008952:	e00f      	b.n	8008974 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800895a:	2b02      	cmp	r3, #2
 800895c:	d00a      	beq.n	8008974 <prvDeleteTCB+0x60>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	60fb      	str	r3, [r7, #12]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <prvDeleteTCB+0x5e>
	}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008982:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <prvResetNextTaskUnblockTime+0x38>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d104      	bne.n	8008996 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800898c:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <prvResetNextTaskUnblockTime+0x3c>)
 800898e:	f04f 32ff 	mov.w	r2, #4294967295
 8008992:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008994:	e008      	b.n	80089a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008996:	4b07      	ldr	r3, [pc, #28]	; (80089b4 <prvResetNextTaskUnblockTime+0x38>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	4a04      	ldr	r2, [pc, #16]	; (80089b8 <prvResetNextTaskUnblockTime+0x3c>)
 80089a6:	6013      	str	r3, [r2, #0]
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	200013a4 	.word	0x200013a4
 80089b8:	2000140c 	.word	0x2000140c

080089bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089c2:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <xTaskGetSchedulerState+0x34>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089ca:	2301      	movs	r3, #1
 80089cc:	607b      	str	r3, [r7, #4]
 80089ce:	e008      	b.n	80089e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089d0:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <xTaskGetSchedulerState+0x38>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d102      	bne.n	80089de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089d8:	2302      	movs	r3, #2
 80089da:	607b      	str	r3, [r7, #4]
 80089dc:	e001      	b.n	80089e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089de:	2300      	movs	r3, #0
 80089e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089e2:	687b      	ldr	r3, [r7, #4]
	}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	200013f8 	.word	0x200013f8
 80089f4:	20001414 	.word	0x20001414

080089f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a04:	2300      	movs	r3, #0
 8008a06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d056      	beq.n	8008abc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ac8 <xTaskPriorityDisinherit+0xd0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d00a      	beq.n	8008a2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	60fb      	str	r3, [r7, #12]
}
 8008a2a:	bf00      	nop
 8008a2c:	e7fe      	b.n	8008a2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10a      	bne.n	8008a4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60bb      	str	r3, [r7, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	e7fe      	b.n	8008a4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a50:	1e5a      	subs	r2, r3, #1
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d02c      	beq.n	8008abc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d128      	bne.n	8008abc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fc46 	bl	8007300 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <xTaskPriorityDisinherit+0xd4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d903      	bls.n	8008a9c <xTaskPriorityDisinherit+0xa4>
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	4a0c      	ldr	r2, [pc, #48]	; (8008acc <xTaskPriorityDisinherit+0xd4>)
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4a09      	ldr	r2, [pc, #36]	; (8008ad0 <xTaskPriorityDisinherit+0xd8>)
 8008aaa:	441a      	add	r2, r3
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	f7fe fbc7 	bl	8007246 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008abc:	697b      	ldr	r3, [r7, #20]
	}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20000f18 	.word	0x20000f18
 8008acc:	200013f4 	.word	0x200013f4
 8008ad0:	20000f1c 	.word	0x20000f1c

08008ad4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ade:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ae4:	4b20      	ldr	r3, [pc, #128]	; (8008b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fc08 	bl	8007300 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d10a      	bne.n	8008b0e <prvAddCurrentTaskToDelayedList+0x3a>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008afe:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4619      	mov	r1, r3
 8008b06:	4819      	ldr	r0, [pc, #100]	; (8008b6c <prvAddCurrentTaskToDelayedList+0x98>)
 8008b08:	f7fe fb9d 	bl	8007246 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b0c:	e026      	b.n	8008b5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4413      	add	r3, r2
 8008b14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b16:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d209      	bcs.n	8008b3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b26:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4619      	mov	r1, r3
 8008b32:	4610      	mov	r0, r2
 8008b34:	f7fe fbab 	bl	800728e <vListInsert>
}
 8008b38:	e010      	b.n	8008b5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b3a:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3304      	adds	r3, #4
 8008b44:	4619      	mov	r1, r3
 8008b46:	4610      	mov	r0, r2
 8008b48:	f7fe fba1 	bl	800728e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d202      	bcs.n	8008b5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b56:	4a08      	ldr	r2, [pc, #32]	; (8008b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	6013      	str	r3, [r2, #0]
}
 8008b5c:	bf00      	nop
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	200013f0 	.word	0x200013f0
 8008b68:	20000f18 	.word	0x20000f18
 8008b6c:	200013d8 	.word	0x200013d8
 8008b70:	200013a8 	.word	0x200013a8
 8008b74:	200013a4 	.word	0x200013a4
 8008b78:	2000140c 	.word	0x2000140c

08008b7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	; 0x28
 8008b80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b86:	f000 fb07 	bl	8009198 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b8a:	4b1c      	ldr	r3, [pc, #112]	; (8008bfc <xTimerCreateTimerTask+0x80>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d021      	beq.n	8008bd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b9a:	1d3a      	adds	r2, r7, #4
 8008b9c:	f107 0108 	add.w	r1, r7, #8
 8008ba0:	f107 030c 	add.w	r3, r7, #12
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fe fb07 	bl	80071b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	9202      	str	r2, [sp, #8]
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	460a      	mov	r2, r1
 8008bbc:	4910      	ldr	r1, [pc, #64]	; (8008c00 <xTimerCreateTimerTask+0x84>)
 8008bbe:	4811      	ldr	r0, [pc, #68]	; (8008c04 <xTimerCreateTimerTask+0x88>)
 8008bc0:	f7ff f8b4 	bl	8007d2c <xTaskCreateStatic>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	4a10      	ldr	r2, [pc, #64]	; (8008c08 <xTimerCreateTimerTask+0x8c>)
 8008bc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008bca:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <xTimerCreateTimerTask+0x8c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	613b      	str	r3, [r7, #16]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008bf2:	697b      	ldr	r3, [r7, #20]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	20001448 	.word	0x20001448
 8008c00:	08009f7c 	.word	0x08009f7c
 8008c04:	08008d41 	.word	0x08008d41
 8008c08:	2000144c 	.word	0x2000144c

08008c0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08a      	sub	sp, #40	; 0x28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10a      	bne.n	8008c3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	623b      	str	r3, [r7, #32]
}
 8008c36:	bf00      	nop
 8008c38:	e7fe      	b.n	8008c38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ca4 <xTimerGenericCommand+0x98>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d02a      	beq.n	8008c98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b05      	cmp	r3, #5
 8008c52:	dc18      	bgt.n	8008c86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c54:	f7ff feb2 	bl	80089bc <xTaskGetSchedulerState>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d109      	bne.n	8008c72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c5e:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <xTimerGenericCommand+0x98>)
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	f107 0110 	add.w	r1, r7, #16
 8008c66:	2300      	movs	r3, #0
 8008c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6a:	f7fe fc77 	bl	800755c <xQueueGenericSend>
 8008c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8008c70:	e012      	b.n	8008c98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c72:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <xTimerGenericCommand+0x98>)
 8008c74:	6818      	ldr	r0, [r3, #0]
 8008c76:	f107 0110 	add.w	r1, r7, #16
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f7fe fc6d 	bl	800755c <xQueueGenericSend>
 8008c82:	6278      	str	r0, [r7, #36]	; 0x24
 8008c84:	e008      	b.n	8008c98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c86:	4b07      	ldr	r3, [pc, #28]	; (8008ca4 <xTimerGenericCommand+0x98>)
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	f107 0110 	add.w	r1, r7, #16
 8008c8e:	2300      	movs	r3, #0
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	f7fe fd61 	bl	8007758 <xQueueGenericSendFromISR>
 8008c96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3728      	adds	r7, #40	; 0x28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20001448 	.word	0x20001448

08008ca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af02      	add	r7, sp, #8
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb2:	4b22      	ldr	r3, [pc, #136]	; (8008d3c <prvProcessExpiredTimer+0x94>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe fb1d 	bl	8007300 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d022      	beq.n	8008d1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	699a      	ldr	r2, [r3, #24]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	18d1      	adds	r1, r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	6978      	ldr	r0, [r7, #20]
 8008ce2:	f000 f8d1 	bl	8008e88 <prvInsertTimerInActiveList>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01f      	beq.n	8008d2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cec:	2300      	movs	r3, #0
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	6978      	ldr	r0, [r7, #20]
 8008cf8:	f7ff ff88 	bl	8008c0c <xTimerGenericCommand>
 8008cfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d113      	bne.n	8008d2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	60fb      	str	r3, [r7, #12]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d20:	f023 0301 	bic.w	r3, r3, #1
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	6978      	ldr	r0, [r7, #20]
 8008d32:	4798      	blx	r3
}
 8008d34:	bf00      	nop
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20001440 	.word	0x20001440

08008d40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d48:	f107 0308 	add.w	r3, r7, #8
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 f857 	bl	8008e00 <prvGetNextExpireTime>
 8008d52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4619      	mov	r1, r3
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f803 	bl	8008d64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d5e:	f000 f8d5 	bl	8008f0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d62:	e7f1      	b.n	8008d48 <prvTimerTask+0x8>

08008d64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d6e:	f7ff fa39 	bl	80081e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d72:	f107 0308 	add.w	r3, r7, #8
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 f866 	bl	8008e48 <prvSampleTimeNow>
 8008d7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d130      	bne.n	8008de6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <prvProcessTimerOrBlockTask+0x3c>
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d806      	bhi.n	8008da0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d92:	f7ff fa35 	bl	8008200 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff ff85 	bl	8008ca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d9e:	e024      	b.n	8008dea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d008      	beq.n	8008db8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008da6:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <prvProcessTimerOrBlockTask+0x90>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <prvProcessTimerOrBlockTask+0x50>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e000      	b.n	8008db6 <prvProcessTimerOrBlockTask+0x52>
 8008db4:	2300      	movs	r3, #0
 8008db6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008db8:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <prvProcessTimerOrBlockTask+0x94>)
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f7fe ff7d 	bl	8007cc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008dca:	f7ff fa19 	bl	8008200 <xTaskResumeAll>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008dd4:	4b09      	ldr	r3, [pc, #36]	; (8008dfc <prvProcessTimerOrBlockTask+0x98>)
 8008dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	f3bf 8f6f 	isb	sy
}
 8008de4:	e001      	b.n	8008dea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008de6:	f7ff fa0b 	bl	8008200 <xTaskResumeAll>
}
 8008dea:	bf00      	nop
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20001444 	.word	0x20001444
 8008df8:	20001448 	.word	0x20001448
 8008dfc:	e000ed04 	.word	0xe000ed04

08008e00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e08:	4b0e      	ldr	r3, [pc, #56]	; (8008e44 <prvGetNextExpireTime+0x44>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <prvGetNextExpireTime+0x16>
 8008e12:	2201      	movs	r2, #1
 8008e14:	e000      	b.n	8008e18 <prvGetNextExpireTime+0x18>
 8008e16:	2200      	movs	r2, #0
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d105      	bne.n	8008e30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e24:	4b07      	ldr	r3, [pc, #28]	; (8008e44 <prvGetNextExpireTime+0x44>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	e001      	b.n	8008e34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e34:	68fb      	ldr	r3, [r7, #12]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20001440 	.word	0x20001440

08008e48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e50:	f7ff fa74 	bl	800833c <xTaskGetTickCount>
 8008e54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e56:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <prvSampleTimeNow+0x3c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d205      	bcs.n	8008e6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e60:	f000 f936 	bl	80090d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	e002      	b.n	8008e72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e72:	4a04      	ldr	r2, [pc, #16]	; (8008e84 <prvSampleTimeNow+0x3c>)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e78:	68fb      	ldr	r3, [r7, #12]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20001450 	.word	0x20001450

08008e88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d812      	bhi.n	8008ed4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	1ad2      	subs	r2, r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d302      	bcc.n	8008ec2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	e01b      	b.n	8008efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ec2:	4b10      	ldr	r3, [pc, #64]	; (8008f04 <prvInsertTimerInActiveList+0x7c>)
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4619      	mov	r1, r3
 8008ecc:	4610      	mov	r0, r2
 8008ece:	f7fe f9de 	bl	800728e <vListInsert>
 8008ed2:	e012      	b.n	8008efa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d206      	bcs.n	8008eea <prvInsertTimerInActiveList+0x62>
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	e007      	b.n	8008efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eea:	4b07      	ldr	r3, [pc, #28]	; (8008f08 <prvInsertTimerInActiveList+0x80>)
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	f7fe f9ca 	bl	800728e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008efa:	697b      	ldr	r3, [r7, #20]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20001444 	.word	0x20001444
 8008f08:	20001440 	.word	0x20001440

08008f0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08e      	sub	sp, #56	; 0x38
 8008f10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f12:	e0ca      	b.n	80090aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	da18      	bge.n	8008f4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f1a:	1d3b      	adds	r3, r7, #4
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	61fb      	str	r3, [r7, #28]
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f42:	6850      	ldr	r0, [r2, #4]
 8008f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f46:	6892      	ldr	r2, [r2, #8]
 8008f48:	4611      	mov	r1, r2
 8008f4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f2c0 80aa 	blt.w	80090a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	3304      	adds	r3, #4
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe f9cb 	bl	8007300 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7ff ff6b 	bl	8008e48 <prvSampleTimeNow>
 8008f72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b09      	cmp	r3, #9
 8008f78:	f200 8097 	bhi.w	80090aa <prvProcessReceivedCommands+0x19e>
 8008f7c:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <prvProcessReceivedCommands+0x78>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08008fad 	.word	0x08008fad
 8008f88:	08008fad 	.word	0x08008fad
 8008f8c:	08008fad 	.word	0x08008fad
 8008f90:	08009021 	.word	0x08009021
 8008f94:	08009035 	.word	0x08009035
 8008f98:	0800907f 	.word	0x0800907f
 8008f9c:	08008fad 	.word	0x08008fad
 8008fa0:	08008fad 	.word	0x08008fad
 8008fa4:	08009021 	.word	0x08009021
 8008fa8:	08009035 	.word	0x08009035
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fb2:	f043 0301 	orr.w	r3, r3, #1
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	18d1      	adds	r1, r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fcc:	f7ff ff5c 	bl	8008e88 <prvInsertTimerInActiveList>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d069      	beq.n	80090aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d05e      	beq.n	80090aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	441a      	add	r2, r3
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ffe:	f7ff fe05 	bl	8008c0c <xTimerGenericCommand>
 8009002:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d14f      	bne.n	80090aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	61bb      	str	r3, [r7, #24]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009026:	f023 0301 	bic.w	r3, r3, #1
 800902a:	b2da      	uxtb	r2, r3
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009032:	e03a      	b.n	80090aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800903a:	f043 0301 	orr.w	r3, r3, #1
 800903e:	b2da      	uxtb	r2, r3
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	617b      	str	r3, [r7, #20]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	18d1      	adds	r1, r2, r3
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009078:	f7ff ff06 	bl	8008e88 <prvInsertTimerInActiveList>
					break;
 800907c:	e015      	b.n	80090aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d103      	bne.n	8009094 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800908c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800908e:	f000 fbdf 	bl	8009850 <vPortFree>
 8009092:	e00a      	b.n	80090aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800909a:	f023 0301 	bic.w	r3, r3, #1
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80090a6:	e000      	b.n	80090aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80090a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090aa:	4b08      	ldr	r3, [pc, #32]	; (80090cc <prvProcessReceivedCommands+0x1c0>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	1d39      	adds	r1, r7, #4
 80090b0:	2200      	movs	r2, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe fbec 	bl	8007890 <xQueueReceive>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f47f af2a 	bne.w	8008f14 <prvProcessReceivedCommands+0x8>
	}
}
 80090c0:	bf00      	nop
 80090c2:	bf00      	nop
 80090c4:	3730      	adds	r7, #48	; 0x30
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20001448 	.word	0x20001448

080090d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090d6:	e048      	b.n	800916a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090d8:	4b2d      	ldr	r3, [pc, #180]	; (8009190 <prvSwitchTimerLists+0xc0>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e2:	4b2b      	ldr	r3, [pc, #172]	; (8009190 <prvSwitchTimerLists+0xc0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	3304      	adds	r3, #4
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe f905 	bl	8007300 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009104:	f003 0304 	and.w	r3, r3, #4
 8009108:	2b00      	cmp	r3, #0
 800910a:	d02e      	beq.n	800916a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	4413      	add	r3, r2
 8009114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	429a      	cmp	r2, r3
 800911c:	d90e      	bls.n	800913c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800912a:	4b19      	ldr	r3, [pc, #100]	; (8009190 <prvSwitchTimerLists+0xc0>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3304      	adds	r3, #4
 8009132:	4619      	mov	r1, r3
 8009134:	4610      	mov	r0, r2
 8009136:	f7fe f8aa 	bl	800728e <vListInsert>
 800913a:	e016      	b.n	800916a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800913c:	2300      	movs	r3, #0
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	2300      	movs	r3, #0
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	2100      	movs	r1, #0
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f7ff fd60 	bl	8008c0c <xTimerGenericCommand>
 800914c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	603b      	str	r3, [r7, #0]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800916a:	4b09      	ldr	r3, [pc, #36]	; (8009190 <prvSwitchTimerLists+0xc0>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1b1      	bne.n	80090d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009174:	4b06      	ldr	r3, [pc, #24]	; (8009190 <prvSwitchTimerLists+0xc0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800917a:	4b06      	ldr	r3, [pc, #24]	; (8009194 <prvSwitchTimerLists+0xc4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a04      	ldr	r2, [pc, #16]	; (8009190 <prvSwitchTimerLists+0xc0>)
 8009180:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009182:	4a04      	ldr	r2, [pc, #16]	; (8009194 <prvSwitchTimerLists+0xc4>)
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	6013      	str	r3, [r2, #0]
}
 8009188:	bf00      	nop
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	20001440 	.word	0x20001440
 8009194:	20001444 	.word	0x20001444

08009198 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800919e:	f000 f969 	bl	8009474 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <prvCheckForValidListAndQueue+0x60>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d120      	bne.n	80091ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80091aa:	4814      	ldr	r0, [pc, #80]	; (80091fc <prvCheckForValidListAndQueue+0x64>)
 80091ac:	f7fe f81e 	bl	80071ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091b0:	4813      	ldr	r0, [pc, #76]	; (8009200 <prvCheckForValidListAndQueue+0x68>)
 80091b2:	f7fe f81b 	bl	80071ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091b6:	4b13      	ldr	r3, [pc, #76]	; (8009204 <prvCheckForValidListAndQueue+0x6c>)
 80091b8:	4a10      	ldr	r2, [pc, #64]	; (80091fc <prvCheckForValidListAndQueue+0x64>)
 80091ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091bc:	4b12      	ldr	r3, [pc, #72]	; (8009208 <prvCheckForValidListAndQueue+0x70>)
 80091be:	4a10      	ldr	r2, [pc, #64]	; (8009200 <prvCheckForValidListAndQueue+0x68>)
 80091c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091c2:	2300      	movs	r3, #0
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	4b11      	ldr	r3, [pc, #68]	; (800920c <prvCheckForValidListAndQueue+0x74>)
 80091c8:	4a11      	ldr	r2, [pc, #68]	; (8009210 <prvCheckForValidListAndQueue+0x78>)
 80091ca:	2110      	movs	r1, #16
 80091cc:	200a      	movs	r0, #10
 80091ce:	f7fe f929 	bl	8007424 <xQueueGenericCreateStatic>
 80091d2:	4603      	mov	r3, r0
 80091d4:	4a08      	ldr	r2, [pc, #32]	; (80091f8 <prvCheckForValidListAndQueue+0x60>)
 80091d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091d8:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <prvCheckForValidListAndQueue+0x60>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091e0:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <prvCheckForValidListAndQueue+0x60>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	490b      	ldr	r1, [pc, #44]	; (8009214 <prvCheckForValidListAndQueue+0x7c>)
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fd42 	bl	8007c70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091ec:	f000 f972 	bl	80094d4 <vPortExitCritical>
}
 80091f0:	bf00      	nop
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20001448 	.word	0x20001448
 80091fc:	20001418 	.word	0x20001418
 8009200:	2000142c 	.word	0x2000142c
 8009204:	20001440 	.word	0x20001440
 8009208:	20001444 	.word	0x20001444
 800920c:	200014f4 	.word	0x200014f4
 8009210:	20001454 	.word	0x20001454
 8009214:	08009f84 	.word	0x08009f84

08009218 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3b04      	subs	r3, #4
 8009228:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3b04      	subs	r3, #4
 8009236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f023 0201 	bic.w	r2, r3, #1
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3b04      	subs	r3, #4
 8009246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009248:	4a0c      	ldr	r2, [pc, #48]	; (800927c <pxPortInitialiseStack+0x64>)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3b14      	subs	r3, #20
 8009252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3b04      	subs	r3, #4
 800925e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f06f 0202 	mvn.w	r2, #2
 8009266:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3b20      	subs	r3, #32
 800926c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800926e:	68fb      	ldr	r3, [r7, #12]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	08009281 	.word	0x08009281

08009280 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800928a:	4b12      	ldr	r3, [pc, #72]	; (80092d4 <prvTaskExitError+0x54>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009292:	d00a      	beq.n	80092aa <prvTaskExitError+0x2a>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	60fb      	str	r3, [r7, #12]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <prvTaskExitError+0x28>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	60bb      	str	r3, [r7, #8]
}
 80092bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092be:	bf00      	nop
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0fc      	beq.n	80092c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	2000003c 	.word	0x2000003c
	...

080092e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092e0:	4b07      	ldr	r3, [pc, #28]	; (8009300 <pxCurrentTCBConst2>)
 80092e2:	6819      	ldr	r1, [r3, #0]
 80092e4:	6808      	ldr	r0, [r1, #0]
 80092e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	f380 8809 	msr	PSP, r0
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f04f 0000 	mov.w	r0, #0
 80092f6:	f380 8811 	msr	BASEPRI, r0
 80092fa:	4770      	bx	lr
 80092fc:	f3af 8000 	nop.w

08009300 <pxCurrentTCBConst2>:
 8009300:	20000f18 	.word	0x20000f18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop

08009308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009308:	4808      	ldr	r0, [pc, #32]	; (800932c <prvPortStartFirstTask+0x24>)
 800930a:	6800      	ldr	r0, [r0, #0]
 800930c:	6800      	ldr	r0, [r0, #0]
 800930e:	f380 8808 	msr	MSP, r0
 8009312:	f04f 0000 	mov.w	r0, #0
 8009316:	f380 8814 	msr	CONTROL, r0
 800931a:	b662      	cpsie	i
 800931c:	b661      	cpsie	f
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	df00      	svc	0
 8009328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800932a:	bf00      	nop
 800932c:	e000ed08 	.word	0xe000ed08

08009330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009336:	4b46      	ldr	r3, [pc, #280]	; (8009450 <xPortStartScheduler+0x120>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a46      	ldr	r2, [pc, #280]	; (8009454 <xPortStartScheduler+0x124>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10a      	bne.n	8009356 <xPortStartScheduler+0x26>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	613b      	str	r3, [r7, #16]
}
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009356:	4b3e      	ldr	r3, [pc, #248]	; (8009450 <xPortStartScheduler+0x120>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a3f      	ldr	r2, [pc, #252]	; (8009458 <xPortStartScheduler+0x128>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d10a      	bne.n	8009376 <xPortStartScheduler+0x46>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	60fb      	str	r3, [r7, #12]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009376:	4b39      	ldr	r3, [pc, #228]	; (800945c <xPortStartScheduler+0x12c>)
 8009378:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	22ff      	movs	r2, #255	; 0xff
 8009386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b2db      	uxtb	r3, r3
 800938e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009398:	b2da      	uxtb	r2, r3
 800939a:	4b31      	ldr	r3, [pc, #196]	; (8009460 <xPortStartScheduler+0x130>)
 800939c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800939e:	4b31      	ldr	r3, [pc, #196]	; (8009464 <xPortStartScheduler+0x134>)
 80093a0:	2207      	movs	r2, #7
 80093a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093a4:	e009      	b.n	80093ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80093a6:	4b2f      	ldr	r3, [pc, #188]	; (8009464 <xPortStartScheduler+0x134>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	4a2d      	ldr	r2, [pc, #180]	; (8009464 <xPortStartScheduler+0x134>)
 80093ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c2:	2b80      	cmp	r3, #128	; 0x80
 80093c4:	d0ef      	beq.n	80093a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093c6:	4b27      	ldr	r3, [pc, #156]	; (8009464 <xPortStartScheduler+0x134>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f1c3 0307 	rsb	r3, r3, #7
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d00a      	beq.n	80093e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	60bb      	str	r3, [r7, #8]
}
 80093e4:	bf00      	nop
 80093e6:	e7fe      	b.n	80093e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093e8:	4b1e      	ldr	r3, [pc, #120]	; (8009464 <xPortStartScheduler+0x134>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	021b      	lsls	r3, r3, #8
 80093ee:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <xPortStartScheduler+0x134>)
 80093f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093f2:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <xPortStartScheduler+0x134>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093fa:	4a1a      	ldr	r2, [pc, #104]	; (8009464 <xPortStartScheduler+0x134>)
 80093fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	b2da      	uxtb	r2, r3
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009406:	4b18      	ldr	r3, [pc, #96]	; (8009468 <xPortStartScheduler+0x138>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a17      	ldr	r2, [pc, #92]	; (8009468 <xPortStartScheduler+0x138>)
 800940c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009412:	4b15      	ldr	r3, [pc, #84]	; (8009468 <xPortStartScheduler+0x138>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a14      	ldr	r2, [pc, #80]	; (8009468 <xPortStartScheduler+0x138>)
 8009418:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800941c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800941e:	f000 f8dd 	bl	80095dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009422:	4b12      	ldr	r3, [pc, #72]	; (800946c <xPortStartScheduler+0x13c>)
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009428:	f000 f8fc 	bl	8009624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800942c:	4b10      	ldr	r3, [pc, #64]	; (8009470 <xPortStartScheduler+0x140>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a0f      	ldr	r2, [pc, #60]	; (8009470 <xPortStartScheduler+0x140>)
 8009432:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009436:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009438:	f7ff ff66 	bl	8009308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800943c:	f7ff f848 	bl	80084d0 <vTaskSwitchContext>
	prvTaskExitError();
 8009440:	f7ff ff1e 	bl	8009280 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	e000ed00 	.word	0xe000ed00
 8009454:	410fc271 	.word	0x410fc271
 8009458:	410fc270 	.word	0x410fc270
 800945c:	e000e400 	.word	0xe000e400
 8009460:	20001544 	.word	0x20001544
 8009464:	20001548 	.word	0x20001548
 8009468:	e000ed20 	.word	0xe000ed20
 800946c:	2000003c 	.word	0x2000003c
 8009470:	e000ef34 	.word	0xe000ef34

08009474 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	607b      	str	r3, [r7, #4]
}
 800948c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800948e:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <vPortEnterCritical+0x58>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3301      	adds	r3, #1
 8009494:	4a0d      	ldr	r2, [pc, #52]	; (80094cc <vPortEnterCritical+0x58>)
 8009496:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <vPortEnterCritical+0x58>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d10f      	bne.n	80094c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094a0:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <vPortEnterCritical+0x5c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	603b      	str	r3, [r7, #0]
}
 80094bc:	bf00      	nop
 80094be:	e7fe      	b.n	80094be <vPortEnterCritical+0x4a>
	}
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	2000003c 	.word	0x2000003c
 80094d0:	e000ed04 	.word	0xe000ed04

080094d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094da:	4b12      	ldr	r3, [pc, #72]	; (8009524 <vPortExitCritical+0x50>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10a      	bne.n	80094f8 <vPortExitCritical+0x24>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	607b      	str	r3, [r7, #4]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094f8:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <vPortExitCritical+0x50>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	4a09      	ldr	r2, [pc, #36]	; (8009524 <vPortExitCritical+0x50>)
 8009500:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009502:	4b08      	ldr	r3, [pc, #32]	; (8009524 <vPortExitCritical+0x50>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d105      	bne.n	8009516 <vPortExitCritical+0x42>
 800950a:	2300      	movs	r3, #0
 800950c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	f383 8811 	msr	BASEPRI, r3
}
 8009514:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009516:	bf00      	nop
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	2000003c 	.word	0x2000003c
	...

08009530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009530:	f3ef 8009 	mrs	r0, PSP
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	4b15      	ldr	r3, [pc, #84]	; (8009590 <pxCurrentTCBConst>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	f01e 0f10 	tst.w	lr, #16
 8009540:	bf08      	it	eq
 8009542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954a:	6010      	str	r0, [r2, #0]
 800954c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009554:	f380 8811 	msr	BASEPRI, r0
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f7fe ffb6 	bl	80084d0 <vTaskSwitchContext>
 8009564:	f04f 0000 	mov.w	r0, #0
 8009568:	f380 8811 	msr	BASEPRI, r0
 800956c:	bc09      	pop	{r0, r3}
 800956e:	6819      	ldr	r1, [r3, #0]
 8009570:	6808      	ldr	r0, [r1, #0]
 8009572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009576:	f01e 0f10 	tst.w	lr, #16
 800957a:	bf08      	it	eq
 800957c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009580:	f380 8809 	msr	PSP, r0
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	f3af 8000 	nop.w

08009590 <pxCurrentTCBConst>:
 8009590:	20000f18 	.word	0x20000f18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop

08009598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	607b      	str	r3, [r7, #4]
}
 80095b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095b2:	f7fe fed3 	bl	800835c <xTaskIncrementTick>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095bc:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <xPortSysTickHandler+0x40>)
 80095be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	2300      	movs	r3, #0
 80095c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f383 8811 	msr	BASEPRI, r3
}
 80095ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095e0:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <vPortSetupTimerInterrupt+0x34>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095e6:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <vPortSetupTimerInterrupt+0x38>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095ec:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <vPortSetupTimerInterrupt+0x3c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a0a      	ldr	r2, [pc, #40]	; (800961c <vPortSetupTimerInterrupt+0x40>)
 80095f2:	fba2 2303 	umull	r2, r3, r2, r3
 80095f6:	099b      	lsrs	r3, r3, #6
 80095f8:	4a09      	ldr	r2, [pc, #36]	; (8009620 <vPortSetupTimerInterrupt+0x44>)
 80095fa:	3b01      	subs	r3, #1
 80095fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095fe:	4b04      	ldr	r3, [pc, #16]	; (8009610 <vPortSetupTimerInterrupt+0x34>)
 8009600:	2207      	movs	r2, #7
 8009602:	601a      	str	r2, [r3, #0]
}
 8009604:	bf00      	nop
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	e000e010 	.word	0xe000e010
 8009614:	e000e018 	.word	0xe000e018
 8009618:	20000030 	.word	0x20000030
 800961c:	10624dd3 	.word	0x10624dd3
 8009620:	e000e014 	.word	0xe000e014

08009624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009624:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009634 <vPortEnableVFP+0x10>
 8009628:	6801      	ldr	r1, [r0, #0]
 800962a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800962e:	6001      	str	r1, [r0, #0]
 8009630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009632:	bf00      	nop
 8009634:	e000ed88 	.word	0xe000ed88

08009638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800963e:	f3ef 8305 	mrs	r3, IPSR
 8009642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b0f      	cmp	r3, #15
 8009648:	d914      	bls.n	8009674 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800964a:	4a17      	ldr	r2, [pc, #92]	; (80096a8 <vPortValidateInterruptPriority+0x70>)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009654:	4b15      	ldr	r3, [pc, #84]	; (80096ac <vPortValidateInterruptPriority+0x74>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	7afa      	ldrb	r2, [r7, #11]
 800965a:	429a      	cmp	r2, r3
 800965c:	d20a      	bcs.n	8009674 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	607b      	str	r3, [r7, #4]
}
 8009670:	bf00      	nop
 8009672:	e7fe      	b.n	8009672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009674:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <vPortValidateInterruptPriority+0x78>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800967c:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <vPortValidateInterruptPriority+0x7c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d90a      	bls.n	800969a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	603b      	str	r3, [r7, #0]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <vPortValidateInterruptPriority+0x60>
	}
 800969a:	bf00      	nop
 800969c:	3714      	adds	r7, #20
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	e000e3f0 	.word	0xe000e3f0
 80096ac:	20001544 	.word	0x20001544
 80096b0:	e000ed0c 	.word	0xe000ed0c
 80096b4:	20001548 	.word	0x20001548

080096b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096c0:	2300      	movs	r3, #0
 80096c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096c4:	f7fe fd8e 	bl	80081e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096c8:	4b5b      	ldr	r3, [pc, #364]	; (8009838 <pvPortMalloc+0x180>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096d0:	f000 f920 	bl	8009914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096d4:	4b59      	ldr	r3, [pc, #356]	; (800983c <pvPortMalloc+0x184>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4013      	ands	r3, r2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f040 8093 	bne.w	8009808 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d01d      	beq.n	8009724 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80096e8:	2208      	movs	r2, #8
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4413      	add	r3, r2
 80096ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d014      	beq.n	8009724 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f023 0307 	bic.w	r3, r3, #7
 8009700:	3308      	adds	r3, #8
 8009702:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f003 0307 	and.w	r3, r3, #7
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00a      	beq.n	8009724 <pvPortMalloc+0x6c>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	617b      	str	r3, [r7, #20]
}
 8009720:	bf00      	nop
 8009722:	e7fe      	b.n	8009722 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d06e      	beq.n	8009808 <pvPortMalloc+0x150>
 800972a:	4b45      	ldr	r3, [pc, #276]	; (8009840 <pvPortMalloc+0x188>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	429a      	cmp	r2, r3
 8009732:	d869      	bhi.n	8009808 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009734:	4b43      	ldr	r3, [pc, #268]	; (8009844 <pvPortMalloc+0x18c>)
 8009736:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009738:	4b42      	ldr	r3, [pc, #264]	; (8009844 <pvPortMalloc+0x18c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800973e:	e004      	b.n	800974a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d903      	bls.n	800975c <pvPortMalloc+0xa4>
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1f1      	bne.n	8009740 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800975c:	4b36      	ldr	r3, [pc, #216]	; (8009838 <pvPortMalloc+0x180>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009762:	429a      	cmp	r2, r3
 8009764:	d050      	beq.n	8009808 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2208      	movs	r2, #8
 800976c:	4413      	add	r3, r2
 800976e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	2308      	movs	r3, #8
 8009782:	005b      	lsls	r3, r3, #1
 8009784:	429a      	cmp	r2, r3
 8009786:	d91f      	bls.n	80097c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4413      	add	r3, r2
 800978e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00a      	beq.n	80097b0 <pvPortMalloc+0xf8>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	613b      	str	r3, [r7, #16]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	1ad2      	subs	r2, r2, r3
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097c2:	69b8      	ldr	r0, [r7, #24]
 80097c4:	f000 f908 	bl	80099d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097c8:	4b1d      	ldr	r3, [pc, #116]	; (8009840 <pvPortMalloc+0x188>)
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	4a1b      	ldr	r2, [pc, #108]	; (8009840 <pvPortMalloc+0x188>)
 80097d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097d6:	4b1a      	ldr	r3, [pc, #104]	; (8009840 <pvPortMalloc+0x188>)
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	4b1b      	ldr	r3, [pc, #108]	; (8009848 <pvPortMalloc+0x190>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d203      	bcs.n	80097ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097e2:	4b17      	ldr	r3, [pc, #92]	; (8009840 <pvPortMalloc+0x188>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a18      	ldr	r2, [pc, #96]	; (8009848 <pvPortMalloc+0x190>)
 80097e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	4b13      	ldr	r3, [pc, #76]	; (800983c <pvPortMalloc+0x184>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	431a      	orrs	r2, r3
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097fe:	4b13      	ldr	r3, [pc, #76]	; (800984c <pvPortMalloc+0x194>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	4a11      	ldr	r2, [pc, #68]	; (800984c <pvPortMalloc+0x194>)
 8009806:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009808:	f7fe fcfa 	bl	8008200 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	f003 0307 	and.w	r3, r3, #7
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <pvPortMalloc+0x174>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	60fb      	str	r3, [r7, #12]
}
 8009828:	bf00      	nop
 800982a:	e7fe      	b.n	800982a <pvPortMalloc+0x172>
	return pvReturn;
 800982c:	69fb      	ldr	r3, [r7, #28]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3728      	adds	r7, #40	; 0x28
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20005154 	.word	0x20005154
 800983c:	20005168 	.word	0x20005168
 8009840:	20005158 	.word	0x20005158
 8009844:	2000514c 	.word	0x2000514c
 8009848:	2000515c 	.word	0x2000515c
 800984c:	20005160 	.word	0x20005160

08009850 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d04d      	beq.n	80098fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009862:	2308      	movs	r3, #8
 8009864:	425b      	negs	r3, r3
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	4413      	add	r3, r2
 800986a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	685a      	ldr	r2, [r3, #4]
 8009874:	4b24      	ldr	r3, [pc, #144]	; (8009908 <vPortFree+0xb8>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4013      	ands	r3, r2
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <vPortFree+0x44>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	60fb      	str	r3, [r7, #12]
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00a      	beq.n	80098b2 <vPortFree+0x62>
	__asm volatile
 800989c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	60bb      	str	r3, [r7, #8]
}
 80098ae:	bf00      	nop
 80098b0:	e7fe      	b.n	80098b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	4b14      	ldr	r3, [pc, #80]	; (8009908 <vPortFree+0xb8>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4013      	ands	r3, r2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01e      	beq.n	80098fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d11a      	bne.n	80098fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <vPortFree+0xb8>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	43db      	mvns	r3, r3
 80098d2:	401a      	ands	r2, r3
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098d8:	f7fe fc84 	bl	80081e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	4b0a      	ldr	r3, [pc, #40]	; (800990c <vPortFree+0xbc>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4413      	add	r3, r2
 80098e6:	4a09      	ldr	r2, [pc, #36]	; (800990c <vPortFree+0xbc>)
 80098e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098ea:	6938      	ldr	r0, [r7, #16]
 80098ec:	f000 f874 	bl	80099d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098f0:	4b07      	ldr	r3, [pc, #28]	; (8009910 <vPortFree+0xc0>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3301      	adds	r3, #1
 80098f6:	4a06      	ldr	r2, [pc, #24]	; (8009910 <vPortFree+0xc0>)
 80098f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098fa:	f7fe fc81 	bl	8008200 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098fe:	bf00      	nop
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	20005168 	.word	0x20005168
 800990c:	20005158 	.word	0x20005158
 8009910:	20005164 	.word	0x20005164

08009914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800991a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800991e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009920:	4b27      	ldr	r3, [pc, #156]	; (80099c0 <prvHeapInit+0xac>)
 8009922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00c      	beq.n	8009948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3307      	adds	r3, #7
 8009932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0307 	bic.w	r3, r3, #7
 800993a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	4a1f      	ldr	r2, [pc, #124]	; (80099c0 <prvHeapInit+0xac>)
 8009944:	4413      	add	r3, r2
 8009946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800994c:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <prvHeapInit+0xb0>)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009952:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <prvHeapInit+0xb0>)
 8009954:	2200      	movs	r2, #0
 8009956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	4413      	add	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009960:	2208      	movs	r2, #8
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0307 	bic.w	r3, r3, #7
 800996e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <prvHeapInit+0xb4>)
 8009974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <prvHeapInit+0xb4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2200      	movs	r2, #0
 800997c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800997e:	4b12      	ldr	r3, [pc, #72]	; (80099c8 <prvHeapInit+0xb4>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	1ad2      	subs	r2, r2, r3
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009994:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <prvHeapInit+0xb4>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <prvHeapInit+0xb8>)
 80099a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	4a09      	ldr	r2, [pc, #36]	; (80099d0 <prvHeapInit+0xbc>)
 80099aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099ac:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <prvHeapInit+0xc0>)
 80099ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099b2:	601a      	str	r2, [r3, #0]
}
 80099b4:	bf00      	nop
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	2000154c 	.word	0x2000154c
 80099c4:	2000514c 	.word	0x2000514c
 80099c8:	20005154 	.word	0x20005154
 80099cc:	2000515c 	.word	0x2000515c
 80099d0:	20005158 	.word	0x20005158
 80099d4:	20005168 	.word	0x20005168

080099d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099e0:	4b28      	ldr	r3, [pc, #160]	; (8009a84 <prvInsertBlockIntoFreeList+0xac>)
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	e002      	b.n	80099ec <prvInsertBlockIntoFreeList+0x14>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d8f7      	bhi.n	80099e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	4413      	add	r3, r2
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d108      	bne.n	8009a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	441a      	add	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	441a      	add	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d118      	bne.n	8009a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <prvInsertBlockIntoFreeList+0xb0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d00d      	beq.n	8009a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	441a      	add	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e008      	b.n	8009a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a56:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <prvInsertBlockIntoFreeList+0xb0>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	e003      	b.n	8009a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d002      	beq.n	8009a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	2000514c 	.word	0x2000514c
 8009a88:	20005154 	.word	0x20005154

08009a8c <__errno>:
 8009a8c:	4b01      	ldr	r3, [pc, #4]	; (8009a94 <__errno+0x8>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20000040 	.word	0x20000040

08009a98 <__libc_init_array>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	4d0d      	ldr	r5, [pc, #52]	; (8009ad0 <__libc_init_array+0x38>)
 8009a9c:	4c0d      	ldr	r4, [pc, #52]	; (8009ad4 <__libc_init_array+0x3c>)
 8009a9e:	1b64      	subs	r4, r4, r5
 8009aa0:	10a4      	asrs	r4, r4, #2
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	42a6      	cmp	r6, r4
 8009aa6:	d109      	bne.n	8009abc <__libc_init_array+0x24>
 8009aa8:	4d0b      	ldr	r5, [pc, #44]	; (8009ad8 <__libc_init_array+0x40>)
 8009aaa:	4c0c      	ldr	r4, [pc, #48]	; (8009adc <__libc_init_array+0x44>)
 8009aac:	f000 f9fa 	bl	8009ea4 <_init>
 8009ab0:	1b64      	subs	r4, r4, r5
 8009ab2:	10a4      	asrs	r4, r4, #2
 8009ab4:	2600      	movs	r6, #0
 8009ab6:	42a6      	cmp	r6, r4
 8009ab8:	d105      	bne.n	8009ac6 <__libc_init_array+0x2e>
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac0:	4798      	blx	r3
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7ee      	b.n	8009aa4 <__libc_init_array+0xc>
 8009ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aca:	4798      	blx	r3
 8009acc:	3601      	adds	r6, #1
 8009ace:	e7f2      	b.n	8009ab6 <__libc_init_array+0x1e>
 8009ad0:	0800bfd4 	.word	0x0800bfd4
 8009ad4:	0800bfd4 	.word	0x0800bfd4
 8009ad8:	0800bfd4 	.word	0x0800bfd4
 8009adc:	0800bfd8 	.word	0x0800bfd8

08009ae0 <__itoa>:
 8009ae0:	1e93      	subs	r3, r2, #2
 8009ae2:	2b22      	cmp	r3, #34	; 0x22
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	d904      	bls.n	8009af4 <__itoa+0x14>
 8009aea:	2300      	movs	r3, #0
 8009aec:	700b      	strb	r3, [r1, #0]
 8009aee:	461c      	mov	r4, r3
 8009af0:	4620      	mov	r0, r4
 8009af2:	bd10      	pop	{r4, pc}
 8009af4:	2a0a      	cmp	r2, #10
 8009af6:	d109      	bne.n	8009b0c <__itoa+0x2c>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	da07      	bge.n	8009b0c <__itoa+0x2c>
 8009afc:	232d      	movs	r3, #45	; 0x2d
 8009afe:	700b      	strb	r3, [r1, #0]
 8009b00:	4240      	negs	r0, r0
 8009b02:	2101      	movs	r1, #1
 8009b04:	4421      	add	r1, r4
 8009b06:	f000 f97f 	bl	8009e08 <__utoa>
 8009b0a:	e7f1      	b.n	8009af0 <__itoa+0x10>
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	e7f9      	b.n	8009b04 <__itoa+0x24>

08009b10 <itoa>:
 8009b10:	f7ff bfe6 	b.w	8009ae0 <__itoa>

08009b14 <__retarget_lock_acquire_recursive>:
 8009b14:	4770      	bx	lr

08009b16 <__retarget_lock_release_recursive>:
 8009b16:	4770      	bx	lr

08009b18 <malloc>:
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <malloc+0xc>)
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	f000 b885 	b.w	8009c2c <_malloc_r>
 8009b22:	bf00      	nop
 8009b24:	20000040 	.word	0x20000040

08009b28 <memcpy>:
 8009b28:	440a      	add	r2, r1
 8009b2a:	4291      	cmp	r1, r2
 8009b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b30:	d100      	bne.n	8009b34 <memcpy+0xc>
 8009b32:	4770      	bx	lr
 8009b34:	b510      	push	{r4, lr}
 8009b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b3e:	4291      	cmp	r1, r2
 8009b40:	d1f9      	bne.n	8009b36 <memcpy+0xe>
 8009b42:	bd10      	pop	{r4, pc}

08009b44 <memset>:
 8009b44:	4402      	add	r2, r0
 8009b46:	4603      	mov	r3, r0
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d100      	bne.n	8009b4e <memset+0xa>
 8009b4c:	4770      	bx	lr
 8009b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b52:	e7f9      	b.n	8009b48 <memset+0x4>

08009b54 <_free_r>:
 8009b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b56:	2900      	cmp	r1, #0
 8009b58:	d044      	beq.n	8009be4 <_free_r+0x90>
 8009b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b5e:	9001      	str	r0, [sp, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f1a1 0404 	sub.w	r4, r1, #4
 8009b66:	bfb8      	it	lt
 8009b68:	18e4      	addlt	r4, r4, r3
 8009b6a:	f000 f98f 	bl	8009e8c <__malloc_lock>
 8009b6e:	4a1e      	ldr	r2, [pc, #120]	; (8009be8 <_free_r+0x94>)
 8009b70:	9801      	ldr	r0, [sp, #4]
 8009b72:	6813      	ldr	r3, [r2, #0]
 8009b74:	b933      	cbnz	r3, 8009b84 <_free_r+0x30>
 8009b76:	6063      	str	r3, [r4, #4]
 8009b78:	6014      	str	r4, [r2, #0]
 8009b7a:	b003      	add	sp, #12
 8009b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b80:	f000 b98a 	b.w	8009e98 <__malloc_unlock>
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	d908      	bls.n	8009b9a <_free_r+0x46>
 8009b88:	6825      	ldr	r5, [r4, #0]
 8009b8a:	1961      	adds	r1, r4, r5
 8009b8c:	428b      	cmp	r3, r1
 8009b8e:	bf01      	itttt	eq
 8009b90:	6819      	ldreq	r1, [r3, #0]
 8009b92:	685b      	ldreq	r3, [r3, #4]
 8009b94:	1949      	addeq	r1, r1, r5
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	e7ed      	b.n	8009b76 <_free_r+0x22>
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	b10b      	cbz	r3, 8009ba4 <_free_r+0x50>
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d9fa      	bls.n	8009b9a <_free_r+0x46>
 8009ba4:	6811      	ldr	r1, [r2, #0]
 8009ba6:	1855      	adds	r5, r2, r1
 8009ba8:	42a5      	cmp	r5, r4
 8009baa:	d10b      	bne.n	8009bc4 <_free_r+0x70>
 8009bac:	6824      	ldr	r4, [r4, #0]
 8009bae:	4421      	add	r1, r4
 8009bb0:	1854      	adds	r4, r2, r1
 8009bb2:	42a3      	cmp	r3, r4
 8009bb4:	6011      	str	r1, [r2, #0]
 8009bb6:	d1e0      	bne.n	8009b7a <_free_r+0x26>
 8009bb8:	681c      	ldr	r4, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	6053      	str	r3, [r2, #4]
 8009bbe:	4421      	add	r1, r4
 8009bc0:	6011      	str	r1, [r2, #0]
 8009bc2:	e7da      	b.n	8009b7a <_free_r+0x26>
 8009bc4:	d902      	bls.n	8009bcc <_free_r+0x78>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	e7d6      	b.n	8009b7a <_free_r+0x26>
 8009bcc:	6825      	ldr	r5, [r4, #0]
 8009bce:	1961      	adds	r1, r4, r5
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	bf04      	itt	eq
 8009bd4:	6819      	ldreq	r1, [r3, #0]
 8009bd6:	685b      	ldreq	r3, [r3, #4]
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	bf04      	itt	eq
 8009bdc:	1949      	addeq	r1, r1, r5
 8009bde:	6021      	streq	r1, [r4, #0]
 8009be0:	6054      	str	r4, [r2, #4]
 8009be2:	e7ca      	b.n	8009b7a <_free_r+0x26>
 8009be4:	b003      	add	sp, #12
 8009be6:	bd30      	pop	{r4, r5, pc}
 8009be8:	20005170 	.word	0x20005170

08009bec <sbrk_aligned>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	4e0e      	ldr	r6, [pc, #56]	; (8009c28 <sbrk_aligned+0x3c>)
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	6831      	ldr	r1, [r6, #0]
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	b911      	cbnz	r1, 8009bfe <sbrk_aligned+0x12>
 8009bf8:	f000 f8f6 	bl	8009de8 <_sbrk_r>
 8009bfc:	6030      	str	r0, [r6, #0]
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4628      	mov	r0, r5
 8009c02:	f000 f8f1 	bl	8009de8 <_sbrk_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d00a      	beq.n	8009c20 <sbrk_aligned+0x34>
 8009c0a:	1cc4      	adds	r4, r0, #3
 8009c0c:	f024 0403 	bic.w	r4, r4, #3
 8009c10:	42a0      	cmp	r0, r4
 8009c12:	d007      	beq.n	8009c24 <sbrk_aligned+0x38>
 8009c14:	1a21      	subs	r1, r4, r0
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 f8e6 	bl	8009de8 <_sbrk_r>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d101      	bne.n	8009c24 <sbrk_aligned+0x38>
 8009c20:	f04f 34ff 	mov.w	r4, #4294967295
 8009c24:	4620      	mov	r0, r4
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	20005174 	.word	0x20005174

08009c2c <_malloc_r>:
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	1ccd      	adds	r5, r1, #3
 8009c32:	f025 0503 	bic.w	r5, r5, #3
 8009c36:	3508      	adds	r5, #8
 8009c38:	2d0c      	cmp	r5, #12
 8009c3a:	bf38      	it	cc
 8009c3c:	250c      	movcc	r5, #12
 8009c3e:	2d00      	cmp	r5, #0
 8009c40:	4607      	mov	r7, r0
 8009c42:	db01      	blt.n	8009c48 <_malloc_r+0x1c>
 8009c44:	42a9      	cmp	r1, r5
 8009c46:	d905      	bls.n	8009c54 <_malloc_r+0x28>
 8009c48:	230c      	movs	r3, #12
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	2600      	movs	r6, #0
 8009c4e:	4630      	mov	r0, r6
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c54:	4e2e      	ldr	r6, [pc, #184]	; (8009d10 <_malloc_r+0xe4>)
 8009c56:	f000 f919 	bl	8009e8c <__malloc_lock>
 8009c5a:	6833      	ldr	r3, [r6, #0]
 8009c5c:	461c      	mov	r4, r3
 8009c5e:	bb34      	cbnz	r4, 8009cae <_malloc_r+0x82>
 8009c60:	4629      	mov	r1, r5
 8009c62:	4638      	mov	r0, r7
 8009c64:	f7ff ffc2 	bl	8009bec <sbrk_aligned>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	d14d      	bne.n	8009d0a <_malloc_r+0xde>
 8009c6e:	6834      	ldr	r4, [r6, #0]
 8009c70:	4626      	mov	r6, r4
 8009c72:	2e00      	cmp	r6, #0
 8009c74:	d140      	bne.n	8009cf8 <_malloc_r+0xcc>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	eb04 0803 	add.w	r8, r4, r3
 8009c80:	f000 f8b2 	bl	8009de8 <_sbrk_r>
 8009c84:	4580      	cmp	r8, r0
 8009c86:	d13a      	bne.n	8009cfe <_malloc_r+0xd2>
 8009c88:	6821      	ldr	r1, [r4, #0]
 8009c8a:	3503      	adds	r5, #3
 8009c8c:	1a6d      	subs	r5, r5, r1
 8009c8e:	f025 0503 	bic.w	r5, r5, #3
 8009c92:	3508      	adds	r5, #8
 8009c94:	2d0c      	cmp	r5, #12
 8009c96:	bf38      	it	cc
 8009c98:	250c      	movcc	r5, #12
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7ff ffa5 	bl	8009bec <sbrk_aligned>
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d02b      	beq.n	8009cfe <_malloc_r+0xd2>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	442b      	add	r3, r5
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	e00e      	b.n	8009ccc <_malloc_r+0xa0>
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	1b52      	subs	r2, r2, r5
 8009cb2:	d41e      	bmi.n	8009cf2 <_malloc_r+0xc6>
 8009cb4:	2a0b      	cmp	r2, #11
 8009cb6:	d916      	bls.n	8009ce6 <_malloc_r+0xba>
 8009cb8:	1961      	adds	r1, r4, r5
 8009cba:	42a3      	cmp	r3, r4
 8009cbc:	6025      	str	r5, [r4, #0]
 8009cbe:	bf18      	it	ne
 8009cc0:	6059      	strne	r1, [r3, #4]
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	bf08      	it	eq
 8009cc6:	6031      	streq	r1, [r6, #0]
 8009cc8:	5162      	str	r2, [r4, r5]
 8009cca:	604b      	str	r3, [r1, #4]
 8009ccc:	4638      	mov	r0, r7
 8009cce:	f104 060b 	add.w	r6, r4, #11
 8009cd2:	f000 f8e1 	bl	8009e98 <__malloc_unlock>
 8009cd6:	f026 0607 	bic.w	r6, r6, #7
 8009cda:	1d23      	adds	r3, r4, #4
 8009cdc:	1af2      	subs	r2, r6, r3
 8009cde:	d0b6      	beq.n	8009c4e <_malloc_r+0x22>
 8009ce0:	1b9b      	subs	r3, r3, r6
 8009ce2:	50a3      	str	r3, [r4, r2]
 8009ce4:	e7b3      	b.n	8009c4e <_malloc_r+0x22>
 8009ce6:	6862      	ldr	r2, [r4, #4]
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	bf0c      	ite	eq
 8009cec:	6032      	streq	r2, [r6, #0]
 8009cee:	605a      	strne	r2, [r3, #4]
 8009cf0:	e7ec      	b.n	8009ccc <_malloc_r+0xa0>
 8009cf2:	4623      	mov	r3, r4
 8009cf4:	6864      	ldr	r4, [r4, #4]
 8009cf6:	e7b2      	b.n	8009c5e <_malloc_r+0x32>
 8009cf8:	4634      	mov	r4, r6
 8009cfa:	6876      	ldr	r6, [r6, #4]
 8009cfc:	e7b9      	b.n	8009c72 <_malloc_r+0x46>
 8009cfe:	230c      	movs	r3, #12
 8009d00:	603b      	str	r3, [r7, #0]
 8009d02:	4638      	mov	r0, r7
 8009d04:	f000 f8c8 	bl	8009e98 <__malloc_unlock>
 8009d08:	e7a1      	b.n	8009c4e <_malloc_r+0x22>
 8009d0a:	6025      	str	r5, [r4, #0]
 8009d0c:	e7de      	b.n	8009ccc <_malloc_r+0xa0>
 8009d0e:	bf00      	nop
 8009d10:	20005170 	.word	0x20005170

08009d14 <cleanup_glue>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	460c      	mov	r4, r1
 8009d18:	6809      	ldr	r1, [r1, #0]
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	b109      	cbz	r1, 8009d22 <cleanup_glue+0xe>
 8009d1e:	f7ff fff9 	bl	8009d14 <cleanup_glue>
 8009d22:	4621      	mov	r1, r4
 8009d24:	4628      	mov	r0, r5
 8009d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d2a:	f7ff bf13 	b.w	8009b54 <_free_r>
	...

08009d30 <_reclaim_reent>:
 8009d30:	4b2c      	ldr	r3, [pc, #176]	; (8009de4 <_reclaim_reent+0xb4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4283      	cmp	r3, r0
 8009d36:	b570      	push	{r4, r5, r6, lr}
 8009d38:	4604      	mov	r4, r0
 8009d3a:	d051      	beq.n	8009de0 <_reclaim_reent+0xb0>
 8009d3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d3e:	b143      	cbz	r3, 8009d52 <_reclaim_reent+0x22>
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d14a      	bne.n	8009ddc <_reclaim_reent+0xac>
 8009d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d48:	6819      	ldr	r1, [r3, #0]
 8009d4a:	b111      	cbz	r1, 8009d52 <_reclaim_reent+0x22>
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f7ff ff01 	bl	8009b54 <_free_r>
 8009d52:	6961      	ldr	r1, [r4, #20]
 8009d54:	b111      	cbz	r1, 8009d5c <_reclaim_reent+0x2c>
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7ff fefc 	bl	8009b54 <_free_r>
 8009d5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009d5e:	b111      	cbz	r1, 8009d66 <_reclaim_reent+0x36>
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff fef7 	bl	8009b54 <_free_r>
 8009d66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009d68:	b111      	cbz	r1, 8009d70 <_reclaim_reent+0x40>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7ff fef2 	bl	8009b54 <_free_r>
 8009d70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009d72:	b111      	cbz	r1, 8009d7a <_reclaim_reent+0x4a>
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff feed 	bl	8009b54 <_free_r>
 8009d7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d7c:	b111      	cbz	r1, 8009d84 <_reclaim_reent+0x54>
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f7ff fee8 	bl	8009b54 <_free_r>
 8009d84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d86:	b111      	cbz	r1, 8009d8e <_reclaim_reent+0x5e>
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f7ff fee3 	bl	8009b54 <_free_r>
 8009d8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009d90:	b111      	cbz	r1, 8009d98 <_reclaim_reent+0x68>
 8009d92:	4620      	mov	r0, r4
 8009d94:	f7ff fede 	bl	8009b54 <_free_r>
 8009d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d9a:	b111      	cbz	r1, 8009da2 <_reclaim_reent+0x72>
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f7ff fed9 	bl	8009b54 <_free_r>
 8009da2:	69a3      	ldr	r3, [r4, #24]
 8009da4:	b1e3      	cbz	r3, 8009de0 <_reclaim_reent+0xb0>
 8009da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009da8:	4620      	mov	r0, r4
 8009daa:	4798      	blx	r3
 8009dac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009dae:	b1b9      	cbz	r1, 8009de0 <_reclaim_reent+0xb0>
 8009db0:	4620      	mov	r0, r4
 8009db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009db6:	f7ff bfad 	b.w	8009d14 <cleanup_glue>
 8009dba:	5949      	ldr	r1, [r1, r5]
 8009dbc:	b941      	cbnz	r1, 8009dd0 <_reclaim_reent+0xa0>
 8009dbe:	3504      	adds	r5, #4
 8009dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dc2:	2d80      	cmp	r5, #128	; 0x80
 8009dc4:	68d9      	ldr	r1, [r3, #12]
 8009dc6:	d1f8      	bne.n	8009dba <_reclaim_reent+0x8a>
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f7ff fec3 	bl	8009b54 <_free_r>
 8009dce:	e7ba      	b.n	8009d46 <_reclaim_reent+0x16>
 8009dd0:	680e      	ldr	r6, [r1, #0]
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f7ff febe 	bl	8009b54 <_free_r>
 8009dd8:	4631      	mov	r1, r6
 8009dda:	e7ef      	b.n	8009dbc <_reclaim_reent+0x8c>
 8009ddc:	2500      	movs	r5, #0
 8009dde:	e7ef      	b.n	8009dc0 <_reclaim_reent+0x90>
 8009de0:	bd70      	pop	{r4, r5, r6, pc}
 8009de2:	bf00      	nop
 8009de4:	20000040 	.word	0x20000040

08009de8 <_sbrk_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d06      	ldr	r5, [pc, #24]	; (8009e04 <_sbrk_r+0x1c>)
 8009dec:	2300      	movs	r3, #0
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	602b      	str	r3, [r5, #0]
 8009df4:	f7f8 ff70 	bl	8002cd8 <_sbrk>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d102      	bne.n	8009e02 <_sbrk_r+0x1a>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	b103      	cbz	r3, 8009e02 <_sbrk_r+0x1a>
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	20005178 	.word	0x20005178

08009e08 <__utoa>:
 8009e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e0a:	4c1f      	ldr	r4, [pc, #124]	; (8009e88 <__utoa+0x80>)
 8009e0c:	b08b      	sub	sp, #44	; 0x2c
 8009e0e:	4605      	mov	r5, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	466e      	mov	r6, sp
 8009e14:	f104 0c20 	add.w	ip, r4, #32
 8009e18:	6820      	ldr	r0, [r4, #0]
 8009e1a:	6861      	ldr	r1, [r4, #4]
 8009e1c:	4637      	mov	r7, r6
 8009e1e:	c703      	stmia	r7!, {r0, r1}
 8009e20:	3408      	adds	r4, #8
 8009e22:	4564      	cmp	r4, ip
 8009e24:	463e      	mov	r6, r7
 8009e26:	d1f7      	bne.n	8009e18 <__utoa+0x10>
 8009e28:	7921      	ldrb	r1, [r4, #4]
 8009e2a:	7139      	strb	r1, [r7, #4]
 8009e2c:	1e91      	subs	r1, r2, #2
 8009e2e:	6820      	ldr	r0, [r4, #0]
 8009e30:	6038      	str	r0, [r7, #0]
 8009e32:	2922      	cmp	r1, #34	; 0x22
 8009e34:	f04f 0100 	mov.w	r1, #0
 8009e38:	d904      	bls.n	8009e44 <__utoa+0x3c>
 8009e3a:	7019      	strb	r1, [r3, #0]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4618      	mov	r0, r3
 8009e40:	b00b      	add	sp, #44	; 0x2c
 8009e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e44:	1e58      	subs	r0, r3, #1
 8009e46:	4684      	mov	ip, r0
 8009e48:	fbb5 f7f2 	udiv	r7, r5, r2
 8009e4c:	fb02 5617 	mls	r6, r2, r7, r5
 8009e50:	3628      	adds	r6, #40	; 0x28
 8009e52:	446e      	add	r6, sp
 8009e54:	460c      	mov	r4, r1
 8009e56:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009e5a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009e5e:	462e      	mov	r6, r5
 8009e60:	42b2      	cmp	r2, r6
 8009e62:	f101 0101 	add.w	r1, r1, #1
 8009e66:	463d      	mov	r5, r7
 8009e68:	d9ee      	bls.n	8009e48 <__utoa+0x40>
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	545a      	strb	r2, [r3, r1]
 8009e6e:	1919      	adds	r1, r3, r4
 8009e70:	1aa5      	subs	r5, r4, r2
 8009e72:	42aa      	cmp	r2, r5
 8009e74:	dae3      	bge.n	8009e3e <__utoa+0x36>
 8009e76:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009e7a:	780e      	ldrb	r6, [r1, #0]
 8009e7c:	7006      	strb	r6, [r0, #0]
 8009e7e:	3201      	adds	r2, #1
 8009e80:	f801 5901 	strb.w	r5, [r1], #-1
 8009e84:	e7f4      	b.n	8009e70 <__utoa+0x68>
 8009e86:	bf00      	nop
 8009e88:	0800bfa4 	.word	0x0800bfa4

08009e8c <__malloc_lock>:
 8009e8c:	4801      	ldr	r0, [pc, #4]	; (8009e94 <__malloc_lock+0x8>)
 8009e8e:	f7ff be41 	b.w	8009b14 <__retarget_lock_acquire_recursive>
 8009e92:	bf00      	nop
 8009e94:	2000516c 	.word	0x2000516c

08009e98 <__malloc_unlock>:
 8009e98:	4801      	ldr	r0, [pc, #4]	; (8009ea0 <__malloc_unlock+0x8>)
 8009e9a:	f7ff be3c 	b.w	8009b16 <__retarget_lock_release_recursive>
 8009e9e:	bf00      	nop
 8009ea0:	2000516c 	.word	0x2000516c

08009ea4 <_init>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr

08009eb0 <_fini>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	bf00      	nop
 8009eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb6:	bc08      	pop	{r3}
 8009eb8:	469e      	mov	lr, r3
 8009eba:	4770      	bx	lr
