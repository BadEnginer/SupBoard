
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008954  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022b8  08008af4  08008af4  00018af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adac  0800adac  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800adac  0800adac  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adb4  0800adb4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb4  0800adb4  0001adb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800adbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051cc  2000007c  0800ae38  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20005248  0800ae38  00025248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e705  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004098  00000000  00000000  0003e7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00042850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00044188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019275  00000000  00000000  00045918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d335  00000000  00000000  0005eb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b6a1  00000000  00000000  0007bec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117563  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de0  00000000  00000000  001175b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008adc 	.word	0x08008adc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08008adc 	.word	0x08008adc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	4608      	mov	r0, r1
 80004ee:	4639      	mov	r1, r7
 80004f0:	e881 000c 	stmia.w	r1, {r2, r3}
 80004f4:	4603      	mov	r3, r0
 80004f6:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 80004f8:	2010      	movs	r0, #16
 80004fa:	f008 f96b 	bl	80087d4 <malloc>
 80004fe:	4603      	mov	r3, r0
 8000500:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	897a      	ldrh	r2, [r7, #10]
 800050c:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	1d9a      	adds	r2, r3, #6
 8000512:	463b      	mov	r3, r7
 8000514:	cb03      	ldmia	r3!, {r0, r1}
 8000516:	6010      	str	r0, [r2, #0]
 8000518:	6051      	str	r1, [r2, #4]
	return pConfig;
 800051a:	697b      	ldr	r3, [r7, #20]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af02      	add	r7, sp, #8
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	1d9a      	adds	r2, r3, #6
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	cb03      	ldmia	r3!, {r0, r1}
 800053a:	6010      	str	r0, [r2, #0]
 800053c:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <ADS1115_updateConfig+0x60>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	82bb      	strh	r3, [r7, #20]
 8000544:	2300      	movs	r3, #0
 8000546:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f107 0014 	add.w	r0, r7, #20
 800054e:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000552:	460a      	mov	r2, r1
 8000554:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000558:	460b      	mov	r3, r1
 800055a:	4611      	mov	r1, r2
 800055c:	461a      	mov	r2, r3
 800055e:	f000 f891 	bl	8000684 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	889b      	ldrh	r3, [r3, #4]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	b299      	uxth	r1, r3
 800056e:	f107 0214 	add.w	r2, r7, #20
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2303      	movs	r3, #3
 8000578:	f002 fa18 	bl	80029ac <HAL_I2C_Master_Transmit>
}
 800057c:	bf00      	nop
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	08008af4 	.word	0x08008af4

08000588 <ADS1115_setThresholds>:

	return readValue;
}


void ADS1115_setThresholds(ADS1115_Handle_t *pConfig, int16_t lowValue, int16_t highValue){
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	807b      	strh	r3, [r7, #2]
 8000594:	4613      	mov	r3, r2
 8000596:	803b      	strh	r3, [r7, #0]
	uint8_t ADSWrite[3] = { 0 };
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <ADS1115_setThresholds+0x80>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	81bb      	strh	r3, [r7, #12]
 800059e:	2300      	movs	r3, #0
 80005a0:	73bb      	strb	r3, [r7, #14]

	//hi threshold reg
	ADSWrite[0] = 0x03;
 80005a2:	2303      	movs	r3, #3
 80005a4:	733b      	strb	r3, [r7, #12]
	ADSWrite[1] = (uint8_t)((highValue & 0xFF00) >> 8);
 80005a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80005aa:	121b      	asrs	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	737b      	strb	r3, [r7, #13]
	ADSWrite[2] = (uint8_t)(highValue & 0x00FF);
 80005b0:	883b      	ldrh	r3, [r7, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), ADSWrite, 3, 100);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6818      	ldr	r0, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	889b      	ldrh	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	b299      	uxth	r1, r3
 80005c2:	f107 020c 	add.w	r2, r7, #12
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2303      	movs	r3, #3
 80005cc:	f002 f9ee 	bl	80029ac <HAL_I2C_Master_Transmit>

	//lo threshold reg
	ADSWrite[0] = 0x02;
 80005d0:	2302      	movs	r3, #2
 80005d2:	733b      	strb	r3, [r7, #12]
	ADSWrite[1] = (uint8_t)((lowValue & 0xFF00) >> 8);
 80005d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005d8:	121b      	asrs	r3, r3, #8
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	737b      	strb	r3, [r7, #13]
	ADSWrite[2] = (uint8_t)(lowValue & 0x00FF);
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), ADSWrite, 3, 100);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	889b      	ldrh	r3, [r3, #4]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	b299      	uxth	r1, r3
 80005f0:	f107 020c 	add.w	r2, r7, #12
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2303      	movs	r3, #3
 80005fa:	f002 f9d7 	bl	80029ac <HAL_I2C_Master_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08008af4 	.word	0x08008af4

0800060c <ADS1115_setConversionReadyPin>:

void ADS1115_flushData(ADS1115_Handle_t* pConfig){
	ADS1115_getData(pConfig);
}

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
 8000614:	f04f 32ff 	mov.w	r2, #4294967295
 8000618:	2100      	movs	r1, #0
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ffb4 	bl	8000588 <ADS1115_setThresholds>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <ADS1115_startContinousMode>:

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af02      	add	r7, sp, #8
 800062e:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <ADS1115_startContinousMode+0x58>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	82bb      	strh	r3, [r7, #20]
 8000636:	2300      	movs	r3, #0
 8000638:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	3206      	adds	r2, #6
 8000642:	6810      	ldr	r0, [r2, #0]
 8000644:	6851      	ldr	r1, [r2, #4]
 8000646:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000648:	2300      	movs	r3, #0
 800064a:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 800064c:	f107 0014 	add.w	r0, r7, #20
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000658:	f000 f814 	bl	8000684 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	889b      	ldrh	r3, [r3, #4]
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	b299      	uxth	r1, r3
 8000668:	f107 0214 	add.w	r2, r7, #20
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2303      	movs	r3, #3
 8000672:	f002 f99b 	bl	80029ac <HAL_I2C_Master_Transmit>
}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	08008af4 	.word	0x08008af4

08000684 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	e883 0006 	stmia.w	r3, {r1, r2}
	pOutFrame[0] = 0x01;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 6) | (config.pgaConfig << 3)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b25a      	sxtb	r2, r3
 80006a0:	793b      	ldrb	r3, [r7, #4]
 80006a2:	019b      	lsls	r3, r3, #6
 80006a4:	b259      	sxtb	r1, r3
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	430b      	orrs	r3, r1
 80006ae:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	430b      	orrs	r3, r1
 80006b6:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 6) | (config.pgaConfig << 3)
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3302      	adds	r3, #2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	015b      	lsls	r3, r3, #5
 80006d0:	b259      	sxtb	r1, r3
 80006d2:	7a3b      	ldrb	r3, [r7, #8]
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	430b      	orrs	r3, r1
 80006da:	b259      	sxtb	r1, r3
 80006dc:	7a7b      	ldrb	r3, [r7, #9]
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	430b      	orrs	r3, r1
 80006e4:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 80006e6:	7abb      	ldrb	r3, [r7, #10]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	430b      	orrs	r3, r1
 80006ee:	b259      	sxtb	r1, r3
 80006f0:	7afb      	ldrb	r3, [r7, #11]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	430b      	orrs	r3, r1
 80006f8:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3302      	adds	r3, #2
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <driver_delay_xms>:
#include "Display/e-ink/epaper.h"

void driver_delay_xms(unsigned long xms)	
{	
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
HAL_Delay(xms);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f001 f9b4 	bl	8001a88 <HAL_Delay>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <Epaper_Spi_WriteByte>:


void Epaper_Spi_WriteByte(unsigned char TxData)
{				   			 
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	extern SPI_HandleTypeDef hspi1;
	HAL_StatusTypeDef st;
	st = HAL_SPI_Receive(&hspi1, &TxData, sizeof(TxData), 10);
 8000732:	1df9      	adds	r1, r7, #7
 8000734:	230a      	movs	r3, #10
 8000736:	2201      	movs	r2, #1
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <Epaper_Spi_WriteByte+0x24>)
 800073a:	f003 fc10 	bl	8003f5e <HAL_SPI_Receive>
 800073e:	4603      	mov	r3, r0
 8000740:	73fb      	strb	r3, [r7, #15]


}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200006d4 	.word	0x200006d4

08000750 <Epaper_READBUSY>:

void Epaper_READBUSY(void)
{ 
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  while(1)
  {	 //=1 BUSY
     if(isEPD_W21_BUSY==0) break;;
 8000754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <Epaper_READBUSY+0x1c>)
 800075a:	f001 ffb1 	bl	80026c0 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d000      	beq.n	8000766 <Epaper_READBUSY+0x16>
 8000764:	e7f6      	b.n	8000754 <Epaper_READBUSY+0x4>
 8000766:	bf00      	nop
  }  
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40020400 	.word	0x40020400

08000770 <Epaper_Write_Command>:

void Epaper_Write_Command(unsigned char cmd)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 800077a:	2201      	movs	r2, #1
 800077c:	2101      	movs	r1, #1
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <Epaper_Write_Command+0x44>)
 8000780:	f001 ffb6 	bl	80026f0 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 8000784:	2200      	movs	r2, #0
 8000786:	2101      	movs	r1, #1
 8000788:	480a      	ldr	r0, [pc, #40]	; (80007b4 <Epaper_Write_Command+0x44>)
 800078a:	f001 ffb1 	bl	80026f0 <HAL_GPIO_WritePin>
	EPD_W21_DC_0;  // D/C#   0:command  1:data
 800078e:	2200      	movs	r2, #0
 8000790:	2104      	movs	r1, #4
 8000792:	4808      	ldr	r0, [pc, #32]	; (80007b4 <Epaper_Write_Command+0x44>)
 8000794:	f001 ffac 	bl	80026f0 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(cmd);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffc4 	bl	8000728 <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 80007a0:	2201      	movs	r2, #1
 80007a2:	2101      	movs	r1, #1
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <Epaper_Write_Command+0x44>)
 80007a6:	f001 ffa3 	bl	80026f0 <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40020400 	.word	0x40020400

080007b8 <Epaper_Write_Data>:

void Epaper_Write_Data(unsigned char data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 80007c2:	2201      	movs	r2, #1
 80007c4:	2101      	movs	r1, #1
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <Epaper_Write_Data+0x44>)
 80007c8:	f001 ff92 	bl	80026f0 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 80007cc:	2200      	movs	r2, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	480a      	ldr	r0, [pc, #40]	; (80007fc <Epaper_Write_Data+0x44>)
 80007d2:	f001 ff8d 	bl	80026f0 <HAL_GPIO_WritePin>
	EPD_W21_DC_1;  // D/C#   0:command  1:data
 80007d6:	2201      	movs	r2, #1
 80007d8:	2104      	movs	r1, #4
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <Epaper_Write_Data+0x44>)
 80007dc:	f001 ff88 	bl	80026f0 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(data);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa0 	bl	8000728 <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 80007e8:	2201      	movs	r2, #1
 80007ea:	2101      	movs	r1, #1
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <Epaper_Write_Data+0x44>)
 80007ee:	f001 ff7f 	bl	80026f0 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020400 	.word	0x40020400

08000800 <EPD_HW_Init>:
	
/////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

void EPD_HW_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	EPD_W21_RST_0;  // Module reset   
 8000804:	2200      	movs	r2, #0
 8000806:	2102      	movs	r1, #2
 8000808:	4833      	ldr	r0, [pc, #204]	; (80008d8 <EPD_HW_Init+0xd8>)
 800080a:	f001 ff71 	bl	80026f0 <HAL_GPIO_WritePin>
	driver_delay_xms(100);//At least 10ms delay 
 800080e:	2064      	movs	r0, #100	; 0x64
 8000810:	f7ff ff7f 	bl	8000712 <driver_delay_xms>
	EPD_W21_RST_1;
 8000814:	2201      	movs	r2, #1
 8000816:	2102      	movs	r1, #2
 8000818:	482f      	ldr	r0, [pc, #188]	; (80008d8 <EPD_HW_Init+0xd8>)
 800081a:	f001 ff69 	bl	80026f0 <HAL_GPIO_WritePin>
	driver_delay_xms(100); //At least 10ms delay 
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f7ff ff77 	bl	8000712 <driver_delay_xms>
	
	Epaper_READBUSY();   
 8000824:	f7ff ff94 	bl	8000750 <Epaper_READBUSY>
	Epaper_Write_Command(0x12);  //SWRESET
 8000828:	2012      	movs	r0, #18
 800082a:	f7ff ffa1 	bl	8000770 <Epaper_Write_Command>
	Epaper_READBUSY();   
 800082e:	f7ff ff8f 	bl	8000750 <Epaper_READBUSY>
		
	Epaper_Write_Command(0x01); //Driver output control      
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff ff9c 	bl	8000770 <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 8000838:	2027      	movs	r0, #39	; 0x27
 800083a:	f7ff ffbd 	bl	80007b8 <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff ffba 	bl	80007b8 <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff ffb7 	bl	80007b8 <Epaper_Write_Data>

	Epaper_Write_Command(0x11); //data entry mode       
 800084a:	2011      	movs	r0, #17
 800084c:	f7ff ff90 	bl	8000770 <Epaper_Write_Command>
	Epaper_Write_Data(0x01);
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff ffb1 	bl	80007b8 <Epaper_Write_Data>

	Epaper_Write_Command(0x44); //set Ram-X address start/end position   
 8000856:	2044      	movs	r0, #68	; 0x44
 8000858:	f7ff ff8a 	bl	8000770 <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ffab 	bl	80007b8 <Epaper_Write_Data>
	Epaper_Write_Data(0x0F);    //0x0F-->(15+1)*8=128
 8000862:	200f      	movs	r0, #15
 8000864:	f7ff ffa8 	bl	80007b8 <Epaper_Write_Data>

	Epaper_Write_Command(0x45); //set Ram-Y address start/end position          
 8000868:	2045      	movs	r0, #69	; 0x45
 800086a:	f7ff ff81 	bl	8000770 <Epaper_Write_Command>
	Epaper_Write_Data(0x27);   //0x0127-->(295+1)=296
 800086e:	2027      	movs	r0, #39	; 0x27
 8000870:	f7ff ffa2 	bl	80007b8 <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff ff9f 	bl	80007b8 <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff ff9c 	bl	80007b8 <Epaper_Write_Data>
	Epaper_Write_Data(0x00); 
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ff99 	bl	80007b8 <Epaper_Write_Data>

	Epaper_Write_Command(0x3C); //BorderWavefrom
 8000886:	203c      	movs	r0, #60	; 0x3c
 8000888:	f7ff ff72 	bl	8000770 <Epaper_Write_Command>
	Epaper_Write_Data(0x05);	
 800088c:	2005      	movs	r0, #5
 800088e:	f7ff ff93 	bl	80007b8 <Epaper_Write_Data>
	  	
  Epaper_Write_Command(0x18); //Read built-in temperature sensor
 8000892:	2018      	movs	r0, #24
 8000894:	f7ff ff6c 	bl	8000770 <Epaper_Write_Command>
	Epaper_Write_Data(0x80);	
 8000898:	2080      	movs	r0, #128	; 0x80
 800089a:	f7ff ff8d 	bl	80007b8 <Epaper_Write_Data>
	
	Epaper_Write_Command(0x21); //  Display update control
 800089e:	2021      	movs	r0, #33	; 0x21
 80008a0:	f7ff ff66 	bl	8000770 <Epaper_Write_Command>
  Epaper_Write_Data(0x00);	
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff ff87 	bl	80007b8 <Epaper_Write_Data>
	Epaper_Write_Data(0x80);	
 80008aa:	2080      	movs	r0, #128	; 0x80
 80008ac:	f7ff ff84 	bl	80007b8 <Epaper_Write_Data>

	Epaper_Write_Command(0x4E);   // set RAM x address count to 0;
 80008b0:	204e      	movs	r0, #78	; 0x4e
 80008b2:	f7ff ff5d 	bl	8000770 <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ff7e 	bl	80007b8 <Epaper_Write_Data>
	Epaper_Write_Command(0x4F);   // set RAM y address count to 0X199;    
 80008bc:	204f      	movs	r0, #79	; 0x4f
 80008be:	f7ff ff57 	bl	8000770 <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 80008c2:	2027      	movs	r0, #39	; 0x27
 80008c4:	f7ff ff78 	bl	80007b8 <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff ff75 	bl	80007b8 <Epaper_Write_Data>
  Epaper_READBUSY();
 80008ce:	f7ff ff3f 	bl	8000750 <Epaper_READBUSY>
	
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40020400 	.word	0x40020400

080008dc <EPD_Update>:
/////////////////////////////////////////////////////////////////////////////////////////
void EPD_Update(void)
{   
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  Epaper_Write_Command(0x22); //Display Update Control
 80008e0:	2022      	movs	r0, #34	; 0x22
 80008e2:	f7ff ff45 	bl	8000770 <Epaper_Write_Command>
  Epaper_Write_Data(0xF7);   
 80008e6:	20f7      	movs	r0, #247	; 0xf7
 80008e8:	f7ff ff66 	bl	80007b8 <Epaper_Write_Data>
  Epaper_Write_Command(0x20);  //Activate Display Update Sequence
 80008ec:	2020      	movs	r0, #32
 80008ee:	f7ff ff3f 	bl	8000770 <Epaper_Write_Command>
  Epaper_READBUSY();   
 80008f2:	f7ff ff2d 	bl	8000750 <Epaper_READBUSY>

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}

080008fa <EPD_WhiteScreen_ALL>:
//////////////////////////////All screen update////////////////////////////////////////////
void EPD_WhiteScreen_ALL(const unsigned char *BW_datas,const unsigned char *R_datas)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	6039      	str	r1, [r7, #0]
   unsigned int i;	
  Epaper_Write_Command(0x24);   //write RAM for black(0)/white (1)
 8000904:	2024      	movs	r0, #36	; 0x24
 8000906:	f7ff ff33 	bl	8000770 <Epaper_Write_Command>
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	e00a      	b.n	8000926 <EPD_WhiteScreen_ALL+0x2c>
   {               
     Epaper_Write_Data(*BW_datas);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff4f 	bl	80007b8 <Epaper_Write_Data>
			BW_datas++;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3301      	adds	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	3301      	adds	r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800092c:	d3f0      	bcc.n	8000910 <EPD_WhiteScreen_ALL+0x16>
   }
	Epaper_Write_Command(0x26);   //write RAM for black(0)/white (1)
 800092e:	2026      	movs	r0, #38	; 0x26
 8000930:	f7ff ff1e 	bl	8000770 <Epaper_Write_Command>
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	e00c      	b.n	8000954 <EPD_WhiteScreen_ALL+0x5a>
   {               
     Epaper_Write_Data(~(*R_datas));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	43db      	mvns	r3, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff38 	bl	80007b8 <Epaper_Write_Data>
			R_datas++;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	603b      	str	r3, [r7, #0]
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800095a:	d3ee      	bcc.n	800093a <EPD_WhiteScreen_ALL+0x40>
   }
   EPD_Update();	 
 800095c:	f7ff ffbe 	bl	80008dc <EPD_Update>
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <EPD_DeepSleep>:
     Epaper_Write_Data(0x00);
   }
   EPD_Update();	 
}
void EPD_DeepSleep(void)
{  	
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  Epaper_Write_Command(0x10); //enter deep sleep
 800096c:	2010      	movs	r0, #16
 800096e:	f7ff feff 	bl	8000770 <Epaper_Write_Command>
  Epaper_Write_Data(0x01); 
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff ff20 	bl	80007b8 <Epaper_Write_Data>
  driver_delay_xms(100);
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f7ff feca 	bl	8000712 <driver_delay_xms>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}

08000982 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af04      	add	r7, sp, #16
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	2200      	movs	r2, #0
 80009ac:	2178      	movs	r1, #120	; 0x78
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <ssd1306_WriteCommand+0x2c>)
 80009b0:	f002 f8fa 	bl	8002ba8 <HAL_I2C_Mem_Write>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000680 	.word	0x20000680

080009c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af04      	add	r7, sp, #16
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f04f 32ff 	mov.w	r2, #4294967295
 80009d2:	9202      	str	r2, [sp, #8]
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2301      	movs	r3, #1
 80009dc:	2240      	movs	r2, #64	; 0x40
 80009de:	2178      	movs	r1, #120	; 0x78
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <ssd1306_WriteData+0x30>)
 80009e2:	f002 f8e1 	bl	8002ba8 <HAL_I2C_Mem_Write>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000680 	.word	0x20000680

080009f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80009f8:	f7ff ffc3 	bl	8000982 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f001 f843 	bl	8001a88 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 fa34 	bl	8000e70 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000a08:	2020      	movs	r0, #32
 8000a0a:	f7ff ffc1 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff ffbe 	bl	8000990 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a14:	20b0      	movs	r0, #176	; 0xb0
 8000a16:	f7ff ffbb 	bl	8000990 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000a1a:	20c8      	movs	r0, #200	; 0xc8
 8000a1c:	f7ff ffb8 	bl	8000990 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff ffb5 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000a26:	2010      	movs	r0, #16
 8000a28:	f7ff ffb2 	bl	8000990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000a2c:	2040      	movs	r0, #64	; 0x40
 8000a2e:	f7ff ffaf 	bl	8000990 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	f000 fa09 	bl	8000e4a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000a38:	20a1      	movs	r0, #161	; 0xa1
 8000a3a:	f7ff ffa9 	bl	8000990 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000a3e:	20a6      	movs	r0, #166	; 0xa6
 8000a40:	f7ff ffa6 	bl	8000990 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000a44:	20a8      	movs	r0, #168	; 0xa8
 8000a46:	f7ff ffa3 	bl	8000990 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000a4a:	203f      	movs	r0, #63	; 0x3f
 8000a4c:	f7ff ffa0 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a50:	20a4      	movs	r0, #164	; 0xa4
 8000a52:	f7ff ff9d 	bl	8000990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000a56:	20d3      	movs	r0, #211	; 0xd3
 8000a58:	f7ff ff9a 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff ff97 	bl	8000990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a62:	20d5      	movs	r0, #213	; 0xd5
 8000a64:	f7ff ff94 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000a68:	20f0      	movs	r0, #240	; 0xf0
 8000a6a:	f7ff ff91 	bl	8000990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000a6e:	20d9      	movs	r0, #217	; 0xd9
 8000a70:	f7ff ff8e 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000a74:	2022      	movs	r0, #34	; 0x22
 8000a76:	f7ff ff8b 	bl	8000990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000a7a:	20da      	movs	r0, #218	; 0xda
 8000a7c:	f7ff ff88 	bl	8000990 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000a80:	2012      	movs	r0, #18
 8000a82:	f7ff ff85 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000a86:	20db      	movs	r0, #219	; 0xdb
 8000a88:	f7ff ff82 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000a8c:	2020      	movs	r0, #32
 8000a8e:	f7ff ff7f 	bl	8000990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000a92:	208d      	movs	r0, #141	; 0x8d
 8000a94:	f7ff ff7c 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000a98:	2014      	movs	r0, #20
 8000a9a:	f7ff ff79 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f000 f9e6 	bl	8000e70 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 f80f 	bl	8000ac8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000aaa:	f000 f831 	bl	8000b10 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <ssd1306_Init+0xd0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <ssd1306_Init+0xd0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000aba:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <ssd1306_Init+0xd0>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	711a      	strb	r2, [r3, #4]
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000498 	.word	0x20000498

08000ac8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	e00d      	b.n	8000af4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <ssd1306_Fill+0x1a>
 8000ade:	2100      	movs	r1, #0
 8000ae0:	e000      	b.n	8000ae4 <ssd1306_Fill+0x1c>
 8000ae2:	21ff      	movs	r1, #255	; 0xff
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <ssd1306_Fill+0x44>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	460a      	mov	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000afa:	d3ed      	bcc.n	8000ad8 <ssd1306_Fill+0x10>
    }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000098 	.word	0x20000098

08000b10 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	e016      	b.n	8000b4a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	3b50      	subs	r3, #80	; 0x50
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff34 	bl	8000990 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff ff31 	bl	8000990 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000b2e:	2010      	movs	r0, #16
 8000b30:	f7ff ff2e 	bl	8000990 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	01db      	lsls	r3, r3, #7
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <ssd1306_UpdateScreen+0x4c>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff3e 	bl	80009c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	3301      	adds	r3, #1
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d9e5      	bls.n	8000b1c <ssd1306_UpdateScreen+0xc>
    }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000098 	.word	0x20000098

08000b60 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	71bb      	strb	r3, [r7, #6]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db3d      	blt.n	8000bf6 <ssd1306_DrawPixel+0x96>
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b7e:	d83a      	bhi.n	8000bf6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000b80:	797b      	ldrb	r3, [r7, #5]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d11a      	bne.n	8000bbc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	b2d8      	uxtb	r0, r3
 8000b8e:	4603      	mov	r3, r0
 8000b90:	01db      	lsls	r3, r3, #7
 8000b92:	4413      	add	r3, r2
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <ssd1306_DrawPixel+0xa4>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	b25a      	sxtb	r2, r3
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b259      	sxtb	r1, r3
 8000bac:	79fa      	ldrb	r2, [r7, #7]
 8000bae:	4603      	mov	r3, r0
 8000bb0:	01db      	lsls	r3, r3, #7
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2c9      	uxtb	r1, r1
 8000bb6:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <ssd1306_DrawPixel+0xa4>)
 8000bb8:	54d1      	strb	r1, [r2, r3]
 8000bba:	e01d      	b.n	8000bf8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	b2d8      	uxtb	r0, r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <ssd1306_DrawPixel+0xa4>)
 8000bcc:	5cd3      	ldrb	r3, [r2, r3]
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	4013      	ands	r3, r2
 8000be4:	b259      	sxtb	r1, r3
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	4603      	mov	r3, r0
 8000bea:	01db      	lsls	r3, r3, #7
 8000bec:	4413      	add	r3, r2
 8000bee:	b2c9      	uxtb	r1, r1
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <ssd1306_DrawPixel+0xa4>)
 8000bf2:	54d1      	strb	r1, [r2, r3]
 8000bf4:	e000      	b.n	8000bf8 <ssd1306_DrawPixel+0x98>
        return;
 8000bf6:	bf00      	nop
    }
}
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000098 	.word	0x20000098

08000c08 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4604      	mov	r4, r0
 8000c10:	1d38      	adds	r0, r7, #4
 8000c12:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c16:	461a      	mov	r2, r3
 8000c18:	4623      	mov	r3, r4
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b1f      	cmp	r3, #31
 8000c24:	d902      	bls.n	8000c2c <ssd1306_WriteChar+0x24>
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2b7e      	cmp	r3, #126	; 0x7e
 8000c2a:	d901      	bls.n	8000c30 <ssd1306_WriteChar+0x28>
        return 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e06d      	b.n	8000d0c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000c30:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <ssd1306_WriteChar+0x10c>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	793b      	ldrb	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	2b80      	cmp	r3, #128	; 0x80
 8000c3c:	dc06      	bgt.n	8000c4c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <ssd1306_WriteChar+0x10c>)
 8000c40:	885b      	ldrh	r3, [r3, #2]
 8000c42:	461a      	mov	r2, r3
 8000c44:	797b      	ldrb	r3, [r7, #5]
 8000c46:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000c48:	2b40      	cmp	r3, #64	; 0x40
 8000c4a:	dd01      	ble.n	8000c50 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e05d      	b.n	8000d0c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	e04c      	b.n	8000cf0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	3b20      	subs	r3, #32
 8000c5c:	7979      	ldrb	r1, [r7, #5]
 8000c5e:	fb01 f303 	mul.w	r3, r1, r3
 8000c62:	4619      	mov	r1, r3
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	440b      	add	r3, r1
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	e034      	b.n	8000ce0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d012      	beq.n	8000cac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <ssd1306_WriteChar+0x10c>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	b2d8      	uxtb	r0, r3
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <ssd1306_WriteChar+0x10c>)
 8000c96:	885b      	ldrh	r3, [r3, #2]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	7bba      	ldrb	r2, [r7, #14]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f7ff ff5b 	bl	8000b60 <ssd1306_DrawPixel>
 8000caa:	e016      	b.n	8000cda <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <ssd1306_WriteChar+0x10c>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2d8      	uxtb	r0, r3
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <ssd1306_WriteChar+0x10c>)
 8000cbc:	885b      	ldrh	r3, [r3, #2]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b2d9      	uxtb	r1, r3
 8000cc8:	7bbb      	ldrb	r3, [r7, #14]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bf0c      	ite	eq
 8000cce:	2301      	moveq	r3, #1
 8000cd0:	2300      	movne	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	f7ff ff43 	bl	8000b60 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	793b      	ldrb	r3, [r7, #4]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d3c5      	bcc.n	8000c76 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3301      	adds	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d3ad      	bcc.n	8000c56 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <ssd1306_WriteChar+0x10c>)
 8000cfc:	881a      	ldrh	r2, [r3, #0]
 8000cfe:	793b      	ldrb	r3, [r7, #4]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <ssd1306_WriteChar+0x10c>)
 8000d08:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3724      	adds	r7, #36	; 0x24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	20000498 	.word	0x20000498

08000d18 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	1d38      	adds	r0, r7, #4
 8000d22:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d26:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000d28:	e012      	b.n	8000d50 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	7818      	ldrb	r0, [r3, #0]
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	1d3a      	adds	r2, r7, #4
 8000d32:	ca06      	ldmia	r2, {r1, r2}
 8000d34:	f7ff ff68 	bl	8000c08 <ssd1306_WriteChar>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d002      	beq.n	8000d4a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	e008      	b.n	8000d5c <ssd1306_WriteString+0x44>
        }
        str++;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e8      	bne.n	8000d2a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	4613      	mov	r3, r2
 8000d72:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <ssd1306_SetCursor+0x2c>)
 8000d7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <ssd1306_SetCursor+0x2c>)
 8000d82:	805a      	strh	r2, [r3, #2]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20000498 	.word	0x20000498

08000d94 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	603a      	str	r2, [r7, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
 8000da2:	460b      	mov	r3, r1
 8000da4:	71bb      	strb	r3, [r7, #6]
 8000da6:	4613      	mov	r3, r2
 8000da8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000daa:	797b      	ldrb	r3, [r7, #5]
 8000dac:	3307      	adds	r3, #7
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	da00      	bge.n	8000db4 <ssd1306_DrawBitmap+0x20>
 8000db2:	3307      	adds	r3, #7
 8000db4:	10db      	asrs	r3, r3, #3
 8000db6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db3e      	blt.n	8000e42 <ssd1306_DrawBitmap+0xae>
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b3f      	cmp	r3, #63	; 0x3f
 8000dc8:	d83b      	bhi.n	8000e42 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73bb      	strb	r3, [r7, #14]
 8000dce:	e033      	b.n	8000e38 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	737b      	strb	r3, [r7, #13]
 8000dd4:	e026      	b.n	8000e24 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e00d      	b.n	8000e04 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000de8:	7bbb      	ldrb	r3, [r7, #14]
 8000dea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	7b7a      	ldrb	r2, [r7, #13]
 8000df4:	08d2      	lsrs	r2, r2, #3
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	4413      	add	r3, r2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da08      	bge.n	8000e1e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	7b7b      	ldrb	r3, [r7, #13]
 8000e10:	4413      	add	r3, r2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	7f3a      	ldrb	r2, [r7, #28]
 8000e16:	79b9      	ldrb	r1, [r7, #6]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fea1 	bl	8000b60 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000e1e:	7b7b      	ldrb	r3, [r7, #13]
 8000e20:	3301      	adds	r3, #1
 8000e22:	737b      	strb	r3, [r7, #13]
 8000e24:	7b7a      	ldrb	r2, [r7, #13]
 8000e26:	797b      	ldrb	r3, [r7, #5]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d3d4      	bcc.n	8000dd6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	73bb      	strb	r3, [r7, #14]
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	3301      	adds	r3, #1
 8000e36:	71bb      	strb	r3, [r7, #6]
 8000e38:	7bba      	ldrb	r2, [r7, #14]
 8000e3a:	7e3b      	ldrb	r3, [r7, #24]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3c7      	bcc.n	8000dd0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000e40:	e000      	b.n	8000e44 <ssd1306_DrawBitmap+0xb0>
        return;
 8000e42:	bf00      	nop
}
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000e54:	2381      	movs	r3, #129	; 0x81
 8000e56:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fd98 	bl	8000990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fd94 	bl	8000990 <ssd1306_WriteCommand>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000e80:	23af      	movs	r3, #175	; 0xaf
 8000e82:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <ssd1306_SetDisplayOn+0x38>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	715a      	strb	r2, [r3, #5]
 8000e8a:	e004      	b.n	8000e96 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000e8c:	23ae      	movs	r3, #174	; 0xae
 8000e8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <ssd1306_SetDisplayOn+0x38>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fd79 	bl	8000990 <ssd1306_WriteCommand>
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000498 	.word	0x20000498

08000eac <ws2812_init>:
uint16_t BUF_DMA [ARRAY_LEN] = {0};
uint8_t rgb_temp[12][3];
uint16_t DMA_BUF_TEMP[24];
//------------------------------------------------------------------
void ws2812_init(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++) BUF_DMA[i] = LOW;
 8000eb2:	2330      	movs	r3, #48	; 0x30
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	e007      	b.n	8000ec8 <ws2812_init+0x1c>
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <ws2812_init+0x30>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	211a      	movs	r1, #26
 8000ebe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2bef      	cmp	r3, #239	; 0xef
 8000ecc:	ddf4      	ble.n	8000eb8 <ws2812_init+0xc>
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	200004a0 	.word	0x200004a0

08000ee0 <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8000ee0:	b490      	push	{r4, r7}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	4623      	mov	r3, r4
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	717b      	strb	r3, [r7, #5]
 8000efa:	4613      	mov	r3, r2
 8000efc:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	81fb      	strh	r3, [r7, #14]
 8000f02:	e07a      	b.n	8000ffa <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	fa42 f303 	asr.w	r3, r2, r3
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00e      	beq.n	8000f38 <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	3330      	adds	r3, #48	; 0x30
 8000f26:	89fa      	ldrh	r2, [r7, #14]
 8000f28:	b292      	uxth	r2, r2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3308      	adds	r3, #8
 8000f2e:	4a38      	ldr	r2, [pc, #224]	; (8001010 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000f30:	2141      	movs	r1, #65	; 0x41
 8000f32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f36:	e00d      	b.n	8000f54 <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	3330      	adds	r3, #48	; 0x30
 8000f44:	89fa      	ldrh	r2, [r7, #14]
 8000f46:	b292      	uxth	r2, r2
 8000f48:	4413      	add	r3, r2
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	4a30      	ldr	r2, [pc, #192]	; (8001010 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000f4e:	211a      	movs	r1, #26
 8000f50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 8000f54:	79ba      	ldrb	r2, [r7, #6]
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	fa42 f303 	asr.w	r3, r2, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00d      	beq.n	8000f86 <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	3330      	adds	r3, #48	; 0x30
 8000f76:	89fa      	ldrh	r2, [r7, #14]
 8000f78:	b292      	uxth	r2, r2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a24      	ldr	r2, [pc, #144]	; (8001010 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000f7e:	2141      	movs	r1, #65	; 0x41
 8000f80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f84:	e00c      	b.n	8000fa0 <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	3330      	adds	r3, #48	; 0x30
 8000f92:	89fa      	ldrh	r2, [r7, #14]
 8000f94:	b292      	uxth	r2, r2
 8000f96:	4413      	add	r3, r2
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000f9a:	211a      	movs	r1, #26
 8000f9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 8000fa0:	797a      	ldrb	r2, [r7, #5]
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	fa42 f303 	asr.w	r3, r2, r3
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00e      	beq.n	8000fd4 <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	3330      	adds	r3, #48	; 0x30
 8000fc2:	89fa      	ldrh	r2, [r7, #14]
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3310      	adds	r3, #16
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000fcc:	2141      	movs	r1, #65	; 0x41
 8000fce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fd2:	e00d      	b.n	8000ff0 <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	3330      	adds	r3, #48	; 0x30
 8000fe0:	89fa      	ldrh	r2, [r7, #14]
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3310      	adds	r3, #16
 8000fe8:	4a09      	ldr	r2, [pc, #36]	; (8001010 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000fea:	211a      	movs	r1, #26
 8000fec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	81fb      	strh	r3, [r7, #14]
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	d980      	bls.n	8000f04 <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bc90      	pop	{r4, r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200004a0 	.word	0x200004a0

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101a:	f000 fcf3 	bl	8001a04 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101e:	f000 f8b3 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f000 fa11 	bl	8001448 <MX_GPIO_Init>
  MX_DMA_Init();
 8001026:	f000 f9ef 	bl	8001408 <MX_DMA_Init>
  MX_I2C1_Init();
 800102a:	f000 f915 	bl	8001258 <MX_I2C1_Init>
  MX_SPI1_Init();
 800102e:	f000 f941 	bl	80012b4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001032:	f000 f975 	bl	8001320 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t num = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef type;
  for(uint8_t i = 0; i > 127 ; i++){
 800103a:	2300      	movs	r3, #0
 800103c:	75bb      	strb	r3, [r7, #22]
 800103e:	e013      	b.n	8001068 <main+0x54>
	  type = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 8001040:	7dbb      	ldrb	r3, [r7, #22]
 8001042:	b29b      	uxth	r3, r3
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b299      	uxth	r1, r3
 8001048:	230a      	movs	r3, #10
 800104a:	2202      	movs	r2, #2
 800104c:	4843      	ldr	r0, [pc, #268]	; (800115c <main+0x148>)
 800104e:	f001 fea5 	bl	8002d9c <HAL_I2C_IsDeviceReady>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
	  if(type == HAL_OK){
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <main+0x4e>
		  num++;
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	3301      	adds	r3, #1
 8001060:	75fb      	strb	r3, [r7, #23]
  for(uint8_t i = 0; i > 127 ; i++){
 8001062:	7dbb      	ldrb	r3, [r7, #22]
 8001064:	3301      	adds	r3, #1
 8001066:	75bb      	strb	r3, [r7, #22]
 8001068:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800106c:	2b00      	cmp	r3, #0
 800106e:	dbe7      	blt.n	8001040 <main+0x2c>
	  }
  }
  	  ws2812_init();
 8001070:	f7ff ff1c 	bl	8000eac <ws2812_init>
  	  //ws2812_test01();


  	ws2812_pixel_rgb_to_buf_dma(0, 128, 0, 0);
 8001074:	2300      	movs	r3, #0
 8001076:	2200      	movs	r2, #0
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff ff30 	bl	8000ee0 <ws2812_pixel_rgb_to_buf_dma>
  	HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA,ARRAY_LEN);
 8001080:	23f0      	movs	r3, #240	; 0xf0
 8001082:	4a37      	ldr	r2, [pc, #220]	; (8001160 <main+0x14c>)
 8001084:	2104      	movs	r1, #4
 8001086:	4837      	ldr	r0, [pc, #220]	; (8001164 <main+0x150>)
 8001088:	f003 fc58 	bl	800493c <HAL_TIM_PWM_Start_DMA>
  //extern  unsigned char *gImage_BW;
  //extern  unsigned char *gImage_R;
  ssd1306_Init();
 800108c:	f7ff fcb2 	bl	80009f4 <ssd1306_Init>
  ssd1306_Fill(Black);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fd19 	bl	8000ac8 <ssd1306_Fill>
  ssd1306_SetCursor(5, 10);
 8001096:	210a      	movs	r1, #10
 8001098:	2005      	movs	r0, #5
 800109a:	f7ff fe63 	bl	8000d64 <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 800109e:	4a32      	ldr	r2, [pc, #200]	; (8001168 <main+0x154>)
 80010a0:	2301      	movs	r3, #1
 80010a2:	ca06      	ldmia	r2, {r1, r2}
 80010a4:	4831      	ldr	r0, [pc, #196]	; (800116c <main+0x158>)
 80010a6:	f7ff fe37 	bl	8000d18 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80010aa:	f7ff fd31 	bl	8000b10 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 80010ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b2:	f000 fce9 	bl	8001a88 <HAL_Delay>
  ssd1306_Fill(Black);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fd06 	bl	8000ac8 <ssd1306_Fill>
  ssd1306_DrawBitmap(0, 0, default_dis, 128, 32, White);
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	2320      	movs	r3, #32
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <main+0x15c>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fe62 	bl	8000d94 <ssd1306_DrawBitmap>
  ssd1306_UpdateScreen();
 80010d0:	f7ff fd1e 	bl	8000b10 <ssd1306_UpdateScreen>
  ssd1306_SetCursor(5, 15);
 80010d4:	210f      	movs	r1, #15
 80010d6:	2005      	movs	r0, #5
 80010d8:	f7ff fe44 	bl	8000d64 <ssd1306_SetCursor>
    ssd1306_WriteString("7A", Font_11x18, White);
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <main+0x154>)
 80010de:	2301      	movs	r3, #1
 80010e0:	ca06      	ldmia	r2, {r1, r2}
 80010e2:	4824      	ldr	r0, [pc, #144]	; (8001174 <main+0x160>)
 80010e4:	f7ff fe18 	bl	8000d18 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80010e8:	f7ff fd12 	bl	8000b10 <ssd1306_UpdateScreen>

  EPD_HW_Init(); //Electronic paper initialization
 80010ec:	f7ff fb88 	bl	8000800 <EPD_HW_Init>
  //EPD_WhiteScreen_ALL(gqImage_BW,gqImage_R); //Refresh the picture in full screen
  EPD_WhiteScreen_ALL(default_dis,gqImage_R);
 80010f0:	4921      	ldr	r1, [pc, #132]	; (8001178 <main+0x164>)
 80010f2:	481f      	ldr	r0, [pc, #124]	; (8001170 <main+0x15c>)
 80010f4:	f7ff fc01 	bl	80008fa <EPD_WhiteScreen_ALL>
  EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
 80010f8:	f7ff fc36 	bl	8000968 <EPD_DeepSleep>
  ADS1115_Config_t configReg;
  ADS1115_Handle_t *pADS;


  #define ADS1115_ADR 0x60
  configReg.channel = CHANNEL_AIN0_GND;
 80010fc:	2304      	movs	r3, #4
 80010fe:	713b      	strb	r3, [r7, #4]
  configReg.pgaConfig = PGA_6_144;
 8001100:	2300      	movs	r3, #0
 8001102:	717b      	strb	r3, [r7, #5]
  configReg.operatingMode = MODE_SINGLE_SHOT;
 8001104:	2301      	movs	r3, #1
 8001106:	71bb      	strb	r3, [r7, #6]
  configReg.dataRate = DRATE_475;
 8001108:	2306      	movs	r3, #6
 800110a:	71fb      	strb	r3, [r7, #7]
  configReg.compareMode = COMP_HYSTERESIS;
 800110c:	2300      	movs	r3, #0
 800110e:	723b      	strb	r3, [r7, #8]
  configReg.polarityMode = POLARITY_ACTIVE_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	727b      	strb	r3, [r7, #9]
  configReg.latchingMode = LATCHING_NONE;
 8001114:	2300      	movs	r3, #0
 8001116:	72bb      	strb	r3, [r7, #10]
  configReg.queueComparator = QUEUE_ONE;
 8001118:	2300      	movs	r3, #0
 800111a:	72fb      	strb	r3, [r7, #11]
  pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configReg);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	cb0c      	ldmia	r3, {r2, r3}
 8001120:	2160      	movs	r1, #96	; 0x60
 8001122:	480e      	ldr	r0, [pc, #56]	; (800115c <main+0x148>)
 8001124:	f7ff f9de 	bl	80004e4 <ADS1115_init>
 8001128:	6138      	str	r0, [r7, #16]
  ADS1115_updateConfig(pADS, configReg);
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001130:	6938      	ldr	r0, [r7, #16]
 8001132:	f7ff f9f7 	bl	8000524 <ADS1115_updateConfig>
  ADS1115_setConversionReadyPin(pADS);
 8001136:	6938      	ldr	r0, [r7, #16]
 8001138:	f7ff fa68 	bl	800060c <ADS1115_setConversionReadyPin>
  ADS1115_startContinousMode(pADS);
 800113c:	6938      	ldr	r0, [r7, #16]
 800113e:	f7ff fa73 	bl	8000628 <ADS1115_startContinousMode>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001142:	f004 fda1 	bl	8005c88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 8001146:	4a0d      	ldr	r2, [pc, #52]	; (800117c <main+0x168>)
 8001148:	2100      	movs	r1, #0
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <main+0x16c>)
 800114c:	f004 fde6 	bl	8005d1c <osThreadNew>
 8001150:	4603      	mov	r3, r0
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <main+0x170>)
 8001154:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001156:	f004 fdbb 	bl	8005cd0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115a:	e7fe      	b.n	800115a <main+0x146>
 800115c:	20000680 	.word	0x20000680
 8001160:	200004a0 	.word	0x200004a0
 8001164:	2000072c 	.word	0x2000072c
 8001168:	20000000 	.word	0x20000000
 800116c:	08008b04 	.word	0x08008b04
 8001170:	0800ab08 	.word	0x0800ab08
 8001174:	08008b10 	.word	0x08008b10
 8001178:	08009888 	.word	0x08009888
 800117c:	0800ad08 	.word	0x0800ad08
 8001180:	08001505 	.word	0x08001505
 8001184:	200007d4 	.word	0x200007d4

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f007 fb32 	bl	8008800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <SystemClock_Config+0xc8>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <SystemClock_Config+0xc8>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <SystemClock_Config+0xc8>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <SystemClock_Config+0xcc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a20      	ldr	r2, [pc, #128]	; (8001254 <SystemClock_Config+0xcc>)
 80011d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <SystemClock_Config+0xcc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ee:	2302      	movs	r3, #2
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011f8:	2319      	movs	r3, #25
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011fc:	23c0      	movs	r3, #192	; 0xc0
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001200:	2302      	movs	r3, #2
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001204:	2304      	movs	r3, #4
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	4618      	mov	r0, r3
 800120e:	f002 f993 	bl	8003538 <HAL_RCC_OscConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001218:	f000 f98e 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001220:	2302      	movs	r3, #2
 8001222:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2103      	movs	r1, #3
 8001238:	4618      	mov	r0, r3
 800123a:	f002 fbf5 	bl	8003a28 <HAL_RCC_ClockConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001244:	f000 f978 	bl	8001538 <Error_Handler>
  }
}
 8001248:	bf00      	nop
 800124a:	3750      	adds	r7, #80	; 0x50
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40007000 	.word	0x40007000

08001258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f001 fa45 	bl	8002724 <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 f94a 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000680 	.word	0x20000680
 80012ac:	40005400 	.word	0x40005400
 80012b0:	000186a0 	.word	0x000186a0

080012b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_SPI1_Init+0x64>)
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <MX_SPI1_Init+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_SPI1_Init+0x64>)
 80012c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_SPI1_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_SPI1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_SPI1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_SPI1_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_SPI1_Init+0x64>)
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_SPI1_Init+0x64>)
 80012e8:	2230      	movs	r2, #48	; 0x30
 80012ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_SPI1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_SPI1_Init+0x64>)
 8001300:	220a      	movs	r2, #10
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_SPI1_Init+0x64>)
 8001306:	f002 fda1 	bl	8003e4c <HAL_SPI_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001310:	f000 f912 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200006d4 	.word	0x200006d4
 800131c:	40013000 	.word	0x40013000

08001320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <MX_TIM2_Init+0xe4>)
 8001352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001356:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001358:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <MX_TIM2_Init+0xe4>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_TIM2_Init+0xe4>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <MX_TIM2_Init+0xe4>)
 8001366:	2277      	movs	r2, #119	; 0x77
 8001368:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_TIM2_Init+0xe4>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <MX_TIM2_Init+0xe4>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001376:	4823      	ldr	r0, [pc, #140]	; (8001404 <MX_TIM2_Init+0xe4>)
 8001378:	f003 f9d4 	bl	8004724 <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001382:	f000 f8d9 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001390:	4619      	mov	r1, r3
 8001392:	481c      	ldr	r0, [pc, #112]	; (8001404 <MX_TIM2_Init+0xe4>)
 8001394:	f003 ff12 	bl	80051bc <HAL_TIM_ConfigClockSource>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800139e:	f000 f8cb 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <MX_TIM2_Init+0xe4>)
 80013a4:	f003 fa70 	bl	8004888 <HAL_TIM_PWM_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80013ae:	f000 f8c3 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	4619      	mov	r1, r3
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <MX_TIM2_Init+0xe4>)
 80013c2:	f004 fb9b 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80013cc:	f000 f8b4 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d0:	2360      	movs	r3, #96	; 0x60
 80013d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2204      	movs	r2, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM2_Init+0xe4>)
 80013e8:	f003 fe26 	bl	8005038 <HAL_TIM_PWM_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80013f2:	f000 f8a1 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM2_Init+0xe4>)
 80013f8:	f000 f9b8 	bl	800176c <HAL_TIM_MspPostInit>

}
 80013fc:	bf00      	nop
 80013fe:	3738      	adds	r7, #56	; 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000072c 	.word	0x2000072c

08001408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_DMA_Init+0x3c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <MX_DMA_Init+0x3c>)
 8001418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_DMA_Init+0x3c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	2011      	movs	r0, #17
 8001430:	f000 fc06 	bl	8001c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001434:	2011      	movs	r0, #17
 8001436:	f000 fc1f 	bl	8001c78 <HAL_NVIC_EnableIRQ>

}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_GPIO_Init+0xb4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a25      	ldr	r2, [pc, #148]	; (80014fc <MX_GPIO_Init+0xb4>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <MX_GPIO_Init+0xb4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_GPIO_Init+0xb4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <MX_GPIO_Init+0xb4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_GPIO_Init+0xb4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_GPIO_Init+0xb4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <MX_GPIO_Init+0xb4>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_GPIO_Init+0xb4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2107      	movs	r1, #7
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <MX_GPIO_Init+0xb8>)
 80014b8:	f001 f91a 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 80014bc:	2307      	movs	r3, #7
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	480b      	ldr	r0, [pc, #44]	; (8001500 <MX_GPIO_Init+0xb8>)
 80014d4:	f000 ff70 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 80014d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014e2:	2302      	movs	r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	4619      	mov	r1, r3
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_GPIO_Init+0xb8>)
 80014ee:	f000 ff63 	bl	80023b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400

08001504 <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800150c:	2001      	movs	r0, #1
 800150e:	f004 fc97 	bl	8005e40 <osDelay>
 8001512:	e7fb      	b.n	800150c <StartInitTask+0x8>

08001514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001526:	f000 fa8f 	bl	8001a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40014000 	.word	0x40014000

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_MspInit+0x54>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_MspInit+0x54>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_MspInit+0x54>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_MspInit+0x54>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_MspInit+0x54>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_MspInit+0x54>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	210f      	movs	r1, #15
 8001586:	f06f 0001 	mvn.w	r0, #1
 800158a:	f000 fb59 	bl	8001c40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_I2C_MspInit+0x84>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12b      	bne.n	8001616 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_I2C_MspInit+0x88>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_I2C_MspInit+0x88>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_I2C_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015da:	23c0      	movs	r3, #192	; 0xc0
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015de:	2312      	movs	r3, #18
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ea:	2304      	movs	r3, #4
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <HAL_I2C_MspInit+0x8c>)
 80015f6:	f000 fedf 	bl	80023b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_I2C_MspInit+0x88>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_I2C_MspInit+0x88>)
 8001604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_I2C_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40005400 	.word	0x40005400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020400 	.word	0x40020400

0800162c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_SPI_MspInit+0x84>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d12b      	bne.n	80016a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_SPI_MspInit+0x88>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <HAL_SPI_MspInit+0x88>)
 8001658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_SPI_MspInit+0x88>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_SPI_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_SPI_MspInit+0x88>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_SPI_MspInit+0x88>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001686:	23a0      	movs	r3, #160	; 0xa0
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001696:	2305      	movs	r3, #5
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_SPI_MspInit+0x8c>)
 80016a2:	f000 fe89 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40013000 	.word	0x40013000
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000

080016bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d143      	bne.n	8001756 <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b23      	ldr	r3, [pc, #140]	; (8001760 <HAL_TIM_Base_MspInit+0xa4>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a22      	ldr	r2, [pc, #136]	; (8001760 <HAL_TIM_Base_MspInit+0xa4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_TIM_Base_MspInit+0xa4>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 80016ec:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_TIM_Base_MspInit+0xac>)
 80016ee:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 80016f2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016f6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 80016fa:	2240      	movs	r2, #64	; 0x40
 80016fc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 8001706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 800170e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001712:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 8001716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 8001730:	f000 fab0 	bl	8001c94 <HAL_DMA_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800173a:	f7ff fefd 	bl	8001538 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_TIM_Base_MspInit+0xa8>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	20000774 	.word	0x20000774
 8001768:	400260a0 	.word	0x400260a0

0800176c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800178c:	d11d      	bne.n	80017ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_TIM_MspPostInit+0x68>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_TIM_MspPostInit+0x68>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_TIM_MspPostInit+0x68>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017aa:	2302      	movs	r3, #2
 80017ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	4619      	mov	r1, r3
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <HAL_TIM_MspPostInit+0x6c>)
 80017c6:	f000 fdf7 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <HAL_InitTick+0xd0>)
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	4a2d      	ldr	r2, [pc, #180]	; (80018ac <HAL_InitTick+0xd0>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6453      	str	r3, [r2, #68]	; 0x44
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_InitTick+0xd0>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001808:	f107 020c 	add.w	r2, r7, #12
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fae8 	bl	8003de8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001818:	f002 fad2 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 800181c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001820:	4a23      	ldr	r2, [pc, #140]	; (80018b0 <HAL_InitTick+0xd4>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	0c9b      	lsrs	r3, r3, #18
 8001828:	3b01      	subs	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_InitTick+0xd8>)
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_InitTick+0xdc>)
 8001830:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_InitTick+0xd8>)
 8001834:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001838:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_InitTick+0xd8>)
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_InitTick+0xd8>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_InitTick+0xd8>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_InitTick+0xd8>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001852:	4818      	ldr	r0, [pc, #96]	; (80018b4 <HAL_InitTick+0xd8>)
 8001854:	f002 ff66 	bl	8004724 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800185e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001862:	2b00      	cmp	r3, #0
 8001864:	d11b      	bne.n	800189e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001866:	4813      	ldr	r0, [pc, #76]	; (80018b4 <HAL_InitTick+0xd8>)
 8001868:	f002 ffac 	bl	80047c4 <HAL_TIM_Base_Start_IT>
 800186c:	4603      	mov	r3, r0
 800186e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001876:	2b00      	cmp	r3, #0
 8001878:	d111      	bne.n	800189e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800187a:	2018      	movs	r0, #24
 800187c:	f000 f9fc 	bl	8001c78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	d808      	bhi.n	8001898 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001886:	2200      	movs	r2, #0
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	2018      	movs	r0, #24
 800188c:	f000 f9d8 	bl	8001c40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001890:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_InitTick+0xe0>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e002      	b.n	800189e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800189e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3730      	adds	r7, #48	; 0x30
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	200007d8 	.word	0x200007d8
 80018b8:	40014000 	.word	0x40014000
 80018bc:	2000000c 	.word	0x2000000c

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_2);
 80018f0:	2104      	movs	r1, #4
 80018f2:	4804      	ldr	r0, [pc, #16]	; (8001904 <DMA1_Stream6_IRQHandler+0x18>)
 80018f4:	f003 f9d2 	bl	8004c9c <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <DMA1_Stream6_IRQHandler+0x1c>)
 80018fa:	f000 faf3 	bl	8001ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000072c 	.word	0x2000072c
 8001908:	20000774 	.word	0x20000774

0800190c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001912:	f003 fa89 	bl	8004e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200007d8 	.word	0x200007d8

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f006 ff14 	bl	800877c <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20020000 	.word	0x20020000
 8001980:	00004000 	.word	0x00004000
 8001984:	20000820 	.word	0x20000820
 8001988:	20005248 	.word	0x20005248

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019da:	f7ff ffd7 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f006 fed3 	bl	8008788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fb17 	bl	8001014 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80019f4:	0800adbc 	.word	0x0800adbc
  ldr r2, =_sbss
 80019f8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80019fc:	20005248 	.word	0x20005248

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f8fc 	bl	8001c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff fed2 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fd84 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_IncTick+0x20>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_IncTick+0x24>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000010 	.word	0x20000010
 8001a6c:	20000824 	.word	0x20000824

08001a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_GetTick+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000824 	.word	0x20000824

08001a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff ffee 	bl	8001a70 <HAL_GetTick>
 8001a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d005      	beq.n	8001aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_Delay+0x44>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aae:	bf00      	nop
 8001ab0:	f7ff ffde 	bl	8001a70 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d8f7      	bhi.n	8001ab0 <HAL_Delay+0x28>
  {
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000010 	.word	0x20000010

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4907      	ldr	r1, [pc, #28]	; (8001b6c <__NVIC_EnableIRQ+0x38>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff4c 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c52:	f7ff ff61 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	6978      	ldr	r0, [r7, #20]
 8001c5e:	f7ff ffb1 	bl	8001bc4 <NVIC_EncodePriority>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff80 	bl	8001b70 <__NVIC_SetPriority>
}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff54 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fee6 	bl	8001a70 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e099      	b.n	8001de4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd0:	e00f      	b.n	8001cf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd2:	f7ff fecd 	bl	8001a70 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d908      	bls.n	8001cf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e078      	b.n	8001de4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e8      	bne.n	8001cd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_DMA_Init+0x158>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d107      	bne.n	8001d5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4313      	orrs	r3, r2
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f023 0307 	bic.w	r3, r3, #7
 8001d72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d117      	bne.n	8001db6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fa91 	bl	80022c0 <DMA_CheckFifoParam>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001db2:	2301      	movs	r3, #1
 8001db4:	e016      	b.n	8001de4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fa48 	bl	8002254 <DMA_CalcBaseAndBitshift>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	223f      	movs	r2, #63	; 0x3f
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	f010803f 	.word	0xf010803f

08001df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_DMA_Start_IT+0x26>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e040      	b.n	8001e98 <HAL_DMA_Start_IT+0xa8>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d12f      	bne.n	8001e8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f9da 	bl	80021f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	223f      	movs	r2, #63	; 0x3f
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0216 	orr.w	r2, r2, #22
 8001e5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0208 	orr.w	r2, r2, #8
 8001e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e005      	b.n	8001e96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e92:	2302      	movs	r3, #2
 8001e94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d004      	beq.n	8001ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00c      	b.n	8001ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef0:	4b8e      	ldr	r3, [pc, #568]	; (800212c <HAL_DMA_IRQHandler+0x248>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a8e      	ldr	r2, [pc, #568]	; (8002130 <HAL_DMA_IRQHandler+0x24c>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2208      	movs	r2, #8
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01a      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0204 	bic.w	r2, r2, #4
 8001f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	2201      	movs	r2, #1
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d012      	beq.n	8001f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2201      	movs	r2, #1
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	2204      	movs	r2, #4
 8001faa:	409a      	lsls	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d043      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03c      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	2210      	movs	r2, #16
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d108      	bne.n	8002014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d024      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
 8002012:	e01f      	b.n	8002054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01b      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
 8002024:	e016      	b.n	8002054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0208 	bic.w	r2, r2, #8
 8002042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2220      	movs	r2, #32
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 808f 	beq.w	8002184 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8087 	beq.w	8002184 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2220      	movs	r2, #32
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b05      	cmp	r3, #5
 800208c:	d136      	bne.n	80020fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0216 	bic.w	r2, r2, #22
 800209c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <HAL_DMA_IRQHandler+0x1da>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0208 	bic.w	r2, r2, #8
 80020cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	223f      	movs	r2, #63	; 0x3f
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d07e      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
        }
        return;
 80020fa:	e079      	b.n	80021f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01d      	beq.n	8002146 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10d      	bne.n	8002134 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	2b00      	cmp	r3, #0
 800211e:	d031      	beq.n	8002184 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
 8002128:	e02c      	b.n	8002184 <HAL_DMA_IRQHandler+0x2a0>
 800212a:	bf00      	nop
 800212c:	20000008 	.word	0x20000008
 8002130:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d023      	beq.n	8002184 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4798      	blx	r3
 8002144:	e01e      	b.n	8002184 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10f      	bne.n	8002174 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0210 	bic.w	r2, r2, #16
 8002162:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	2b00      	cmp	r3, #0
 800218a:	d032      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d022      	beq.n	80021de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2205      	movs	r2, #5
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3301      	adds	r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d307      	bcc.n	80021cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f2      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x2cc>
 80021ca:	e000      	b.n	80021ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4798      	blx	r3
 80021ee:	e000      	b.n	80021f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021f0:	bf00      	nop
    }
  }
}
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d108      	bne.n	8002238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002236:	e007      	b.n	8002248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	3b10      	subs	r3, #16
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <DMA_CalcBaseAndBitshift+0x68>)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d909      	bls.n	8002296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	1d1a      	adds	r2, r3, #4
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	; 0x58
 8002294:	e007      	b.n	80022a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	aaaaaaab 	.word	0xaaaaaaab
 80022bc:	0800ad44 	.word	0x0800ad44

080022c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11f      	bne.n	800231a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d856      	bhi.n	800238e <DMA_CheckFifoParam+0xce>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <DMA_CheckFifoParam+0x28>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	0800230b 	.word	0x0800230b
 80022f0:	080022f9 	.word	0x080022f9
 80022f4:	0800238f 	.word	0x0800238f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d046      	beq.n	8002392 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e043      	b.n	8002392 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002312:	d140      	bne.n	8002396 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002318:	e03d      	b.n	8002396 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002322:	d121      	bne.n	8002368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d837      	bhi.n	800239a <DMA_CheckFifoParam+0xda>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <DMA_CheckFifoParam+0x70>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002341 	.word	0x08002341
 8002334:	08002347 	.word	0x08002347
 8002338:	08002341 	.word	0x08002341
 800233c:	08002359 	.word	0x08002359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e030      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d025      	beq.n	800239e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002356:	e022      	b.n	800239e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002360:	d11f      	bne.n	80023a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002366:	e01c      	b.n	80023a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d903      	bls.n	8002376 <DMA_CheckFifoParam+0xb6>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d003      	beq.n	800237c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002374:	e018      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      break;
 800237a:	e015      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00e      	beq.n	80023a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      break;
 800238c:	e00b      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;
 800238e:	bf00      	nop
 8002390:	e00a      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e008      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e006      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e004      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e002      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023a2:	bf00      	nop
 80023a4:	e000      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 80023a6:	bf00      	nop
    }
  } 
  
  return status; 
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e159      	b.n	8002688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f040 8148 	bne.w	8002682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d005      	beq.n	800240a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002406:	2b02      	cmp	r3, #2
 8002408:	d130      	bne.n	800246c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0201 	and.w	r2, r3, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d017      	beq.n	80024a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d123      	bne.n	80024fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a2 	beq.w	8002682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
 800254e:	4b54      	ldr	r3, [pc, #336]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255a:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a49      	ldr	r2, [pc, #292]	; (80026a8 <HAL_GPIO_Init+0x2f0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d019      	beq.n	80025ba <HAL_GPIO_Init+0x202>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a48      	ldr	r2, [pc, #288]	; (80026ac <HAL_GPIO_Init+0x2f4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0x1fe>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a47      	ldr	r2, [pc, #284]	; (80026b0 <HAL_GPIO_Init+0x2f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00d      	beq.n	80025b2 <HAL_GPIO_Init+0x1fa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <HAL_GPIO_Init+0x2fc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_GPIO_Init+0x1f6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a45      	ldr	r2, [pc, #276]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_GPIO_Init+0x1f2>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025aa:	2307      	movs	r3, #7
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_GPIO_Init+0x304>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002628:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_GPIO_Init+0x304>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_GPIO_Init+0x304>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f aea2 	bls.w	80023d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e001      	b.n	80026e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e12b      	b.n	800298e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe ff26 	bl	800159c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002788:	f001 fb06 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a81      	ldr	r2, [pc, #516]	; (8002998 <HAL_I2C_Init+0x274>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d807      	bhi.n	80027a8 <HAL_I2C_Init+0x84>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a80      	ldr	r2, [pc, #512]	; (800299c <HAL_I2C_Init+0x278>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e006      	b.n	80027b6 <HAL_I2C_Init+0x92>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a7d      	ldr	r2, [pc, #500]	; (80029a0 <HAL_I2C_Init+0x27c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0e7      	b.n	800298e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a78      	ldr	r2, [pc, #480]	; (80029a4 <HAL_I2C_Init+0x280>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9b      	lsrs	r3, r3, #18
 80027c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a6a      	ldr	r2, [pc, #424]	; (8002998 <HAL_I2C_Init+0x274>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d802      	bhi.n	80027f8 <HAL_I2C_Init+0xd4>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3301      	adds	r3, #1
 80027f6:	e009      	b.n	800280c <HAL_I2C_Init+0xe8>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	4a69      	ldr	r2, [pc, #420]	; (80029a8 <HAL_I2C_Init+0x284>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	3301      	adds	r3, #1
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800281e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	495c      	ldr	r1, [pc, #368]	; (8002998 <HAL_I2C_Init+0x274>)
 8002828:	428b      	cmp	r3, r1
 800282a:	d819      	bhi.n	8002860 <HAL_I2C_Init+0x13c>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e59      	subs	r1, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fbb1 f3f3 	udiv	r3, r1, r3
 800283a:	1c59      	adds	r1, r3, #1
 800283c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002840:	400b      	ands	r3, r1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_I2C_Init+0x138>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e59      	subs	r1, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fbb1 f3f3 	udiv	r3, r1, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285a:	e051      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 800285c:	2304      	movs	r3, #4
 800285e:	e04f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d111      	bne.n	800288c <HAL_I2C_Init+0x168>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e012      	b.n	80028b2 <HAL_I2C_Init+0x18e>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	0099      	lsls	r1, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Init+0x196>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e022      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10e      	bne.n	80028e0 <HAL_I2C_Init+0x1bc>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e58      	subs	r0, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	440b      	add	r3, r1
 80028d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028de:	e00f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	0099      	lsls	r1, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	6809      	ldr	r1, [r1, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800292e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6911      	ldr	r1, [r2, #16]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68d2      	ldr	r2, [r2, #12]
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	430b      	orrs	r3, r1
 8002942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	000186a0 	.word	0x000186a0
 800299c:	001e847f 	.word	0x001e847f
 80029a0:	003d08ff 	.word	0x003d08ff
 80029a4:	431bde83 	.word	0x431bde83
 80029a8:	10624dd3 	.word	0x10624dd3

080029ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	461a      	mov	r2, r3
 80029b8:	460b      	mov	r3, r1
 80029ba:	817b      	strh	r3, [r7, #10]
 80029bc:	4613      	mov	r3, r2
 80029be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029c0:	f7ff f856 	bl	8001a70 <HAL_GetTick>
 80029c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	f040 80e0 	bne.w	8002b94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2319      	movs	r3, #25
 80029da:	2201      	movs	r2, #1
 80029dc:	4970      	ldr	r1, [pc, #448]	; (8002ba0 <HAL_I2C_Master_Transmit+0x1f4>)
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fc22 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
 80029ec:	e0d3      	b.n	8002b96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_I2C_Master_Transmit+0x50>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e0cc      	b.n	8002b96 <HAL_I2C_Master_Transmit+0x1ea>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d007      	beq.n	8002a22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2221      	movs	r2, #33	; 0x21
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	893a      	ldrh	r2, [r7, #8]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a50      	ldr	r2, [pc, #320]	; (8002ba4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a64:	8979      	ldrh	r1, [r7, #10]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fac4 	bl	8002ff8 <I2C_MasterRequestWrite>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e08d      	b.n	8002b96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a90:	e066      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	6a39      	ldr	r1, [r7, #32]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fc9c 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d107      	bne.n	8002aba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06b      	b.n	8002b96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d11b      	bne.n	8002b34 <HAL_I2C_Master_Transmit+0x188>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d017      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	781a      	ldrb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	6a39      	ldr	r1, [r7, #32]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fc8c 	bl	8003456 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d107      	bne.n	8002b5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e01a      	b.n	8002b96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d194      	bne.n	8002a92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	00100002 	.word	0x00100002
 8002ba4:	ffff0000 	.word	0xffff0000

08002ba8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	817b      	strh	r3, [r7, #10]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	813b      	strh	r3, [r7, #8]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bc2:	f7fe ff55 	bl	8001a70 <HAL_GetTick>
 8002bc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	f040 80d9 	bne.w	8002d88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2319      	movs	r3, #25
 8002bdc:	2201      	movs	r2, #1
 8002bde:	496d      	ldr	r1, [pc, #436]	; (8002d94 <HAL_I2C_Mem_Write+0x1ec>)
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fb21 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
 8002bee:	e0cc      	b.n	8002d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2C_Mem_Write+0x56>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e0c5      	b.n	8002d8a <HAL_I2C_Mem_Write+0x1e2>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d007      	beq.n	8002c24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2221      	movs	r2, #33	; 0x21
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2240      	movs	r2, #64	; 0x40
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a4d      	ldr	r2, [pc, #308]	; (8002d98 <HAL_I2C_Mem_Write+0x1f0>)
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c66:	88f8      	ldrh	r0, [r7, #6]
 8002c68:	893a      	ldrh	r2, [r7, #8]
 8002c6a:	8979      	ldrh	r1, [r7, #10]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	4603      	mov	r3, r0
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fa40 	bl	80030fc <I2C_RequestMemoryWrite>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d052      	beq.n	8002d28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e081      	b.n	8002d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fba2 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00d      	beq.n	8002cb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d107      	bne.n	8002cae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e06b      	b.n	8002d8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d11b      	bne.n	8002d28 <HAL_I2C_Mem_Write+0x180>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d017      	beq.n	8002d28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1aa      	bne.n	8002c86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fb8e 	bl	8003456 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e016      	b.n	8002d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	00100002 	.word	0x00100002
 8002d98:	ffff0000 	.word	0xffff0000

08002d9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	460b      	mov	r3, r1
 8002daa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7fe fe60 	bl	8001a70 <HAL_GetTick>
 8002db0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	f040 8111 	bne.w	8002fe6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2319      	movs	r3, #25
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4988      	ldr	r1, [pc, #544]	; (8002ff0 <HAL_I2C_IsDeviceReady+0x254>)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fa2a 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e104      	b.n	8002fe8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_I2C_IsDeviceReady+0x50>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e0fd      	b.n	8002fe8 <HAL_I2C_IsDeviceReady+0x24c>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d007      	beq.n	8002e12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2224      	movs	r2, #36	; 0x24
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a70      	ldr	r2, [pc, #448]	; (8002ff4 <HAL_I2C_IsDeviceReady+0x258>)
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f9e8 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6c:	d103      	bne.n	8002e76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0b6      	b.n	8002fe8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fdf1 	bl	8001a70 <HAL_GetTick>
 8002e8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb4:	bf0c      	ite	eq
 8002eb6:	2301      	moveq	r3, #1
 8002eb8:	2300      	movne	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ebe:	e025      	b.n	8002f0c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ec0:	f7fe fdd6 	bl	8001a70 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d302      	bcc.n	8002ed6 <HAL_I2C_IsDeviceReady+0x13a>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	22a0      	movs	r2, #160	; 0xa0
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2ba0      	cmp	r3, #160	; 0xa0
 8002f16:	d005      	beq.n	8002f24 <HAL_I2C_IsDeviceReady+0x188>
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <HAL_I2C_IsDeviceReady+0x188>
 8002f1e:	7dbb      	ldrb	r3, [r7, #22]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0cd      	beq.n	8002ec0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d129      	bne.n	8002f8e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f48:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2319      	movs	r3, #25
 8002f66:	2201      	movs	r2, #1
 8002f68:	4921      	ldr	r1, [pc, #132]	; (8002ff0 <HAL_I2C_IsDeviceReady+0x254>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f95c 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e036      	b.n	8002fe8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e02c      	b.n	8002fe8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2319      	movs	r3, #25
 8002fae:	2201      	movs	r2, #1
 8002fb0:	490f      	ldr	r1, [pc, #60]	; (8002ff0 <HAL_I2C_IsDeviceReady+0x254>)
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f938 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e012      	b.n	8002fe8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	f4ff af32 	bcc.w	8002e36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	00100002 	.word	0x00100002
 8002ff4:	ffff0000 	.word	0xffff0000

08002ff8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	460b      	mov	r3, r1
 8003006:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d006      	beq.n	8003022 <I2C_MasterRequestWrite+0x2a>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d003      	beq.n	8003022 <I2C_MasterRequestWrite+0x2a>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003020:	d108      	bne.n	8003034 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e00b      	b.n	800304c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	2b12      	cmp	r3, #18
 800303a:	d107      	bne.n	800304c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f8e5 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003072:	d103      	bne.n	800307c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e035      	b.n	80030ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003088:	d108      	bne.n	800309c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003098:	611a      	str	r2, [r3, #16]
 800309a:	e01b      	b.n	80030d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800309c:	897b      	ldrh	r3, [r7, #10]
 800309e:	11db      	asrs	r3, r3, #7
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f003 0306 	and.w	r3, r3, #6
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f063 030f 	orn	r3, r3, #15
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	490e      	ldr	r1, [pc, #56]	; (80030f4 <I2C_MasterRequestWrite+0xfc>)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f90b 	bl	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e010      	b.n	80030ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030ca:	897b      	ldrh	r3, [r7, #10]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4907      	ldr	r1, [pc, #28]	; (80030f8 <I2C_MasterRequestWrite+0x100>)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f8fb 	bl	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	00010008 	.word	0x00010008
 80030f8:	00010002 	.word	0x00010002

080030fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	4608      	mov	r0, r1
 8003106:	4611      	mov	r1, r2
 8003108:	461a      	mov	r2, r3
 800310a:	4603      	mov	r3, r0
 800310c:	817b      	strh	r3, [r7, #10]
 800310e:	460b      	mov	r3, r1
 8003110:	813b      	strh	r3, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	2200      	movs	r2, #0
 800312e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f878 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314c:	d103      	bne.n	8003156 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e05f      	b.n	800321a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003168:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	492d      	ldr	r1, [pc, #180]	; (8003224 <I2C_RequestMemoryWrite+0x128>)
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f8b0 	bl	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e04c      	b.n	800321a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	6a39      	ldr	r1, [r7, #32]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f91a 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d107      	bne.n	80031be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e02b      	b.n	800321a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031c8:	893b      	ldrh	r3, [r7, #8]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	611a      	str	r2, [r3, #16]
 80031d2:	e021      	b.n	8003218 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031d4:	893b      	ldrh	r3, [r7, #8]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	b29b      	uxth	r3, r3
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	6a39      	ldr	r1, [r7, #32]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f8f4 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d107      	bne.n	800320a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003208:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e005      	b.n	800321a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800320e:	893b      	ldrh	r3, [r7, #8]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	00010002 	.word	0x00010002

08003228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003238:	e025      	b.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d021      	beq.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003242:	f7fe fc15 	bl	8001a70 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d116      	bne.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e023      	b.n	80032ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10d      	bne.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	e00c      	b.n	80032c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4013      	ands	r3, r2
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf0c      	ite	eq
 80032be:	2301      	moveq	r3, #1
 80032c0:	2300      	movne	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d0b6      	beq.n	800323a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032e4:	e051      	b.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d123      	bne.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003304:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800330e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f043 0204 	orr.w	r2, r3, #4
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e046      	b.n	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d021      	beq.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe fb93 	bl	8001a70 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e020      	b.n	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10c      	bne.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	43da      	mvns	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	e00b      	b.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	43da      	mvns	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d18d      	bne.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e0:	e02d      	b.n	800343e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f878 	bl	80034d8 <I2C_IsAcknowledgeFailed>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e02d      	b.n	800344e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d021      	beq.n	800343e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe fb39 	bl	8001a70 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d116      	bne.n	800343e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e007      	b.n	800344e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b80      	cmp	r3, #128	; 0x80
 800344a:	d1ca      	bne.n	80033e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003462:	e02d      	b.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f837 	bl	80034d8 <I2C_IsAcknowledgeFailed>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e02d      	b.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d021      	beq.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347c:	f7fe faf8 	bl	8001a70 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	429a      	cmp	r2, r3
 800348a:	d302      	bcc.n	8003492 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d116      	bne.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e007      	b.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d1ca      	bne.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	d11b      	bne.n	8003528 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e267      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d075      	beq.n	8003642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003556:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b04      	cmp	r3, #4
 8003560:	d00c      	beq.n	800357c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003562:	4b85      	ldr	r3, [pc, #532]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800356a:	2b08      	cmp	r3, #8
 800356c:	d112      	bne.n	8003594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356e:	4b82      	ldr	r3, [pc, #520]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800357a:	d10b      	bne.n	8003594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	4b7e      	ldr	r3, [pc, #504]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d05b      	beq.n	8003640 <HAL_RCC_OscConfig+0x108>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d157      	bne.n	8003640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e242      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d106      	bne.n	80035ac <HAL_RCC_OscConfig+0x74>
 800359e:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a75      	ldr	r2, [pc, #468]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e01d      	b.n	80035e8 <HAL_RCC_OscConfig+0xb0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x98>
 80035b6:	4b70      	ldr	r3, [pc, #448]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6f      	ldr	r2, [pc, #444]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b6d      	ldr	r3, [pc, #436]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6c      	ldr	r2, [pc, #432]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0xb0>
 80035d0:	4b69      	ldr	r3, [pc, #420]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a68      	ldr	r2, [pc, #416]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a65      	ldr	r2, [pc, #404]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fa3e 	bl	8001a70 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fa3a 	bl	8001a70 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e207      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b5b      	ldr	r3, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0xc0>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe fa2a 	bl	8001a70 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe fa26 	bl	8001a70 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1f3      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	4b51      	ldr	r3, [pc, #324]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0xe8>
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d063      	beq.n	8003716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800364e:	4b4a      	ldr	r3, [pc, #296]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003662:	2b08      	cmp	r3, #8
 8003664:	d11c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003666:	4b44      	ldr	r3, [pc, #272]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d116      	bne.n	80036a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	4b41      	ldr	r3, [pc, #260]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_RCC_OscConfig+0x152>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d001      	beq.n	800368a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e1c7      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4937      	ldr	r1, [pc, #220]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369e:	e03a      	b.n	8003716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d020      	beq.n	80036ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a8:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_RCC_OscConfig+0x244>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fe f9df 	bl	8001a70 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fe f9db 	bl	8001a70 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1a8      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4925      	ldr	r1, [pc, #148]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	e015      	b.n	8003716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ea:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_RCC_OscConfig+0x244>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe f9be 	bl	8001a70 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f8:	f7fe f9ba 	bl	8001a70 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e187      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d036      	beq.n	8003790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d016      	beq.n	8003758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_RCC_OscConfig+0x248>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fe f99e 	bl	8001a70 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003738:	f7fe f99a 	bl	8001a70 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e167      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x200>
 8003756:	e01b      	b.n	8003790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_RCC_OscConfig+0x248>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375e:	f7fe f987 	bl	8001a70 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	e00e      	b.n	8003784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003766:	f7fe f983 	bl	8001a70 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d907      	bls.n	8003784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e150      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	42470000 	.word	0x42470000
 8003780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003784:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ea      	bne.n	8003766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8097 	beq.w	80038cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a2:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10f      	bne.n	80037ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	4b7d      	ldr	r3, [pc, #500]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a7c      	ldr	r2, [pc, #496]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b7a      	ldr	r3, [pc, #488]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b77      	ldr	r3, [pc, #476]	; (80039ac <HAL_RCC_OscConfig+0x474>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d118      	bne.n	800380c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037da:	4b74      	ldr	r3, [pc, #464]	; (80039ac <HAL_RCC_OscConfig+0x474>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a73      	ldr	r2, [pc, #460]	; (80039ac <HAL_RCC_OscConfig+0x474>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7fe f943 	bl	8001a70 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ee:	f7fe f93f 	bl	8001a70 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e10c      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <HAL_RCC_OscConfig+0x474>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x2ea>
 8003814:	4b64      	ldr	r3, [pc, #400]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4a63      	ldr	r2, [pc, #396]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6713      	str	r3, [r2, #112]	; 0x70
 8003820:	e01c      	b.n	800385c <HAL_RCC_OscConfig+0x324>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b05      	cmp	r3, #5
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x30c>
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a5e      	ldr	r2, [pc, #376]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003830:	f043 0304 	orr.w	r3, r3, #4
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
 8003836:	4b5c      	ldr	r3, [pc, #368]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a5b      	ldr	r2, [pc, #364]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
 8003842:	e00b      	b.n	800385c <HAL_RCC_OscConfig+0x324>
 8003844:	4b58      	ldr	r3, [pc, #352]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a57      	ldr	r2, [pc, #348]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
 8003850:	4b55      	ldr	r3, [pc, #340]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a54      	ldr	r2, [pc, #336]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003856:	f023 0304 	bic.w	r3, r3, #4
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d015      	beq.n	8003890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fe f904 	bl	8001a70 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fe f900 	bl	8001a70 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0cb      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003882:	4b49      	ldr	r3, [pc, #292]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ee      	beq.n	800386c <HAL_RCC_OscConfig+0x334>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003890:	f7fe f8ee 	bl	8001a70 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fe f8ea 	bl	8001a70 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0b5      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ae:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ee      	bne.n	8003898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c0:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	4a38      	ldr	r2, [pc, #224]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80038c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a1 	beq.w	8003a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d6:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d05c      	beq.n	800399c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d141      	bne.n	800396e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <HAL_RCC_OscConfig+0x478>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe f8be 	bl	8001a70 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fe f8ba 	bl	8001a70 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e087      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390a:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	3b01      	subs	r3, #1
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	061b      	lsls	r3, r3, #24
 800393a:	491b      	ldr	r1, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <HAL_RCC_OscConfig+0x478>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7fe f893 	bl	8001a70 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe f88f 	bl	8001a70 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e05c      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x416>
 800396c:	e054      	b.n	8003a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_RCC_OscConfig+0x478>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe f87c 	bl	8001a70 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe f878 	bl	8001a70 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e045      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x444>
 800399a:	e03d      	b.n	8003a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e038      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40007000 	.word	0x40007000
 80039b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_RCC_OscConfig+0x4ec>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d028      	beq.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d121      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d11a      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039e4:	4013      	ands	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d111      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	3b01      	subs	r3, #1
 80039fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800

08003a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0cc      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d90c      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b65      	ldr	r3, [pc, #404]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0b8      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a7c:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a58      	ldr	r2, [pc, #352]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a94:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a52      	ldr	r2, [pc, #328]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	494d      	ldr	r1, [pc, #308]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d044      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d119      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e07f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	4b3f      	ldr	r3, [pc, #252]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e067      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b06:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4934      	ldr	r1, [pc, #208]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b18:	f7fd ffaa 	bl	8001a70 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b20:	f7fd ffa6 	bl	8001a70 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e04f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 020c 	and.w	r2, r3, #12
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d1eb      	bne.n	8003b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b48:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d20c      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e032      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4916      	ldr	r1, [pc, #88]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	490e      	ldr	r1, [pc, #56]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bae:	f000 f821 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	490a      	ldr	r1, [pc, #40]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc0:	5ccb      	ldrb	r3, [r1, r3]
 8003bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fe04 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023c00 	.word	0x40023c00
 8003be4:	40023800 	.word	0x40023800
 8003be8:	0800ad2c 	.word	0x0800ad2c
 8003bec:	20000008 	.word	0x20000008
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf8:	b090      	sub	sp, #64	; 0x40
 8003bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003c00:	2300      	movs	r3, #0
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c04:	2300      	movs	r3, #0
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c0c:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d00d      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x40>
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	f200 80a1 	bhi.w	8003d60 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x34>
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d003      	beq.n	8003c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c26:	e09b      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c2c:	e09b      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c2e:	4b53      	ldr	r3, [pc, #332]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c32:	e098      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c34:	4b4f      	ldr	r3, [pc, #316]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c3e:	4b4d      	ldr	r3, [pc, #308]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d028      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4a:	4b4a      	ldr	r3, [pc, #296]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	2200      	movs	r2, #0
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	627a      	str	r2, [r7, #36]	; 0x24
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c60:	fb03 f201 	mul.w	r2, r3, r1
 8003c64:	2300      	movs	r3, #0
 8003c66:	fb00 f303 	mul.w	r3, r0, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	4a43      	ldr	r2, [pc, #268]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c6e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c74:	460a      	mov	r2, r1
 8003c76:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7a:	4413      	add	r3, r2
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c80:	2200      	movs	r2, #0
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	61fa      	str	r2, [r7, #28]
 8003c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c8e:	f7fc faa7 	bl	80001e0 <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4613      	mov	r3, r2
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9a:	e053      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	617a      	str	r2, [r7, #20]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cae:	f04f 0b00 	mov.w	fp, #0
 8003cb2:	4652      	mov	r2, sl
 8003cb4:	465b      	mov	r3, fp
 8003cb6:	f04f 0000 	mov.w	r0, #0
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	0159      	lsls	r1, r3, #5
 8003cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc4:	0150      	lsls	r0, r2, #5
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	ebb2 080a 	subs.w	r8, r2, sl
 8003cce:	eb63 090b 	sbc.w	r9, r3, fp
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ce2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ce6:	ebb2 0408 	subs.w	r4, r2, r8
 8003cea:	eb63 0509 	sbc.w	r5, r3, r9
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	00eb      	lsls	r3, r5, #3
 8003cf8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cfc:	00e2      	lsls	r2, r4, #3
 8003cfe:	4614      	mov	r4, r2
 8003d00:	461d      	mov	r5, r3
 8003d02:	eb14 030a 	adds.w	r3, r4, sl
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	eb45 030b 	adc.w	r3, r5, fp
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	028b      	lsls	r3, r1, #10
 8003d1e:	4621      	mov	r1, r4
 8003d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d24:	4621      	mov	r1, r4
 8003d26:	028a      	lsls	r2, r1, #10
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2e:	2200      	movs	r2, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	60fa      	str	r2, [r7, #12]
 8003d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d38:	f7fc fa52 	bl	80001e0 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4613      	mov	r3, r2
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5e:	e002      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3740      	adds	r7, #64	; 0x40
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	00f42400 	.word	0x00f42400
 8003d7c:	017d7840 	.word	0x017d7840

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000008 	.word	0x20000008

08003d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d9c:	f7ff fff0 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0a9b      	lsrs	r3, r3, #10
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4903      	ldr	r1, [pc, #12]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	0800ad3c 	.word	0x0800ad3c

08003dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc4:	f7ff ffdc 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0b5b      	lsrs	r3, r3, #13
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800
 8003de4:	0800ad3c 	.word	0x0800ad3c

08003de8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	220f      	movs	r2, #15
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_RCC_GetClockConfig+0x5c>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0203 	and.w	r2, r3, #3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_RCC_GetClockConfig+0x5c>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <HAL_RCC_GetClockConfig+0x5c>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	08db      	lsrs	r3, r3, #3
 8003e22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <HAL_RCC_GetClockConfig+0x60>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0207 	and.w	r2, r3, #7
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40023c00 	.word	0x40023c00

08003e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e07b      	b.n	8003f56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d108      	bne.n	8003e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6e:	d009      	beq.n	8003e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	61da      	str	r2, [r3, #28]
 8003e76:	e005      	b.n	8003e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fd fbc4 	bl	800162c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	ea42 0103 	orr.w	r1, r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	f003 0104 	and.w	r1, r3, #4
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f003 0210 	and.w	r2, r3, #16
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b088      	sub	sp, #32
 8003f62:	af02      	add	r7, sp, #8
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7a:	d112      	bne.n	8003fa2 <HAL_SPI_Receive+0x44>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10e      	bne.n	8003fa2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2204      	movs	r2, #4
 8003f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f8c:	88fa      	ldrh	r2, [r7, #6]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f8f1 	bl	8004180 <HAL_SPI_TransmitReceive>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	e0ea      	b.n	8004178 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_SPI_Receive+0x52>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e0e3      	b.n	8004178 <HAL_SPI_Receive+0x21a>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb8:	f7fd fd5a 	bl	8001a70 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fce:	e0ca      	b.n	8004166 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_SPI_Receive+0x7e>
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fe0:	e0c1      	b.n	8004166 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d10f      	bne.n	800404a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004048:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d007      	beq.n	8004068 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004066:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d162      	bne.n	8004136 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004070:	e02e      	b.n	80040d0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d115      	bne.n	80040ac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f103 020c 	add.w	r2, r3, #12
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040aa:	e011      	b.n	80040d0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ac:	f7fd fce0 	bl	8001a70 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d803      	bhi.n	80040c4 <HAL_SPI_Receive+0x166>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d102      	bne.n	80040ca <HAL_SPI_Receive+0x16c>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040ce:	e04a      	b.n	8004166 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1cb      	bne.n	8004072 <HAL_SPI_Receive+0x114>
 80040da:	e031      	b.n	8004140 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d113      	bne.n	8004112 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	b292      	uxth	r2, r2
 80040f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	1c9a      	adds	r2, r3, #2
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004110:	e011      	b.n	8004136 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004112:	f7fd fcad 	bl	8001a70 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d803      	bhi.n	800412a <HAL_SPI_Receive+0x1cc>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d102      	bne.n	8004130 <HAL_SPI_Receive+0x1d2>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004134:	e017      	b.n	8004166 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1cd      	bne.n	80040dc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fa45 	bl	80045d4 <SPI_EndRxTransaction>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	75fb      	strb	r3, [r7, #23]
 8004162:	e000      	b.n	8004166 <HAL_SPI_Receive+0x208>
  }

error :
 8004164:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004176:	7dfb      	ldrb	r3, [r7, #23]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	; 0x30
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800418e:	2301      	movs	r3, #1
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x26>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e18a      	b.n	80044bc <HAL_SPI_TransmitReceive+0x33c>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ae:	f7fd fc5f 	bl	8001a70 <HAL_GetTick>
 80041b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d00f      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x70>
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d107      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x68>
 80041e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d003      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041ee:	e15b      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x82>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x82>
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004208:	e14e      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b04      	cmp	r3, #4
 8004214:	d003      	beq.n	800421e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2205      	movs	r2, #5
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	887a      	ldrh	r2, [r7, #2]
 800422e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	887a      	ldrh	r2, [r7, #2]
 8004246:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d007      	beq.n	8004272 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427a:	d178      	bne.n	800436e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_SPI_TransmitReceive+0x10a>
 8004284:	8b7b      	ldrh	r3, [r7, #26]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d166      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ae:	e053      	b.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d11b      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x176>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d016      	beq.n	80042f6 <HAL_SPI_TransmitReceive+0x176>
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d113      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	881a      	ldrh	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	1c9a      	adds	r2, r3, #2
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d119      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x1b8>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d014      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	b292      	uxth	r2, r2
 800431a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	1c9a      	adds	r2, r3, #2
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004334:	2301      	movs	r3, #1
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004338:	f7fd fb9a 	bl	8001a70 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004344:	429a      	cmp	r2, r3
 8004346:	d807      	bhi.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d003      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004356:	e0a7      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1a6      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x130>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1a1      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x130>
 800436c:	e07c      	b.n	8004468 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SPI_TransmitReceive+0x1fc>
 8004376:	8b7b      	ldrh	r3, [r7, #26]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d16b      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a2:	e057      	b.n	8004454 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d11c      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x26c>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <HAL_SPI_TransmitReceive+0x26c>
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d114      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d119      	bne.n	800442e <HAL_SPI_TransmitReceive+0x2ae>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d014      	beq.n	800442e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800442a:	2301      	movs	r3, #1
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800442e:	f7fd fb1f 	bl	8001a70 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443a:	429a      	cmp	r2, r3
 800443c:	d803      	bhi.n	8004446 <HAL_SPI_TransmitReceive+0x2c6>
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d102      	bne.n	800444c <HAL_SPI_TransmitReceive+0x2cc>
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004452:	e029      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1a2      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x224>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d19d      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f917 	bl	80046a0 <SPI_EndRxTxTransaction>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d006      	beq.n	8004486 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004484:	e010      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	e000      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3730      	adds	r7, #48	; 0x30
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044d4:	f7fd facc 	bl	8001a70 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	4413      	add	r3, r2
 80044e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044e4:	f7fd fac4 	bl	8001a70 <HAL_GetTick>
 80044e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044ea:	4b39      	ldr	r3, [pc, #228]	; (80045d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	015b      	lsls	r3, r3, #5
 80044f0:	0d1b      	lsrs	r3, r3, #20
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044fa:	e054      	b.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d050      	beq.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004504:	f7fd fab4 	bl	8001a70 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	429a      	cmp	r2, r3
 8004512:	d902      	bls.n	800451a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d13d      	bne.n	8004596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004532:	d111      	bne.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453c:	d004      	beq.n	8004548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004546:	d107      	bne.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004560:	d10f      	bne.n	8004582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e017      	b.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	bf0c      	ite	eq
 80045b6:	2301      	moveq	r3, #1
 80045b8:	2300      	movne	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d19b      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000008 	.word	0x20000008

080045d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e8:	d111      	bne.n	800460e <SPI_EndRxTransaction+0x3a>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f2:	d004      	beq.n	80045fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fc:	d107      	bne.n	800460e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004616:	d12a      	bne.n	800466e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004620:	d012      	beq.n	8004648 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2200      	movs	r2, #0
 800462a:	2180      	movs	r1, #128	; 0x80
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff ff49 	bl	80044c4 <SPI_WaitFlagStateUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d02d      	beq.n	8004694 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e026      	b.n	8004696 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2200      	movs	r2, #0
 8004650:	2101      	movs	r1, #1
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff ff36 	bl	80044c4 <SPI_WaitFlagStateUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01a      	beq.n	8004694 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e013      	b.n	8004696 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2200      	movs	r2, #0
 8004676:	2101      	movs	r1, #1
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff ff23 	bl	80044c4 <SPI_WaitFlagStateUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e000      	b.n	8004696 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <SPI_EndRxTxTransaction+0x7c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <SPI_EndRxTxTransaction+0x80>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	0d5b      	lsrs	r3, r3, #21
 80046b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046bc:	fb02 f303 	mul.w	r3, r2, r3
 80046c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ca:	d112      	bne.n	80046f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2180      	movs	r1, #128	; 0x80
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff fef4 	bl	80044c4 <SPI_WaitFlagStateUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	f043 0220 	orr.w	r2, r3, #32
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e00f      	b.n	8004712 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b80      	cmp	r3, #128	; 0x80
 800470a:	d0f2      	beq.n	80046f2 <SPI_EndRxTxTransaction+0x52>
 800470c:	e000      	b.n	8004710 <SPI_EndRxTxTransaction+0x70>
        break;
 800470e:	bf00      	nop
  }

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000008 	.word	0x20000008
 8004720:	165e9f81 	.word	0x165e9f81

08004724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e041      	b.n	80047ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc ffb6 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f000 fefe 	bl	8005564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d001      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e044      	b.n	8004866 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1e      	ldr	r2, [pc, #120]	; (8004874 <HAL_TIM_Base_Start_IT+0xb0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d018      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x6c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d013      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x6c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1a      	ldr	r2, [pc, #104]	; (8004878 <HAL_TIM_Base_Start_IT+0xb4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00e      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x6c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a19      	ldr	r2, [pc, #100]	; (800487c <HAL_TIM_Base_Start_IT+0xb8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x6c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a17      	ldr	r2, [pc, #92]	; (8004880 <HAL_TIM_Base_Start_IT+0xbc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x6c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a16      	ldr	r2, [pc, #88]	; (8004884 <HAL_TIM_Base_Start_IT+0xc0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d111      	bne.n	8004854 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b06      	cmp	r3, #6
 8004840:	d010      	beq.n	8004864 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004852:	e007      	b.n	8004864 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40014000 	.word	0x40014000

08004888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e041      	b.n	800491e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f839 	bl	8004926 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f000 fe4c 	bl	8005564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e022      	b.n	80049ae <HAL_TIM_PWM_Start_DMA+0x72>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d109      	bne.n	8004982 <HAL_TIM_PWM_Start_DMA+0x46>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	bf0c      	ite	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	2300      	movne	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e015      	b.n	80049ae <HAL_TIM_PWM_Start_DMA+0x72>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d109      	bne.n	800499c <HAL_TIM_PWM_Start_DMA+0x60>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e008      	b.n	80049ae <HAL_TIM_PWM_Start_DMA+0x72>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
 80049b4:	e15d      	b.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <HAL_TIM_PWM_Start_DMA+0x94>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e022      	b.n	8004a16 <HAL_TIM_PWM_Start_DMA+0xda>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d109      	bne.n	80049ea <HAL_TIM_PWM_Start_DMA+0xae>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	bf0c      	ite	eq
 80049e2:	2301      	moveq	r3, #1
 80049e4:	2300      	movne	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e015      	b.n	8004a16 <HAL_TIM_PWM_Start_DMA+0xda>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d109      	bne.n	8004a04 <HAL_TIM_PWM_Start_DMA+0xc8>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e008      	b.n	8004a16 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d024      	beq.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_PWM_Start_DMA+0xee>
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e123      	b.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_PWM_Start_DMA+0xfe>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a38:	e016      	b.n	8004a68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d104      	bne.n	8004a4a <HAL_TIM_PWM_Start_DMA+0x10e>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a48:	e00e      	b.n	8004a68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_PWM_Start_DMA+0x11e>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a58:	e006      	b.n	8004a68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a62:	e001      	b.n	8004a68 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e104      	b.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	f200 80ae 	bhi.w	8004bcc <HAL_TIM_PWM_Start_DMA+0x290>
 8004a70:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004aad 	.word	0x08004aad
 8004a7c:	08004bcd 	.word	0x08004bcd
 8004a80:	08004bcd 	.word	0x08004bcd
 8004a84:	08004bcd 	.word	0x08004bcd
 8004a88:	08004af5 	.word	0x08004af5
 8004a8c:	08004bcd 	.word	0x08004bcd
 8004a90:	08004bcd 	.word	0x08004bcd
 8004a94:	08004bcd 	.word	0x08004bcd
 8004a98:	08004b3d 	.word	0x08004b3d
 8004a9c:	08004bcd 	.word	0x08004bcd
 8004aa0:	08004bcd 	.word	0x08004bcd
 8004aa4:	08004bcd 	.word	0x08004bcd
 8004aa8:	08004b85 	.word	0x08004b85
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	4a72      	ldr	r2, [pc, #456]	; (8004c7c <HAL_TIM_PWM_Start_DMA+0x340>)
 8004ab2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	4a71      	ldr	r2, [pc, #452]	; (8004c80 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	4a70      	ldr	r2, [pc, #448]	; (8004c84 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004ac2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3334      	adds	r3, #52	; 0x34
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	887b      	ldrh	r3, [r7, #2]
 8004ad4:	f7fd f98c 	bl	8001df0 <HAL_DMA_Start_IT>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0c7      	b.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	60da      	str	r2, [r3, #12]
      break;
 8004af2:	e06e      	b.n	8004bd2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	4a60      	ldr	r2, [pc, #384]	; (8004c7c <HAL_TIM_PWM_Start_DMA+0x340>)
 8004afa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	4a5f      	ldr	r2, [pc, #380]	; (8004c80 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	4a5e      	ldr	r2, [pc, #376]	; (8004c84 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004b0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3338      	adds	r3, #56	; 0x38
 8004b18:	461a      	mov	r2, r3
 8004b1a:	887b      	ldrh	r3, [r7, #2]
 8004b1c:	f7fd f968 	bl	8001df0 <HAL_DMA_Start_IT>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0a3      	b.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b38:	60da      	str	r2, [r3, #12]
      break;
 8004b3a:	e04a      	b.n	8004bd2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a4e      	ldr	r2, [pc, #312]	; (8004c7c <HAL_TIM_PWM_Start_DMA+0x340>)
 8004b42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4a4d      	ldr	r2, [pc, #308]	; (8004c80 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a4c      	ldr	r2, [pc, #304]	; (8004c84 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004b52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	333c      	adds	r3, #60	; 0x3c
 8004b60:	461a      	mov	r2, r3
 8004b62:	887b      	ldrh	r3, [r7, #2]
 8004b64:	f7fd f944 	bl	8001df0 <HAL_DMA_Start_IT>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e07f      	b.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b80:	60da      	str	r2, [r3, #12]
      break;
 8004b82:	e026      	b.n	8004bd2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	4a3c      	ldr	r2, [pc, #240]	; (8004c7c <HAL_TIM_PWM_Start_DMA+0x340>)
 8004b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4a3b      	ldr	r2, [pc, #236]	; (8004c80 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	4a3a      	ldr	r2, [pc, #232]	; (8004c84 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004b9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3340      	adds	r3, #64	; 0x40
 8004ba8:	461a      	mov	r2, r3
 8004baa:	887b      	ldrh	r3, [r7, #2]
 8004bac:	f7fd f920 	bl	8001df0 <HAL_DMA_Start_IT>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e05b      	b.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bc8:	60da      	str	r2, [r3, #12]
      break;
 8004bca:	e002      	b.n	8004bd2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d14b      	bne.n	8004c70 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 ff65 	bl	8005ab0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a27      	ldr	r2, [pc, #156]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d018      	beq.n	8004c3c <HAL_TIM_PWM_Start_DMA+0x300>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c12:	d013      	beq.n	8004c3c <HAL_TIM_PWM_Start_DMA+0x300>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1c      	ldr	r2, [pc, #112]	; (8004c8c <HAL_TIM_PWM_Start_DMA+0x350>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00e      	beq.n	8004c3c <HAL_TIM_PWM_Start_DMA+0x300>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d009      	beq.n	8004c3c <HAL_TIM_PWM_Start_DMA+0x300>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d004      	beq.n	8004c3c <HAL_TIM_PWM_Start_DMA+0x300>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d111      	bne.n	8004c60 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b06      	cmp	r3, #6
 8004c4c:	d010      	beq.n	8004c70 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0201 	orr.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5e:	e007      	b.n	8004c70 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	08005455 	.word	0x08005455
 8004c80:	080054fd 	.word	0x080054fd
 8004c84:	080053c3 	.word	0x080053c3
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40014000 	.word	0x40014000

08004c9c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	d855      	bhi.n	8004d5c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004d5d 	.word	0x08004d5d
 8004cc0:	08004d5d 	.word	0x08004d5d
 8004cc4:	08004d5d 	.word	0x08004d5d
 8004cc8:	08004d09 	.word	0x08004d09
 8004ccc:	08004d5d 	.word	0x08004d5d
 8004cd0:	08004d5d 	.word	0x08004d5d
 8004cd4:	08004d5d 	.word	0x08004d5d
 8004cd8:	08004d25 	.word	0x08004d25
 8004cdc:	08004d5d 	.word	0x08004d5d
 8004ce0:	08004d5d 	.word	0x08004d5d
 8004ce4:	08004d5d 	.word	0x08004d5d
 8004ce8:	08004d41 	.word	0x08004d41
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cfa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fd f8cd 	bl	8001ea0 <HAL_DMA_Abort_IT>
      break;
 8004d06:	e02c      	b.n	8004d62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fd f8bf 	bl	8001ea0 <HAL_DMA_Abort_IT>
      break;
 8004d22:	e01e      	b.n	8004d62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fd f8b1 	bl	8001ea0 <HAL_DMA_Abort_IT>
      break;
 8004d3e:	e010      	b.n	8004d62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd f8a3 	bl	8001ea0 <HAL_DMA_Abort_IT>
      break;
 8004d5a:	e002      	b.n	8004d62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d157      	bne.n	8004e18 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fe9d 	bl	8005ab0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d117      	bne.n	8004db0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a1a      	ldr	r2, [r3, #32]
 8004d86:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10f      	bne.n	8004db0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	f240 4344 	movw	r3, #1092	; 0x444
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6a1a      	ldr	r2, [r3, #32]
 8004db6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10f      	bne.n	8004de0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f240 4344 	movw	r3, #1092	; 0x444
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dee:	e013      	b.n	8004e18 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d104      	bne.n	8004e00 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dfe:	e00b      	b.n	8004e18 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d104      	bne.n	8004e10 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e0e:	e003      	b.n	8004e18 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40010000 	.word	0x40010000

08004e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d122      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d11b      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0202 	mvn.w	r2, #2
 8004e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa77 	bl	800535e <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa69 	bl	800534a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fa7a 	bl	8005372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d122      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0204 	mvn.w	r2, #4
 8004ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa4d 	bl	800535e <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa3f 	bl	800534a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fa50 	bl	8005372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0208 	mvn.w	r2, #8
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2204      	movs	r2, #4
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa23 	bl	800535e <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fa15 	bl	800534a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa26 	bl	8005372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d122      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b10      	cmp	r3, #16
 8004f46:	d11b      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0210 	mvn.w	r2, #16
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2208      	movs	r2, #8
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9f9 	bl	800535e <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f9eb 	bl	800534a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f9fc 	bl	8005372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d10e      	bne.n	8004fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d107      	bne.n	8004fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0201 	mvn.w	r2, #1
 8004fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fc fab4 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b80      	cmp	r3, #128	; 0x80
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc4:	2b80      	cmp	r3, #128	; 0x80
 8004fc6:	d107      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fe0a 	bl	8005bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d10e      	bne.n	8005004 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d107      	bne.n	8005004 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f9cb 	bl	800539a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b20      	cmp	r3, #32
 8005010:	d10e      	bne.n	8005030 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b20      	cmp	r3, #32
 800501e:	d107      	bne.n	8005030 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0220 	mvn.w	r2, #32
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fdd4 	bl	8005bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005052:	2302      	movs	r3, #2
 8005054:	e0ae      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b0c      	cmp	r3, #12
 8005062:	f200 809f 	bhi.w	80051a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005066:	a201      	add	r2, pc, #4	; (adr r2, 800506c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	080050a1 	.word	0x080050a1
 8005070:	080051a5 	.word	0x080051a5
 8005074:	080051a5 	.word	0x080051a5
 8005078:	080051a5 	.word	0x080051a5
 800507c:	080050e1 	.word	0x080050e1
 8005080:	080051a5 	.word	0x080051a5
 8005084:	080051a5 	.word	0x080051a5
 8005088:	080051a5 	.word	0x080051a5
 800508c:	08005123 	.word	0x08005123
 8005090:	080051a5 	.word	0x080051a5
 8005094:	080051a5 	.word	0x080051a5
 8005098:	080051a5 	.word	0x080051a5
 800509c:	08005163 	.word	0x08005163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fadc 	bl	8005664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0208 	orr.w	r2, r2, #8
 80050ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0204 	bic.w	r2, r2, #4
 80050ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6999      	ldr	r1, [r3, #24]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	619a      	str	r2, [r3, #24]
      break;
 80050de:	e064      	b.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fb22 	bl	8005730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6999      	ldr	r1, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	021a      	lsls	r2, r3, #8
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	619a      	str	r2, [r3, #24]
      break;
 8005120:	e043      	b.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fb6d 	bl	8005808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0208 	orr.w	r2, r2, #8
 800513c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0204 	bic.w	r2, r2, #4
 800514c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69d9      	ldr	r1, [r3, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	61da      	str	r2, [r3, #28]
      break;
 8005160:	e023      	b.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fbb7 	bl	80058dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800517c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	021a      	lsls	r2, r3, #8
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	61da      	str	r2, [r3, #28]
      break;
 80051a2:	e002      	b.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_ConfigClockSource+0x1c>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e0b4      	b.n	8005342 <HAL_TIM_ConfigClockSource+0x186>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005210:	d03e      	beq.n	8005290 <HAL_TIM_ConfigClockSource+0xd4>
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005216:	f200 8087 	bhi.w	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521e:	f000 8086 	beq.w	800532e <HAL_TIM_ConfigClockSource+0x172>
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	d87f      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b70      	cmp	r3, #112	; 0x70
 800522a:	d01a      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0xa6>
 800522c:	2b70      	cmp	r3, #112	; 0x70
 800522e:	d87b      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b60      	cmp	r3, #96	; 0x60
 8005232:	d050      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005234:	2b60      	cmp	r3, #96	; 0x60
 8005236:	d877      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b50      	cmp	r3, #80	; 0x50
 800523a:	d03c      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0xfa>
 800523c:	2b50      	cmp	r3, #80	; 0x50
 800523e:	d873      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d058      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d86f      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b30      	cmp	r3, #48	; 0x30
 800524a:	d064      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	2b30      	cmp	r3, #48	; 0x30
 800524e:	d86b      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b20      	cmp	r3, #32
 8005252:	d060      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 8005254:	2b20      	cmp	r3, #32
 8005256:	d867      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d05c      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 800525c:	2b10      	cmp	r3, #16
 800525e:	d05a      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 8005260:	e062      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6899      	ldr	r1, [r3, #8]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f000 fbfd 	bl	8005a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	609a      	str	r2, [r3, #8]
      break;
 800528e:	e04f      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6899      	ldr	r1, [r3, #8]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f000 fbe6 	bl	8005a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b2:	609a      	str	r2, [r3, #8]
      break;
 80052b4:	e03c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6859      	ldr	r1, [r3, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f000 fb5a 	bl	800597c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2150      	movs	r1, #80	; 0x50
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fbb3 	bl	8005a3a <TIM_ITRx_SetConfig>
      break;
 80052d4:	e02c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6859      	ldr	r1, [r3, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f000 fb79 	bl	80059da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2160      	movs	r1, #96	; 0x60
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fba3 	bl	8005a3a <TIM_ITRx_SetConfig>
      break;
 80052f4:	e01c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	461a      	mov	r2, r3
 8005304:	f000 fb3a 	bl	800597c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2140      	movs	r1, #64	; 0x40
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fb93 	bl	8005a3a <TIM_ITRx_SetConfig>
      break;
 8005314:	e00c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f000 fb8a 	bl	8005a3a <TIM_ITRx_SetConfig>
      break;
 8005326:	e003      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
      break;
 800532c:	e000      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800532e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d107      	bne.n	80053ea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e8:	e02a      	b.n	8005440 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d107      	bne.n	8005404 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2202      	movs	r2, #2
 80053f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005402:	e01d      	b.n	8005440 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	429a      	cmp	r2, r3
 800540c:	d107      	bne.n	800541e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2204      	movs	r2, #4
 8005412:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800541c:	e010      	b.n	8005440 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d107      	bne.n	8005438 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2208      	movs	r2, #8
 800542c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005436:	e003      	b.n	8005440 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff ffb4 	bl	80053ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d10b      	bne.n	8005484 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d136      	bne.n	80054e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005482:	e031      	b.n	80054e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	429a      	cmp	r2, r3
 800548c:	d10b      	bne.n	80054a6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2202      	movs	r2, #2
 8005492:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d125      	bne.n	80054e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a4:	e020      	b.n	80054e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d10b      	bne.n	80054c8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2204      	movs	r2, #4
 80054b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d114      	bne.n	80054e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c6:	e00f      	b.n	80054e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d10a      	bne.n	80054e8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2208      	movs	r2, #8
 80054d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff ff42 	bl	8005372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
}
 80054f4:	bf00      	nop
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d103      	bne.n	800551c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	771a      	strb	r2, [r3, #28]
 800551a:	e019      	b.n	8005550 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d103      	bne.n	800552e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2202      	movs	r2, #2
 800552a:	771a      	strb	r2, [r3, #28]
 800552c:	e010      	b.n	8005550 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d103      	bne.n	8005540 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2204      	movs	r2, #4
 800553c:	771a      	strb	r2, [r3, #28]
 800553e:	e007      	b.n	8005550 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d102      	bne.n	8005550 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2208      	movs	r2, #8
 800554e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff ff18 	bl	8005386 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
}
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a34      	ldr	r2, [pc, #208]	; (8005648 <TIM_Base_SetConfig+0xe4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_Base_SetConfig+0x38>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d00b      	beq.n	800559c <TIM_Base_SetConfig+0x38>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a31      	ldr	r2, [pc, #196]	; (800564c <TIM_Base_SetConfig+0xe8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0x38>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a30      	ldr	r2, [pc, #192]	; (8005650 <TIM_Base_SetConfig+0xec>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0x38>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <TIM_Base_SetConfig+0xf0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a25      	ldr	r2, [pc, #148]	; (8005648 <TIM_Base_SetConfig+0xe4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01b      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d017      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <TIM_Base_SetConfig+0xe8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a21      	ldr	r2, [pc, #132]	; (8005650 <TIM_Base_SetConfig+0xec>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00f      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a20      	ldr	r2, [pc, #128]	; (8005654 <TIM_Base_SetConfig+0xf0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00b      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <TIM_Base_SetConfig+0xf4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d007      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1e      	ldr	r2, [pc, #120]	; (800565c <TIM_Base_SetConfig+0xf8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1d      	ldr	r2, [pc, #116]	; (8005660 <TIM_Base_SetConfig+0xfc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d108      	bne.n	8005600 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a08      	ldr	r2, [pc, #32]	; (8005648 <TIM_Base_SetConfig+0xe4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]
}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40010000 	.word	0x40010000
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0303 	bic.w	r3, r3, #3
 800569a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f023 0302 	bic.w	r3, r3, #2
 80056ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1c      	ldr	r2, [pc, #112]	; (800572c <TIM_OC1_SetConfig+0xc8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10c      	bne.n	80056da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0308 	bic.w	r3, r3, #8
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f023 0304 	bic.w	r3, r3, #4
 80056d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a13      	ldr	r2, [pc, #76]	; (800572c <TIM_OC1_SetConfig+0xc8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d111      	bne.n	8005706 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	621a      	str	r2, [r3, #32]
}
 8005720:	bf00      	nop
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40010000 	.word	0x40010000

08005730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f023 0210 	bic.w	r2, r3, #16
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f023 0320 	bic.w	r3, r3, #32
 800577a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <TIM_OC2_SetConfig+0xd4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d10d      	bne.n	80057ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a15      	ldr	r2, [pc, #84]	; (8005804 <TIM_OC2_SetConfig+0xd4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d113      	bne.n	80057dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40010000 	.word	0x40010000

08005808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1d      	ldr	r2, [pc, #116]	; (80058d8 <TIM_OC3_SetConfig+0xd0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d10d      	bne.n	8005882 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800586c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a14      	ldr	r2, [pc, #80]	; (80058d8 <TIM_OC3_SetConfig+0xd0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d113      	bne.n	80058b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40010000 	.word	0x40010000

080058dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	031b      	lsls	r3, r3, #12
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a10      	ldr	r2, [pc, #64]	; (8005978 <TIM_OC4_SetConfig+0x9c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d109      	bne.n	8005950 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	019b      	lsls	r3, r3, #6
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000

0800597c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f023 0201 	bic.w	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 030a 	bic.w	r3, r3, #10
 80059b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059da:	b480      	push	{r7}
 80059dc:	b087      	sub	sp, #28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f023 0210 	bic.w	r2, r3, #16
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	031b      	lsls	r3, r3, #12
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	621a      	str	r2, [r3, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f043 0307 	orr.w	r3, r3, #7
 8005a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	609a      	str	r2, [r3, #8]
}
 8005a64:	bf00      	nop
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	021a      	lsls	r2, r3, #8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	609a      	str	r2, [r3, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a1a      	ldr	r2, [r3, #32]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a1a      	ldr	r2, [r3, #32]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	621a      	str	r2, [r3, #32]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e050      	b.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d018      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b60:	d013      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00e      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a13      	ldr	r2, [pc, #76]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d10c      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40014000 	.word	0x40014000

08005bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <__NVIC_SetPriority>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	db0a      	blt.n	8005c2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	490c      	ldr	r1, [pc, #48]	; (8005c4c <__NVIC_SetPriority+0x4c>)
 8005c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1e:	0112      	lsls	r2, r2, #4
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	440b      	add	r3, r1
 8005c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c28:	e00a      	b.n	8005c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4908      	ldr	r1, [pc, #32]	; (8005c50 <__NVIC_SetPriority+0x50>)
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	3b04      	subs	r3, #4
 8005c38:	0112      	lsls	r2, r2, #4
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	761a      	strb	r2, [r3, #24]
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	e000e100 	.word	0xe000e100
 8005c50:	e000ed00 	.word	0xe000ed00

08005c54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <SysTick_Handler+0x1c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005c5c:	f001 fd28 	bl	80076b0 <xTaskGetSchedulerState>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d001      	beq.n	8005c6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c66:	f002 fb0f 	bl	8008288 <xPortSysTickHandler>
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	e000e010 	.word	0xe000e010

08005c74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c78:	2100      	movs	r1, #0
 8005c7a:	f06f 0004 	mvn.w	r0, #4
 8005c7e:	f7ff ffbf 	bl	8005c00 <__NVIC_SetPriority>
#endif
}
 8005c82:	bf00      	nop
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c8e:	f3ef 8305 	mrs	r3, IPSR
 8005c92:	603b      	str	r3, [r7, #0]
  return(result);
 8005c94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c9a:	f06f 0305 	mvn.w	r3, #5
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	e00c      	b.n	8005cbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <osKernelInitialize+0x44>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005caa:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <osKernelInitialize+0x44>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	607b      	str	r3, [r7, #4]
 8005cb4:	e002      	b.n	8005cbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005cbc:	687b      	ldr	r3, [r7, #4]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000828 	.word	0x20000828

08005cd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cd6:	f3ef 8305 	mrs	r3, IPSR
 8005cda:	603b      	str	r3, [r7, #0]
  return(result);
 8005cdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ce2:	f06f 0305 	mvn.w	r3, #5
 8005ce6:	607b      	str	r3, [r7, #4]
 8005ce8:	e010      	b.n	8005d0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005cea:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <osKernelStart+0x48>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d109      	bne.n	8005d06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005cf2:	f7ff ffbf 	bl	8005c74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005cf6:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <osKernelStart+0x48>)
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005cfc:	f001 f87c 	bl	8006df8 <vTaskStartScheduler>
      stat = osOK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	607b      	str	r3, [r7, #4]
 8005d04:	e002      	b.n	8005d0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d0c:	687b      	ldr	r3, [r7, #4]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000828 	.word	0x20000828

08005d1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08e      	sub	sp, #56	; 0x38
 8005d20:	af04      	add	r7, sp, #16
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d2c:	f3ef 8305 	mrs	r3, IPSR
 8005d30:	617b      	str	r3, [r7, #20]
  return(result);
 8005d32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d17e      	bne.n	8005e36 <osThreadNew+0x11a>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d07b      	beq.n	8005e36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d3e:	2380      	movs	r3, #128	; 0x80
 8005d40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d42:	2318      	movs	r3, #24
 8005d44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d045      	beq.n	8005de2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <osThreadNew+0x48>
        name = attr->name;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <osThreadNew+0x6e>
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b38      	cmp	r3, #56	; 0x38
 8005d7c:	d805      	bhi.n	8005d8a <osThreadNew+0x6e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <osThreadNew+0x72>
        return (NULL);
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e054      	b.n	8005e38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	089b      	lsrs	r3, r3, #2
 8005d9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00e      	beq.n	8005dc4 <osThreadNew+0xa8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2bbb      	cmp	r3, #187	; 0xbb
 8005dac:	d90a      	bls.n	8005dc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <osThreadNew+0xa8>
        mem = 1;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	e010      	b.n	8005de6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10c      	bne.n	8005de6 <osThreadNew+0xca>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <osThreadNew+0xca>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <osThreadNew+0xca>
          mem = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e001      	b.n	8005de6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d110      	bne.n	8005e0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005df4:	9202      	str	r2, [sp, #8]
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	6a3a      	ldr	r2, [r7, #32]
 8005e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fe0c 	bl	8006a20 <xTaskCreateStatic>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	e013      	b.n	8005e36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d110      	bne.n	8005e36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f107 0310 	add.w	r3, r7, #16
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fe57 	bl	8006ada <xTaskCreate>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d001      	beq.n	8005e36 <osThreadNew+0x11a>
            hTask = NULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e36:	693b      	ldr	r3, [r7, #16]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3728      	adds	r7, #40	; 0x28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e48:	f3ef 8305 	mrs	r3, IPSR
 8005e4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <osDelay+0x1c>
    stat = osErrorISR;
 8005e54:	f06f 0305 	mvn.w	r3, #5
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	e007      	b.n	8005e6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 ff92 	bl	8006d90 <vTaskDelay>
    }
  }

  return (stat);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a07      	ldr	r2, [pc, #28]	; (8005ea4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4a06      	ldr	r2, [pc, #24]	; (8005ea8 <vApplicationGetIdleTaskMemory+0x30>)
 8005e8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2280      	movs	r2, #128	; 0x80
 8005e94:	601a      	str	r2, [r3, #0]
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	2000082c 	.word	0x2000082c
 8005ea8:	200008e8 	.word	0x200008e8

08005eac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ebc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a06      	ldr	r2, [pc, #24]	; (8005edc <vApplicationGetTimerTaskMemory+0x30>)
 8005ec2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eca:	601a      	str	r2, [r3, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	20000ae8 	.word	0x20000ae8
 8005edc:	20000ba4 	.word	0x20000ba4

08005ee0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f103 0208 	add.w	r2, r3, #8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f103 0208 	add.w	r2, r3, #8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 0208 	add.w	r2, r3, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	601a      	str	r2, [r3, #0]
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d103      	bne.n	8005fa2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e00c      	b.n	8005fbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	e002      	b.n	8005fb0 <vListInsert+0x2e>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d2f6      	bcs.n	8005faa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6892      	ldr	r2, [r2, #8]
 800600a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6852      	ldr	r2, [r2, #4]
 8006014:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d103      	bne.n	8006028 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	1e5a      	subs	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006072:	f002 f877 	bl	8008164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006082:	fb01 f303 	mul.w	r3, r1, r3
 8006086:	441a      	add	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	3b01      	subs	r3, #1
 80060a4:	68f9      	ldr	r1, [r7, #12]
 80060a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	441a      	add	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	22ff      	movs	r2, #255	; 0xff
 80060b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	22ff      	movs	r2, #255	; 0xff
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d114      	bne.n	80060f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01a      	beq.n	8006106 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3310      	adds	r3, #16
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 f929 	bl	800732c <xTaskRemoveFromEventList>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d012      	beq.n	8006106 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <xQueueGenericReset+0xcc>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	e009      	b.n	8006106 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3310      	adds	r3, #16
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fef2 	bl	8005ee0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3324      	adds	r3, #36	; 0x24
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff feed 	bl	8005ee0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006106:	f002 f85d 	bl	80081c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800610a:	2301      	movs	r3, #1
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08e      	sub	sp, #56	; 0x38
 800611c:	af02      	add	r7, sp, #8
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <xQueueGenericCreateStatic+0x52>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <xQueueGenericCreateStatic+0x56>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <xQueueGenericCreateStatic+0x58>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	623b      	str	r3, [r7, #32]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <xQueueGenericCreateStatic+0x7e>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <xQueueGenericCreateStatic+0x82>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <xQueueGenericCreateStatic+0x84>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	61fb      	str	r3, [r7, #28]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061b6:	2350      	movs	r3, #80	; 0x50
 80061b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b50      	cmp	r3, #80	; 0x50
 80061be:	d00a      	beq.n	80061d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	61bb      	str	r3, [r7, #24]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	4613      	mov	r3, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f805 	bl	8006208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006200:	4618      	mov	r0, r3
 8006202:	3730      	adds	r7, #48	; 0x30
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d103      	bne.n	8006224 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e002      	b.n	800622a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006236:	2101      	movs	r1, #1
 8006238:	69b8      	ldr	r0, [r7, #24]
 800623a:	f7ff ff05 	bl	8006048 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08e      	sub	sp, #56	; 0x38
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800625e:	2300      	movs	r3, #0
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xQueueGenericSend+0x32>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <xQueueGenericSend+0x40>
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <xQueueGenericSend+0x44>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <xQueueGenericSend+0x46>
 8006294:	2300      	movs	r3, #0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <xQueueGenericSend+0x60>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d103      	bne.n	80062be <xQueueGenericSend+0x6e>
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <xQueueGenericSend+0x72>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xQueueGenericSend+0x74>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <xQueueGenericSend+0x8e>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	623b      	str	r3, [r7, #32]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062de:	f001 f9e7 	bl	80076b0 <xTaskGetSchedulerState>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <xQueueGenericSend+0x9e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <xQueueGenericSend+0xa2>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <xQueueGenericSend+0xa4>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <xQueueGenericSend+0xbe>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	61fb      	str	r3, [r7, #28]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800630e:	f001 ff29 	bl	8008164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <xQueueGenericSend+0xd4>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d129      	bne.n	8006378 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800632a:	f000 fa0b 	bl	8006744 <prvCopyDataToQueue>
 800632e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	d010      	beq.n	800635a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fff5 	bl	800732c <xTaskRemoveFromEventList>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d013      	beq.n	8006370 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006348:	4b3f      	ldr	r3, [pc, #252]	; (8006448 <xQueueGenericSend+0x1f8>)
 800634a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	e00a      	b.n	8006370 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006360:	4b39      	ldr	r3, [pc, #228]	; (8006448 <xQueueGenericSend+0x1f8>)
 8006362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006370:	f001 ff28 	bl	80081c4 <vPortExitCritical>
				return pdPASS;
 8006374:	2301      	movs	r3, #1
 8006376:	e063      	b.n	8006440 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800637e:	f001 ff21 	bl	80081c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006382:	2300      	movs	r3, #0
 8006384:	e05c      	b.n	8006440 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800638c:	f107 0314 	add.w	r3, r7, #20
 8006390:	4618      	mov	r0, r3
 8006392:	f001 f82f 	bl	80073f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006396:	2301      	movs	r3, #1
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800639a:	f001 ff13 	bl	80081c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800639e:	f000 fd9b 	bl	8006ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063a2:	f001 fedf 	bl	8008164 <vPortEnterCritical>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d103      	bne.n	80063bc <xQueueGenericSend+0x16c>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c2:	b25b      	sxtb	r3, r3
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d103      	bne.n	80063d2 <xQueueGenericSend+0x182>
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d2:	f001 fef7 	bl	80081c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063d6:	1d3a      	adds	r2, r7, #4
 80063d8:	f107 0314 	add.w	r3, r7, #20
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 f81e 	bl	8007420 <xTaskCheckForTimeOut>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d124      	bne.n	8006434 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ec:	f000 faa2 	bl	8006934 <prvIsQueueFull>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d018      	beq.n	8006428 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	3310      	adds	r3, #16
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	4611      	mov	r1, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 ff44 	bl	800728c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006406:	f000 fa2d 	bl	8006864 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800640a:	f000 fd73 	bl	8006ef4 <xTaskResumeAll>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	f47f af7c 	bne.w	800630e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <xQueueGenericSend+0x1f8>)
 8006418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	e772      	b.n	800630e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800642a:	f000 fa1b 	bl	8006864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800642e:	f000 fd61 	bl	8006ef4 <xTaskResumeAll>
 8006432:	e76c      	b.n	800630e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006436:	f000 fa15 	bl	8006864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800643a:	f000 fd5b 	bl	8006ef4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800643e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006440:	4618      	mov	r0, r3
 8006442:	3738      	adds	r7, #56	; 0x38
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b090      	sub	sp, #64	; 0x40
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <xQueueGenericSendFromISR+0x3c>
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <xQueueGenericSendFromISR+0x40>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <xQueueGenericSendFromISR+0x42>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d103      	bne.n	80064b6 <xQueueGenericSendFromISR+0x6a>
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <xQueueGenericSendFromISR+0x6e>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <xQueueGenericSendFromISR+0x70>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	623b      	str	r3, [r7, #32]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064d6:	f001 ff27 	bl	8008328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064da:	f3ef 8211 	mrs	r2, BASEPRI
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	61fa      	str	r2, [r7, #28]
 80064f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <xQueueGenericSendFromISR+0xbc>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d12f      	bne.n	8006568 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800650e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800651e:	f000 f911 	bl	8006744 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006522:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d112      	bne.n	8006552 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d016      	beq.n	8006562 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	3324      	adds	r3, #36	; 0x24
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fef7 	bl	800732c <xTaskRemoveFromEventList>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00e      	beq.n	8006562 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00b      	beq.n	8006562 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	e007      	b.n	8006562 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006552:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006556:	3301      	adds	r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	b25a      	sxtb	r2, r3
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006562:	2301      	movs	r3, #1
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006566:	e001      	b.n	800656c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006568:	2300      	movs	r3, #0
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006576:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800657a:	4618      	mov	r0, r3
 800657c:	3740      	adds	r7, #64	; 0x40
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08c      	sub	sp, #48	; 0x30
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006590:	2300      	movs	r3, #0
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xQueueReceive+0x30>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	623b      	str	r3, [r7, #32]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <xQueueReceive+0x3e>
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <xQueueReceive+0x42>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueReceive+0x44>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xQueueReceive+0x5e>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	61fb      	str	r3, [r7, #28]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065e2:	f001 f865 	bl	80076b0 <xTaskGetSchedulerState>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <xQueueReceive+0x6e>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <xQueueReceive+0x72>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <xQueueReceive+0x74>
 80065f6:	2300      	movs	r3, #0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xQueueReceive+0x8e>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	61bb      	str	r3, [r7, #24]
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006612:	f001 fda7 	bl	8008164 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01f      	beq.n	8006662 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006626:	f000 f8f7 	bl	8006818 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1e5a      	subs	r2, r3, #1
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00f      	beq.n	800665a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	3310      	adds	r3, #16
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fe74 	bl	800732c <xTaskRemoveFromEventList>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800664a:	4b3d      	ldr	r3, [pc, #244]	; (8006740 <xQueueReceive+0x1bc>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800665a:	f001 fdb3 	bl	80081c4 <vPortExitCritical>
				return pdPASS;
 800665e:	2301      	movs	r3, #1
 8006660:	e069      	b.n	8006736 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006668:	f001 fdac 	bl	80081c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800666c:	2300      	movs	r3, #0
 800666e:	e062      	b.n	8006736 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006676:	f107 0310 	add.w	r3, r7, #16
 800667a:	4618      	mov	r0, r3
 800667c:	f000 feba 	bl	80073f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006684:	f001 fd9e 	bl	80081c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006688:	f000 fc26 	bl	8006ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800668c:	f001 fd6a 	bl	8008164 <vPortEnterCritical>
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006696:	b25b      	sxtb	r3, r3
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669c:	d103      	bne.n	80066a6 <xQueueReceive+0x122>
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d103      	bne.n	80066bc <xQueueReceive+0x138>
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066bc:	f001 fd82 	bl	80081c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066c0:	1d3a      	adds	r2, r7, #4
 80066c2:	f107 0310 	add.w	r3, r7, #16
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fea9 	bl	8007420 <xTaskCheckForTimeOut>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d123      	bne.n	800671c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d6:	f000 f917 	bl	8006908 <prvIsQueueEmpty>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d017      	beq.n	8006710 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	3324      	adds	r3, #36	; 0x24
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fdcf 	bl	800728c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f0:	f000 f8b8 	bl	8006864 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066f4:	f000 fbfe 	bl	8006ef4 <xTaskResumeAll>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d189      	bne.n	8006612 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <xQueueReceive+0x1bc>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	e780      	b.n	8006612 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006712:	f000 f8a7 	bl	8006864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006716:	f000 fbed 	bl	8006ef4 <xTaskResumeAll>
 800671a:	e77a      	b.n	8006612 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800671c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671e:	f000 f8a1 	bl	8006864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006722:	f000 fbe7 	bl	8006ef4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006728:	f000 f8ee 	bl	8006908 <prvIsQueueEmpty>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f43f af6f 	beq.w	8006612 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006734:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006736:	4618      	mov	r0, r3
 8006738:	3730      	adds	r7, #48	; 0x30
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10d      	bne.n	800677e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d14d      	bne.n	8006806 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 ffbc 	bl	80076ec <xTaskPriorityDisinherit>
 8006774:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	609a      	str	r2, [r3, #8]
 800677c:	e043      	b.n	8006806 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d119      	bne.n	80067b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6858      	ldr	r0, [r3, #4]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	461a      	mov	r2, r3
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	f002 f828 	bl	80087e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	441a      	add	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d32b      	bcc.n	8006806 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e026      	b.n	8006806 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68d8      	ldr	r0, [r3, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	461a      	mov	r2, r3
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	f002 f80e 	bl	80087e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	425b      	negs	r3, r3
 80067d2:	441a      	add	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d207      	bcs.n	80067f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	425b      	negs	r3, r3
 80067ee:	441a      	add	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d105      	bne.n	8006806 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	3b01      	subs	r3, #1
 8006804:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800680e:	697b      	ldr	r3, [r7, #20]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d018      	beq.n	800685c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	441a      	add	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	429a      	cmp	r2, r3
 8006842:	d303      	bcc.n	800684c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68d9      	ldr	r1, [r3, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	461a      	mov	r2, r3
 8006856:	6838      	ldr	r0, [r7, #0]
 8006858:	f001 ffc4 	bl	80087e4 <memcpy>
	}
}
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800686c:	f001 fc7a 	bl	8008164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006876:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006878:	e011      	b.n	800689e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	d012      	beq.n	80068a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3324      	adds	r3, #36	; 0x24
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fd50 	bl	800732c <xTaskRemoveFromEventList>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006892:	f000 fe27 	bl	80074e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	3b01      	subs	r3, #1
 800689a:	b2db      	uxtb	r3, r3
 800689c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800689e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dce9      	bgt.n	800687a <prvUnlockQueue+0x16>
 80068a6:	e000      	b.n	80068aa <prvUnlockQueue+0x46>
					break;
 80068a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	22ff      	movs	r2, #255	; 0xff
 80068ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068b2:	f001 fc87 	bl	80081c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068b6:	f001 fc55 	bl	8008164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068c2:	e011      	b.n	80068e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d012      	beq.n	80068f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3310      	adds	r3, #16
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fd2b 	bl	800732c <xTaskRemoveFromEventList>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068dc:	f000 fe02 	bl	80074e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	dce9      	bgt.n	80068c4 <prvUnlockQueue+0x60>
 80068f0:	e000      	b.n	80068f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	22ff      	movs	r2, #255	; 0xff
 80068f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068fc:	f001 fc62 	bl	80081c4 <vPortExitCritical>
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006910:	f001 fc28 	bl	8008164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800691c:	2301      	movs	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	e001      	b.n	8006926 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006926:	f001 fc4d 	bl	80081c4 <vPortExitCritical>

	return xReturn;
 800692a:	68fb      	ldr	r3, [r7, #12]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800693c:	f001 fc12 	bl	8008164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006948:	429a      	cmp	r2, r3
 800694a:	d102      	bne.n	8006952 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800694c:	2301      	movs	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e001      	b.n	8006956 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006956:	f001 fc35 	bl	80081c4 <vPortExitCritical>

	return xReturn;
 800695a:	68fb      	ldr	r3, [r7, #12]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e014      	b.n	800699e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006974:	4a0f      	ldr	r2, [pc, #60]	; (80069b4 <vQueueAddToRegistry+0x50>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10b      	bne.n	8006998 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006980:	490c      	ldr	r1, [pc, #48]	; (80069b4 <vQueueAddToRegistry+0x50>)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800698a:	4a0a      	ldr	r2, [pc, #40]	; (80069b4 <vQueueAddToRegistry+0x50>)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4413      	add	r3, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006996:	e006      	b.n	80069a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3301      	adds	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b07      	cmp	r3, #7
 80069a2:	d9e7      	bls.n	8006974 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000fa4 	.word	0x20000fa4

080069b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069c8:	f001 fbcc 	bl	8008164 <vPortEnterCritical>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069d2:	b25b      	sxtb	r3, r3
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d8:	d103      	bne.n	80069e2 <vQueueWaitForMessageRestricted+0x2a>
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069e8:	b25b      	sxtb	r3, r3
 80069ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ee:	d103      	bne.n	80069f8 <vQueueWaitForMessageRestricted+0x40>
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f8:	f001 fbe4 	bl	80081c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	3324      	adds	r3, #36	; 0x24
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	68b9      	ldr	r1, [r7, #8]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fc61 	bl	80072d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a12:	6978      	ldr	r0, [r7, #20]
 8006a14:	f7ff ff26 	bl	8006864 <prvUnlockQueue>
	}
 8006a18:	bf00      	nop
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08e      	sub	sp, #56	; 0x38
 8006a24:	af04      	add	r7, sp, #16
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10a      	bne.n	8006a4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	623b      	str	r3, [r7, #32]
}
 8006a46:	bf00      	nop
 8006a48:	e7fe      	b.n	8006a48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	61fb      	str	r3, [r7, #28]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a66:	23bc      	movs	r3, #188	; 0xbc
 8006a68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2bbc      	cmp	r3, #188	; 0xbc
 8006a6e:	d00a      	beq.n	8006a86 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	61bb      	str	r3, [r7, #24]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d01e      	beq.n	8006acc <xTaskCreateStatic+0xac>
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01b      	beq.n	8006acc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	9302      	str	r3, [sp, #8]
 8006aae:	f107 0314 	add.w	r3, r7, #20
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f850 	bl	8006b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ac6:	f000 f8f3 	bl	8006cb0 <prvAddNewTaskToReadyList>
 8006aca:	e001      	b.n	8006ad0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ad0:	697b      	ldr	r3, [r7, #20]
	}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3728      	adds	r7, #40	; 0x28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b08c      	sub	sp, #48	; 0x30
 8006ade:	af04      	add	r7, sp, #16
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 fc5a 	bl	80083a8 <pvPortMalloc>
 8006af4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00e      	beq.n	8006b1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006afc:	20bc      	movs	r0, #188	; 0xbc
 8006afe:	f001 fc53 	bl	80083a8 <pvPortMalloc>
 8006b02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b10:	e005      	b.n	8006b1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b12:	6978      	ldr	r0, [r7, #20]
 8006b14:	f001 fd14 	bl	8008540 <vPortFree>
 8006b18:	e001      	b.n	8006b1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d017      	beq.n	8006b54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b2c:	88fa      	ldrh	r2, [r7, #6]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	9302      	str	r3, [sp, #8]
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f80e 	bl	8006b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b48:	69f8      	ldr	r0, [r7, #28]
 8006b4a:	f000 f8b1 	bl	8006cb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	e002      	b.n	8006b5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b54:	f04f 33ff 	mov.w	r3, #4294967295
 8006b58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	21a5      	movs	r1, #165	; 0xa5
 8006b7e:	f001 fe3f 	bl	8008800 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	617b      	str	r3, [r7, #20]
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01f      	beq.n	8006c02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	e012      	b.n	8006bee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	7819      	ldrb	r1, [r3, #0]
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3334      	adds	r3, #52	; 0x34
 8006bd8:	460a      	mov	r2, r1
 8006bda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3301      	adds	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	2b0f      	cmp	r3, #15
 8006bf2:	d9e9      	bls.n	8006bc8 <prvInitialiseNewTask+0x64>
 8006bf4:	e000      	b.n	8006bf8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006bf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c00:	e003      	b.n	8006c0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	2b37      	cmp	r3, #55	; 0x37
 8006c0e:	d901      	bls.n	8006c14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c10:	2337      	movs	r3, #55	; 0x37
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	2200      	movs	r2, #0
 8006c24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff f978 	bl	8005f20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	3318      	adds	r3, #24
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff f973 	bl	8005f20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	3354      	adds	r3, #84	; 0x54
 8006c64:	2260      	movs	r2, #96	; 0x60
 8006c66:	2100      	movs	r1, #0
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f001 fdc9 	bl	8008800 <memset>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	4a0c      	ldr	r2, [pc, #48]	; (8006ca4 <prvInitialiseNewTask+0x140>)
 8006c72:	659a      	str	r2, [r3, #88]	; 0x58
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <prvInitialiseNewTask+0x144>)
 8006c78:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	4a0b      	ldr	r2, [pc, #44]	; (8006cac <prvInitialiseNewTask+0x148>)
 8006c7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	69b8      	ldr	r0, [r7, #24]
 8006c86:	f001 f941 	bl	8007f0c <pxPortInitialiseStack>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c9c:	bf00      	nop
 8006c9e:	3720      	adds	r7, #32
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	0800ad6c 	.word	0x0800ad6c
 8006ca8:	0800ad8c 	.word	0x0800ad8c
 8006cac:	0800ad4c 	.word	0x0800ad4c

08006cb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cb8:	f001 fa54 	bl	8008164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	; (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	4a2c      	ldr	r2, [pc, #176]	; (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cc6:	4b2c      	ldr	r3, [pc, #176]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cce:	4a2a      	ldr	r2, [pc, #168]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d110      	bne.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cdc:	f000 fc26 	bl	800752c <prvInitialiseTaskLists>
 8006ce0:	e00d      	b.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ce2:	4b26      	ldr	r3, [pc, #152]	; (8006d7c <prvAddNewTaskToReadyList+0xcc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cea:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d802      	bhi.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d08:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	4b1b      	ldr	r3, [pc, #108]	; (8006d84 <prvAddNewTaskToReadyList+0xd4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d903      	bls.n	8006d24 <prvAddNewTaskToReadyList+0x74>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <prvAddNewTaskToReadyList+0xd4>)
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4a15      	ldr	r2, [pc, #84]	; (8006d88 <prvAddNewTaskToReadyList+0xd8>)
 8006d32:	441a      	add	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7ff f8fd 	bl	8005f3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d40:	f001 fa40 	bl	80081c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d44:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <prvAddNewTaskToReadyList+0xcc>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00e      	beq.n	8006d6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d207      	bcs.n	8006d6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d5a:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <prvAddNewTaskToReadyList+0xdc>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	200014b8 	.word	0x200014b8
 8006d78:	20000fe4 	.word	0x20000fe4
 8006d7c:	200014c4 	.word	0x200014c4
 8006d80:	200014d4 	.word	0x200014d4
 8006d84:	200014c0 	.word	0x200014c0
 8006d88:	20000fe8 	.word	0x20000fe8
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d017      	beq.n	8006dd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <vTaskDelay+0x60>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <vTaskDelay+0x30>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	60bb      	str	r3, [r7, #8]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dc0:	f000 f88a 	bl	8006ed8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fcfe 	bl	80077c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dcc:	f000 f892 	bl	8006ef4 <xTaskResumeAll>
 8006dd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d107      	bne.n	8006de8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006dd8:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <vTaskDelay+0x64>)
 8006dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006de8:	bf00      	nop
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	200014e0 	.word	0x200014e0
 8006df4:	e000ed04 	.word	0xe000ed04

08006df8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e06:	463a      	mov	r2, r7
 8006e08:	1d39      	adds	r1, r7, #4
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff f832 	bl	8005e78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	9202      	str	r2, [sp, #8]
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	2300      	movs	r3, #0
 8006e24:	460a      	mov	r2, r1
 8006e26:	4924      	ldr	r1, [pc, #144]	; (8006eb8 <vTaskStartScheduler+0xc0>)
 8006e28:	4824      	ldr	r0, [pc, #144]	; (8006ebc <vTaskStartScheduler+0xc4>)
 8006e2a:	f7ff fdf9 	bl	8006a20 <xTaskCreateStatic>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4a23      	ldr	r2, [pc, #140]	; (8006ec0 <vTaskStartScheduler+0xc8>)
 8006e32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e34:	4b22      	ldr	r3, [pc, #136]	; (8006ec0 <vTaskStartScheduler+0xc8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e001      	b.n	8006e46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d102      	bne.n	8006e52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e4c:	f000 fd10 	bl	8007870 <xTimerCreateTimerTask>
 8006e50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d11b      	bne.n	8006e90 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	613b      	str	r3, [r7, #16]
}
 8006e6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e6c:	4b15      	ldr	r3, [pc, #84]	; (8006ec4 <vTaskStartScheduler+0xcc>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3354      	adds	r3, #84	; 0x54
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <vTaskStartScheduler+0xd0>)
 8006e74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e76:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <vTaskStartScheduler+0xd4>)
 8006e78:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e7e:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <vTaskStartScheduler+0xd8>)
 8006e80:	2201      	movs	r2, #1
 8006e82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e84:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <vTaskStartScheduler+0xdc>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e8a:	f001 f8c9 	bl	8008020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e8e:	e00e      	b.n	8006eae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d10a      	bne.n	8006eae <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	60fb      	str	r3, [r7, #12]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <vTaskStartScheduler+0xb4>
}
 8006eae:	bf00      	nop
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	08008b14 	.word	0x08008b14
 8006ebc:	080074fd 	.word	0x080074fd
 8006ec0:	200014dc 	.word	0x200014dc
 8006ec4:	20000fe4 	.word	0x20000fe4
 8006ec8:	20000018 	.word	0x20000018
 8006ecc:	200014d8 	.word	0x200014d8
 8006ed0:	200014c4 	.word	0x200014c4
 8006ed4:	200014bc 	.word	0x200014bc

08006ed8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006edc:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <vTaskSuspendAll+0x18>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	4a03      	ldr	r2, [pc, #12]	; (8006ef0 <vTaskSuspendAll+0x18>)
 8006ee4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ee6:	bf00      	nop
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	200014e0 	.word	0x200014e0

08006ef4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f02:	4b42      	ldr	r3, [pc, #264]	; (800700c <xTaskResumeAll+0x118>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10a      	bne.n	8006f20 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	603b      	str	r3, [r7, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f20:	f001 f920 	bl	8008164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f24:	4b39      	ldr	r3, [pc, #228]	; (800700c <xTaskResumeAll+0x118>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	4a38      	ldr	r2, [pc, #224]	; (800700c <xTaskResumeAll+0x118>)
 8006f2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f2e:	4b37      	ldr	r3, [pc, #220]	; (800700c <xTaskResumeAll+0x118>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d162      	bne.n	8006ffc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f36:	4b36      	ldr	r3, [pc, #216]	; (8007010 <xTaskResumeAll+0x11c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d05e      	beq.n	8006ffc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f3e:	e02f      	b.n	8006fa0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f40:	4b34      	ldr	r3, [pc, #208]	; (8007014 <xTaskResumeAll+0x120>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3318      	adds	r3, #24
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff f851 	bl	8005ff4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff f84c 	bl	8005ff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4b2d      	ldr	r3, [pc, #180]	; (8007018 <xTaskResumeAll+0x124>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d903      	bls.n	8006f70 <xTaskResumeAll+0x7c>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	4a2a      	ldr	r2, [pc, #168]	; (8007018 <xTaskResumeAll+0x124>)
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4a27      	ldr	r2, [pc, #156]	; (800701c <xTaskResumeAll+0x128>)
 8006f7e:	441a      	add	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f7fe ffd7 	bl	8005f3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f90:	4b23      	ldr	r3, [pc, #140]	; (8007020 <xTaskResumeAll+0x12c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d302      	bcc.n	8006fa0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f9a:	4b22      	ldr	r3, [pc, #136]	; (8007024 <xTaskResumeAll+0x130>)
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fa0:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <xTaskResumeAll+0x120>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1cb      	bne.n	8006f40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fae:	f000 fb5f 	bl	8007670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fb2:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <xTaskResumeAll+0x134>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d010      	beq.n	8006fe0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fbe:	f000 f847 	bl	8007050 <xTaskIncrementTick>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006fc8:	4b16      	ldr	r3, [pc, #88]	; (8007024 <xTaskResumeAll+0x130>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f1      	bne.n	8006fbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006fda:	4b13      	ldr	r3, [pc, #76]	; (8007028 <xTaskResumeAll+0x134>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fe0:	4b10      	ldr	r3, [pc, #64]	; (8007024 <xTaskResumeAll+0x130>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d009      	beq.n	8006ffc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <xTaskResumeAll+0x138>)
 8006fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ffc:	f001 f8e2 	bl	80081c4 <vPortExitCritical>

	return xAlreadyYielded;
 8007000:	68bb      	ldr	r3, [r7, #8]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200014e0 	.word	0x200014e0
 8007010:	200014b8 	.word	0x200014b8
 8007014:	20001478 	.word	0x20001478
 8007018:	200014c0 	.word	0x200014c0
 800701c:	20000fe8 	.word	0x20000fe8
 8007020:	20000fe4 	.word	0x20000fe4
 8007024:	200014cc 	.word	0x200014cc
 8007028:	200014c8 	.word	0x200014c8
 800702c:	e000ed04 	.word	0xe000ed04

08007030 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <xTaskGetTickCount+0x1c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800703c:	687b      	ldr	r3, [r7, #4]
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	200014bc 	.word	0x200014bc

08007050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800705a:	4b4f      	ldr	r3, [pc, #316]	; (8007198 <xTaskIncrementTick+0x148>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f040 808f 	bne.w	8007182 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007064:	4b4d      	ldr	r3, [pc, #308]	; (800719c <xTaskIncrementTick+0x14c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3301      	adds	r3, #1
 800706a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800706c:	4a4b      	ldr	r2, [pc, #300]	; (800719c <xTaskIncrementTick+0x14c>)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d120      	bne.n	80070ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007078:	4b49      	ldr	r3, [pc, #292]	; (80071a0 <xTaskIncrementTick+0x150>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <xTaskIncrementTick+0x48>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	603b      	str	r3, [r7, #0]
}
 8007094:	bf00      	nop
 8007096:	e7fe      	b.n	8007096 <xTaskIncrementTick+0x46>
 8007098:	4b41      	ldr	r3, [pc, #260]	; (80071a0 <xTaskIncrementTick+0x150>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	4b41      	ldr	r3, [pc, #260]	; (80071a4 <xTaskIncrementTick+0x154>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a3f      	ldr	r2, [pc, #252]	; (80071a0 <xTaskIncrementTick+0x150>)
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	4a3f      	ldr	r2, [pc, #252]	; (80071a4 <xTaskIncrementTick+0x154>)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	4b3e      	ldr	r3, [pc, #248]	; (80071a8 <xTaskIncrementTick+0x158>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	4a3d      	ldr	r2, [pc, #244]	; (80071a8 <xTaskIncrementTick+0x158>)
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	f000 fadb 	bl	8007670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070ba:	4b3c      	ldr	r3, [pc, #240]	; (80071ac <xTaskIncrementTick+0x15c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d349      	bcc.n	8007158 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070c4:	4b36      	ldr	r3, [pc, #216]	; (80071a0 <xTaskIncrementTick+0x150>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d104      	bne.n	80070d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ce:	4b37      	ldr	r3, [pc, #220]	; (80071ac <xTaskIncrementTick+0x15c>)
 80070d0:	f04f 32ff 	mov.w	r2, #4294967295
 80070d4:	601a      	str	r2, [r3, #0]
					break;
 80070d6:	e03f      	b.n	8007158 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d8:	4b31      	ldr	r3, [pc, #196]	; (80071a0 <xTaskIncrementTick+0x150>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d203      	bcs.n	80070f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070f0:	4a2e      	ldr	r2, [pc, #184]	; (80071ac <xTaskIncrementTick+0x15c>)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070f6:	e02f      	b.n	8007158 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe ff79 	bl	8005ff4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	3318      	adds	r3, #24
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe ff70 	bl	8005ff4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	4b25      	ldr	r3, [pc, #148]	; (80071b0 <xTaskIncrementTick+0x160>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d903      	bls.n	8007128 <xTaskIncrementTick+0xd8>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	4a22      	ldr	r2, [pc, #136]	; (80071b0 <xTaskIncrementTick+0x160>)
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4a1f      	ldr	r2, [pc, #124]	; (80071b4 <xTaskIncrementTick+0x164>)
 8007136:	441a      	add	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	3304      	adds	r3, #4
 800713c:	4619      	mov	r1, r3
 800713e:	4610      	mov	r0, r2
 8007140:	f7fe fefb 	bl	8005f3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	4b1b      	ldr	r3, [pc, #108]	; (80071b8 <xTaskIncrementTick+0x168>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	429a      	cmp	r2, r3
 8007150:	d3b8      	bcc.n	80070c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007152:	2301      	movs	r3, #1
 8007154:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007156:	e7b5      	b.n	80070c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007158:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <xTaskIncrementTick+0x168>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715e:	4915      	ldr	r1, [pc, #84]	; (80071b4 <xTaskIncrementTick+0x164>)
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d901      	bls.n	8007174 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007174:	4b11      	ldr	r3, [pc, #68]	; (80071bc <xTaskIncrementTick+0x16c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800717c:	2301      	movs	r3, #1
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	e004      	b.n	800718c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007182:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <xTaskIncrementTick+0x170>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3301      	adds	r3, #1
 8007188:	4a0d      	ldr	r2, [pc, #52]	; (80071c0 <xTaskIncrementTick+0x170>)
 800718a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800718c:	697b      	ldr	r3, [r7, #20]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	200014e0 	.word	0x200014e0
 800719c:	200014bc 	.word	0x200014bc
 80071a0:	20001470 	.word	0x20001470
 80071a4:	20001474 	.word	0x20001474
 80071a8:	200014d0 	.word	0x200014d0
 80071ac:	200014d8 	.word	0x200014d8
 80071b0:	200014c0 	.word	0x200014c0
 80071b4:	20000fe8 	.word	0x20000fe8
 80071b8:	20000fe4 	.word	0x20000fe4
 80071bc:	200014cc 	.word	0x200014cc
 80071c0:	200014c8 	.word	0x200014c8

080071c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071ca:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <vTaskSwitchContext+0xb0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071d2:	4b29      	ldr	r3, [pc, #164]	; (8007278 <vTaskSwitchContext+0xb4>)
 80071d4:	2201      	movs	r2, #1
 80071d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071d8:	e046      	b.n	8007268 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80071da:	4b27      	ldr	r3, [pc, #156]	; (8007278 <vTaskSwitchContext+0xb4>)
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e0:	4b26      	ldr	r3, [pc, #152]	; (800727c <vTaskSwitchContext+0xb8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	e010      	b.n	800720a <vTaskSwitchContext+0x46>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10a      	bne.n	8007204 <vTaskSwitchContext+0x40>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	607b      	str	r3, [r7, #4]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <vTaskSwitchContext+0x3e>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3b01      	subs	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	491d      	ldr	r1, [pc, #116]	; (8007280 <vTaskSwitchContext+0xbc>)
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0e4      	beq.n	80071e8 <vTaskSwitchContext+0x24>
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4a15      	ldr	r2, [pc, #84]	; (8007280 <vTaskSwitchContext+0xbc>)
 800722a:	4413      	add	r3, r2
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	605a      	str	r2, [r3, #4]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	3308      	adds	r3, #8
 8007240:	429a      	cmp	r2, r3
 8007242:	d104      	bne.n	800724e <vTaskSwitchContext+0x8a>
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	4a0b      	ldr	r2, [pc, #44]	; (8007284 <vTaskSwitchContext+0xc0>)
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	4a08      	ldr	r2, [pc, #32]	; (800727c <vTaskSwitchContext+0xb8>)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <vTaskSwitchContext+0xc0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3354      	adds	r3, #84	; 0x54
 8007264:	4a08      	ldr	r2, [pc, #32]	; (8007288 <vTaskSwitchContext+0xc4>)
 8007266:	6013      	str	r3, [r2, #0]
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	200014e0 	.word	0x200014e0
 8007278:	200014cc 	.word	0x200014cc
 800727c:	200014c0 	.word	0x200014c0
 8007280:	20000fe8 	.word	0x20000fe8
 8007284:	20000fe4 	.word	0x20000fe4
 8007288:	20000018 	.word	0x20000018

0800728c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	60fb      	str	r3, [r7, #12]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <vTaskPlaceOnEventList+0x44>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3318      	adds	r3, #24
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fe fe61 	bl	8005f82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072c0:	2101      	movs	r1, #1
 80072c2:	6838      	ldr	r0, [r7, #0]
 80072c4:	f000 fa80 	bl	80077c8 <prvAddCurrentTaskToDelayedList>
}
 80072c8:	bf00      	nop
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000fe4 	.word	0x20000fe4

080072d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	617b      	str	r3, [r7, #20]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <vTaskPlaceOnEventListRestricted+0x54>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3318      	adds	r3, #24
 8007302:	4619      	mov	r1, r3
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7fe fe18 	bl	8005f3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007310:	f04f 33ff 	mov.w	r3, #4294967295
 8007314:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	68b8      	ldr	r0, [r7, #8]
 800731a:	f000 fa55 	bl	80077c8 <prvAddCurrentTaskToDelayedList>
	}
 800731e:	bf00      	nop
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000fe4 	.word	0x20000fe4

0800732c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	60fb      	str	r3, [r7, #12]
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	3318      	adds	r3, #24
 800735c:	4618      	mov	r0, r3
 800735e:	f7fe fe49 	bl	8005ff4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007362:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <xTaskRemoveFromEventList+0xb0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d11d      	bne.n	80073a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	3304      	adds	r3, #4
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fe40 	bl	8005ff4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007378:	4b19      	ldr	r3, [pc, #100]	; (80073e0 <xTaskRemoveFromEventList+0xb4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d903      	bls.n	8007388 <xTaskRemoveFromEventList+0x5c>
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <xTaskRemoveFromEventList+0xb4>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4a13      	ldr	r2, [pc, #76]	; (80073e4 <xTaskRemoveFromEventList+0xb8>)
 8007396:	441a      	add	r2, r3
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fe fdcb 	bl	8005f3a <vListInsertEnd>
 80073a4:	e005      	b.n	80073b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3318      	adds	r3, #24
 80073aa:	4619      	mov	r1, r3
 80073ac:	480e      	ldr	r0, [pc, #56]	; (80073e8 <xTaskRemoveFromEventList+0xbc>)
 80073ae:	f7fe fdc4 	bl	8005f3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <xTaskRemoveFromEventList+0xc0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	429a      	cmp	r2, r3
 80073be:	d905      	bls.n	80073cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <xTaskRemoveFromEventList+0xc4>)
 80073c6:	2201      	movs	r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	e001      	b.n	80073d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073d0:	697b      	ldr	r3, [r7, #20]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	200014e0 	.word	0x200014e0
 80073e0:	200014c0 	.word	0x200014c0
 80073e4:	20000fe8 	.word	0x20000fe8
 80073e8:	20001478 	.word	0x20001478
 80073ec:	20000fe4 	.word	0x20000fe4
 80073f0:	200014cc 	.word	0x200014cc

080073f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <vTaskInternalSetTimeOutState+0x24>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <vTaskInternalSetTimeOutState+0x28>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	605a      	str	r2, [r3, #4]
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	200014d0 	.word	0x200014d0
 800741c:	200014bc 	.word	0x200014bc

08007420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	613b      	str	r3, [r7, #16]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60fb      	str	r3, [r7, #12]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007462:	f000 fe7f 	bl	8008164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007466:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <xTaskCheckForTimeOut+0xbc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d102      	bne.n	8007486 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	e023      	b.n	80074ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <xTaskCheckForTimeOut+0xc0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d007      	beq.n	80074a2 <xTaskCheckForTimeOut+0x82>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	429a      	cmp	r2, r3
 800749a:	d302      	bcc.n	80074a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800749c:	2301      	movs	r3, #1
 800749e:	61fb      	str	r3, [r7, #28]
 80074a0:	e015      	b.n	80074ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d20b      	bcs.n	80074c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	1ad2      	subs	r2, r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff ff9b 	bl	80073f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074be:	2300      	movs	r3, #0
 80074c0:	61fb      	str	r3, [r7, #28]
 80074c2:	e004      	b.n	80074ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074ce:	f000 fe79 	bl	80081c4 <vPortExitCritical>

	return xReturn;
 80074d2:	69fb      	ldr	r3, [r7, #28]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3720      	adds	r7, #32
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	200014bc 	.word	0x200014bc
 80074e0:	200014d0 	.word	0x200014d0

080074e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074e8:	4b03      	ldr	r3, [pc, #12]	; (80074f8 <vTaskMissedYield+0x14>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
}
 80074ee:	bf00      	nop
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	200014cc 	.word	0x200014cc

080074fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007504:	f000 f852 	bl	80075ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007508:	4b06      	ldr	r3, [pc, #24]	; (8007524 <prvIdleTask+0x28>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d9f9      	bls.n	8007504 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007510:	4b05      	ldr	r3, [pc, #20]	; (8007528 <prvIdleTask+0x2c>)
 8007512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007520:	e7f0      	b.n	8007504 <prvIdleTask+0x8>
 8007522:	bf00      	nop
 8007524:	20000fe8 	.word	0x20000fe8
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007532:	2300      	movs	r3, #0
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	e00c      	b.n	8007552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4a12      	ldr	r2, [pc, #72]	; (800758c <prvInitialiseTaskLists+0x60>)
 8007544:	4413      	add	r3, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fcca 	bl	8005ee0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3301      	adds	r3, #1
 8007550:	607b      	str	r3, [r7, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b37      	cmp	r3, #55	; 0x37
 8007556:	d9ef      	bls.n	8007538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007558:	480d      	ldr	r0, [pc, #52]	; (8007590 <prvInitialiseTaskLists+0x64>)
 800755a:	f7fe fcc1 	bl	8005ee0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800755e:	480d      	ldr	r0, [pc, #52]	; (8007594 <prvInitialiseTaskLists+0x68>)
 8007560:	f7fe fcbe 	bl	8005ee0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007564:	480c      	ldr	r0, [pc, #48]	; (8007598 <prvInitialiseTaskLists+0x6c>)
 8007566:	f7fe fcbb 	bl	8005ee0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800756a:	480c      	ldr	r0, [pc, #48]	; (800759c <prvInitialiseTaskLists+0x70>)
 800756c:	f7fe fcb8 	bl	8005ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007570:	480b      	ldr	r0, [pc, #44]	; (80075a0 <prvInitialiseTaskLists+0x74>)
 8007572:	f7fe fcb5 	bl	8005ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007576:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <prvInitialiseTaskLists+0x78>)
 8007578:	4a05      	ldr	r2, [pc, #20]	; (8007590 <prvInitialiseTaskLists+0x64>)
 800757a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800757c:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <prvInitialiseTaskLists+0x7c>)
 800757e:	4a05      	ldr	r2, [pc, #20]	; (8007594 <prvInitialiseTaskLists+0x68>)
 8007580:	601a      	str	r2, [r3, #0]
}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20000fe8 	.word	0x20000fe8
 8007590:	20001448 	.word	0x20001448
 8007594:	2000145c 	.word	0x2000145c
 8007598:	20001478 	.word	0x20001478
 800759c:	2000148c 	.word	0x2000148c
 80075a0:	200014a4 	.word	0x200014a4
 80075a4:	20001470 	.word	0x20001470
 80075a8:	20001474 	.word	0x20001474

080075ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075b2:	e019      	b.n	80075e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075b4:	f000 fdd6 	bl	8008164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <prvCheckTasksWaitingTermination+0x50>)
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fd15 	bl	8005ff4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <prvCheckTasksWaitingTermination+0x54>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	4a0b      	ldr	r2, [pc, #44]	; (8007600 <prvCheckTasksWaitingTermination+0x54>)
 80075d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075d4:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <prvCheckTasksWaitingTermination+0x58>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3b01      	subs	r3, #1
 80075da:	4a0a      	ldr	r2, [pc, #40]	; (8007604 <prvCheckTasksWaitingTermination+0x58>)
 80075dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075de:	f000 fdf1 	bl	80081c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f810 	bl	8007608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075e8:	4b06      	ldr	r3, [pc, #24]	; (8007604 <prvCheckTasksWaitingTermination+0x58>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e1      	bne.n	80075b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	2000148c 	.word	0x2000148c
 8007600:	200014b8 	.word	0x200014b8
 8007604:	200014a0 	.word	0x200014a0

08007608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3354      	adds	r3, #84	; 0x54
 8007614:	4618      	mov	r0, r3
 8007616:	f001 f9e9 	bl	80089ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007620:	2b00      	cmp	r3, #0
 8007622:	d108      	bne.n	8007636 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	4618      	mov	r0, r3
 800762a:	f000 ff89 	bl	8008540 <vPortFree>
				vPortFree( pxTCB );
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 ff86 	bl	8008540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007634:	e018      	b.n	8007668 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800763c:	2b01      	cmp	r3, #1
 800763e:	d103      	bne.n	8007648 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 ff7d 	bl	8008540 <vPortFree>
	}
 8007646:	e00f      	b.n	8007668 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800764e:	2b02      	cmp	r3, #2
 8007650:	d00a      	beq.n	8007668 <prvDeleteTCB+0x60>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60fb      	str	r3, [r7, #12]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <prvDeleteTCB+0x5e>
	}
 8007668:	bf00      	nop
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <prvResetNextTaskUnblockTime+0x38>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d104      	bne.n	800768a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <prvResetNextTaskUnblockTime+0x3c>)
 8007682:	f04f 32ff 	mov.w	r2, #4294967295
 8007686:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007688:	e008      	b.n	800769c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <prvResetNextTaskUnblockTime+0x38>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4a04      	ldr	r2, [pc, #16]	; (80076ac <prvResetNextTaskUnblockTime+0x3c>)
 800769a:	6013      	str	r3, [r2, #0]
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	20001470 	.word	0x20001470
 80076ac:	200014d8 	.word	0x200014d8

080076b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <xTaskGetSchedulerState+0x34>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076be:	2301      	movs	r3, #1
 80076c0:	607b      	str	r3, [r7, #4]
 80076c2:	e008      	b.n	80076d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c4:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <xTaskGetSchedulerState+0x38>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076cc:	2302      	movs	r3, #2
 80076ce:	607b      	str	r3, [r7, #4]
 80076d0:	e001      	b.n	80076d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076d6:	687b      	ldr	r3, [r7, #4]
	}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	200014c4 	.word	0x200014c4
 80076e8:	200014e0 	.word	0x200014e0

080076ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d056      	beq.n	80077b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007702:	4b2e      	ldr	r3, [pc, #184]	; (80077bc <xTaskPriorityDisinherit+0xd0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	429a      	cmp	r2, r3
 800770a:	d00a      	beq.n	8007722 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	60fb      	str	r3, [r7, #12]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60bb      	str	r3, [r7, #8]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007744:	1e5a      	subs	r2, r3, #1
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007752:	429a      	cmp	r2, r3
 8007754:	d02c      	beq.n	80077b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775a:	2b00      	cmp	r3, #0
 800775c:	d128      	bne.n	80077b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3304      	adds	r3, #4
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fc46 	bl	8005ff4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <xTaskPriorityDisinherit+0xd4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d903      	bls.n	8007790 <xTaskPriorityDisinherit+0xa4>
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	4a0c      	ldr	r2, [pc, #48]	; (80077c0 <xTaskPriorityDisinherit+0xd4>)
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4a09      	ldr	r2, [pc, #36]	; (80077c4 <xTaskPriorityDisinherit+0xd8>)
 800779e:	441a      	add	r2, r3
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fe fbc7 	bl	8005f3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077ac:	2301      	movs	r3, #1
 80077ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077b0:	697b      	ldr	r3, [r7, #20]
	}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000fe4 	.word	0x20000fe4
 80077c0:	200014c0 	.word	0x200014c0
 80077c4:	20000fe8 	.word	0x20000fe8

080077c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077d2:	4b21      	ldr	r3, [pc, #132]	; (8007858 <prvAddCurrentTaskToDelayedList+0x90>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077d8:	4b20      	ldr	r3, [pc, #128]	; (800785c <prvAddCurrentTaskToDelayedList+0x94>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3304      	adds	r3, #4
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fc08 	bl	8005ff4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ea:	d10a      	bne.n	8007802 <prvAddCurrentTaskToDelayedList+0x3a>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077f2:	4b1a      	ldr	r3, [pc, #104]	; (800785c <prvAddCurrentTaskToDelayedList+0x94>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4619      	mov	r1, r3
 80077fa:	4819      	ldr	r0, [pc, #100]	; (8007860 <prvAddCurrentTaskToDelayedList+0x98>)
 80077fc:	f7fe fb9d 	bl	8005f3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007800:	e026      	b.n	8007850 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4413      	add	r3, r2
 8007808:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800780a:	4b14      	ldr	r3, [pc, #80]	; (800785c <prvAddCurrentTaskToDelayedList+0x94>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	429a      	cmp	r2, r3
 8007818:	d209      	bcs.n	800782e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800781a:	4b12      	ldr	r3, [pc, #72]	; (8007864 <prvAddCurrentTaskToDelayedList+0x9c>)
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <prvAddCurrentTaskToDelayedList+0x94>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3304      	adds	r3, #4
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f7fe fbab 	bl	8005f82 <vListInsert>
}
 800782c:	e010      	b.n	8007850 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800782e:	4b0e      	ldr	r3, [pc, #56]	; (8007868 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	4b0a      	ldr	r3, [pc, #40]	; (800785c <prvAddCurrentTaskToDelayedList+0x94>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	4610      	mov	r0, r2
 800783c:	f7fe fba1 	bl	8005f82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	429a      	cmp	r2, r3
 8007848:	d202      	bcs.n	8007850 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800784a:	4a08      	ldr	r2, [pc, #32]	; (800786c <prvAddCurrentTaskToDelayedList+0xa4>)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	6013      	str	r3, [r2, #0]
}
 8007850:	bf00      	nop
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	200014bc 	.word	0x200014bc
 800785c:	20000fe4 	.word	0x20000fe4
 8007860:	200014a4 	.word	0x200014a4
 8007864:	20001474 	.word	0x20001474
 8007868:	20001470 	.word	0x20001470
 800786c:	200014d8 	.word	0x200014d8

08007870 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800787a:	f000 fb07 	bl	8007e8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800787e:	4b1c      	ldr	r3, [pc, #112]	; (80078f0 <xTimerCreateTimerTask+0x80>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d021      	beq.n	80078ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800788e:	1d3a      	adds	r2, r7, #4
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	f107 030c 	add.w	r3, r7, #12
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fb07 	bl	8005eac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	9202      	str	r2, [sp, #8]
 80078a6:	9301      	str	r3, [sp, #4]
 80078a8:	2302      	movs	r3, #2
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	2300      	movs	r3, #0
 80078ae:	460a      	mov	r2, r1
 80078b0:	4910      	ldr	r1, [pc, #64]	; (80078f4 <xTimerCreateTimerTask+0x84>)
 80078b2:	4811      	ldr	r0, [pc, #68]	; (80078f8 <xTimerCreateTimerTask+0x88>)
 80078b4:	f7ff f8b4 	bl	8006a20 <xTaskCreateStatic>
 80078b8:	4603      	mov	r3, r0
 80078ba:	4a10      	ldr	r2, [pc, #64]	; (80078fc <xTimerCreateTimerTask+0x8c>)
 80078bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <xTimerCreateTimerTask+0x8c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078c6:	2301      	movs	r3, #1
 80078c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	613b      	str	r3, [r7, #16]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078e6:	697b      	ldr	r3, [r7, #20]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20001514 	.word	0x20001514
 80078f4:	08008b1c 	.word	0x08008b1c
 80078f8:	08007a35 	.word	0x08007a35
 80078fc:	20001518 	.word	0x20001518

08007900 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	; 0x28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800790e:	2300      	movs	r3, #0
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10a      	bne.n	800792e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	623b      	str	r3, [r7, #32]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800792e:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <xTimerGenericCommand+0x98>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d02a      	beq.n	800798c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b05      	cmp	r3, #5
 8007946:	dc18      	bgt.n	800797a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007948:	f7ff feb2 	bl	80076b0 <xTaskGetSchedulerState>
 800794c:	4603      	mov	r3, r0
 800794e:	2b02      	cmp	r3, #2
 8007950:	d109      	bne.n	8007966 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007952:	4b11      	ldr	r3, [pc, #68]	; (8007998 <xTimerGenericCommand+0x98>)
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f107 0110 	add.w	r1, r7, #16
 800795a:	2300      	movs	r3, #0
 800795c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795e:	f7fe fc77 	bl	8006250 <xQueueGenericSend>
 8007962:	6278      	str	r0, [r7, #36]	; 0x24
 8007964:	e012      	b.n	800798c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007966:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <xTimerGenericCommand+0x98>)
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	f107 0110 	add.w	r1, r7, #16
 800796e:	2300      	movs	r3, #0
 8007970:	2200      	movs	r2, #0
 8007972:	f7fe fc6d 	bl	8006250 <xQueueGenericSend>
 8007976:	6278      	str	r0, [r7, #36]	; 0x24
 8007978:	e008      	b.n	800798c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <xTimerGenericCommand+0x98>)
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	f107 0110 	add.w	r1, r7, #16
 8007982:	2300      	movs	r3, #0
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	f7fe fd61 	bl	800644c <xQueueGenericSendFromISR>
 800798a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800798e:	4618      	mov	r0, r3
 8007990:	3728      	adds	r7, #40	; 0x28
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	20001514 	.word	0x20001514

0800799c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a6:	4b22      	ldr	r3, [pc, #136]	; (8007a30 <prvProcessExpiredTimer+0x94>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fb1d 	bl	8005ff4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d022      	beq.n	8007a0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	699a      	ldr	r2, [r3, #24]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	18d1      	adds	r1, r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	6978      	ldr	r0, [r7, #20]
 80079d6:	f000 f8d1 	bl	8007b7c <prvInsertTimerInActiveList>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01f      	beq.n	8007a20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079e0:	2300      	movs	r3, #0
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	2300      	movs	r3, #0
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	2100      	movs	r1, #0
 80079ea:	6978      	ldr	r0, [r7, #20]
 80079ec:	f7ff ff88 	bl	8007900 <xTimerGenericCommand>
 80079f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d113      	bne.n	8007a20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	60fb      	str	r3, [r7, #12]
}
 8007a0a:	bf00      	nop
 8007a0c:	e7fe      	b.n	8007a0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	4798      	blx	r3
}
 8007a28:	bf00      	nop
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	2000150c 	.word	0x2000150c

08007a34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a3c:	f107 0308 	add.w	r3, r7, #8
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 f857 	bl	8007af4 <prvGetNextExpireTime>
 8007a46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f803 	bl	8007a58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a52:	f000 f8d5 	bl	8007c00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a56:	e7f1      	b.n	8007a3c <prvTimerTask+0x8>

08007a58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a62:	f7ff fa39 	bl	8006ed8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f866 	bl	8007b3c <prvSampleTimeNow>
 8007a70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d130      	bne.n	8007ada <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <prvProcessTimerOrBlockTask+0x3c>
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d806      	bhi.n	8007a94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a86:	f7ff fa35 	bl	8006ef4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff ff85 	bl	800799c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a92:	e024      	b.n	8007ade <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d008      	beq.n	8007aac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a9a:	4b13      	ldr	r3, [pc, #76]	; (8007ae8 <prvProcessTimerOrBlockTask+0x90>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <prvProcessTimerOrBlockTask+0x50>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <prvProcessTimerOrBlockTask+0x52>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007aac:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <prvProcessTimerOrBlockTask+0x94>)
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	f7fe ff7d 	bl	80069b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007abe:	f7ff fa19 	bl	8006ef4 <xTaskResumeAll>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ac8:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <prvProcessTimerOrBlockTask+0x98>)
 8007aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	f3bf 8f6f 	isb	sy
}
 8007ad8:	e001      	b.n	8007ade <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ada:	f7ff fa0b 	bl	8006ef4 <xTaskResumeAll>
}
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20001510 	.word	0x20001510
 8007aec:	20001514 	.word	0x20001514
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007afc:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <prvGetNextExpireTime+0x44>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <prvGetNextExpireTime+0x16>
 8007b06:	2201      	movs	r2, #1
 8007b08:	e000      	b.n	8007b0c <prvGetNextExpireTime+0x18>
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d105      	bne.n	8007b24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b18:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <prvGetNextExpireTime+0x44>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	e001      	b.n	8007b28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b28:	68fb      	ldr	r3, [r7, #12]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	2000150c 	.word	0x2000150c

08007b3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b44:	f7ff fa74 	bl	8007030 <xTaskGetTickCount>
 8007b48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <prvSampleTimeNow+0x3c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d205      	bcs.n	8007b60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b54:	f000 f936 	bl	8007dc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e002      	b.n	8007b66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b66:	4a04      	ldr	r2, [pc, #16]	; (8007b78 <prvSampleTimeNow+0x3c>)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	2000151c 	.word	0x2000151c

08007b7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d812      	bhi.n	8007bc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	1ad2      	subs	r2, r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e01b      	b.n	8007bee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bb6:	4b10      	ldr	r3, [pc, #64]	; (8007bf8 <prvInsertTimerInActiveList+0x7c>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f7fe f9de 	bl	8005f82 <vListInsert>
 8007bc6:	e012      	b.n	8007bee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d206      	bcs.n	8007bde <prvInsertTimerInActiveList+0x62>
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d302      	bcc.n	8007bde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	e007      	b.n	8007bee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bde:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <prvInsertTimerInActiveList+0x80>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4619      	mov	r1, r3
 8007be8:	4610      	mov	r0, r2
 8007bea:	f7fe f9ca 	bl	8005f82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bee:	697b      	ldr	r3, [r7, #20]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20001510 	.word	0x20001510
 8007bfc:	2000150c 	.word	0x2000150c

08007c00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08e      	sub	sp, #56	; 0x38
 8007c04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c06:	e0ca      	b.n	8007d9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da18      	bge.n	8007c40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c0e:	1d3b      	adds	r3, r7, #4
 8007c10:	3304      	adds	r3, #4
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	61fb      	str	r3, [r7, #28]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c36:	6850      	ldr	r0, [r2, #4]
 8007c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3a:	6892      	ldr	r2, [r2, #8]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f2c0 80aa 	blt.w	8007d9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d004      	beq.n	8007c5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	3304      	adds	r3, #4
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe f9cb 	bl	8005ff4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c5e:	463b      	mov	r3, r7
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff ff6b 	bl	8007b3c <prvSampleTimeNow>
 8007c66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b09      	cmp	r3, #9
 8007c6c:	f200 8097 	bhi.w	8007d9e <prvProcessReceivedCommands+0x19e>
 8007c70:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <prvProcessReceivedCommands+0x78>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007ca1 	.word	0x08007ca1
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007ca1 	.word	0x08007ca1
 8007c84:	08007d15 	.word	0x08007d15
 8007c88:	08007d29 	.word	0x08007d29
 8007c8c:	08007d73 	.word	0x08007d73
 8007c90:	08007ca1 	.word	0x08007ca1
 8007c94:	08007ca1 	.word	0x08007ca1
 8007c98:	08007d15 	.word	0x08007d15
 8007c9c:	08007d29 	.word	0x08007d29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	18d1      	adds	r1, r2, r3
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc0:	f7ff ff5c 	bl	8007b7c <prvInsertTimerInActiveList>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d069      	beq.n	8007d9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d05e      	beq.n	8007d9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	441a      	add	r2, r3
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	2300      	movs	r3, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf2:	f7ff fe05 	bl	8007900 <xTimerGenericCommand>
 8007cf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d14f      	bne.n	8007d9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	61bb      	str	r3, [r7, #24]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d1a:	f023 0301 	bic.w	r3, r3, #1
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d26:	e03a      	b.n	8007d9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d2e:	f043 0301 	orr.w	r3, r3, #1
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	617b      	str	r3, [r7, #20]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	699a      	ldr	r2, [r3, #24]
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	18d1      	adds	r1, r2, r3
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d6c:	f7ff ff06 	bl	8007b7c <prvInsertTimerInActiveList>
					break;
 8007d70:	e015      	b.n	8007d9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d103      	bne.n	8007d88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d82:	f000 fbdd 	bl	8008540 <vPortFree>
 8007d86:	e00a      	b.n	8007d9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d8e:	f023 0301 	bic.w	r3, r3, #1
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d9a:	e000      	b.n	8007d9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d9e:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <prvProcessReceivedCommands+0x1c0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	1d39      	adds	r1, r7, #4
 8007da4:	2200      	movs	r2, #0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fbec 	bl	8006584 <xQueueReceive>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f47f af2a 	bne.w	8007c08 <prvProcessReceivedCommands+0x8>
	}
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop
 8007db8:	3730      	adds	r7, #48	; 0x30
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20001514 	.word	0x20001514

08007dc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dca:	e048      	b.n	8007e5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dcc:	4b2d      	ldr	r3, [pc, #180]	; (8007e84 <prvSwitchTimerLists+0xc0>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd6:	4b2b      	ldr	r3, [pc, #172]	; (8007e84 <prvSwitchTimerLists+0xc0>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe f905 	bl	8005ff4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d02e      	beq.n	8007e5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d90e      	bls.n	8007e30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e1e:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <prvSwitchTimerLists+0xc0>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3304      	adds	r3, #4
 8007e26:	4619      	mov	r1, r3
 8007e28:	4610      	mov	r0, r2
 8007e2a:	f7fe f8aa 	bl	8005f82 <vListInsert>
 8007e2e:	e016      	b.n	8007e5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e30:	2300      	movs	r3, #0
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	2300      	movs	r3, #0
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7ff fd60 	bl	8007900 <xTimerGenericCommand>
 8007e40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	603b      	str	r3, [r7, #0]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <prvSwitchTimerLists+0xc0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1b1      	bne.n	8007dcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e68:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <prvSwitchTimerLists+0xc0>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <prvSwitchTimerLists+0xc4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a04      	ldr	r2, [pc, #16]	; (8007e84 <prvSwitchTimerLists+0xc0>)
 8007e74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e76:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <prvSwitchTimerLists+0xc4>)
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	6013      	str	r3, [r2, #0]
}
 8007e7c:	bf00      	nop
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	2000150c 	.word	0x2000150c
 8007e88:	20001510 	.word	0x20001510

08007e8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e92:	f000 f967 	bl	8008164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e96:	4b15      	ldr	r3, [pc, #84]	; (8007eec <prvCheckForValidListAndQueue+0x60>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d120      	bne.n	8007ee0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e9e:	4814      	ldr	r0, [pc, #80]	; (8007ef0 <prvCheckForValidListAndQueue+0x64>)
 8007ea0:	f7fe f81e 	bl	8005ee0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ea4:	4813      	ldr	r0, [pc, #76]	; (8007ef4 <prvCheckForValidListAndQueue+0x68>)
 8007ea6:	f7fe f81b 	bl	8005ee0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007eaa:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <prvCheckForValidListAndQueue+0x6c>)
 8007eac:	4a10      	ldr	r2, [pc, #64]	; (8007ef0 <prvCheckForValidListAndQueue+0x64>)
 8007eae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007eb0:	4b12      	ldr	r3, [pc, #72]	; (8007efc <prvCheckForValidListAndQueue+0x70>)
 8007eb2:	4a10      	ldr	r2, [pc, #64]	; (8007ef4 <prvCheckForValidListAndQueue+0x68>)
 8007eb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	4b11      	ldr	r3, [pc, #68]	; (8007f00 <prvCheckForValidListAndQueue+0x74>)
 8007ebc:	4a11      	ldr	r2, [pc, #68]	; (8007f04 <prvCheckForValidListAndQueue+0x78>)
 8007ebe:	2110      	movs	r1, #16
 8007ec0:	200a      	movs	r0, #10
 8007ec2:	f7fe f929 	bl	8006118 <xQueueGenericCreateStatic>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4a08      	ldr	r2, [pc, #32]	; (8007eec <prvCheckForValidListAndQueue+0x60>)
 8007eca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <prvCheckForValidListAndQueue+0x60>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <prvCheckForValidListAndQueue+0x60>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	490b      	ldr	r1, [pc, #44]	; (8007f08 <prvCheckForValidListAndQueue+0x7c>)
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe fd42 	bl	8006964 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ee0:	f000 f970 	bl	80081c4 <vPortExitCritical>
}
 8007ee4:	bf00      	nop
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20001514 	.word	0x20001514
 8007ef0:	200014e4 	.word	0x200014e4
 8007ef4:	200014f8 	.word	0x200014f8
 8007ef8:	2000150c 	.word	0x2000150c
 8007efc:	20001510 	.word	0x20001510
 8007f00:	200015c0 	.word	0x200015c0
 8007f04:	20001520 	.word	0x20001520
 8007f08:	08008b24 	.word	0x08008b24

08007f0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3b04      	subs	r3, #4
 8007f1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3b04      	subs	r3, #4
 8007f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f023 0201 	bic.w	r2, r3, #1
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3b04      	subs	r3, #4
 8007f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f3c:	4a0c      	ldr	r2, [pc, #48]	; (8007f70 <pxPortInitialiseStack+0x64>)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3b14      	subs	r3, #20
 8007f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3b04      	subs	r3, #4
 8007f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f06f 0202 	mvn.w	r2, #2
 8007f5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3b20      	subs	r3, #32
 8007f60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f62:	68fb      	ldr	r3, [r7, #12]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	08007f75 	.word	0x08007f75

08007f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <prvTaskExitError+0x54>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f86:	d00a      	beq.n	8007f9e <prvTaskExitError+0x2a>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	60fb      	str	r3, [r7, #12]
}
 8007f9a:	bf00      	nop
 8007f9c:	e7fe      	b.n	8007f9c <prvTaskExitError+0x28>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	60bb      	str	r3, [r7, #8]
}
 8007fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fb2:	bf00      	nop
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0fc      	beq.n	8007fb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fba:	bf00      	nop
 8007fbc:	bf00      	nop
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	20000014 	.word	0x20000014
 8007fcc:	00000000 	.word	0x00000000

08007fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <pxCurrentTCBConst2>)
 8007fd2:	6819      	ldr	r1, [r3, #0]
 8007fd4:	6808      	ldr	r0, [r1, #0]
 8007fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	f380 8809 	msr	PSP, r0
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8811 	msr	BASEPRI, r0
 8007fea:	4770      	bx	lr
 8007fec:	f3af 8000 	nop.w

08007ff0 <pxCurrentTCBConst2>:
 8007ff0:	20000fe4 	.word	0x20000fe4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop

08007ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ff8:	4808      	ldr	r0, [pc, #32]	; (800801c <prvPortStartFirstTask+0x24>)
 8007ffa:	6800      	ldr	r0, [r0, #0]
 8007ffc:	6800      	ldr	r0, [r0, #0]
 8007ffe:	f380 8808 	msr	MSP, r0
 8008002:	f04f 0000 	mov.w	r0, #0
 8008006:	f380 8814 	msr	CONTROL, r0
 800800a:	b662      	cpsie	i
 800800c:	b661      	cpsie	f
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	df00      	svc	0
 8008018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800801a:	bf00      	nop
 800801c:	e000ed08 	.word	0xe000ed08

08008020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008026:	4b46      	ldr	r3, [pc, #280]	; (8008140 <xPortStartScheduler+0x120>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a46      	ldr	r2, [pc, #280]	; (8008144 <xPortStartScheduler+0x124>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10a      	bne.n	8008046 <xPortStartScheduler+0x26>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008046:	4b3e      	ldr	r3, [pc, #248]	; (8008140 <xPortStartScheduler+0x120>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a3f      	ldr	r2, [pc, #252]	; (8008148 <xPortStartScheduler+0x128>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10a      	bne.n	8008066 <xPortStartScheduler+0x46>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008066:	4b39      	ldr	r3, [pc, #228]	; (800814c <xPortStartScheduler+0x12c>)
 8008068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b2db      	uxtb	r3, r3
 8008070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	22ff      	movs	r2, #255	; 0xff
 8008076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008088:	b2da      	uxtb	r2, r3
 800808a:	4b31      	ldr	r3, [pc, #196]	; (8008150 <xPortStartScheduler+0x130>)
 800808c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800808e:	4b31      	ldr	r3, [pc, #196]	; (8008154 <xPortStartScheduler+0x134>)
 8008090:	2207      	movs	r2, #7
 8008092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008094:	e009      	b.n	80080aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008096:	4b2f      	ldr	r3, [pc, #188]	; (8008154 <xPortStartScheduler+0x134>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3b01      	subs	r3, #1
 800809c:	4a2d      	ldr	r2, [pc, #180]	; (8008154 <xPortStartScheduler+0x134>)
 800809e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b2:	2b80      	cmp	r3, #128	; 0x80
 80080b4:	d0ef      	beq.n	8008096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080b6:	4b27      	ldr	r3, [pc, #156]	; (8008154 <xPortStartScheduler+0x134>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f1c3 0307 	rsb	r3, r3, #7
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d00a      	beq.n	80080d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60bb      	str	r3, [r7, #8]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080d8:	4b1e      	ldr	r3, [pc, #120]	; (8008154 <xPortStartScheduler+0x134>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	4a1d      	ldr	r2, [pc, #116]	; (8008154 <xPortStartScheduler+0x134>)
 80080e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080e2:	4b1c      	ldr	r3, [pc, #112]	; (8008154 <xPortStartScheduler+0x134>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080ea:	4a1a      	ldr	r2, [pc, #104]	; (8008154 <xPortStartScheduler+0x134>)
 80080ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080f6:	4b18      	ldr	r3, [pc, #96]	; (8008158 <xPortStartScheduler+0x138>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a17      	ldr	r2, [pc, #92]	; (8008158 <xPortStartScheduler+0x138>)
 80080fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <xPortStartScheduler+0x138>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a14      	ldr	r2, [pc, #80]	; (8008158 <xPortStartScheduler+0x138>)
 8008108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800810c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800810e:	f000 f8dd 	bl	80082cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008112:	4b12      	ldr	r3, [pc, #72]	; (800815c <xPortStartScheduler+0x13c>)
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008118:	f000 f8fc 	bl	8008314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800811c:	4b10      	ldr	r3, [pc, #64]	; (8008160 <xPortStartScheduler+0x140>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a0f      	ldr	r2, [pc, #60]	; (8008160 <xPortStartScheduler+0x140>)
 8008122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008128:	f7ff ff66 	bl	8007ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800812c:	f7ff f84a 	bl	80071c4 <vTaskSwitchContext>
	prvTaskExitError();
 8008130:	f7ff ff20 	bl	8007f74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	e000ed00 	.word	0xe000ed00
 8008144:	410fc271 	.word	0x410fc271
 8008148:	410fc270 	.word	0x410fc270
 800814c:	e000e400 	.word	0xe000e400
 8008150:	20001610 	.word	0x20001610
 8008154:	20001614 	.word	0x20001614
 8008158:	e000ed20 	.word	0xe000ed20
 800815c:	20000014 	.word	0x20000014
 8008160:	e000ef34 	.word	0xe000ef34

08008164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	607b      	str	r3, [r7, #4]
}
 800817c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800817e:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <vPortEnterCritical+0x58>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	4a0d      	ldr	r2, [pc, #52]	; (80081bc <vPortEnterCritical+0x58>)
 8008186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008188:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <vPortEnterCritical+0x58>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d10f      	bne.n	80081b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <vPortEnterCritical+0x5c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	603b      	str	r3, [r7, #0]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <vPortEnterCritical+0x4a>
	}
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20000014 	.word	0x20000014
 80081c0:	e000ed04 	.word	0xe000ed04

080081c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081ca:	4b12      	ldr	r3, [pc, #72]	; (8008214 <vPortExitCritical+0x50>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <vPortExitCritical+0x24>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	607b      	str	r3, [r7, #4]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081e8:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <vPortExitCritical+0x50>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	4a09      	ldr	r2, [pc, #36]	; (8008214 <vPortExitCritical+0x50>)
 80081f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081f2:	4b08      	ldr	r3, [pc, #32]	; (8008214 <vPortExitCritical+0x50>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <vPortExitCritical+0x42>
 80081fa:	2300      	movs	r3, #0
 80081fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f383 8811 	msr	BASEPRI, r3
}
 8008204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	20000014 	.word	0x20000014
	...

08008220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008220:	f3ef 8009 	mrs	r0, PSP
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4b15      	ldr	r3, [pc, #84]	; (8008280 <pxCurrentTCBConst>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	f01e 0f10 	tst.w	lr, #16
 8008230:	bf08      	it	eq
 8008232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823a:	6010      	str	r0, [r2, #0]
 800823c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008244:	f380 8811 	msr	BASEPRI, r0
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f7fe ffb8 	bl	80071c4 <vTaskSwitchContext>
 8008254:	f04f 0000 	mov.w	r0, #0
 8008258:	f380 8811 	msr	BASEPRI, r0
 800825c:	bc09      	pop	{r0, r3}
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	6808      	ldr	r0, [r1, #0]
 8008262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008266:	f01e 0f10 	tst.w	lr, #16
 800826a:	bf08      	it	eq
 800826c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008270:	f380 8809 	msr	PSP, r0
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst>:
 8008280:	20000fe4 	.word	0x20000fe4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
}
 80082a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082a2:	f7fe fed5 	bl	8007050 <xTaskIncrementTick>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <xPortSysTickHandler+0x40>)
 80082ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	2300      	movs	r3, #0
 80082b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f383 8811 	msr	BASEPRI, r3
}
 80082be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <vPortSetupTimerInterrupt+0x34>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082d6:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <vPortSetupTimerInterrupt+0x38>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <vPortSetupTimerInterrupt+0x3c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a0a      	ldr	r2, [pc, #40]	; (800830c <vPortSetupTimerInterrupt+0x40>)
 80082e2:	fba2 2303 	umull	r2, r3, r2, r3
 80082e6:	099b      	lsrs	r3, r3, #6
 80082e8:	4a09      	ldr	r2, [pc, #36]	; (8008310 <vPortSetupTimerInterrupt+0x44>)
 80082ea:	3b01      	subs	r3, #1
 80082ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082ee:	4b04      	ldr	r3, [pc, #16]	; (8008300 <vPortSetupTimerInterrupt+0x34>)
 80082f0:	2207      	movs	r2, #7
 80082f2:	601a      	str	r2, [r3, #0]
}
 80082f4:	bf00      	nop
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	e000e010 	.word	0xe000e010
 8008304:	e000e018 	.word	0xe000e018
 8008308:	20000008 	.word	0x20000008
 800830c:	10624dd3 	.word	0x10624dd3
 8008310:	e000e014 	.word	0xe000e014

08008314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008324 <vPortEnableVFP+0x10>
 8008318:	6801      	ldr	r1, [r0, #0]
 800831a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800831e:	6001      	str	r1, [r0, #0]
 8008320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008322:	bf00      	nop
 8008324:	e000ed88 	.word	0xe000ed88

08008328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800832e:	f3ef 8305 	mrs	r3, IPSR
 8008332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b0f      	cmp	r3, #15
 8008338:	d914      	bls.n	8008364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800833a:	4a17      	ldr	r2, [pc, #92]	; (8008398 <vPortValidateInterruptPriority+0x70>)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008344:	4b15      	ldr	r3, [pc, #84]	; (800839c <vPortValidateInterruptPriority+0x74>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	7afa      	ldrb	r2, [r7, #11]
 800834a:	429a      	cmp	r2, r3
 800834c:	d20a      	bcs.n	8008364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
 8008362:	e7fe      	b.n	8008362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008364:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <vPortValidateInterruptPriority+0x78>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800836c:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <vPortValidateInterruptPriority+0x7c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d90a      	bls.n	800838a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	603b      	str	r3, [r7, #0]
}
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <vPortValidateInterruptPriority+0x60>
	}
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	e000e3f0 	.word	0xe000e3f0
 800839c:	20001610 	.word	0x20001610
 80083a0:	e000ed0c 	.word	0xe000ed0c
 80083a4:	20001614 	.word	0x20001614

080083a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08a      	sub	sp, #40	; 0x28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083b4:	f7fe fd90 	bl	8006ed8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083b8:	4b5b      	ldr	r3, [pc, #364]	; (8008528 <pvPortMalloc+0x180>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083c0:	f000 f920 	bl	8008604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083c4:	4b59      	ldr	r3, [pc, #356]	; (800852c <pvPortMalloc+0x184>)
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f040 8093 	bne.w	80084f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01d      	beq.n	8008414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80083d8:	2208      	movs	r2, #8
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d014      	beq.n	8008414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f023 0307 	bic.w	r3, r3, #7
 80083f0:	3308      	adds	r3, #8
 80083f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <pvPortMalloc+0x6c>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	617b      	str	r3, [r7, #20]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d06e      	beq.n	80084f8 <pvPortMalloc+0x150>
 800841a:	4b45      	ldr	r3, [pc, #276]	; (8008530 <pvPortMalloc+0x188>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	429a      	cmp	r2, r3
 8008422:	d869      	bhi.n	80084f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008424:	4b43      	ldr	r3, [pc, #268]	; (8008534 <pvPortMalloc+0x18c>)
 8008426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008428:	4b42      	ldr	r3, [pc, #264]	; (8008534 <pvPortMalloc+0x18c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800842e:	e004      	b.n	800843a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	d903      	bls.n	800844c <pvPortMalloc+0xa4>
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1f1      	bne.n	8008430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800844c:	4b36      	ldr	r3, [pc, #216]	; (8008528 <pvPortMalloc+0x180>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008452:	429a      	cmp	r2, r3
 8008454:	d050      	beq.n	80084f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2208      	movs	r2, #8
 800845c:	4413      	add	r3, r2
 800845e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	2308      	movs	r3, #8
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	429a      	cmp	r2, r3
 8008476:	d91f      	bls.n	80084b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4413      	add	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <pvPortMalloc+0xf8>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	613b      	str	r3, [r7, #16]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084b2:	69b8      	ldr	r0, [r7, #24]
 80084b4:	f000 f908 	bl	80086c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084b8:	4b1d      	ldr	r3, [pc, #116]	; (8008530 <pvPortMalloc+0x188>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	4a1b      	ldr	r2, [pc, #108]	; (8008530 <pvPortMalloc+0x188>)
 80084c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084c6:	4b1a      	ldr	r3, [pc, #104]	; (8008530 <pvPortMalloc+0x188>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	4b1b      	ldr	r3, [pc, #108]	; (8008538 <pvPortMalloc+0x190>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d203      	bcs.n	80084da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084d2:	4b17      	ldr	r3, [pc, #92]	; (8008530 <pvPortMalloc+0x188>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a18      	ldr	r2, [pc, #96]	; (8008538 <pvPortMalloc+0x190>)
 80084d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <pvPortMalloc+0x184>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084ee:	4b13      	ldr	r3, [pc, #76]	; (800853c <pvPortMalloc+0x194>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	4a11      	ldr	r2, [pc, #68]	; (800853c <pvPortMalloc+0x194>)
 80084f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084f8:	f7fe fcfc 	bl	8006ef4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <pvPortMalloc+0x174>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	60fb      	str	r3, [r7, #12]
}
 8008518:	bf00      	nop
 800851a:	e7fe      	b.n	800851a <pvPortMalloc+0x172>
	return pvReturn;
 800851c:	69fb      	ldr	r3, [r7, #28]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3728      	adds	r7, #40	; 0x28
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20005220 	.word	0x20005220
 800852c:	20005234 	.word	0x20005234
 8008530:	20005224 	.word	0x20005224
 8008534:	20005218 	.word	0x20005218
 8008538:	20005228 	.word	0x20005228
 800853c:	2000522c 	.word	0x2000522c

08008540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d04d      	beq.n	80085ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008552:	2308      	movs	r3, #8
 8008554:	425b      	negs	r3, r3
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4413      	add	r3, r2
 800855a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <vPortFree+0xb8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4013      	ands	r3, r2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <vPortFree+0x44>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	60fb      	str	r3, [r7, #12]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <vPortFree+0x62>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	60bb      	str	r3, [r7, #8]
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	4b14      	ldr	r3, [pc, #80]	; (80085f8 <vPortFree+0xb8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01e      	beq.n	80085ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d11a      	bne.n	80085ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <vPortFree+0xb8>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	43db      	mvns	r3, r3
 80085c2:	401a      	ands	r2, r3
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085c8:	f7fe fc86 	bl	8006ed8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	4b0a      	ldr	r3, [pc, #40]	; (80085fc <vPortFree+0xbc>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4413      	add	r3, r2
 80085d6:	4a09      	ldr	r2, [pc, #36]	; (80085fc <vPortFree+0xbc>)
 80085d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085da:	6938      	ldr	r0, [r7, #16]
 80085dc:	f000 f874 	bl	80086c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085e0:	4b07      	ldr	r3, [pc, #28]	; (8008600 <vPortFree+0xc0>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3301      	adds	r3, #1
 80085e6:	4a06      	ldr	r2, [pc, #24]	; (8008600 <vPortFree+0xc0>)
 80085e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085ea:	f7fe fc83 	bl	8006ef4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ee:	bf00      	nop
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20005234 	.word	0x20005234
 80085fc:	20005224 	.word	0x20005224
 8008600:	20005230 	.word	0x20005230

08008604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800860a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800860e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008610:	4b27      	ldr	r3, [pc, #156]	; (80086b0 <prvHeapInit+0xac>)
 8008612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00c      	beq.n	8008638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3307      	adds	r3, #7
 8008622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0307 	bic.w	r3, r3, #7
 800862a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	4a1f      	ldr	r2, [pc, #124]	; (80086b0 <prvHeapInit+0xac>)
 8008634:	4413      	add	r3, r2
 8008636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800863c:	4a1d      	ldr	r2, [pc, #116]	; (80086b4 <prvHeapInit+0xb0>)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008642:	4b1c      	ldr	r3, [pc, #112]	; (80086b4 <prvHeapInit+0xb0>)
 8008644:	2200      	movs	r2, #0
 8008646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008650:	2208      	movs	r2, #8
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0307 	bic.w	r3, r3, #7
 800865e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <prvHeapInit+0xb4>)
 8008664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <prvHeapInit+0xb4>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800866e:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <prvHeapInit+0xb4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008684:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <prvHeapInit+0xb4>)
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <prvHeapInit+0xb8>)
 8008692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <prvHeapInit+0xbc>)
 800869a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800869c:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <prvHeapInit+0xc0>)
 800869e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	20001618 	.word	0x20001618
 80086b4:	20005218 	.word	0x20005218
 80086b8:	20005220 	.word	0x20005220
 80086bc:	20005228 	.word	0x20005228
 80086c0:	20005224 	.word	0x20005224
 80086c4:	20005234 	.word	0x20005234

080086c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086d0:	4b28      	ldr	r3, [pc, #160]	; (8008774 <prvInsertBlockIntoFreeList+0xac>)
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	e002      	b.n	80086dc <prvInsertBlockIntoFreeList+0x14>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d8f7      	bhi.n	80086d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	4413      	add	r3, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d108      	bne.n	800870a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	441a      	add	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	441a      	add	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d118      	bne.n	8008750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b15      	ldr	r3, [pc, #84]	; (8008778 <prvInsertBlockIntoFreeList+0xb0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d00d      	beq.n	8008746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	441a      	add	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	e008      	b.n	8008758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvInsertBlockIntoFreeList+0xb0>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	e003      	b.n	8008758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d002      	beq.n	8008766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20005218 	.word	0x20005218
 8008778:	20005220 	.word	0x20005220

0800877c <__errno>:
 800877c:	4b01      	ldr	r3, [pc, #4]	; (8008784 <__errno+0x8>)
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000018 	.word	0x20000018

08008788 <__libc_init_array>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	4d0d      	ldr	r5, [pc, #52]	; (80087c0 <__libc_init_array+0x38>)
 800878c:	4c0d      	ldr	r4, [pc, #52]	; (80087c4 <__libc_init_array+0x3c>)
 800878e:	1b64      	subs	r4, r4, r5
 8008790:	10a4      	asrs	r4, r4, #2
 8008792:	2600      	movs	r6, #0
 8008794:	42a6      	cmp	r6, r4
 8008796:	d109      	bne.n	80087ac <__libc_init_array+0x24>
 8008798:	4d0b      	ldr	r5, [pc, #44]	; (80087c8 <__libc_init_array+0x40>)
 800879a:	4c0c      	ldr	r4, [pc, #48]	; (80087cc <__libc_init_array+0x44>)
 800879c:	f000 f99e 	bl	8008adc <_init>
 80087a0:	1b64      	subs	r4, r4, r5
 80087a2:	10a4      	asrs	r4, r4, #2
 80087a4:	2600      	movs	r6, #0
 80087a6:	42a6      	cmp	r6, r4
 80087a8:	d105      	bne.n	80087b6 <__libc_init_array+0x2e>
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b0:	4798      	blx	r3
 80087b2:	3601      	adds	r6, #1
 80087b4:	e7ee      	b.n	8008794 <__libc_init_array+0xc>
 80087b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ba:	4798      	blx	r3
 80087bc:	3601      	adds	r6, #1
 80087be:	e7f2      	b.n	80087a6 <__libc_init_array+0x1e>
 80087c0:	0800adb4 	.word	0x0800adb4
 80087c4:	0800adb4 	.word	0x0800adb4
 80087c8:	0800adb4 	.word	0x0800adb4
 80087cc:	0800adb8 	.word	0x0800adb8

080087d0 <__retarget_lock_acquire_recursive>:
 80087d0:	4770      	bx	lr

080087d2 <__retarget_lock_release_recursive>:
 80087d2:	4770      	bx	lr

080087d4 <malloc>:
 80087d4:	4b02      	ldr	r3, [pc, #8]	; (80087e0 <malloc+0xc>)
 80087d6:	4601      	mov	r1, r0
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	f000 b885 	b.w	80088e8 <_malloc_r>
 80087de:	bf00      	nop
 80087e0:	20000018 	.word	0x20000018

080087e4 <memcpy>:
 80087e4:	440a      	add	r2, r1
 80087e6:	4291      	cmp	r1, r2
 80087e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80087ec:	d100      	bne.n	80087f0 <memcpy+0xc>
 80087ee:	4770      	bx	lr
 80087f0:	b510      	push	{r4, lr}
 80087f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087fa:	4291      	cmp	r1, r2
 80087fc:	d1f9      	bne.n	80087f2 <memcpy+0xe>
 80087fe:	bd10      	pop	{r4, pc}

08008800 <memset>:
 8008800:	4402      	add	r2, r0
 8008802:	4603      	mov	r3, r0
 8008804:	4293      	cmp	r3, r2
 8008806:	d100      	bne.n	800880a <memset+0xa>
 8008808:	4770      	bx	lr
 800880a:	f803 1b01 	strb.w	r1, [r3], #1
 800880e:	e7f9      	b.n	8008804 <memset+0x4>

08008810 <_free_r>:
 8008810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008812:	2900      	cmp	r1, #0
 8008814:	d044      	beq.n	80088a0 <_free_r+0x90>
 8008816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800881a:	9001      	str	r0, [sp, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	f1a1 0404 	sub.w	r4, r1, #4
 8008822:	bfb8      	it	lt
 8008824:	18e4      	addlt	r4, r4, r3
 8008826:	f000 f94d 	bl	8008ac4 <__malloc_lock>
 800882a:	4a1e      	ldr	r2, [pc, #120]	; (80088a4 <_free_r+0x94>)
 800882c:	9801      	ldr	r0, [sp, #4]
 800882e:	6813      	ldr	r3, [r2, #0]
 8008830:	b933      	cbnz	r3, 8008840 <_free_r+0x30>
 8008832:	6063      	str	r3, [r4, #4]
 8008834:	6014      	str	r4, [r2, #0]
 8008836:	b003      	add	sp, #12
 8008838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800883c:	f000 b948 	b.w	8008ad0 <__malloc_unlock>
 8008840:	42a3      	cmp	r3, r4
 8008842:	d908      	bls.n	8008856 <_free_r+0x46>
 8008844:	6825      	ldr	r5, [r4, #0]
 8008846:	1961      	adds	r1, r4, r5
 8008848:	428b      	cmp	r3, r1
 800884a:	bf01      	itttt	eq
 800884c:	6819      	ldreq	r1, [r3, #0]
 800884e:	685b      	ldreq	r3, [r3, #4]
 8008850:	1949      	addeq	r1, r1, r5
 8008852:	6021      	streq	r1, [r4, #0]
 8008854:	e7ed      	b.n	8008832 <_free_r+0x22>
 8008856:	461a      	mov	r2, r3
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	b10b      	cbz	r3, 8008860 <_free_r+0x50>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d9fa      	bls.n	8008856 <_free_r+0x46>
 8008860:	6811      	ldr	r1, [r2, #0]
 8008862:	1855      	adds	r5, r2, r1
 8008864:	42a5      	cmp	r5, r4
 8008866:	d10b      	bne.n	8008880 <_free_r+0x70>
 8008868:	6824      	ldr	r4, [r4, #0]
 800886a:	4421      	add	r1, r4
 800886c:	1854      	adds	r4, r2, r1
 800886e:	42a3      	cmp	r3, r4
 8008870:	6011      	str	r1, [r2, #0]
 8008872:	d1e0      	bne.n	8008836 <_free_r+0x26>
 8008874:	681c      	ldr	r4, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	6053      	str	r3, [r2, #4]
 800887a:	4421      	add	r1, r4
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	e7da      	b.n	8008836 <_free_r+0x26>
 8008880:	d902      	bls.n	8008888 <_free_r+0x78>
 8008882:	230c      	movs	r3, #12
 8008884:	6003      	str	r3, [r0, #0]
 8008886:	e7d6      	b.n	8008836 <_free_r+0x26>
 8008888:	6825      	ldr	r5, [r4, #0]
 800888a:	1961      	adds	r1, r4, r5
 800888c:	428b      	cmp	r3, r1
 800888e:	bf04      	itt	eq
 8008890:	6819      	ldreq	r1, [r3, #0]
 8008892:	685b      	ldreq	r3, [r3, #4]
 8008894:	6063      	str	r3, [r4, #4]
 8008896:	bf04      	itt	eq
 8008898:	1949      	addeq	r1, r1, r5
 800889a:	6021      	streq	r1, [r4, #0]
 800889c:	6054      	str	r4, [r2, #4]
 800889e:	e7ca      	b.n	8008836 <_free_r+0x26>
 80088a0:	b003      	add	sp, #12
 80088a2:	bd30      	pop	{r4, r5, pc}
 80088a4:	2000523c 	.word	0x2000523c

080088a8 <sbrk_aligned>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4e0e      	ldr	r6, [pc, #56]	; (80088e4 <sbrk_aligned+0x3c>)
 80088ac:	460c      	mov	r4, r1
 80088ae:	6831      	ldr	r1, [r6, #0]
 80088b0:	4605      	mov	r5, r0
 80088b2:	b911      	cbnz	r1, 80088ba <sbrk_aligned+0x12>
 80088b4:	f000 f8f6 	bl	8008aa4 <_sbrk_r>
 80088b8:	6030      	str	r0, [r6, #0]
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	f000 f8f1 	bl	8008aa4 <_sbrk_r>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	d00a      	beq.n	80088dc <sbrk_aligned+0x34>
 80088c6:	1cc4      	adds	r4, r0, #3
 80088c8:	f024 0403 	bic.w	r4, r4, #3
 80088cc:	42a0      	cmp	r0, r4
 80088ce:	d007      	beq.n	80088e0 <sbrk_aligned+0x38>
 80088d0:	1a21      	subs	r1, r4, r0
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 f8e6 	bl	8008aa4 <_sbrk_r>
 80088d8:	3001      	adds	r0, #1
 80088da:	d101      	bne.n	80088e0 <sbrk_aligned+0x38>
 80088dc:	f04f 34ff 	mov.w	r4, #4294967295
 80088e0:	4620      	mov	r0, r4
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	20005240 	.word	0x20005240

080088e8 <_malloc_r>:
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	1ccd      	adds	r5, r1, #3
 80088ee:	f025 0503 	bic.w	r5, r5, #3
 80088f2:	3508      	adds	r5, #8
 80088f4:	2d0c      	cmp	r5, #12
 80088f6:	bf38      	it	cc
 80088f8:	250c      	movcc	r5, #12
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	4607      	mov	r7, r0
 80088fe:	db01      	blt.n	8008904 <_malloc_r+0x1c>
 8008900:	42a9      	cmp	r1, r5
 8008902:	d905      	bls.n	8008910 <_malloc_r+0x28>
 8008904:	230c      	movs	r3, #12
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	2600      	movs	r6, #0
 800890a:	4630      	mov	r0, r6
 800890c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008910:	4e2e      	ldr	r6, [pc, #184]	; (80089cc <_malloc_r+0xe4>)
 8008912:	f000 f8d7 	bl	8008ac4 <__malloc_lock>
 8008916:	6833      	ldr	r3, [r6, #0]
 8008918:	461c      	mov	r4, r3
 800891a:	bb34      	cbnz	r4, 800896a <_malloc_r+0x82>
 800891c:	4629      	mov	r1, r5
 800891e:	4638      	mov	r0, r7
 8008920:	f7ff ffc2 	bl	80088a8 <sbrk_aligned>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	4604      	mov	r4, r0
 8008928:	d14d      	bne.n	80089c6 <_malloc_r+0xde>
 800892a:	6834      	ldr	r4, [r6, #0]
 800892c:	4626      	mov	r6, r4
 800892e:	2e00      	cmp	r6, #0
 8008930:	d140      	bne.n	80089b4 <_malloc_r+0xcc>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	4631      	mov	r1, r6
 8008936:	4638      	mov	r0, r7
 8008938:	eb04 0803 	add.w	r8, r4, r3
 800893c:	f000 f8b2 	bl	8008aa4 <_sbrk_r>
 8008940:	4580      	cmp	r8, r0
 8008942:	d13a      	bne.n	80089ba <_malloc_r+0xd2>
 8008944:	6821      	ldr	r1, [r4, #0]
 8008946:	3503      	adds	r5, #3
 8008948:	1a6d      	subs	r5, r5, r1
 800894a:	f025 0503 	bic.w	r5, r5, #3
 800894e:	3508      	adds	r5, #8
 8008950:	2d0c      	cmp	r5, #12
 8008952:	bf38      	it	cc
 8008954:	250c      	movcc	r5, #12
 8008956:	4629      	mov	r1, r5
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ffa5 	bl	80088a8 <sbrk_aligned>
 800895e:	3001      	adds	r0, #1
 8008960:	d02b      	beq.n	80089ba <_malloc_r+0xd2>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	442b      	add	r3, r5
 8008966:	6023      	str	r3, [r4, #0]
 8008968:	e00e      	b.n	8008988 <_malloc_r+0xa0>
 800896a:	6822      	ldr	r2, [r4, #0]
 800896c:	1b52      	subs	r2, r2, r5
 800896e:	d41e      	bmi.n	80089ae <_malloc_r+0xc6>
 8008970:	2a0b      	cmp	r2, #11
 8008972:	d916      	bls.n	80089a2 <_malloc_r+0xba>
 8008974:	1961      	adds	r1, r4, r5
 8008976:	42a3      	cmp	r3, r4
 8008978:	6025      	str	r5, [r4, #0]
 800897a:	bf18      	it	ne
 800897c:	6059      	strne	r1, [r3, #4]
 800897e:	6863      	ldr	r3, [r4, #4]
 8008980:	bf08      	it	eq
 8008982:	6031      	streq	r1, [r6, #0]
 8008984:	5162      	str	r2, [r4, r5]
 8008986:	604b      	str	r3, [r1, #4]
 8008988:	4638      	mov	r0, r7
 800898a:	f104 060b 	add.w	r6, r4, #11
 800898e:	f000 f89f 	bl	8008ad0 <__malloc_unlock>
 8008992:	f026 0607 	bic.w	r6, r6, #7
 8008996:	1d23      	adds	r3, r4, #4
 8008998:	1af2      	subs	r2, r6, r3
 800899a:	d0b6      	beq.n	800890a <_malloc_r+0x22>
 800899c:	1b9b      	subs	r3, r3, r6
 800899e:	50a3      	str	r3, [r4, r2]
 80089a0:	e7b3      	b.n	800890a <_malloc_r+0x22>
 80089a2:	6862      	ldr	r2, [r4, #4]
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	bf0c      	ite	eq
 80089a8:	6032      	streq	r2, [r6, #0]
 80089aa:	605a      	strne	r2, [r3, #4]
 80089ac:	e7ec      	b.n	8008988 <_malloc_r+0xa0>
 80089ae:	4623      	mov	r3, r4
 80089b0:	6864      	ldr	r4, [r4, #4]
 80089b2:	e7b2      	b.n	800891a <_malloc_r+0x32>
 80089b4:	4634      	mov	r4, r6
 80089b6:	6876      	ldr	r6, [r6, #4]
 80089b8:	e7b9      	b.n	800892e <_malloc_r+0x46>
 80089ba:	230c      	movs	r3, #12
 80089bc:	603b      	str	r3, [r7, #0]
 80089be:	4638      	mov	r0, r7
 80089c0:	f000 f886 	bl	8008ad0 <__malloc_unlock>
 80089c4:	e7a1      	b.n	800890a <_malloc_r+0x22>
 80089c6:	6025      	str	r5, [r4, #0]
 80089c8:	e7de      	b.n	8008988 <_malloc_r+0xa0>
 80089ca:	bf00      	nop
 80089cc:	2000523c 	.word	0x2000523c

080089d0 <cleanup_glue>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	460c      	mov	r4, r1
 80089d4:	6809      	ldr	r1, [r1, #0]
 80089d6:	4605      	mov	r5, r0
 80089d8:	b109      	cbz	r1, 80089de <cleanup_glue+0xe>
 80089da:	f7ff fff9 	bl	80089d0 <cleanup_glue>
 80089de:	4621      	mov	r1, r4
 80089e0:	4628      	mov	r0, r5
 80089e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e6:	f7ff bf13 	b.w	8008810 <_free_r>
	...

080089ec <_reclaim_reent>:
 80089ec:	4b2c      	ldr	r3, [pc, #176]	; (8008aa0 <_reclaim_reent+0xb4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4283      	cmp	r3, r0
 80089f2:	b570      	push	{r4, r5, r6, lr}
 80089f4:	4604      	mov	r4, r0
 80089f6:	d051      	beq.n	8008a9c <_reclaim_reent+0xb0>
 80089f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80089fa:	b143      	cbz	r3, 8008a0e <_reclaim_reent+0x22>
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d14a      	bne.n	8008a98 <_reclaim_reent+0xac>
 8008a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a04:	6819      	ldr	r1, [r3, #0]
 8008a06:	b111      	cbz	r1, 8008a0e <_reclaim_reent+0x22>
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7ff ff01 	bl	8008810 <_free_r>
 8008a0e:	6961      	ldr	r1, [r4, #20]
 8008a10:	b111      	cbz	r1, 8008a18 <_reclaim_reent+0x2c>
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7ff fefc 	bl	8008810 <_free_r>
 8008a18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a1a:	b111      	cbz	r1, 8008a22 <_reclaim_reent+0x36>
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff fef7 	bl	8008810 <_free_r>
 8008a22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a24:	b111      	cbz	r1, 8008a2c <_reclaim_reent+0x40>
 8008a26:	4620      	mov	r0, r4
 8008a28:	f7ff fef2 	bl	8008810 <_free_r>
 8008a2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008a2e:	b111      	cbz	r1, 8008a36 <_reclaim_reent+0x4a>
 8008a30:	4620      	mov	r0, r4
 8008a32:	f7ff feed 	bl	8008810 <_free_r>
 8008a36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008a38:	b111      	cbz	r1, 8008a40 <_reclaim_reent+0x54>
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f7ff fee8 	bl	8008810 <_free_r>
 8008a40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008a42:	b111      	cbz	r1, 8008a4a <_reclaim_reent+0x5e>
 8008a44:	4620      	mov	r0, r4
 8008a46:	f7ff fee3 	bl	8008810 <_free_r>
 8008a4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008a4c:	b111      	cbz	r1, 8008a54 <_reclaim_reent+0x68>
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7ff fede 	bl	8008810 <_free_r>
 8008a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a56:	b111      	cbz	r1, 8008a5e <_reclaim_reent+0x72>
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f7ff fed9 	bl	8008810 <_free_r>
 8008a5e:	69a3      	ldr	r3, [r4, #24]
 8008a60:	b1e3      	cbz	r3, 8008a9c <_reclaim_reent+0xb0>
 8008a62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a64:	4620      	mov	r0, r4
 8008a66:	4798      	blx	r3
 8008a68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a6a:	b1b9      	cbz	r1, 8008a9c <_reclaim_reent+0xb0>
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a72:	f7ff bfad 	b.w	80089d0 <cleanup_glue>
 8008a76:	5949      	ldr	r1, [r1, r5]
 8008a78:	b941      	cbnz	r1, 8008a8c <_reclaim_reent+0xa0>
 8008a7a:	3504      	adds	r5, #4
 8008a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a7e:	2d80      	cmp	r5, #128	; 0x80
 8008a80:	68d9      	ldr	r1, [r3, #12]
 8008a82:	d1f8      	bne.n	8008a76 <_reclaim_reent+0x8a>
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7ff fec3 	bl	8008810 <_free_r>
 8008a8a:	e7ba      	b.n	8008a02 <_reclaim_reent+0x16>
 8008a8c:	680e      	ldr	r6, [r1, #0]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f7ff febe 	bl	8008810 <_free_r>
 8008a94:	4631      	mov	r1, r6
 8008a96:	e7ef      	b.n	8008a78 <_reclaim_reent+0x8c>
 8008a98:	2500      	movs	r5, #0
 8008a9a:	e7ef      	b.n	8008a7c <_reclaim_reent+0x90>
 8008a9c:	bd70      	pop	{r4, r5, r6, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000018 	.word	0x20000018

08008aa4 <_sbrk_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4d06      	ldr	r5, [pc, #24]	; (8008ac0 <_sbrk_r+0x1c>)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	f7f8 ff36 	bl	8001920 <_sbrk>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_sbrk_r+0x1a>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_sbrk_r+0x1a>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20005244 	.word	0x20005244

08008ac4 <__malloc_lock>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	; (8008acc <__malloc_lock+0x8>)
 8008ac6:	f7ff be83 	b.w	80087d0 <__retarget_lock_acquire_recursive>
 8008aca:	bf00      	nop
 8008acc:	20005238 	.word	0x20005238

08008ad0 <__malloc_unlock>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__malloc_unlock+0x8>)
 8008ad2:	f7ff be7e 	b.w	80087d2 <__retarget_lock_release_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	20005238 	.word	0x20005238

08008adc <_init>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr

08008ae8 <_fini>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr
