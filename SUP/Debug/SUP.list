
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d00c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002abc  0800d1ac  0800d1ac  0001d1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc68  0800fc68  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc68  0800fc68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc70  0800fc70  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc70  0800fc70  0001fc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc74  0800fc74  0001fc74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800fc78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006810  2000018c  0800fe04  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000699c  0800fe04  0002699c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026df5  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005744  00000000  00000000  00046fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002068  00000000  00000000  0004c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df8  00000000  00000000  0004e760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce7e  00000000  00000000  00050558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026092  00000000  00000000  0006d3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0839  00000000  00000000  00093468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133ca1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ea0  00000000  00000000  00133cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000018c 	.word	0x2000018c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d194 	.word	0x0800d194

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000190 	.word	0x20000190
 80001dc:	0800d194 	.word	0x0800d194

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <EPD_Init>:

#include <stdlib.h>
#include "epd2in9b.h"
#include "epdif.h"

int EPD_Init(EPD* epd) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  epd->reset_pin = RST_PIN;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2201      	movs	r2, #1
 80004f0:	601a      	str	r2, [r3, #0]
  epd->dc_pin = DC_PIN;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2202      	movs	r2, #2
 80004f6:	605a      	str	r2, [r3, #4]
  epd->cs_pin = CS_PIN;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  epd->busy_pin = BUSY_PIN;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2203      	movs	r2, #3
 8000502:	60da      	str	r2, [r3, #12]
  epd->width = EPD_WIDTH;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	611a      	str	r2, [r3, #16]
  epd->height = EPD_HEIGHT;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000510:	615a      	str	r2, [r3, #20]
  
  /* this calls the peripheral hardware interface, see epdif */
  if (EpdInitCallback() != 0) {
 8000512:	f000 f9b7 	bl	8000884 <EpdInitCallback>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <EPD_Init+0x3e>
    return -1;
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	e042      	b.n	80005a8 <EPD_Init+0xc4>
  }
  
    /* EPD hardware init start */
  EPD_Reset(epd);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 f8ac 	bl	8000680 <EPD_Reset>
  EPD_SendCommand(epd, BOOSTER_SOFT_START);
 8000528:	2106      	movs	r1, #6
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f867 	bl	80005fe <EPD_SendCommand>
  EPD_SendData(epd, 0x17);
 8000530:	2117      	movs	r1, #23
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f878 	bl	8000628 <EPD_SendData>
  EPD_SendData(epd, 0x17);
 8000538:	2117      	movs	r1, #23
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f000 f874 	bl	8000628 <EPD_SendData>
  EPD_SendData(epd, 0x17);
 8000540:	2117      	movs	r1, #23
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f870 	bl	8000628 <EPD_SendData>
  EPD_SendCommand(epd, POWER_ON);
 8000548:	2104      	movs	r1, #4
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f857 	bl	80005fe <EPD_SendCommand>
  EPD_WaitUntilIdle(epd);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f000 f87e 	bl	8000652 <EPD_WaitUntilIdle>
  EPD_SendCommand(epd, PANEL_SETTING);
 8000556:	2100      	movs	r1, #0
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f850 	bl	80005fe <EPD_SendCommand>
  EPD_SendData(epd, 0x8F);
 800055e:	218f      	movs	r1, #143	; 0x8f
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f861 	bl	8000628 <EPD_SendData>
  EPD_SendCommand(epd, VCOM_AND_DATA_INTERVAL_SETTING);
 8000566:	2150      	movs	r1, #80	; 0x50
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 f848 	bl	80005fe <EPD_SendCommand>
  EPD_SendData(epd, 0x77);
 800056e:	2177      	movs	r1, #119	; 0x77
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f859 	bl	8000628 <EPD_SendData>
  EPD_SendCommand(epd, TCON_RESOLUTION);
 8000576:	2161      	movs	r1, #97	; 0x61
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 f840 	bl	80005fe <EPD_SendCommand>
  EPD_SendData(epd, 0x80);
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 f851 	bl	8000628 <EPD_SendData>
  EPD_SendData(epd, 0x01);
 8000586:	2101      	movs	r1, #1
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 f84d 	bl	8000628 <EPD_SendData>
  EPD_SendData(epd, 0x28);
 800058e:	2128      	movs	r1, #40	; 0x28
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 f849 	bl	8000628 <EPD_SendData>
  EPD_SendCommand(epd, VCM_DC_SETTING_REGISTER);
 8000596:	2182      	movs	r1, #130	; 0x82
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 f830 	bl	80005fe <EPD_SendCommand>
  EPD_SendData(epd, 0X0A);
 800059e:	210a      	movs	r1, #10
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 f841 	bl	8000628 <EPD_SendData>
  /* EPD hardware init end */
  return 0;}
 80005a6:	2300      	movs	r3, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <EPD_DigitalWrite>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  EpdDigitalWriteCallback(pin, value);
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	68b8      	ldr	r0, [r7, #8]
 80005c0:	f000 f8e4 	bl	800078c <EpdDigitalWriteCallback>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <EPD_DigitalRead>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
int EPD_DigitalRead(EPD* epd, int pin) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
  return EpdDigitalReadCallback(pin);
 80005d6:	6838      	ldr	r0, [r7, #0]
 80005d8:	f000 f904 	bl	80007e4 <EpdDigitalReadCallback>
 80005dc:	4603      	mov	r3, r0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <EPD_DelayMs>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
  EpdDelayMsCallback(delaytime);
 80005f0:	6838      	ldr	r0, [r7, #0]
 80005f2:	f000 f915 	bl	8000820 <EpdDelayMsCallback>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <EPD_SendCommand>:

/**
 *  @brief: basic function for sending commands
 */
void EPD_SendCommand(EPD* epd, unsigned char command) {
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	4619      	mov	r1, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff ffcc 	bl	80005b0 <EPD_DigitalWrite>
  EpdSpiTransferCallback(command);
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f90c 	bl	8000838 <EpdSpiTransferCallback>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <EPD_SendData>:

/**
 *  @brief: basic function for sending data
 */
void EPD_SendData(EPD* epd, unsigned char data) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffb7 	bl	80005b0 <EPD_DigitalWrite>
  EpdSpiTransferCallback(data);
 8000642:	78fb      	ldrb	r3, [r7, #3]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f8f7 	bl	8000838 <EpdSpiTransferCallback>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <EPD_WaitUntilIdle>:

/**
 *  @brief: Wait until the busy_pin goes HIGH
 */
void EPD_WaitUntilIdle(EPD* epd) {
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
  while(EPD_DigitalRead(epd, epd->busy_pin) == 0) {      //0: busy, 1: idle
 800065a:	e003      	b.n	8000664 <EPD_WaitUntilIdle+0x12>
    EPD_DelayMs(epd, 100);
 800065c:	2164      	movs	r1, #100	; 0x64
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffc1 	bl	80005e6 <EPD_DelayMs>
  while(EPD_DigitalRead(epd, epd->busy_pin) == 0) {      //0: busy, 1: idle
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	4619      	mov	r1, r3
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff ffae 	bl	80005cc <EPD_DigitalRead>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f2      	beq.n	800065c <EPD_WaitUntilIdle+0xa>
  }      
}
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <EPD_Reset>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see EPD::Sleep();
 */
void EPD_Reset(EPD* epd) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset    
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff ff8d 	bl	80005b0 <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);
 8000696:	21c8      	movs	r1, #200	; 0xc8
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ffa4 	bl	80005e6 <EPD_DelayMs>
  EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2201      	movs	r2, #1
 80006a4:	4619      	mov	r1, r3
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ff82 	bl	80005b0 <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);    
 80006ac:	21c8      	movs	r1, #200	; 0xc8
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff99 	bl	80005e6 <EPD_DelayMs>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <EPD_DisplayFrame>:

void EPD_DisplayFrame(EPD* epd, const unsigned char* frame_buffer_black, const unsigned char* frame_buffer_red) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  if (frame_buffer_black != NULL) {
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d027      	beq.n	800071e <EPD_DisplayFrame+0x62>
    EPD_SendCommand(epd, DATA_START_TRANSMISSION_1);
 80006ce:	2110      	movs	r1, #16
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff ff94 	bl	80005fe <EPD_SendCommand>
    EPD_DelayMs(epd, 2);
 80006d6:	2102      	movs	r1, #2
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f7ff ff84 	bl	80005e6 <EPD_DelayMs>
    for (int i = 0; i < epd->width * epd->height / 8; i++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	e00a      	b.n	80006fa <EPD_DisplayFrame+0x3e>
      EPD_SendData(epd, frame_buffer_black[i]);
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f7ff ff9a 	bl	8000628 <EPD_SendData>
    for (int i = 0; i < epd->width * epd->height / 8; i++) {
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	3301      	adds	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	6952      	ldr	r2, [r2, #20]
 8000702:	fb02 f303 	mul.w	r3, r2, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	da00      	bge.n	800070c <EPD_DisplayFrame+0x50>
 800070a:	3307      	adds	r3, #7
 800070c:	10db      	asrs	r3, r3, #3
 800070e:	461a      	mov	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4293      	cmp	r3, r2
 8000714:	dbe6      	blt.n	80006e4 <EPD_DisplayFrame+0x28>
    }
    EPD_DelayMs(epd, 2);
 8000716:	2102      	movs	r1, #2
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff ff64 	bl	80005e6 <EPD_DelayMs>
  }
  if (frame_buffer_red != NULL) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d027      	beq.n	8000774 <EPD_DisplayFrame+0xb8>
    EPD_SendCommand(epd, DATA_START_TRANSMISSION_2);
 8000724:	2113      	movs	r1, #19
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f7ff ff69 	bl	80005fe <EPD_SendCommand>
    EPD_DelayMs(epd, 2);
 800072c:	2102      	movs	r1, #2
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f7ff ff59 	bl	80005e6 <EPD_DelayMs>
    for (int i = 0; i < epd->width * epd->height / 8; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	e00a      	b.n	8000750 <EPD_DisplayFrame+0x94>
      EPD_SendData(epd, frame_buffer_red[i]);
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4619      	mov	r1, r3
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff ff6f 	bl	8000628 <EPD_SendData>
    for (int i = 0; i < epd->width * epd->height / 8; i++) {
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	3301      	adds	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	6952      	ldr	r2, [r2, #20]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	da00      	bge.n	8000762 <EPD_DisplayFrame+0xa6>
 8000760:	3307      	adds	r3, #7
 8000762:	10db      	asrs	r3, r3, #3
 8000764:	461a      	mov	r2, r3
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	4293      	cmp	r3, r2
 800076a:	dbe6      	blt.n	800073a <EPD_DisplayFrame+0x7e>
    }
    EPD_DelayMs(epd, 2);
 800076c:	2102      	movs	r1, #2
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f7ff ff39 	bl	80005e6 <EPD_DelayMs>
  }
  EPD_SendCommand(epd, DISPLAY_REFRESH);
 8000774:	2112      	movs	r1, #18
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff ff41 	bl	80005fe <EPD_SendCommand>
  EPD_WaitUntilIdle(epd);
 800077c:	68f8      	ldr	r0, [r7, #12]
 800077e:	f7ff ff68 	bl	8000652 <EPD_WaitUntilIdle>
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <EpdDigitalWriteCallback>:
  BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d10e      	bne.n	80007ba <EpdDigitalWriteCallback+0x2e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <EpdDigitalWriteCallback+0x54>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <EpdDigitalWriteCallback+0x54>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4413      	add	r3, r2
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	2201      	movs	r2, #1
 80007b2:	4619      	mov	r1, r3
 80007b4:	f001 ffe4 	bl	8002780 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 80007b8:	e00d      	b.n	80007d6 <EpdDigitalWriteCallback+0x4a>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 80007ba:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <EpdDigitalWriteCallback+0x54>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007c2:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <EpdDigitalWriteCallback+0x54>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	4413      	add	r3, r2
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	f001 ffd5 	bl	8002780 <HAL_GPIO_WritePin>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200001a8 	.word	0x200001a8

080007e4 <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <EpdDigitalReadCallback+0x38>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007f4:	4909      	ldr	r1, [pc, #36]	; (800081c <EpdDigitalReadCallback+0x38>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	440b      	add	r3, r1
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	4610      	mov	r0, r2
 8000804:	f001 ffa4 	bl	8002750 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d101      	bne.n	8000812 <EpdDigitalReadCallback+0x2e>
    return HIGH;
 800080e:	2301      	movs	r3, #1
 8000810:	e000      	b.n	8000814 <EpdDigitalReadCallback+0x30>
  } else {
    return LOW;
 8000812:	2300      	movs	r3, #0
  }
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200001a8 	.word	0x200001a8

08000820 <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f001 fa1d 	bl	8001c68 <HAL_Delay>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <EpdSpiTransferCallback+0x44>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a0d      	ldr	r2, [pc, #52]	; (800087c <EpdSpiTransferCallback+0x44>)
 8000848:	6852      	ldr	r2, [r2, #4]
 800084a:	b291      	uxth	r1, r2
 800084c:	2200      	movs	r2, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f001 ff96 	bl	8002780 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8000854:	1df9      	adds	r1, r7, #7
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	2201      	movs	r2, #1
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <EpdSpiTransferCallback+0x48>)
 800085e:	f004 f8be 	bl	80049de <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <EpdSpiTransferCallback+0x44>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <EpdSpiTransferCallback+0x44>)
 8000868:	6852      	ldr	r2, [r2, #4]
 800086a:	b291      	uxth	r1, r2
 800086c:	2201      	movs	r2, #1
 800086e:	4618      	mov	r0, r3
 8000870:	f001 ff86 	bl	8002780 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001a8 	.word	0x200001a8
 8000880:	2000021c 	.word	0x2000021c

08000884 <EpdInitCallback>:

int EpdInitCallback(void) {
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <EpdInitCallback+0x48>)
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <EpdInitCallback+0x4c>)
 800088c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000890:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <EpdInitCallback+0x48>)
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <EpdInitCallback+0x50>)
 8000898:	3308      	adds	r3, #8
 800089a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089e:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <EpdInitCallback+0x48>)
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <EpdInitCallback+0x54>)
 80008a6:	3310      	adds	r3, #16
 80008a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ac:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <EpdInitCallback+0x48>)
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <EpdInitCallback+0x58>)
 80008b4:	3318      	adds	r3, #24
 80008b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ba:	e883 0003 	stmia.w	r3, {r0, r1}
  
  return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	200001a8 	.word	0x200001a8
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000010 	.word	0x20000010
 80008dc:	20000018 	.word	0x20000018

080008e0 <Paint_Init>:
 */

#include "epdpaint.h"


void Paint_Init(Paint* paint, unsigned char* image, int width, int height) {
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
    paint->rotate = ROTATE_0;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
    paint->image = image;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	601a      	str	r2, [r3, #0]
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    paint->width = width % 8 ? width + 8 - (width % 8) : width;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f003 0307 	and.w	r3, r3, #7
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00c      	beq.n	800091e <Paint_Init+0x3e>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f103 0208 	add.w	r2, r3, #8
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4259      	negs	r1, r3
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	f001 0107 	and.w	r1, r1, #7
 8000916:	bf58      	it	pl
 8000918:	424b      	negpl	r3, r1
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	e000      	b.n	8000920 <Paint_Init+0x40>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	6053      	str	r3, [r2, #4]
    paint->height = height;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	609a      	str	r2, [r3, #8]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <Paint_Clear>:

/**
 *  @brief: clear the image
 */
void Paint_Clear(Paint* paint, int colored) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
    for (int x = 0; x < paint->width; x++) {
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	e013      	b.n	800096e <Paint_Clear+0x38>
        for (int y = 0; y < paint->height; y++) {
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	e008      	b.n	800095e <Paint_Clear+0x28>
            Paint_DrawAbsolutePixel(paint, x, y, colored);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	68f9      	ldr	r1, [r7, #12]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f815 	bl	8000982 <Paint_DrawAbsolutePixel>
        for (int y = 0; y < paint->height; y++) {
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	3301      	adds	r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf1      	blt.n	800094c <Paint_Clear+0x16>
    for (int x = 0; x < paint->width; x++) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3301      	adds	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbe6      	blt.n	8000946 <Paint_Clear+0x10>
        }
    }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <Paint_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint_DrawAbsolutePixel(Paint* paint, int x, int y, int colored) {
 8000982:	b480      	push	{r7}
 8000984:	b085      	sub	sp, #20
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	603b      	str	r3, [r7, #0]
    if (x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db5f      	blt.n	8000a56 <Paint_DrawAbsolutePixel+0xd4>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	429a      	cmp	r2, r3
 800099e:	da5a      	bge.n	8000a56 <Paint_DrawAbsolutePixel+0xd4>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	db57      	blt.n	8000a56 <Paint_DrawAbsolutePixel+0xd4>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	da52      	bge.n	8000a56 <Paint_DrawAbsolutePixel+0xd4>
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
        } else {
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
        }
    } else {
        if (colored) {
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d028      	beq.n	8000a08 <Paint_DrawAbsolutePixel+0x86>
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	fb03 f101 	mul.w	r1, r3, r1
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	440b      	add	r3, r1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	da00      	bge.n	80009ce <Paint_DrawAbsolutePixel+0x4c>
 80009cc:	3307      	adds	r3, #7
 80009ce:	10db      	asrs	r3, r3, #3
 80009d0:	4618      	mov	r0, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b25a      	sxtb	r2, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	4259      	negs	r1, r3
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	f001 0107 	and.w	r1, r1, #7
 80009e6:	bf58      	it	pl
 80009e8:	424b      	negpl	r3, r1
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	fa41 f303 	asr.w	r3, r1, r3
 80009f0:	b25b      	sxtb	r3, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	4013      	ands	r3, r2
 80009f8:	b25a      	sxtb	r2, r3
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4601      	mov	r1, r0
 8000a00:	440b      	add	r3, r1
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e027      	b.n	8000a58 <Paint_DrawAbsolutePixel+0xd6>
        } else {
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	fb03 f101 	mul.w	r1, r3, r1
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	440b      	add	r3, r1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	da00      	bge.n	8000a20 <Paint_DrawAbsolutePixel+0x9e>
 8000a1e:	3307      	adds	r3, #7
 8000a20:	10db      	asrs	r3, r3, #3
 8000a22:	4618      	mov	r0, r3
 8000a24:	4603      	mov	r3, r0
 8000a26:	4413      	add	r3, r2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b25a      	sxtb	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4259      	negs	r1, r3
 8000a30:	f003 0307 	and.w	r3, r3, #7
 8000a34:	f001 0107 	and.w	r1, r1, #7
 8000a38:	bf58      	it	pl
 8000a3a:	424b      	negpl	r3, r1
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	fa41 f303 	asr.w	r3, r1, r3
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b25a      	sxtb	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4601      	mov	r1, r0
 8000a4e:	440b      	add	r3, r1
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e000      	b.n	8000a58 <Paint_DrawAbsolutePixel+0xd6>
        return;
 8000a56:	bf00      	nop
        }
    }
}
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <Paint_SetRotate>:

int Paint_GetRotate(Paint* paint) {
    return paint->rotate;
}

void Paint_SetRotate(Paint* paint, int rotate){
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
    paint->rotate = rotate;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	60da      	str	r2, [r3, #12]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <Paint_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint_DrawPixel(Paint* paint, int x, int y, int colored) {
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	603b      	str	r3, [r7, #0]
    int point_temp;
    if (paint->rotate == ROTATE_0) {
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d117      	bne.n	8000ac4 <Paint_DrawPixel+0x46>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f2c0 8081 	blt.w	8000b9e <Paint_DrawPixel+0x120>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	da7b      	bge.n	8000b9e <Paint_DrawPixel+0x120>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db78      	blt.n	8000b9e <Paint_DrawPixel+0x120>
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	da73      	bge.n	8000b9e <Paint_DrawPixel+0x120>
            return;
        }
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	68b9      	ldr	r1, [r7, #8]
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff ff60 	bl	8000982 <Paint_DrawAbsolutePixel>
 8000ac2:	e073      	b.n	8000bac <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_90) {
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d11f      	bne.n	8000b0c <Paint_DrawPixel+0x8e>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db67      	blt.n	8000ba2 <Paint_DrawPixel+0x124>
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	da62      	bge.n	8000ba2 <Paint_DrawPixel+0x124>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db5f      	blt.n	8000ba2 <Paint_DrawPixel+0x124>
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	da5a      	bge.n	8000ba2 <Paint_DrawPixel+0x124>
          return;
        }
        point_temp = x;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	617b      	str	r3, [r7, #20]
        x = paint->width - y;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	60bb      	str	r3, [r7, #8]
        y = point_temp;
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff ff3c 	bl	8000982 <Paint_DrawAbsolutePixel>
 8000b0a:	e04f      	b.n	8000bac <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_180) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d120      	bne.n	8000b56 <Paint_DrawPixel+0xd8>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db45      	blt.n	8000ba6 <Paint_DrawPixel+0x128>
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	da40      	bge.n	8000ba6 <Paint_DrawPixel+0x128>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db3d      	blt.n	8000ba6 <Paint_DrawPixel+0x128>
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	da38      	bge.n	8000ba6 <Paint_DrawPixel+0x128>
          return;
        }
        x = paint->width - x;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	60bb      	str	r3, [r7, #8]
        y = paint->height - y;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f7ff ff17 	bl	8000982 <Paint_DrawAbsolutePixel>
 8000b54:	e02a      	b.n	8000bac <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_270) {
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d126      	bne.n	8000bac <Paint_DrawPixel+0x12e>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db22      	blt.n	8000baa <Paint_DrawPixel+0x12c>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	da1d      	bge.n	8000baa <Paint_DrawPixel+0x12c>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db1a      	blt.n	8000baa <Paint_DrawPixel+0x12c>
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	da15      	bge.n	8000baa <Paint_DrawPixel+0x12c>
          return;
        }
        point_temp = x;
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	617b      	str	r3, [r7, #20]
        x = y;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60bb      	str	r3, [r7, #8]
        y = paint->height - point_temp;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f7ff fef3 	bl	8000982 <Paint_DrawAbsolutePixel>
 8000b9c:	e006      	b.n	8000bac <Paint_DrawPixel+0x12e>
            return;
 8000b9e:	bf00      	nop
 8000ba0:	e004      	b.n	8000bac <Paint_DrawPixel+0x12e>
          return;
 8000ba2:	bf00      	nop
 8000ba4:	e002      	b.n	8000bac <Paint_DrawPixel+0x12e>
          return;
 8000ba6:	bf00      	nop
 8000ba8:	e000      	b.n	8000bac <Paint_DrawPixel+0x12e>
          return;
 8000baa:	bf00      	nop
    }
}
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <Paint_DrawCharAt>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint_DrawCharAt(Paint* paint, int x, int y, char ascii_char, sFONT* font, int colored) {
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b088      	sub	sp, #32
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	70fb      	strb	r3, [r7, #3]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	3b20      	subs	r3, #32
 8000bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bc6:	88d2      	ldrh	r2, [r2, #6]
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bce:	8892      	ldrh	r2, [r2, #4]
 8000bd0:	08d2      	lsrs	r2, r2, #3
 8000bd2:	b292      	uxth	r2, r2
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bd8:	8892      	ldrh	r2, [r2, #4]
 8000bda:	f002 0207 	and.w	r2, r2, #7
 8000bde:	b292      	uxth	r2, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	bf14      	ite	ne
 8000be4:	2201      	movne	r2, #1
 8000be6:	2200      	moveq	r2, #0
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440a      	add	r2, r1
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 8000bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	e040      	b.n	8000c84 <Paint_DrawCharAt+0xd2>
        for (i = 0; i < font->Width; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	e02a      	b.n	8000c5e <Paint_DrawCharAt+0xac>
            if (*ptr & (0x80 >> (i % 8))) {
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	425a      	negs	r2, r3
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	f002 0207 	and.w	r2, r2, #7
 8000c1a:	bf58      	it	pl
 8000c1c:	4253      	negpl	r3, r2
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	fa42 f303 	asr.w	r3, r2, r3
 8000c24:	400b      	ands	r3, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d009      	beq.n	8000c3e <Paint_DrawCharAt+0x8c>
                Paint_DrawPixel(paint, x + i, y + j, colored);
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	18d1      	adds	r1, r2, r3
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	441a      	add	r2, r3
 8000c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f7ff ff20 	bl	8000a7e <Paint_DrawPixel>
            }
            if (i % 8 == 7) {
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	425a      	negs	r2, r3
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	f002 0207 	and.w	r2, r2, #7
 8000c4a:	bf58      	it	pl
 8000c4c:	4253      	negpl	r3, r2
 8000c4e:	2b07      	cmp	r3, #7
 8000c50:	d102      	bne.n	8000c58 <Paint_DrawCharAt+0xa6>
                ptr++;
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	889b      	ldrh	r3, [r3, #4]
 8000c62:	461a      	mov	r2, r3
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	dbce      	blt.n	8000c08 <Paint_DrawCharAt+0x56>
            }
        }
        if (font->Width % 8 != 0) {
 8000c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6c:	889b      	ldrh	r3, [r3, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <Paint_DrawCharAt+0xcc>
            ptr++;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	88db      	ldrh	r3, [r3, #6]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	dbb8      	blt.n	8000c02 <Paint_DrawCharAt+0x50>
        }
    }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <Paint_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint_DrawStringAt(Paint* paint, int x, int y, const char* text, sFONT* font, int colored) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b08a      	sub	sp, #40	; 0x28
 8000c9e:	af02      	add	r7, sp, #8
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	603b      	str	r3, [r7, #0]
    const char* p_text = text;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	617b      	str	r3, [r7, #20]
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8000cb4:	e017      	b.n	8000ce6 <Paint_DrawStringAt+0x4c>
        /* Display one character on EPD */
        Paint_DrawCharAt(paint, refcolumn, y, *p_text, font, colored);
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	6979      	ldr	r1, [r7, #20]
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff ff72 	bl	8000bb2 <Paint_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	889b      	ldrh	r3, [r3, #4]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
        counter++;
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1e3      	bne.n	8000cb6 <Paint_DrawStringAt+0x1c>
    }
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <Paint_DrawLine>:

/**
*  @brief: this draws a line on the frame buffer
*/
void Paint_DrawLine(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int dx = x1 - x0 >= 0 ? x1 - x0 : x0 - x1;
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bfb8      	it	lt
 8000d10:	425b      	neglt	r3, r3
 8000d12:	623b      	str	r3, [r7, #32]
    int sx = x0 < x1 ? 1 : -1;
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	da01      	bge.n	8000d20 <Paint_DrawLine+0x28>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e001      	b.n	8000d24 <Paint_DrawLine+0x2c>
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	61fb      	str	r3, [r7, #28]
    int dy = y1 - y0 <= 0 ? y1 - y0 : y0 - y1;
 8000d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bfb8      	it	lt
 8000d30:	425b      	neglt	r3, r3
 8000d32:	425b      	negs	r3, r3
 8000d34:	61bb      	str	r3, [r7, #24]
    int sy = y0 < y1 ? 1 : -1;
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	da01      	bge.n	8000d42 <Paint_DrawLine+0x4a>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e001      	b.n	8000d46 <Paint_DrawLine+0x4e>
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	617b      	str	r3, [r7, #20]
    int err = dx + dy;
 8000d48:	6a3a      	ldr	r2, [r7, #32]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24

    while((x0 != x1) && (y0 != y1)) {
 8000d50:	e01f      	b.n	8000d92 <Paint_DrawLine+0x9a>
        Paint_DrawPixel(paint, x0, y0 , colored);
 8000d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f7ff fe90 	bl	8000a7e <Paint_DrawPixel>
        if (2 * err >= dy) {     
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dc07      	bgt.n	8000d78 <Paint_DrawLine+0x80>
            err += dy;
 8000d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
            x0 += sx;
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	4413      	add	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
        }
        if (2 * err <= dx) {
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	6a3a      	ldr	r2, [r7, #32]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	db07      	blt.n	8000d92 <Paint_DrawLine+0x9a>
            err += dx; 
 8000d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	4413      	add	r3, r2
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
            y0 += sy;
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	4413      	add	r3, r2
 8000d90:	607b      	str	r3, [r7, #4]
    while((x0 != x1) && (y0 != y1)) {
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d003      	beq.n	8000da2 <Paint_DrawLine+0xaa>
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d1d7      	bne.n	8000d52 <Paint_DrawLine+0x5a>
        }
    }
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <Paint_DrawHorizontalLine>:

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint_DrawHorizontalLine(Paint* paint, int x, int y, int line_width, int colored) {
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	603b      	str	r3, [r7, #0]
    int i;
    for (i = x; i < x + line_width; i++) {
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e008      	b.n	8000dd0 <Paint_DrawHorizontalLine+0x26>
        Paint_DrawPixel(paint, i, y, colored);
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6979      	ldr	r1, [r7, #20]
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fe5a 	bl	8000a7e <Paint_DrawPixel>
    for (i = x; i < x + line_width; i++) {
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf0      	blt.n	8000dbe <Paint_DrawHorizontalLine+0x14>
    }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <Paint_DrawVerticalLine>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint_DrawVerticalLine(Paint* paint, int x, int y, int line_height, int colored) {
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	603b      	str	r3, [r7, #0]
    int i;
    for (i = y; i < y + line_height; i++) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e008      	b.n	8000e0c <Paint_DrawVerticalLine+0x26>
        Paint_DrawPixel(paint, x, i, colored);
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f7ff fe3c 	bl	8000a7e <Paint_DrawPixel>
    for (i = y; i < y + line_height; i++) {
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf0      	blt.n	8000dfa <Paint_DrawVerticalLine+0x14>
    }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <Paint_DrawRectangle>:

/**
*  @brief: this draws a rectangle
*/
void Paint_DrawRectangle(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b08a      	sub	sp, #40	; 0x28
 8000e26:	af02      	add	r7, sp, #8
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	603b      	str	r3, [r7, #0]
    int min_x, min_y, max_x, max_y;
    min_x = x1 > x0 ? x0 : x1;
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	4293      	cmp	r3, r2
 8000e36:	bfa8      	it	ge
 8000e38:	4613      	movge	r3, r2
 8000e3a:	61fb      	str	r3, [r7, #28]
    max_x = x1 > x0 ? x1 : x0;
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	4293      	cmp	r3, r2
 8000e42:	bfb8      	it	lt
 8000e44:	4613      	movlt	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
    min_y = y1 > y0 ? y0 : y1;
 8000e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	bfa8      	it	ge
 8000e50:	4613      	movge	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]
    max_y = y1 > y0 ? y1 : y0;
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	bfb8      	it	lt
 8000e5c:	4613      	movlt	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
    
    Paint_DrawHorizontalLine(paint, min_x, min_y, max_x - min_x + 1, colored);
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	69f9      	ldr	r1, [r7, #28]
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f7ff ff99 	bl	8000daa <Paint_DrawHorizontalLine>
    Paint_DrawHorizontalLine(paint, min_x, max_y, max_x - min_x + 1, colored);
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	4613      	mov	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	69f9      	ldr	r1, [r7, #28]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f7ff ff8d 	bl	8000daa <Paint_DrawHorizontalLine>
    Paint_DrawVerticalLine(paint, min_x, min_y, max_y - min_y + 1, colored);
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	69f9      	ldr	r1, [r7, #28]
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff ff9f 	bl	8000de6 <Paint_DrawVerticalLine>
    Paint_DrawVerticalLine(paint, max_x, min_y, max_y - min_y + 1, colored);
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	69b9      	ldr	r1, [r7, #24]
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f7ff ff93 	bl	8000de6 <Paint_DrawVerticalLine>
}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <Paint_DrawFilledRectangle>:

/**
*  @brief: this draws a filled rectangle
*/
void Paint_DrawFilledRectangle(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4293      	cmp	r3, r2
 8000edc:	bfa8      	it	ge
 8000ede:	4613      	movge	r3, r2
 8000ee0:	623b      	str	r3, [r7, #32]
    max_x = x1 > x0 ? x1 : x0;
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	bfb8      	it	lt
 8000eea:	4613      	movlt	r3, r2
 8000eec:	61fb      	str	r3, [r7, #28]
    min_y = y1 > y0 ? y0 : y1;
 8000eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	bfa8      	it	ge
 8000ef6:	4613      	movge	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
    max_y = y1 > y0 ? y1 : y0;
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000efe:	4293      	cmp	r3, r2
 8000f00:	bfb8      	it	lt
 8000f02:	4613      	movlt	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
    
    for (i = min_x; i <= max_x; i++) {
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0a:	e00e      	b.n	8000f2a <Paint_DrawFilledRectangle+0x62>
      Paint_DrawVerticalLine(paint, i, min_y, max_y - min_y + 1, colored);
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff ff61 	bl	8000de6 <Paint_DrawVerticalLine>
    for (i = min_x; i <= max_x; i++) {
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	3301      	adds	r3, #1
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	ddec      	ble.n	8000f0c <Paint_DrawFilledRectangle+0x44>
    }
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <Paint_DrawCircle>:

/**
*  @brief: this draws a circle
*/
void Paint_DrawCircle(Paint* paint, int x, int y, int radius, int colored) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int x_pos = -radius;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	425b      	negs	r3, r3
 8000f4e:	61fb      	str	r3, [r7, #28]
    int y_pos = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
    int err = 2 - 2 * radius;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f1c3 0301 	rsb	r3, r3, #1
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
    int e2;

    do {
        Paint_DrawPixel(paint, x - x_pos, y + y_pos, colored);
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	1ad1      	subs	r1, r2, r3
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	441a      	add	r2, r3
 8000f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f7ff fd86 	bl	8000a7e <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y + y_pos, colored);
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	18d1      	adds	r1, r2, r3
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	441a      	add	r2, r3
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff fd7c 	bl	8000a7e <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y - y_pos, colored);
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	18d1      	adds	r1, r2, r3
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	1ad2      	subs	r2, r2, r3
 8000f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fd72 	bl	8000a7e <Paint_DrawPixel>
        Paint_DrawPixel(paint, x - x_pos, y - y_pos, colored);
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	1ad1      	subs	r1, r2, r3
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	1ad2      	subs	r2, r2, r3
 8000fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff fd68 	bl	8000a7e <Paint_DrawPixel>
        e2 = err;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	613b      	str	r3, [r7, #16]
        if (e2 <= y_pos) {
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dc13      	bgt.n	8000fe2 <Paint_DrawCircle+0xa6>
            err += ++y_pos * 2 + 1;
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4413      	add	r3, r2
 8000fca:	617b      	str	r3, [r7, #20]
            if(-x_pos == y_pos && e2 <= x_pos) {
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	425b      	negs	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d105      	bne.n	8000fe2 <Paint_DrawCircle+0xa6>
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dc01      	bgt.n	8000fe2 <Paint_DrawCircle+0xa6>
              e2 = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
            }
        }
        if (e2 > x_pos) {
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	dd08      	ble.n	8000ffc <Paint_DrawCircle+0xc0>
            err += ++x_pos * 2 + 1;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3301      	adds	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
        }
    } while (x_pos <= 0);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	ddad      	ble.n	8000f5e <Paint_DrawCircle+0x22>
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <Paint_DrawFilledCircle>:

/**
*  @brief: this draws a filled circle
*/
void Paint_DrawFilledCircle(Paint* paint, int x, int y, int radius, int colored) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af02      	add	r7, sp, #8
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int x_pos = -radius;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	425b      	negs	r3, r3
 800101e:	61fb      	str	r3, [r7, #28]
    int y_pos = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    int err = 2 - 2 * radius;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	f1c3 0301 	rsb	r3, r3, #1
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	617b      	str	r3, [r7, #20]
    int e2;

    do {
        Paint_DrawPixel(paint, x - x_pos, y + y_pos, colored);
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	1ad1      	subs	r1, r2, r3
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	441a      	add	r2, r3
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f7ff fd1e 	bl	8000a7e <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y + y_pos, colored);
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	18d1      	adds	r1, r2, r3
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	441a      	add	r2, r3
 800104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff fd14 	bl	8000a7e <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y - y_pos, colored);
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	18d1      	adds	r1, r2, r3
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	1ad2      	subs	r2, r2, r3
 8001062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fd0a 	bl	8000a7e <Paint_DrawPixel>
        Paint_DrawPixel(paint, x - x_pos, y - y_pos, colored);
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	1ad1      	subs	r1, r2, r3
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff fd00 	bl	8000a7e <Paint_DrawPixel>
        Paint_DrawHorizontalLine(paint, x + x_pos, y + y_pos, 2 * (-x_pos) + 1, colored);
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	18d1      	adds	r1, r2, r3
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	18d0      	adds	r0, r2, r3
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	4613      	mov	r3, r2
 800108e:	07db      	lsls	r3, r3, #31
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4613      	mov	r3, r2
 800109c:	4602      	mov	r2, r0
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f7ff fe83 	bl	8000daa <Paint_DrawHorizontalLine>
        Paint_DrawHorizontalLine(paint, x + x_pos, y - y_pos, 2 * (-x_pos) + 1, colored);
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	18d1      	adds	r1, r2, r3
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad0      	subs	r0, r2, r3
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	4613      	mov	r3, r2
 80010b4:	07db      	lsls	r3, r3, #31
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	4613      	mov	r3, r2
 80010c2:	4602      	mov	r2, r0
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff fe70 	bl	8000daa <Paint_DrawHorizontalLine>
        e2 = err;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	613b      	str	r3, [r7, #16]
        if (e2 <= y_pos) {
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dc13      	bgt.n	80010fe <Paint_DrawFilledCircle+0xf2>
            err += ++y_pos * 2 + 1;
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	3301      	adds	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	3301      	adds	r3, #1
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4413      	add	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]
            if(-x_pos == y_pos && e2 <= x_pos) {
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	425b      	negs	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d105      	bne.n	80010fe <Paint_DrawFilledCircle+0xf2>
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dc01      	bgt.n	80010fe <Paint_DrawFilledCircle+0xf2>
                e2 = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
            }
        }
        if(e2 > x_pos) {
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	429a      	cmp	r2, r3
 8001104:	dd08      	ble.n	8001118 <Paint_DrawFilledCircle+0x10c>
            err += ++x_pos * 2 + 1;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	3301      	adds	r3, #1
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
        }
    } while(x_pos <= 0);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b00      	cmp	r3, #0
 800111c:	dd87      	ble.n	800102e <Paint_DrawFilledCircle+0x22>
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b092      	sub	sp, #72	; 0x48
 800112c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  unsigned char* frame_buffer_black = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 800112e:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8001132:	f00b fba1 	bl	800c878 <malloc>
 8001136:	4603      	mov	r3, r0
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c
	  unsigned char* frame_buffer_red = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 800113a:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 800113e:	f00b fb9b 	bl	800c878 <malloc>
 8001142:	4603      	mov	r3, r0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f000 fd61 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f8c7 	bl	80012dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 fa27 	bl	80015a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001152:	f000 fa05 	bl	8001560 <MX_DMA_Init>
  MX_I2C1_Init();
 8001156:	f000 f929 	bl	80013ac <MX_I2C1_Init>
  MX_SPI1_Init();
 800115a:	f000 f955 	bl	8001408 <MX_SPI1_Init>
  MX_TIM2_Init();
 800115e:	f000 f98b 	bl	8001478 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  EPD epd;
  if (EPD_Init(&epd) != 0) {
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9bc 	bl	80004e4 <EPD_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <main+0x56>
    printf("e-Paper init failed\n");
 8001172:	4851      	ldr	r0, [pc, #324]	; (80012b8 <main+0x190>)
 8001174:	f00b fcec 	bl	800cb50 <puts>
    return -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	e098      	b.n	80012b0 <main+0x188>
  }

  Paint paint_black;
  Paint paint_red;
  Paint_Init(&paint_black, frame_buffer_black, epd.width, epd.height);
 800117e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001182:	f107 0010 	add.w	r0, r7, #16
 8001186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001188:	f7ff fbaa 	bl	80008e0 <Paint_Init>
  Paint_Init(&paint_red, frame_buffer_red, epd.width, epd.height);
 800118c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001190:	4638      	mov	r0, r7
 8001192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001194:	f7ff fba4 	bl	80008e0 <Paint_Init>
  Paint_Clear(&paint_black, UNCOLORED);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fbc9 	bl	8000936 <Paint_Clear>
  Paint_Clear(&paint_red, UNCOLORED);
 80011a4:	463b      	mov	r3, r7
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fbc4 	bl	8000936 <Paint_Clear>

  /* Draw something to the frame buffer */
  /* For simplicity, the arguments are explicit numerical coordinates */
  Paint_SetRotate(&paint_black, ROTATE_0);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fc54 	bl	8000a62 <Paint_SetRotate>
  Paint_SetRotate(&paint_red, ROTATE_0);
 80011ba:	463b      	mov	r3, r7
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fc4f 	bl	8000a62 <Paint_SetRotate>
  Paint_DrawRectangle(&paint_black, 10, 80, 50, 140, COLORED);
 80011c4:	f107 0010 	add.w	r0, r7, #16
 80011c8:	2301      	movs	r3, #1
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	238c      	movs	r3, #140	; 0x8c
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2332      	movs	r3, #50	; 0x32
 80011d2:	2250      	movs	r2, #80	; 0x50
 80011d4:	210a      	movs	r1, #10
 80011d6:	f7ff fe24 	bl	8000e22 <Paint_DrawRectangle>
  Paint_DrawLine(&paint_black, 10, 80, 50, 140, COLORED);
 80011da:	f107 0010 	add.w	r0, r7, #16
 80011de:	2301      	movs	r3, #1
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	238c      	movs	r3, #140	; 0x8c
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2332      	movs	r3, #50	; 0x32
 80011e8:	2250      	movs	r2, #80	; 0x50
 80011ea:	210a      	movs	r1, #10
 80011ec:	f7ff fd84 	bl	8000cf8 <Paint_DrawLine>
  Paint_DrawLine(&paint_black, 50, 80, 10, 140, COLORED);
 80011f0:	f107 0010 	add.w	r0, r7, #16
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	238c      	movs	r3, #140	; 0x8c
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	230a      	movs	r3, #10
 80011fe:	2250      	movs	r2, #80	; 0x50
 8001200:	2132      	movs	r1, #50	; 0x32
 8001202:	f7ff fd79 	bl	8000cf8 <Paint_DrawLine>
  Paint_DrawCircle(&paint_black, 90, 110, 30, COLORED);
 8001206:	f107 0010 	add.w	r0, r7, #16
 800120a:	2301      	movs	r3, #1
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	231e      	movs	r3, #30
 8001210:	226e      	movs	r2, #110	; 0x6e
 8001212:	215a      	movs	r1, #90	; 0x5a
 8001214:	f7ff fe92 	bl	8000f3c <Paint_DrawCircle>
  Paint_DrawFilledRectangle(&paint_red, 10, 180, 50, 240, COLORED);
 8001218:	4638      	mov	r0, r7
 800121a:	2301      	movs	r3, #1
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	23f0      	movs	r3, #240	; 0xf0
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2332      	movs	r3, #50	; 0x32
 8001224:	22b4      	movs	r2, #180	; 0xb4
 8001226:	210a      	movs	r1, #10
 8001228:	f7ff fe4e 	bl	8000ec8 <Paint_DrawFilledRectangle>
  Paint_DrawFilledRectangle(&paint_red, 0, 6, 128, 26, COLORED);
 800122c:	4638      	mov	r0, r7
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	231a      	movs	r3, #26
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	2206      	movs	r2, #6
 800123a:	2100      	movs	r1, #0
 800123c:	f7ff fe44 	bl	8000ec8 <Paint_DrawFilledRectangle>
  Paint_DrawFilledCircle(&paint_red, 90, 210, 30, COLORED);
 8001240:	4638      	mov	r0, r7
 8001242:	2301      	movs	r3, #1
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	231e      	movs	r3, #30
 8001248:	22d2      	movs	r2, #210	; 0xd2
 800124a:	215a      	movs	r1, #90	; 0x5a
 800124c:	f7ff fede 	bl	800100c <Paint_DrawFilledCircle>

  /*Write strings to the buffer */
  Paint_DrawStringAt(&paint_black, 4, 30, "e-Paper JetPro", &Font12, COLORED);
 8001250:	f107 0010 	add.w	r0, r7, #16
 8001254:	2301      	movs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <main+0x194>)
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <main+0x198>)
 800125e:	221e      	movs	r2, #30
 8001260:	2104      	movs	r1, #4
 8001262:	f7ff fd1a 	bl	8000c9a <Paint_DrawStringAt>
  Paint_DrawStringAt(&paint_red, 6, 10, "Hello JetPro!", &Font12, UNCOLORED);
 8001266:	4638      	mov	r0, r7
 8001268:	2300      	movs	r3, #0
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <main+0x194>)
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <main+0x19c>)
 8001272:	220a      	movs	r2, #10
 8001274:	2106      	movs	r1, #6
 8001276:	f7ff fd10 	bl	8000c9a <Paint_DrawStringAt>

  /* Display the frame_buffer */
  EPD_DisplayFrame(&epd, frame_buffer_black, frame_buffer_red);
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001280:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fa1a 	bl	80006bc <EPD_DisplayFrame>

  /* Display the image buffer */
  EPD_DisplayFrame(&epd, IMAGE_BLACK, IMAGE_RED);
 8001288:	f107 0320 	add.w	r3, r7, #32
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <main+0x1a0>)
 800128e:	490f      	ldr	r1, [pc, #60]	; (80012cc <main+0x1a4>)
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fa13 	bl	80006bc <EPD_DisplayFrame>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001296:	f007 ff67 	bl	8009168 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 800129a:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <main+0x1a8>)
 800129c:	2100      	movs	r1, #0
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <main+0x1ac>)
 80012a0:	f007 ffac 	bl	80091fc <osThreadNew>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <main+0x1b0>)
 80012a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012aa:	f007 ff81 	bl	80091b0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <main+0x186>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3740      	adds	r7, #64	; 0x40
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800d1b8 	.word	0x0800d1b8
 80012bc:	20000020 	.word	0x20000020
 80012c0:	0800d1cc 	.word	0x0800d1cc
 80012c4:	0800d1dc 	.word	0x0800d1dc
 80012c8:	0800e940 	.word	0x0800e940
 80012cc:	0800d6c0 	.word	0x0800d6c0
 80012d0:	0800fbc0 	.word	0x0800fbc0
 80012d4:	0800165d 	.word	0x0800165d
 80012d8:	2000031c 	.word	0x2000031c

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b094      	sub	sp, #80	; 0x50
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	2230      	movs	r2, #48	; 0x30
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00b fada 	bl	800c8a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <SystemClock_Config+0xc8>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <SystemClock_Config+0xc8>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <SystemClock_Config+0xc8>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <SystemClock_Config+0xcc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <SystemClock_Config+0xcc>)
 8001326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <SystemClock_Config+0xcc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001338:	2301      	movs	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001342:	2302      	movs	r3, #2
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001346:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800134c:	2304      	movs	r3, #4
 800134e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001350:	2360      	movs	r3, #96	; 0x60
 8001352:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001358:	2304      	movs	r3, #4
 800135a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fde9 	bl	8003f38 <HAL_RCC_OscConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800136c:	f000 f980 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	230f      	movs	r3, #15
 8001372:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001374:	2302      	movs	r3, #2
 8001376:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2103      	movs	r1, #3
 800138c:	4618      	mov	r0, r3
 800138e:	f003 f84b 	bl	8004428 <HAL_RCC_ClockConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001398:	f000 f96a 	bl	8001670 <Error_Handler>
  }
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	; 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_I2C1_Init+0x50>)
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <MX_I2C1_Init+0x54>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_I2C1_Init+0x50>)
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_I2C1_Init+0x58>)
 80013ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_I2C1_Init+0x50>)
 80013ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_I2C1_Init+0x50>)
 80013ea:	f001 f9e3 	bl	80027b4 <HAL_I2C_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013f4:	f000 f93c 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200001c8 	.word	0x200001c8
 8001400:	40005400 	.word	0x40005400
 8001404:	000186a0 	.word	0x000186a0

08001408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_SPI1_Init+0x68>)
 800140e:	4a19      	ldr	r2, [pc, #100]	; (8001474 <MX_SPI1_Init+0x6c>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_SPI1_Init+0x68>)
 8001414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_SPI1_Init+0x68>)
 800141c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001420:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_SPI1_Init+0x68>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_SPI1_Init+0x68>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_SPI1_Init+0x68>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_SPI1_Init+0x68>)
 8001436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_SPI1_Init+0x68>)
 800143e:	2228      	movs	r2, #40	; 0x28
 8001440:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_SPI1_Init+0x68>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_SPI1_Init+0x68>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_SPI1_Init+0x68>)
 8001450:	2200      	movs	r2, #0
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_SPI1_Init+0x68>)
 8001456:	220a      	movs	r2, #10
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_SPI1_Init+0x68>)
 800145c:	f003 fa36 	bl	80048cc <HAL_SPI_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001466:	f000 f903 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000021c 	.word	0x2000021c
 8001474:	40013000 	.word	0x40013000

08001478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	; 0x38
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <MX_TIM2_Init+0xe4>)
 80014aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <MX_TIM2_Init+0xe4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <MX_TIM2_Init+0xe4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <MX_TIM2_Init+0xe4>)
 80014be:	2277      	movs	r2, #119	; 0x77
 80014c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <MX_TIM2_Init+0xe4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <MX_TIM2_Init+0xe4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ce:	4823      	ldr	r0, [pc, #140]	; (800155c <MX_TIM2_Init+0xe4>)
 80014d0:	f003 fc8c 	bl	8004dec <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80014da:	f000 f8c9 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e8:	4619      	mov	r1, r3
 80014ea:	481c      	ldr	r0, [pc, #112]	; (800155c <MX_TIM2_Init+0xe4>)
 80014ec:	f003 fe4c 	bl	8005188 <HAL_TIM_ConfigClockSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80014f6:	f000 f8bb 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014fa:	4818      	ldr	r0, [pc, #96]	; (800155c <MX_TIM2_Init+0xe4>)
 80014fc:	f003 fd28 	bl	8004f50 <HAL_TIM_PWM_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001506:	f000 f8b3 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	4619      	mov	r1, r3
 8001518:	4810      	ldr	r0, [pc, #64]	; (800155c <MX_TIM2_Init+0xe4>)
 800151a:	f004 f9a3 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001524:	f000 f8a4 	bl	8001670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001528:	2360      	movs	r3, #96	; 0x60
 800152a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2204      	movs	r2, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <MX_TIM2_Init+0xe4>)
 8001540:	f003 fd60 	bl	8005004 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800154a:	f000 f891 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <MX_TIM2_Init+0xe4>)
 8001550:	f000 f9a8 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3738      	adds	r7, #56	; 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000274 	.word	0x20000274

08001560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_DMA_Init+0x3c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <MX_DMA_Init+0x3c>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_DMA_Init+0x3c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	2011      	movs	r0, #17
 8001588:	f000 fc4a 	bl	8001e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800158c:	2011      	movs	r0, #17
 800158e:	f000 fc63 	bl	8001e58 <HAL_NVIC_EnableIRQ>

}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a25      	ldr	r2, [pc, #148]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_GPIO_Init+0xb4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2107      	movs	r1, #7
 800160e:	4812      	ldr	r0, [pc, #72]	; (8001658 <MX_GPIO_Init+0xb8>)
 8001610:	f001 f8b6 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8001614:	2307      	movs	r3, #7
 8001616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4619      	mov	r1, r3
 800162a:	480b      	ldr	r0, [pc, #44]	; (8001658 <MX_GPIO_Init+0xb8>)
 800162c:	f000 ff0c 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8001630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_GPIO_Init+0xb8>)
 8001646:	f000 feff 	bl	8002448 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40020400 	.word	0x40020400

0800165c <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001664:	f00a fafa 	bl	800bc5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f007 fe59 	bl	8009320 <osDelay>
 800166e:	e7fb      	b.n	8001668 <StartInitTask+0xc>

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_MspInit+0x54>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_MspInit+0x54>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_MspInit+0x54>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_MspInit+0x54>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_MspInit+0x54>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_MspInit+0x54>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	210f      	movs	r1, #15
 80016be:	f06f 0001 	mvn.w	r0, #1
 80016c2:	f000 fbad 	bl	8001e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a19      	ldr	r2, [pc, #100]	; (8001758 <HAL_I2C_MspInit+0x84>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d12b      	bne.n	800174e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_I2C_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_I2C_MspInit+0x88>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_I2C_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001712:	23c0      	movs	r3, #192	; 0xc0
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001716:	2312      	movs	r3, #18
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001722:	2304      	movs	r3, #4
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <HAL_I2C_MspInit+0x8c>)
 800172e:	f000 fe8b 	bl	8002448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_I2C_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_I2C_MspInit+0x88>)
 800173c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_I2C_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40005400 	.word	0x40005400
 800175c:	40023800 	.word	0x40023800
 8001760:	40020400 	.word	0x40020400

08001764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_SPI_MspInit+0x84>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12b      	bne.n	80017de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_SPI_MspInit+0x88>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_SPI_MspInit+0x88>)
 8001790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_SPI_MspInit+0x88>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_SPI_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_SPI_MspInit+0x88>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_SPI_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017be:	23a0      	movs	r3, #160	; 0xa0
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ce:	2305      	movs	r3, #5
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_SPI_MspInit+0x8c>)
 80017da:	f000 fe35 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40013000 	.word	0x40013000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000

080017f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001804:	d143      	bne.n	800188e <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_TIM_Base_MspInit+0xa4>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a22      	ldr	r2, [pc, #136]	; (8001898 <HAL_TIM_Base_MspInit+0xa4>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_TIM_Base_MspInit+0xa4>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 8001824:	4a1e      	ldr	r2, [pc, #120]	; (80018a0 <HAL_TIM_Base_MspInit+0xac>)
 8001826:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 800182a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800182e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 800183e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001842:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 8001846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800184a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 800184e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001852:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001866:	480d      	ldr	r0, [pc, #52]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 8001868:	f000 fb04 	bl	8001e74 <HAL_DMA_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001872:	f7ff fefd 	bl	8001670 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a05      	ldr	r2, [pc, #20]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_TIM_Base_MspInit+0xa8>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	200002bc 	.word	0x200002bc
 80018a0:	400260a0 	.word	0x400260a0

080018a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d11d      	bne.n	8001902 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018e2:	2308      	movs	r3, #8
 80018e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4619      	mov	r1, r3
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <HAL_TIM_MspPostInit+0x6c>)
 80018fe:	f000 fda3 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400

08001914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	; 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_InitTick+0xd0>)
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	4a2d      	ldr	r2, [pc, #180]	; (80019e4 <HAL_InitTick+0xd0>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001932:	6453      	str	r3, [r2, #68]	; 0x44
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_InitTick+0xd0>)
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001940:	f107 020c 	add.w	r2, r7, #12
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f002 ff8c 	bl	8004868 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001950:	f002 ff76 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 8001954:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <HAL_InitTick+0xd4>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9b      	lsrs	r3, r3, #18
 8001960:	3b01      	subs	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_InitTick+0xd8>)
 8001966:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_InitTick+0xdc>)
 8001968:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_InitTick+0xd8>)
 800196c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001970:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_InitTick+0xd8>)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_InitTick+0xd8>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_InitTick+0xd8>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_InitTick+0xd8>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800198a:	4818      	ldr	r0, [pc, #96]	; (80019ec <HAL_InitTick+0xd8>)
 800198c:	f003 fa2e 	bl	8004dec <HAL_TIM_Base_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800199a:	2b00      	cmp	r3, #0
 800199c:	d11b      	bne.n	80019d6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800199e:	4813      	ldr	r0, [pc, #76]	; (80019ec <HAL_InitTick+0xd8>)
 80019a0:	f003 fa74 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d111      	bne.n	80019d6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019b2:	2018      	movs	r0, #24
 80019b4:	f000 fa50 	bl	8001e58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	d808      	bhi.n	80019d0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80019be:	2200      	movs	r2, #0
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	2018      	movs	r0, #24
 80019c4:	f000 fa2c 	bl	8001e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_InitTick+0xe0>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e002      	b.n	80019d6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3730      	adds	r7, #48	; 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	431bde83 	.word	0x431bde83
 80019ec:	20000320 	.word	0x20000320
 80019f0:	40014000 	.word	0x40014000
 80019f4:	2000002c 	.word	0x2000002c

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <DMA1_Stream6_IRQHandler+0x10>)
 8001a2a:	f000 fad1 	bl	8001fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200002bc 	.word	0x200002bc

08001a38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <OTG_FS_IRQHandler+0x10>)
 8001a3e:	f001 f94d 	bl	8002cdc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20006260 	.word	0x20006260

08001a4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00a      	b.n	8001a74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	4601      	mov	r1, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf0      	blt.n	8001a5e <_read+0x12>
	}

return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e009      	b.n	8001aac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf1      	blt.n	8001a98 <_write+0x12>
	}
	return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f00a fd6a 	bl	800c630 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20020000 	.word	0x20020000
 8001b88:	00004000 	.word	0x00004000
 8001b8c:	20000368 	.word	0x20000368
 8001b90:	200069a0 	.word	0x200069a0

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bbe:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bd4:	4c0b      	ldr	r4, [pc, #44]	; (8001c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be2:	f7ff ffd7 	bl	8001b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f00a fe1f 	bl	800c828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7ff fa9d 	bl	8001128 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001bfc:	0800fc78 	.word	0x0800fc78
  ldr r2, =_sbss
 8001c00:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001c04:	2000699c 	.word	0x2000699c

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_Init+0x40>)
 8001c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_Init+0x40>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_Init+0x40>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f8e8 	bl	8001e0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff fe6a 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff fd1c 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	2000036c 	.word	0x2000036c

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000030 	.word	0x20000030

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <__NVIC_EnableIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff4c 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e32:	f7ff ff61 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	6978      	ldr	r0, [r7, #20]
 8001e3e:	f7ff ffb1 	bl	8001da4 <NVIC_EncodePriority>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff80 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e50:	bf00      	nop
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff54 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff fee6 	bl	8001c50 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e099      	b.n	8001fc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb0:	e00f      	b.n	8001ed2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb2:	f7ff fecd 	bl	8001c50 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d908      	bls.n	8001ed2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e078      	b.n	8001fc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e8      	bne.n	8001eb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_DMA_Init+0x158>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d107      	bne.n	8001f3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4313      	orrs	r3, r2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d117      	bne.n	8001f96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f9e9 	bl	8002350 <DMA_CheckFifoParam>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f92:	2301      	movs	r3, #1
 8001f94:	e016      	b.n	8001fc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f9a0 	bl	80022e4 <DMA_CalcBaseAndBitshift>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	f010803f 	.word	0xf010803f

08001fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fdc:	4b8e      	ldr	r3, [pc, #568]	; (8002218 <HAL_DMA_IRQHandler+0x248>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a8e      	ldr	r2, [pc, #568]	; (800221c <HAL_DMA_IRQHandler+0x24c>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0a9b      	lsrs	r3, r3, #10
 8001fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01a      	beq.n	800203c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0204 	bic.w	r2, r2, #4
 8002022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2208      	movs	r2, #8
 800202a:	409a      	lsls	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2201      	movs	r2, #1
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2204      	movs	r2, #4
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d012      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	2204      	movs	r2, #4
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f043 0204 	orr.w	r2, r3, #4
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2210      	movs	r2, #16
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d043      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03c      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2210      	movs	r2, #16
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d018      	beq.n	8002112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d108      	bne.n	8002100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d024      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
 80020fe:	e01f      	b.n	8002140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01b      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
 8002110:	e016      	b.n	8002140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0208 	bic.w	r2, r2, #8
 800212e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2220      	movs	r2, #32
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 808f 	beq.w	8002270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8087 	beq.w	8002270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	2220      	movs	r2, #32
 8002168:	409a      	lsls	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b05      	cmp	r3, #5
 8002178:	d136      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0216 	bic.w	r2, r2, #22
 8002188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <HAL_DMA_IRQHandler+0x1da>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0208 	bic.w	r2, r2, #8
 80021b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	223f      	movs	r2, #63	; 0x3f
 80021c0:	409a      	lsls	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d07e      	beq.n	80022dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
        }
        return;
 80021e6:	e079      	b.n	80022dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d01d      	beq.n	8002232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10d      	bne.n	8002220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	2b00      	cmp	r3, #0
 800220a:	d031      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
 8002214:	e02c      	b.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
 8002216:	bf00      	nop
 8002218:	20000028 	.word	0x20000028
 800221c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
 8002230:	e01e      	b.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0210 	bic.w	r2, r2, #16
 800224e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d032      	beq.n	80022de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d022      	beq.n	80022ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2205      	movs	r2, #5
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d307      	bcc.n	80022b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f2      	bne.n	800229c <HAL_DMA_IRQHandler+0x2cc>
 80022b6:	e000      	b.n	80022ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
 80022da:	e000      	b.n	80022de <HAL_DMA_IRQHandler+0x30e>
        return;
 80022dc:	bf00      	nop
    }
  }
}
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3b10      	subs	r3, #16
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <DMA_CalcBaseAndBitshift+0x64>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <DMA_CalcBaseAndBitshift+0x68>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d909      	bls.n	8002326 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	; 0x58
 8002324:	e007      	b.n	8002336 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	aaaaaaab 	.word	0xaaaaaaab
 800234c:	0800fbfc 	.word	0x0800fbfc

08002350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11f      	bne.n	80023aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d856      	bhi.n	800241e <DMA_CheckFifoParam+0xce>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <DMA_CheckFifoParam+0x28>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	08002389 	.word	0x08002389
 800237c:	0800239b 	.word	0x0800239b
 8002380:	08002389 	.word	0x08002389
 8002384:	0800241f 	.word	0x0800241f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d046      	beq.n	8002422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e043      	b.n	8002422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a2:	d140      	bne.n	8002426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a8:	e03d      	b.n	8002426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	d121      	bne.n	80023f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d837      	bhi.n	800242a <DMA_CheckFifoParam+0xda>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <DMA_CheckFifoParam+0x70>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023d7 	.word	0x080023d7
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	080023e9 	.word	0x080023e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e030      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d025      	beq.n	800242e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e022      	b.n	800242e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023f6:	e01c      	b.n	8002432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d903      	bls.n	8002406 <DMA_CheckFifoParam+0xb6>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d003      	beq.n	800240c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002404:	e018      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      break;
 800240a:	e015      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e00b      	b.n	8002436 <DMA_CheckFifoParam+0xe6>
      break;
 800241e:	bf00      	nop
 8002420:	e00a      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e008      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e006      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e004      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;   
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
    }
  } 
  
  return status; 
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e159      	b.n	8002718 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8148 	bne.w	8002712 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d005      	beq.n	800249a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	2b02      	cmp	r3, #2
 8002498:	d130      	bne.n	80024fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b03      	cmp	r3, #3
 8002506:	d017      	beq.n	8002538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a2 	beq.w	8002712 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b57      	ldr	r3, [pc, #348]	; (8002730 <HAL_GPIO_Init+0x2e8>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a56      	ldr	r2, [pc, #344]	; (8002730 <HAL_GPIO_Init+0x2e8>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b54      	ldr	r3, [pc, #336]	; (8002730 <HAL_GPIO_Init+0x2e8>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ea:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_GPIO_Init+0x2ec>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a49      	ldr	r2, [pc, #292]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x202>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a48      	ldr	r2, [pc, #288]	; (800273c <HAL_GPIO_Init+0x2f4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x1fe>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a47      	ldr	r2, [pc, #284]	; (8002740 <HAL_GPIO_Init+0x2f8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x1fa>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a46      	ldr	r2, [pc, #280]	; (8002744 <HAL_GPIO_Init+0x2fc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x1f6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_GPIO_Init+0x300>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x1f2>
 8002636:	2304      	movs	r3, #4
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x204>
 800263a:	2307      	movs	r3, #7
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x204>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x204>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x204>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x204>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_GPIO_Init+0x2ec>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266a:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_GPIO_Init+0x304>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268e:	4a2f      	ldr	r2, [pc, #188]	; (800274c <HAL_GPIO_Init+0x304>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_GPIO_Init+0x304>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b8:	4a24      	ldr	r2, [pc, #144]	; (800274c <HAL_GPIO_Init+0x304>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_GPIO_Init+0x304>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_GPIO_Init+0x304>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_GPIO_Init+0x304>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270c:	4a0f      	ldr	r2, [pc, #60]	; (800274c <HAL_GPIO_Init+0x304>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f aea2 	bls.w	8002464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40013c00 	.word	0x40013c00

08002750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800279c:	e003      	b.n	80027a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	041a      	lsls	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	619a      	str	r2, [r3, #24]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e12b      	b.n	8002a1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe ff7a 	bl	80016d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	; 0x24
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002818:	f001 fffe 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 800281c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a81      	ldr	r2, [pc, #516]	; (8002a28 <HAL_I2C_Init+0x274>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d807      	bhi.n	8002838 <HAL_I2C_Init+0x84>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a80      	ldr	r2, [pc, #512]	; (8002a2c <HAL_I2C_Init+0x278>)
 800282c:	4293      	cmp	r3, r2
 800282e:	bf94      	ite	ls
 8002830:	2301      	movls	r3, #1
 8002832:	2300      	movhi	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e006      	b.n	8002846 <HAL_I2C_Init+0x92>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a7d      	ldr	r2, [pc, #500]	; (8002a30 <HAL_I2C_Init+0x27c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	bf94      	ite	ls
 8002840:	2301      	movls	r3, #1
 8002842:	2300      	movhi	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0e7      	b.n	8002a1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a78      	ldr	r2, [pc, #480]	; (8002a34 <HAL_I2C_Init+0x280>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9b      	lsrs	r3, r3, #18
 8002858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a6a      	ldr	r2, [pc, #424]	; (8002a28 <HAL_I2C_Init+0x274>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d802      	bhi.n	8002888 <HAL_I2C_Init+0xd4>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3301      	adds	r3, #1
 8002886:	e009      	b.n	800289c <HAL_I2C_Init+0xe8>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	4a69      	ldr	r2, [pc, #420]	; (8002a38 <HAL_I2C_Init+0x284>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	3301      	adds	r3, #1
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	495c      	ldr	r1, [pc, #368]	; (8002a28 <HAL_I2C_Init+0x274>)
 80028b8:	428b      	cmp	r3, r1
 80028ba:	d819      	bhi.n	80028f0 <HAL_I2C_Init+0x13c>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e59      	subs	r1, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ca:	1c59      	adds	r1, r3, #1
 80028cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028d0:	400b      	ands	r3, r1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_I2C_Init+0x138>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1e59      	subs	r1, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ea:	e051      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e04f      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <HAL_I2C_Init+0x168>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	440b      	add	r3, r1
 8002906:	fbb0 f3f3 	udiv	r3, r0, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e012      	b.n	8002942 <HAL_I2C_Init+0x18e>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e58      	subs	r0, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	0099      	lsls	r1, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002932:	3301      	adds	r3, #1
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Init+0x196>
 8002946:	2301      	movs	r3, #1
 8002948:	e022      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10e      	bne.n	8002970 <HAL_I2C_Init+0x1bc>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e58      	subs	r0, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	440b      	add	r3, r1
 8002960:	fbb0 f3f3 	udiv	r3, r0, r3
 8002964:	3301      	adds	r3, #1
 8002966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296e:	e00f      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	0099      	lsls	r1, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	6809      	ldr	r1, [r1, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6911      	ldr	r1, [r2, #16]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	000186a0 	.word	0x000186a0
 8002a2c:	001e847f 	.word	0x001e847f
 8002a30:	003d08ff 	.word	0x003d08ff
 8002a34:	431bde83 	.word	0x431bde83
 8002a38:	10624dd3 	.word	0x10624dd3

08002a3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3e:	b08f      	sub	sp, #60	; 0x3c
 8002a40:	af0a      	add	r7, sp, #40	; 0x28
 8002a42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e10f      	b.n	8002c6e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f009 fad7 	bl	800c01c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2203      	movs	r2, #3
 8002a72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 f86c 	bl	8005b6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	687e      	ldr	r6, [r7, #4]
 8002a9a:	466d      	mov	r5, sp
 8002a9c:	f106 0410 	add.w	r4, r6, #16
 8002aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aac:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ab0:	1d33      	adds	r3, r6, #4
 8002ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab4:	6838      	ldr	r0, [r7, #0]
 8002ab6:	f002 ff43 	bl	8005940 <USB_CoreInit>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0d0      	b.n	8002c6e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 f85a 	bl	8005b8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e04a      	b.n	8002b74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	333d      	adds	r3, #61	; 0x3d
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	333c      	adds	r3, #60	; 0x3c
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	b298      	uxth	r0, r3
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3344      	adds	r3, #68	; 0x44
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3340      	adds	r3, #64	; 0x40
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	3348      	adds	r3, #72	; 0x48
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	334c      	adds	r3, #76	; 0x4c
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3354      	adds	r3, #84	; 0x54
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	3301      	adds	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d3af      	bcc.n	8002ade <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e044      	b.n	8002c0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3b5      	bcc.n	8002b84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	687e      	ldr	r6, [r7, #4]
 8002c20:	466d      	mov	r5, sp
 8002c22:	f106 0410 	add.w	r4, r6, #16
 8002c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c36:	1d33      	adds	r3, r6, #4
 8002c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3a:	6838      	ldr	r0, [r7, #0]
 8002c3c:	f002 fff2 	bl	8005c24 <USB_DevInit>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00d      	b.n	8002c6e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 f941 	bl	8006eee <USB_DevDisconnect>

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_PCD_Start+0x1c>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e020      	b.n	8002cd4 <HAL_PCD_Start+0x5e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d109      	bne.n	8002cb6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 ff44 	bl	8005b48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 f8f1 	bl	8006eac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b08d      	sub	sp, #52	; 0x34
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f004 f9af 	bl	8007056 <USB_GetMode>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 848a 	bne.w	8003614 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 f913 	bl	8006f30 <USB_ReadInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8480 	beq.w	8003612 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 f900 	bl	8006f30 <USB_ReadInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d107      	bne.n	8002d4a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f002 0202 	and.w	r2, r2, #2
 8002d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 f8ee 	bl	8006f30 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d161      	bne.n	8002e22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0210 	bic.w	r2, r2, #16
 8002d6c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f003 020f 	and.w	r2, r3, #15
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	0c5b      	lsrs	r3, r3, #17
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d124      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d035      	beq.n	8002e12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	6a38      	ldr	r0, [r7, #32]
 8002dba:	f003 ff25 	bl	8006c08 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dca:	441a      	add	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ddc:	441a      	add	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	621a      	str	r2, [r3, #32]
 8002de2:	e016      	b.n	8002e12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	0c5b      	lsrs	r3, r3, #17
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	2b06      	cmp	r3, #6
 8002dee:	d110      	bne.n	8002e12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002df6:	2208      	movs	r2, #8
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6a38      	ldr	r0, [r7, #32]
 8002dfc:	f003 ff04 	bl	8006c08 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0c:	441a      	add	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0210 	orr.w	r2, r2, #16
 8002e20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f004 f882 	bl	8006f30 <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e36:	f040 80a7 	bne.w	8002f88 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 f887 	bl	8006f56 <USB_ReadDevAllOutEpInterrupt>
 8002e48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e4a:	e099      	b.n	8002f80 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 808e 	beq.w	8002f74 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 f8ab 	bl	8006fbe <USB_ReadDevOutEPInterrupt>
 8002e68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e80:	461a      	mov	r2, r3
 8002e82:	2301      	movs	r3, #1
 8002e84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fec3 	bl	8003c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 ff99 	bl	8003de4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2310      	movs	r3, #16
 8002ecc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d030      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b80      	cmp	r3, #128	; 0x80
 8002ee2:	d109      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	78db      	ldrb	r3, [r3, #3]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d108      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4619      	mov	r1, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f009 f976 	bl	800c214 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f34:	461a      	mov	r2, r3
 8002f36:	2302      	movs	r3, #2
 8002f38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f50:	461a      	mov	r2, r3
 8002f52:	2320      	movs	r3, #32
 8002f54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	3301      	adds	r3, #1
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f47f af62 	bne.w	8002e4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 ffcf 	bl	8006f30 <USB_ReadInterrupts>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f9c:	f040 80db 	bne.w	8003156 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fff0 	bl	8006f8a <USB_ReadDevAllInEpInterrupt>
 8002faa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fb0:	e0cd      	b.n	800314e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80c2 	beq.w	8003142 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f004 f816 	bl	8006ffa <USB_ReadDevInEPInterrupt>
 8002fce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d057      	beq.n	800308a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69f9      	ldr	r1, [r7, #28]
 8002ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	2301      	movs	r3, #1
 800300e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d132      	bne.n	800307e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	334c      	adds	r3, #76	; 0x4c
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4403      	add	r3, r0
 8003038:	3348      	adds	r3, #72	; 0x48
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4419      	add	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4403      	add	r3, r0
 800304c:	334c      	adds	r3, #76	; 0x4c
 800304e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d113      	bne.n	800307e <HAL_PCD_IRQHandler+0x3a2>
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3354      	adds	r3, #84	; 0x54
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d108      	bne.n	800307e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003076:	461a      	mov	r2, r3
 8003078:	2101      	movs	r1, #1
 800307a:	f004 f81d 	bl	80070b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f009 f84a 	bl	800c11e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	461a      	mov	r2, r3
 80030a2:	2308      	movs	r3, #8
 80030a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030bc:	461a      	mov	r2, r3
 80030be:	2310      	movs	r3, #16
 80030c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	461a      	mov	r2, r3
 80030da:	2340      	movs	r3, #64	; 0x40
 80030dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d023      	beq.n	8003130 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ea:	6a38      	ldr	r0, [r7, #32]
 80030ec:	f002 fefe 	bl	8005eec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	3338      	adds	r3, #56	; 0x38
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d108      	bne.n	800311e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f009 f88d 	bl	800c238 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312a:	461a      	mov	r2, r3
 800312c:	2302      	movs	r3, #2
 800312e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800313a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fcdb 	bl	8003af8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	3301      	adds	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	f47f af2e 	bne.w	8002fb2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fee8 	bl	8006f30 <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800316a:	d122      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003186:	2b01      	cmp	r3, #1
 8003188:	d108      	bne.n	800319c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003192:	2100      	movs	r1, #0
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fec3 	bl	8003f20 <HAL_PCDEx_LPM_Callback>
 800319a:	e002      	b.n	80031a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f009 f82b 	bl	800c1f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 feba 	bl	8006f30 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c6:	d112      	bne.n	80031ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f008 ffe7 	bl	800c1ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031ec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 fe9c 	bl	8006f30 <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003202:	f040 80b7 	bne.w	8003374 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2110      	movs	r1, #16
 8003220:	4618      	mov	r0, r3
 8003222:	f002 fe63 	bl	8005eec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003226:	2300      	movs	r3, #0
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800322a:	e046      	b.n	80032ba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003238:	461a      	mov	r2, r3
 800323a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800323e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	440a      	add	r2, r1
 8003256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800325a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800325e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003272:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	440a      	add	r2, r1
 800328a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800328e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003292:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a4:	0151      	lsls	r1, r2, #5
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	440a      	add	r2, r1
 80032aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	3301      	adds	r3, #1
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3b3      	bcc.n	800322c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d016      	beq.n	800330e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f0:	f043 030b 	orr.w	r3, r3, #11
 80032f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003306:	f043 030b 	orr.w	r3, r3, #11
 800330a:	6453      	str	r3, [r2, #68]	; 0x44
 800330c:	e015      	b.n	800333a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800331c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003320:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003324:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003334:	f043 030b 	orr.w	r3, r3, #11
 8003338:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003348:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800334c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800335e:	461a      	mov	r2, r3
 8003360:	f003 feaa 	bl	80070b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003372:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fdd9 	bl	8006f30 <USB_ReadInterrupts>
 800337e:	4603      	mov	r3, r0
 8003380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003388:	d124      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fe6f 	bl	8007072 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f002 fe24 	bl	8005fe6 <USB_GetDevSpeed>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681c      	ldr	r4, [r3, #0]
 80033aa:	f001 fa29 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 80033ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	4620      	mov	r0, r4
 80033ba:	f002 fb23 	bl	8005a04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f008 fed5 	bl	800c16e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 fda9 	bl	8006f30 <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d10a      	bne.n	80033fe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f008 feb2 	bl	800c152 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f002 0208 	and.w	r2, r2, #8
 80033fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f003 fd94 	bl	8006f30 <USB_ReadInterrupts>
 8003408:	4603      	mov	r3, r0
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b80      	cmp	r3, #128	; 0x80
 8003410:	d122      	bne.n	8003458 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800341e:	2301      	movs	r3, #1
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	e014      	b.n	800344e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	b2db      	uxtb	r3, r3
 8003440:	4619      	mov	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fb27 	bl	8003a96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	3301      	adds	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	429a      	cmp	r2, r3
 8003456:	d3e5      	bcc.n	8003424 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f003 fd67 	bl	8006f30 <USB_ReadInterrupts>
 8003462:	4603      	mov	r3, r0
 8003464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346c:	d13b      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800346e:	2301      	movs	r3, #1
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	e02b      	b.n	80034cc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	3340      	adds	r3, #64	; 0x40
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d115      	bne.n	80034c6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800349a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800349c:	2b00      	cmp	r3, #0
 800349e:	da12      	bge.n	80034c6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	333f      	adds	r3, #63	; 0x3f
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fae8 	bl	8003a96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	3301      	adds	r3, #1
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d3ce      	bcc.n	8003474 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 fd20 	bl	8006f30 <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034fa:	d155      	bne.n	80035a8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034fc:	2301      	movs	r3, #1
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	e045      	b.n	800358e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d12e      	bne.n	8003588 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800352a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800352c:	2b00      	cmp	r3, #0
 800352e:	da2b      	bge.n	8003588 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800353c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003540:	429a      	cmp	r2, r3
 8003542:	d121      	bne.n	8003588 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003584:	6053      	str	r3, [r2, #4]
            break;
 8003586:	e007      	b.n	8003598 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	3301      	adds	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	429a      	cmp	r2, r3
 8003596:	d3b4      	bcc.n	8003502 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fcbf 	bl	8006f30 <USB_ReadInterrupts>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035bc:	d10a      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f008 fe4c 	bl	800c25c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 fca9 	bl	8006f30 <USB_ReadInterrupts>
 80035de:	4603      	mov	r3, r0
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d115      	bne.n	8003614 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f008 fe3c 	bl	800c278 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6859      	ldr	r1, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	e000      	b.n	8003614 <HAL_PCD_IRQHandler+0x938>
      return;
 8003612:	bf00      	nop
    }
  }
}
 8003614:	3734      	adds	r7, #52	; 0x34
 8003616:	46bd      	mov	sp, r7
 8003618:	bd90      	pop	{r4, r7, pc}

0800361a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_PCD_SetAddress+0x1a>
 8003630:	2302      	movs	r3, #2
 8003632:	e013      	b.n	800365c <HAL_PCD_SetAddress+0x42>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f003 fc07 	bl	8006e60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4603      	mov	r3, r0
 8003674:	70fb      	strb	r3, [r7, #3]
 8003676:	460b      	mov	r3, r1
 8003678:	803b      	strh	r3, [r7, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003686:	2b00      	cmp	r3, #0
 8003688:	da0f      	bge.n	80036aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 020f 	and.w	r2, r3, #15
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	3338      	adds	r3, #56	; 0x38
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	3304      	adds	r3, #4
 80036a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	705a      	strb	r2, [r3, #1]
 80036a8:	e00f      	b.n	80036ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 020f 	and.w	r2, r3, #15
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	3304      	adds	r3, #4
 80036c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036d6:	883a      	ldrh	r2, [r7, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	78ba      	ldrb	r2, [r7, #2]
 80036e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	785b      	ldrb	r3, [r3, #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036f4:	78bb      	ldrb	r3, [r7, #2]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d102      	bne.n	8003700 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_PCD_EP_Open+0xaa>
 800370a:	2302      	movs	r3, #2
 800370c:	e00e      	b.n	800372c <HAL_PCD_EP_Open+0xc8>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fc87 	bl	8006030 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800372a:	7afb      	ldrb	r3, [r7, #11]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003744:	2b00      	cmp	r3, #0
 8003746:	da0f      	bge.n	8003768 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	3338      	adds	r3, #56	; 0x38
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	705a      	strb	r2, [r3, #1]
 8003766:	e00f      	b.n	8003788 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	f003 020f 	and.w	r2, r3, #15
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	b2da      	uxtb	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_PCD_EP_Close+0x6e>
 800379e:	2302      	movs	r3, #2
 80037a0:	e00e      	b.n	80037c0 <HAL_PCD_EP_Close+0x8c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 fcc5 	bl	8006140 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	460b      	mov	r3, r1
 80037d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d8:	7afb      	ldrb	r3, [r7, #11]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2200      	movs	r2, #0
 8003808:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800380a:	7afb      	ldrb	r3, [r7, #11]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	b2da      	uxtb	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003824:	7afb      	ldrb	r3, [r7, #11]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	6979      	ldr	r1, [r7, #20]
 800383c:	f002 ffa4 	bl	8006788 <USB_EP0StartXfer>
 8003840:	e008      	b.n	8003854 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	6979      	ldr	r1, [r7, #20]
 8003850:	f002 fd52 	bl	80062f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003880:	681b      	ldr	r3, [r3, #0]
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	460b      	mov	r3, r1
 800389c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3338      	adds	r3, #56	; 0x38
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	3304      	adds	r3, #4
 80038b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2201      	movs	r2, #1
 80038cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ce:	7afb      	ldrb	r3, [r7, #11]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	6979      	ldr	r1, [r7, #20]
 8003900:	f002 ff42 	bl	8006788 <USB_EP0StartXfer>
 8003904:	e008      	b.n	8003918 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	6979      	ldr	r1, [r7, #20]
 8003914:	f002 fcf0 	bl	80062f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	d901      	bls.n	8003940 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e050      	b.n	80039e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003944:	2b00      	cmp	r3, #0
 8003946:	da0f      	bge.n	8003968 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	3338      	adds	r3, #56	; 0x38
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	4413      	add	r3, r2
 800395c:	3304      	adds	r3, #4
 800395e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	705a      	strb	r2, [r3, #1]
 8003966:	e00d      	b.n	8003984 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	b2da      	uxtb	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_PCD_EP_SetStall+0x82>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e01e      	b.n	80039e2 <HAL_PCD_EP_SetStall+0xc0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68f9      	ldr	r1, [r7, #12]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f003 f980 	bl	8006cb8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	b2d9      	uxtb	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039d2:	461a      	mov	r2, r3
 80039d4:	f003 fb70 	bl	80070b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d901      	bls.n	8003a08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e042      	b.n	8003a8e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0f      	bge.n	8003a30 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 020f 	and.w	r2, r3, #15
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	3338      	adds	r3, #56	; 0x38
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	705a      	strb	r2, [r3, #1]
 8003a2e:	e00f      	b.n	8003a50 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	3304      	adds	r3, #4
 8003a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_PCD_EP_ClrStall+0x86>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e00e      	b.n	8003a8e <HAL_PCD_EP_ClrStall+0xa4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 f988 	bl	8006d94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	da0c      	bge.n	8003ac4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	3338      	adds	r3, #56	; 0x38
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	e00c      	b.n	8003ade <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 020f 	and.w	r2, r3, #15
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3304      	adds	r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f002 ffa7 	bl	8006a38 <USB_EPStopXfer>
 8003aea:	4603      	mov	r3, r0
 8003aec:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003aee:	7afb      	ldrb	r3, [r7, #11]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	3338      	adds	r3, #56	; 0x38
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d901      	bls.n	8003b30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e06c      	b.n	8003c0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	699a      	ldr	r2, [r3, #24]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d902      	bls.n	8003b4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3303      	adds	r3, #3
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b54:	e02b      	b.n	8003bae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d902      	bls.n	8003b72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3303      	adds	r3, #3
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6919      	ldr	r1, [r3, #16]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	4603      	mov	r3, r0
 8003b90:	6978      	ldr	r0, [r7, #20]
 8003b92:	f002 fffb 	bl	8006b8c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	441a      	add	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1a      	ldr	r2, [r3, #32]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	441a      	add	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d809      	bhi.n	8003bd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d203      	bcs.n	8003bd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1be      	bne.n	8003b56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	699a      	ldr	r2, [r3, #24]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d811      	bhi.n	8003c08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	2201      	movs	r2, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	6939      	ldr	r1, [r7, #16]
 8003c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c04:	4013      	ands	r3, r2
 8003c06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	333c      	adds	r3, #60	; 0x3c
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d17b      	bne.n	8003d42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4a61      	ldr	r2, [pc, #388]	; (8003ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	f240 80b9 	bls.w	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80b3 	beq.w	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c76:	461a      	mov	r2, r3
 8003c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7c:	6093      	str	r3, [r2, #8]
 8003c7e:	e0a7      	b.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	461a      	mov	r2, r3
 8003c98:	2320      	movs	r3, #32
 8003c9a:	6093      	str	r3, [r2, #8]
 8003c9c:	e098      	b.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f040 8093 	bne.w	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4a4b      	ldr	r2, [pc, #300]	; (8003ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d90f      	bls.n	8003cd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cce:	6093      	str	r3, [r2, #8]
 8003cd0:	e07e      	b.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	0159      	lsls	r1, r3, #5
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d114      	bne.n	8003d34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2101      	movs	r1, #1
 8003d20:	f003 f9ca 	bl	80070b8 <USB_EP0_OutStart>
 8003d24:	e006      	b.n	8003d34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	441a      	add	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f008 f9d4 	bl	800c0e8 <HAL_PCD_DataOutStageCallback>
 8003d40:	e046      	b.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d124      	bne.n	8003d94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	461a      	mov	r2, r3
 8003d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d66:	6093      	str	r3, [r2, #8]
 8003d68:	e032      	b.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d80:	461a      	mov	r2, r3
 8003d82:	2320      	movs	r3, #32
 8003d84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f008 f9ab 	bl	800c0e8 <HAL_PCD_DataOutStageCallback>
 8003d92:	e01d      	b.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d114      	bne.n	8003dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f003 f97a 	bl	80070b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f008 f98c 	bl	800c0e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	4f54300a 	.word	0x4f54300a
 8003de0:	4f54310a 	.word	0x4f54310a

08003de4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	333c      	adds	r3, #60	; 0x3c
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d90e      	bls.n	8003e38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d009      	beq.n	8003e38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e30:	461a      	mov	r2, r3
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f008 f943 	bl	800c0c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d90c      	bls.n	8003e60 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d108      	bne.n	8003e60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	f003 f92c 	bl	80070b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	4f54300a 	.word	0x4f54300a

08003e70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e8e:	883b      	ldrh	r3, [r7, #0]
 8003e90:	0419      	lsls	r1, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e9c:	e028      	b.n	8003ef0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
 8003eb0:	e00d      	b.n	8003ece <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	3340      	adds	r3, #64	; 0x40
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3ec      	bcc.n	8003eb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ed8:	883b      	ldrh	r3, [r7, #0]
 8003eda:	0418      	lsls	r0, r3, #16
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6819      	ldr	r1, [r3, #0]
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	4302      	orrs	r2, r0
 8003ee8:	3340      	adds	r3, #64	; 0x40
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e267      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d075      	beq.n	8004042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f56:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d00c      	beq.n	8003f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f62:	4b85      	ldr	r3, [pc, #532]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d112      	bne.n	8003f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6e:	4b82      	ldr	r3, [pc, #520]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7a:	d10b      	bne.n	8003f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	4b7e      	ldr	r3, [pc, #504]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d05b      	beq.n	8004040 <HAL_RCC_OscConfig+0x108>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d157      	bne.n	8004040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e242      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d106      	bne.n	8003fac <HAL_RCC_OscConfig+0x74>
 8003f9e:	4b76      	ldr	r3, [pc, #472]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a75      	ldr	r2, [pc, #468]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e01d      	b.n	8003fe8 <HAL_RCC_OscConfig+0xb0>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x98>
 8003fb6:	4b70      	ldr	r3, [pc, #448]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6f      	ldr	r2, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6c      	ldr	r2, [pc, #432]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0xb0>
 8003fd0:	4b69      	ldr	r3, [pc, #420]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a68      	ldr	r2, [pc, #416]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4b66      	ldr	r3, [pc, #408]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a65      	ldr	r2, [pc, #404]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d013      	beq.n	8004018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fe2e 	bl	8001c50 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fd fe2a 	bl	8001c50 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e207      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b5b      	ldr	r3, [pc, #364]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xc0>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd fe1a 	bl	8001c50 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004020:	f7fd fe16 	bl	8001c50 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e1f3      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	4b51      	ldr	r3, [pc, #324]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0xe8>
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d063      	beq.n	8004116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800404e:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004062:	2b08      	cmp	r3, #8
 8004064:	d11c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004066:	4b44      	ldr	r3, [pc, #272]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d116      	bne.n	80040a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_RCC_OscConfig+0x152>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d001      	beq.n	800408a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e1c7      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4937      	ldr	r1, [pc, #220]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	e03a      	b.n	8004116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a8:	4b34      	ldr	r3, [pc, #208]	; (800417c <HAL_RCC_OscConfig+0x244>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7fd fdcf 	bl	8001c50 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b6:	f7fd fdcb 	bl	8001c50 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e1a8      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d4:	4b28      	ldr	r3, [pc, #160]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4925      	ldr	r1, [pc, #148]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
 80040e8:	e015      	b.n	8004116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x244>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fd fdae 	bl	8001c50 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f8:	f7fd fdaa 	bl	8001c50 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e187      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d036      	beq.n	8004190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d016      	beq.n	8004158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <HAL_RCC_OscConfig+0x248>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004130:	f7fd fd8e 	bl	8001c50 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004138:	f7fd fd8a 	bl	8001c50 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e167      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800414c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x200>
 8004156:	e01b      	b.n	8004190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_OscConfig+0x248>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415e:	f7fd fd77 	bl	8001c50 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004164:	e00e      	b.n	8004184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004166:	f7fd fd73 	bl	8001c50 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d907      	bls.n	8004184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e150      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
 8004178:	40023800 	.word	0x40023800
 800417c:	42470000 	.word	0x42470000
 8004180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1ea      	bne.n	8004166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8097 	beq.w	80042cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419e:	2300      	movs	r3, #0
 80041a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a2:	4b81      	ldr	r3, [pc, #516]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	4b7d      	ldr	r3, [pc, #500]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	4a7c      	ldr	r2, [pc, #496]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6413      	str	r3, [r2, #64]	; 0x40
 80041be:	4b7a      	ldr	r3, [pc, #488]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	60bb      	str	r3, [r7, #8]
 80041c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ca:	2301      	movs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ce:	4b77      	ldr	r3, [pc, #476]	; (80043ac <HAL_RCC_OscConfig+0x474>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d118      	bne.n	800420c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041da:	4b74      	ldr	r3, [pc, #464]	; (80043ac <HAL_RCC_OscConfig+0x474>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a73      	ldr	r2, [pc, #460]	; (80043ac <HAL_RCC_OscConfig+0x474>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e6:	f7fd fd33 	bl	8001c50 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ee:	f7fd fd2f 	bl	8001c50 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e10c      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCC_OscConfig+0x474>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x2ea>
 8004214:	4b64      	ldr	r3, [pc, #400]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a63      	ldr	r2, [pc, #396]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	e01c      	b.n	800425c <HAL_RCC_OscConfig+0x324>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x30c>
 800422a:	4b5f      	ldr	r3, [pc, #380]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a5e      	ldr	r2, [pc, #376]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
 8004236:	4b5c      	ldr	r3, [pc, #368]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a5b      	ldr	r2, [pc, #364]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6713      	str	r3, [r2, #112]	; 0x70
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0x324>
 8004244:	4b58      	ldr	r3, [pc, #352]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a57      	ldr	r2, [pc, #348]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	4b55      	ldr	r3, [pc, #340]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a54      	ldr	r2, [pc, #336]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004256:	f023 0304 	bic.w	r3, r3, #4
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fd fcf4 	bl	8001c50 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	e00a      	b.n	8004282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fd fcf0 	bl	8001c50 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e0cb      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	4b49      	ldr	r3, [pc, #292]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ee      	beq.n	800426c <HAL_RCC_OscConfig+0x334>
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004290:	f7fd fcde 	bl	8001c50 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7fd fcda 	bl	8001c50 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0b5      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ae:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1ee      	bne.n	8004298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b39      	ldr	r3, [pc, #228]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	4a38      	ldr	r2, [pc, #224]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a1 	beq.w	8004418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d6:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d05c      	beq.n	800439c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d141      	bne.n	800436e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ea:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <HAL_RCC_OscConfig+0x478>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fd fcae 	bl	8001c50 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fd fcaa 	bl	8001c50 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e087      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	019b      	lsls	r3, r3, #6
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	3b01      	subs	r3, #1
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	061b      	lsls	r3, r3, #24
 800433a:	491b      	ldr	r1, [pc, #108]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <HAL_RCC_OscConfig+0x478>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004346:	f7fd fc83 	bl	8001c50 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434e:	f7fd fc7f 	bl	8001c50 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e05c      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x416>
 800436c:	e054      	b.n	8004418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <HAL_RCC_OscConfig+0x478>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fd fc6c 	bl	8001c50 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437c:	f7fd fc68 	bl	8001c50 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e045      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x444>
 800439a:	e03d      	b.n	8004418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e038      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40007000 	.word	0x40007000
 80043b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCC_OscConfig+0x4ec>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d028      	beq.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d121      	bne.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d11a      	bne.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d111      	bne.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	3b01      	subs	r3, #1
 80043fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d107      	bne.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800

08004428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0cc      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800443c:	4b68      	ldr	r3, [pc, #416]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d90c      	bls.n	8004464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b65      	ldr	r3, [pc, #404]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	4b63      	ldr	r3, [pc, #396]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0b8      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800447c:	4b59      	ldr	r3, [pc, #356]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a58      	ldr	r2, [pc, #352]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004494:	4b53      	ldr	r3, [pc, #332]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a52      	ldr	r2, [pc, #328]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800449e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a0:	4b50      	ldr	r3, [pc, #320]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	494d      	ldr	r1, [pc, #308]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d044      	beq.n	8004548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c6:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d119      	bne.n	8004506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e07f      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d003      	beq.n	80044e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e6:	4b3f      	ldr	r3, [pc, #252]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e06f      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e067      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004506:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 0203 	bic.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4934      	ldr	r1, [pc, #208]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004518:	f7fd fb9a 	bl	8001c50 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	e00a      	b.n	8004536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004520:	f7fd fb96 	bl	8001c50 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e04f      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 020c 	and.w	r2, r3, #12
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	429a      	cmp	r2, r3
 8004546:	d1eb      	bne.n	8004520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004548:	4b25      	ldr	r3, [pc, #148]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d20c      	bcs.n	8004570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e032      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4916      	ldr	r1, [pc, #88]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	490e      	ldr	r1, [pc, #56]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ae:	f000 f821 	bl	80045f4 <HAL_RCC_GetSysClockFreq>
 80045b2:	4602      	mov	r2, r0
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	091b      	lsrs	r3, r3, #4
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	490a      	ldr	r1, [pc, #40]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	5ccb      	ldrb	r3, [r1, r3]
 80045c2:	fa22 f303 	lsr.w	r3, r2, r3
 80045c6:	4a09      	ldr	r2, [pc, #36]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80045c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fd f9a0 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40023c00 	.word	0x40023c00
 80045e4:	40023800 	.word	0x40023800
 80045e8:	0800fbe4 	.word	0x0800fbe4
 80045ec:	20000028 	.word	0x20000028
 80045f0:	2000002c 	.word	0x2000002c

080045f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f8:	b094      	sub	sp, #80	; 0x50
 80045fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004600:	2300      	movs	r3, #0
 8004602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004604:	2300      	movs	r3, #0
 8004606:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800460c:	4b79      	ldr	r3, [pc, #484]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	2b08      	cmp	r3, #8
 8004616:	d00d      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x40>
 8004618:	2b08      	cmp	r3, #8
 800461a:	f200 80e1 	bhi.w	80047e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x34>
 8004622:	2b04      	cmp	r3, #4
 8004624:	d003      	beq.n	800462e <HAL_RCC_GetSysClockFreq+0x3a>
 8004626:	e0db      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004628:	4b73      	ldr	r3, [pc, #460]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800462c:	e0db      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800462e:	4b73      	ldr	r3, [pc, #460]	; (80047fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004632:	e0d8      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004634:	4b6f      	ldr	r3, [pc, #444]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800463c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800463e:	4b6d      	ldr	r3, [pc, #436]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d063      	beq.n	8004712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464a:	4b6a      	ldr	r3, [pc, #424]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	2200      	movs	r2, #0
 8004652:	63bb      	str	r3, [r7, #56]	; 0x38
 8004654:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465c:	633b      	str	r3, [r7, #48]	; 0x30
 800465e:	2300      	movs	r3, #0
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
 8004662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004666:	4622      	mov	r2, r4
 8004668:	462b      	mov	r3, r5
 800466a:	f04f 0000 	mov.w	r0, #0
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	0159      	lsls	r1, r3, #5
 8004674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004678:	0150      	lsls	r0, r2, #5
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4621      	mov	r1, r4
 8004680:	1a51      	subs	r1, r2, r1
 8004682:	6139      	str	r1, [r7, #16]
 8004684:	4629      	mov	r1, r5
 8004686:	eb63 0301 	sbc.w	r3, r3, r1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004698:	4659      	mov	r1, fp
 800469a:	018b      	lsls	r3, r1, #6
 800469c:	4651      	mov	r1, sl
 800469e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046a2:	4651      	mov	r1, sl
 80046a4:	018a      	lsls	r2, r1, #6
 80046a6:	4651      	mov	r1, sl
 80046a8:	ebb2 0801 	subs.w	r8, r2, r1
 80046ac:	4659      	mov	r1, fp
 80046ae:	eb63 0901 	sbc.w	r9, r3, r1
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046c6:	4690      	mov	r8, r2
 80046c8:	4699      	mov	r9, r3
 80046ca:	4623      	mov	r3, r4
 80046cc:	eb18 0303 	adds.w	r3, r8, r3
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	462b      	mov	r3, r5
 80046d4:	eb49 0303 	adc.w	r3, r9, r3
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046e6:	4629      	mov	r1, r5
 80046e8:	024b      	lsls	r3, r1, #9
 80046ea:	4621      	mov	r1, r4
 80046ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046f0:	4621      	mov	r1, r4
 80046f2:	024a      	lsls	r2, r1, #9
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fa:	2200      	movs	r2, #0
 80046fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004704:	f7fb fd6c 	bl	80001e0 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4613      	mov	r3, r2
 800470e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004710:	e058      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004712:	4b38      	ldr	r3, [pc, #224]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	099b      	lsrs	r3, r3, #6
 8004718:	2200      	movs	r2, #0
 800471a:	4618      	mov	r0, r3
 800471c:	4611      	mov	r1, r2
 800471e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004722:	623b      	str	r3, [r7, #32]
 8004724:	2300      	movs	r3, #0
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
 8004728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	f04f 0000 	mov.w	r0, #0
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	0159      	lsls	r1, r3, #5
 800473a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800473e:	0150      	lsls	r0, r2, #5
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4641      	mov	r1, r8
 8004746:	ebb2 0a01 	subs.w	sl, r2, r1
 800474a:	4649      	mov	r1, r9
 800474c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800475c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004764:	ebb2 040a 	subs.w	r4, r2, sl
 8004768:	eb63 050b 	sbc.w	r5, r3, fp
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	00eb      	lsls	r3, r5, #3
 8004776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800477a:	00e2      	lsls	r2, r4, #3
 800477c:	4614      	mov	r4, r2
 800477e:	461d      	mov	r5, r3
 8004780:	4643      	mov	r3, r8
 8004782:	18e3      	adds	r3, r4, r3
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	464b      	mov	r3, r9
 8004788:	eb45 0303 	adc.w	r3, r5, r3
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800479a:	4629      	mov	r1, r5
 800479c:	028b      	lsls	r3, r1, #10
 800479e:	4621      	mov	r1, r4
 80047a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047a4:	4621      	mov	r1, r4
 80047a6:	028a      	lsls	r2, r1, #10
 80047a8:	4610      	mov	r0, r2
 80047aa:	4619      	mov	r1, r3
 80047ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ae:	2200      	movs	r2, #0
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	61fa      	str	r2, [r7, #28]
 80047b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047b8:	f7fb fd12 	bl	80001e0 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4613      	mov	r3, r2
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	3301      	adds	r3, #1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047de:	e002      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3750      	adds	r7, #80	; 0x50
 80047ec:	46bd      	mov	sp, r7
 80047ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	007a1200 	.word	0x007a1200

08004800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <HAL_RCC_GetHCLKFreq+0x14>)
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000028 	.word	0x20000028

08004818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800481c:	f7ff fff0 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0a9b      	lsrs	r3, r3, #10
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4903      	ldr	r1, [pc, #12]	; (800483c <HAL_RCC_GetPCLK1Freq+0x24>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	0800fbf4 	.word	0x0800fbf4

08004840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004844:	f7ff ffdc 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0b5b      	lsrs	r3, r3, #13
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	0800fbf4 	.word	0x0800fbf4

08004868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	220f      	movs	r2, #15
 8004876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004878:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_RCC_GetClockConfig+0x5c>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0203 	and.w	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_RCC_GetClockConfig+0x5c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	08db      	lsrs	r3, r3, #3
 80048a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <HAL_RCC_GetClockConfig+0x60>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0207 	and.w	r2, r3, #7
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	601a      	str	r2, [r3, #0]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40023c00 	.word	0x40023c00

080048cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e07b      	b.n	80049d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ee:	d009      	beq.n	8004904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	61da      	str	r2, [r3, #28]
 80048f6:	e005      	b.n	8004904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc ff20 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	ea42 0103 	orr.w	r1, r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	0c1b      	lsrs	r3, r3, #16
 80049a2:	f003 0104 	and.w	r1, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f003 0210 	and.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b088      	sub	sp, #32
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_SPI_Transmit+0x22>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e126      	b.n	8004c4e <HAL_SPI_Transmit+0x270>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a08:	f7fd f922 	bl	8001c50 <HAL_GetTick>
 8004a0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d002      	beq.n	8004a24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a22:	e10b      	b.n	8004c3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Transmit+0x52>
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d102      	bne.n	8004a36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a34:	e102      	b.n	8004c3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	88fa      	ldrh	r2, [r7, #6]
 8004a4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7c:	d10f      	bne.n	8004a9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d007      	beq.n	8004abc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac4:	d14b      	bne.n	8004b5e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Transmit+0xf6>
 8004ace:	8afb      	ldrh	r3, [r7, #22]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d13e      	bne.n	8004b52 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	881a      	ldrh	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	1c9a      	adds	r2, r3, #2
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004af8:	e02b      	b.n	8004b52 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d112      	bne.n	8004b2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	1c9a      	adds	r2, r3, #2
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b2c:	e011      	b.n	8004b52 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b2e:	f7fd f88f 	bl	8001c50 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d803      	bhi.n	8004b46 <HAL_SPI_Transmit+0x168>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d102      	bne.n	8004b4c <HAL_SPI_Transmit+0x16e>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b50:	e074      	b.n	8004c3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1ce      	bne.n	8004afa <HAL_SPI_Transmit+0x11c>
 8004b5c:	e04c      	b.n	8004bf8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_SPI_Transmit+0x18e>
 8004b66:	8afb      	ldrh	r3, [r7, #22]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d140      	bne.n	8004bee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	7812      	ldrb	r2, [r2, #0]
 8004b78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b92:	e02c      	b.n	8004bee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d113      	bne.n	8004bca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	7812      	ldrb	r2, [r2, #0]
 8004bae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bc8:	e011      	b.n	8004bee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bca:	f7fd f841 	bl	8001c50 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d803      	bhi.n	8004be2 <HAL_SPI_Transmit+0x204>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d102      	bne.n	8004be8 <HAL_SPI_Transmit+0x20a>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bec:	e026      	b.n	8004c3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1cd      	bne.n	8004b94 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f8b3 	bl	8004d68 <SPI_EndRxTxTransaction>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e000      	b.n	8004c3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c68:	f7fc fff2 	bl	8001c50 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c78:	f7fc ffea 	bl	8001c50 <HAL_GetTick>
 8004c7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c7e:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	015b      	lsls	r3, r3, #5
 8004c84:	0d1b      	lsrs	r3, r3, #20
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c8e:	e054      	b.n	8004d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d050      	beq.n	8004d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c98:	f7fc ffda 	bl	8001c50 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d902      	bls.n	8004cae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d13d      	bne.n	8004d2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc6:	d111      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd0:	d004      	beq.n	8004cdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cda:	d107      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf4:	d10f      	bne.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e017      	b.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d19b      	bne.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000028 	.word	0x20000028

08004d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d74:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <SPI_EndRxTxTransaction+0x7c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <SPI_EndRxTxTransaction+0x80>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0d5b      	lsrs	r3, r3, #21
 8004d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d92:	d112      	bne.n	8004dba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff ff5a 	bl	8004c58 <SPI_WaitFlagStateUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e00f      	b.n	8004dda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d0f2      	beq.n	8004dba <SPI_EndRxTxTransaction+0x52>
 8004dd4:	e000      	b.n	8004dd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004dd6:	bf00      	nop
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000028 	.word	0x20000028
 8004de8:	165e9f81 	.word	0x165e9f81

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e041      	b.n	8004e82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fcee 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 fa74 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e044      	b.n	8004f2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1e      	ldr	r2, [pc, #120]	; (8004f3c <HAL_TIM_Base_Start_IT+0xb0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d018      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d013      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1a      	ldr	r2, [pc, #104]	; (8004f40 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00e      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <HAL_TIM_Base_Start_IT+0xb8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d009      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <HAL_TIM_Base_Start_IT+0xbc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a16      	ldr	r2, [pc, #88]	; (8004f4c <HAL_TIM_Base_Start_IT+0xc0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d111      	bne.n	8004f1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b06      	cmp	r3, #6
 8004f08:	d010      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1a:	e007      	b.n	8004f2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40000c00 	.word	0x40000c00
 8004f4c:	40014000 	.word	0x40014000

08004f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e041      	b.n	8004fe6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f839 	bl	8004fee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f000 f9c2 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800501e:	2302      	movs	r3, #2
 8005020:	e0ae      	b.n	8005180 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b0c      	cmp	r3, #12
 800502e:	f200 809f 	bhi.w	8005170 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	0800506d 	.word	0x0800506d
 800503c:	08005171 	.word	0x08005171
 8005040:	08005171 	.word	0x08005171
 8005044:	08005171 	.word	0x08005171
 8005048:	080050ad 	.word	0x080050ad
 800504c:	08005171 	.word	0x08005171
 8005050:	08005171 	.word	0x08005171
 8005054:	08005171 	.word	0x08005171
 8005058:	080050ef 	.word	0x080050ef
 800505c:	08005171 	.word	0x08005171
 8005060:	08005171 	.word	0x08005171
 8005064:	08005171 	.word	0x08005171
 8005068:	0800512f 	.word	0x0800512f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f9d0 	bl	8005418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0208 	orr.w	r2, r2, #8
 8005086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0204 	bic.w	r2, r2, #4
 8005096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6999      	ldr	r1, [r3, #24]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	619a      	str	r2, [r3, #24]
      break;
 80050aa:	e064      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fa16 	bl	80054e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6999      	ldr	r1, [r3, #24]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	021a      	lsls	r2, r3, #8
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	619a      	str	r2, [r3, #24]
      break;
 80050ec:	e043      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fa61 	bl	80055bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0208 	orr.w	r2, r2, #8
 8005108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0204 	bic.w	r2, r2, #4
 8005118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69d9      	ldr	r1, [r3, #28]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	61da      	str	r2, [r3, #28]
      break;
 800512c:	e023      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 faab 	bl	8005690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69d9      	ldr	r1, [r3, #28]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	021a      	lsls	r2, r3, #8
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	61da      	str	r2, [r3, #28]
      break;
 800516e:	e002      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	75fb      	strb	r3, [r7, #23]
      break;
 8005174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIM_ConfigClockSource+0x1c>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e0b4      	b.n	800530e <HAL_TIM_ConfigClockSource+0x186>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051dc:	d03e      	beq.n	800525c <HAL_TIM_ConfigClockSource+0xd4>
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e2:	f200 8087 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ea:	f000 8086 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x172>
 80051ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f2:	d87f      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b70      	cmp	r3, #112	; 0x70
 80051f6:	d01a      	beq.n	800522e <HAL_TIM_ConfigClockSource+0xa6>
 80051f8:	2b70      	cmp	r3, #112	; 0x70
 80051fa:	d87b      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d050      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005200:	2b60      	cmp	r3, #96	; 0x60
 8005202:	d877      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b50      	cmp	r3, #80	; 0x50
 8005206:	d03c      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0xfa>
 8005208:	2b50      	cmp	r3, #80	; 0x50
 800520a:	d873      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d058      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d86f      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b30      	cmp	r3, #48	; 0x30
 8005216:	d064      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005218:	2b30      	cmp	r3, #48	; 0x30
 800521a:	d86b      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b20      	cmp	r3, #32
 800521e:	d060      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005220:	2b20      	cmp	r3, #32
 8005222:	d867      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	2b10      	cmp	r3, #16
 800522a:	d05a      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 800522c:	e062      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6899      	ldr	r1, [r3, #8]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f000 faf1 	bl	8005824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	609a      	str	r2, [r3, #8]
      break;
 800525a:	e04f      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f000 fada 	bl	8005824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800527e:	609a      	str	r2, [r3, #8]
      break;
 8005280:	e03c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	461a      	mov	r2, r3
 8005290:	f000 fa4e 	bl	8005730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2150      	movs	r1, #80	; 0x50
 800529a:	4618      	mov	r0, r3
 800529c:	f000 faa7 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 80052a0:	e02c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f000 fa6d 	bl	800578e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2160      	movs	r1, #96	; 0x60
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fa97 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 80052c0:	e01c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 fa2e 	bl	8005730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2140      	movs	r1, #64	; 0x40
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fa87 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 80052e0:	e00c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f000 fa7e 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 80052f2:	e003      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      break;
 80052f8:	e000      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a34      	ldr	r2, [pc, #208]	; (80053fc <TIM_Base_SetConfig+0xe4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00f      	beq.n	8005350 <TIM_Base_SetConfig+0x38>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005336:	d00b      	beq.n	8005350 <TIM_Base_SetConfig+0x38>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a31      	ldr	r2, [pc, #196]	; (8005400 <TIM_Base_SetConfig+0xe8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d007      	beq.n	8005350 <TIM_Base_SetConfig+0x38>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a30      	ldr	r2, [pc, #192]	; (8005404 <TIM_Base_SetConfig+0xec>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_Base_SetConfig+0x38>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a2f      	ldr	r2, [pc, #188]	; (8005408 <TIM_Base_SetConfig+0xf0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d108      	bne.n	8005362 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a25      	ldr	r2, [pc, #148]	; (80053fc <TIM_Base_SetConfig+0xe4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01b      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005370:	d017      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a22      	ldr	r2, [pc, #136]	; (8005400 <TIM_Base_SetConfig+0xe8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a21      	ldr	r2, [pc, #132]	; (8005404 <TIM_Base_SetConfig+0xec>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a20      	ldr	r2, [pc, #128]	; (8005408 <TIM_Base_SetConfig+0xf0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1f      	ldr	r2, [pc, #124]	; (800540c <TIM_Base_SetConfig+0xf4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <TIM_Base_SetConfig+0xf8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <TIM_Base_SetConfig+0xfc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a08      	ldr	r2, [pc, #32]	; (80053fc <TIM_Base_SetConfig+0xe4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d103      	bne.n	80053e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	615a      	str	r2, [r3, #20]
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0302 	bic.w	r3, r3, #2
 8005460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <TIM_OC1_SetConfig+0xc8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0308 	bic.w	r3, r3, #8
 800547a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <TIM_OC1_SetConfig+0xc8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d111      	bne.n	80054ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800549c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010000 	.word	0x40010000

080054e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0210 	bic.w	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0320 	bic.w	r3, r3, #32
 800552e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <TIM_OC2_SetConfig+0xd4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d10d      	bne.n	8005560 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <TIM_OC2_SetConfig+0xd4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d113      	bne.n	8005590 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800556e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000

080055bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0303 	bic.w	r3, r3, #3
 80055f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <TIM_OC3_SetConfig+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d10d      	bne.n	8005636 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a14      	ldr	r2, [pc, #80]	; (800568c <TIM_OC3_SetConfig+0xd0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d113      	bne.n	8005666 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800564c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	621a      	str	r2, [r3, #32]
}
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	40010000 	.word	0x40010000

08005690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	031b      	lsls	r3, r3, #12
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a10      	ldr	r2, [pc, #64]	; (800572c <TIM_OC4_SetConfig+0x9c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d109      	bne.n	8005704 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	019b      	lsls	r3, r3, #6
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000

08005730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0201 	bic.w	r2, r3, #1
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800575a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f023 030a 	bic.w	r3, r3, #10
 800576c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578e:	b480      	push	{r7}
 8005790:	b087      	sub	sp, #28
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 0210 	bic.w	r2, r3, #16
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	031b      	lsls	r3, r3, #12
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	f043 0307 	orr.w	r3, r3, #7
 8005810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	021a      	lsls	r2, r3, #8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	431a      	orrs	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4313      	orrs	r3, r2
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005878:	2302      	movs	r3, #2
 800587a:	e050      	b.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1c      	ldr	r2, [pc, #112]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d018      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c8:	d013      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a18      	ldr	r2, [pc, #96]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a16      	ldr	r2, [pc, #88]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d009      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a15      	ldr	r2, [pc, #84]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a13      	ldr	r2, [pc, #76]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10c      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4313      	orrs	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40014000 	.word	0x40014000

08005940 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005940:	b084      	sub	sp, #16
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	f107 001c 	add.w	r0, r7, #28
 800594e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	2b01      	cmp	r3, #1
 8005956:	d122      	bne.n	800599e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800596c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d105      	bne.n	8005992 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f001 fbee 	bl	8007174 <USB_CoreReset>
 8005998:	4603      	mov	r3, r0
 800599a:	73fb      	strb	r3, [r7, #15]
 800599c:	e01a      	b.n	80059d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fbe2 	bl	8007174 <USB_CoreReset>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
 80059c6:	e005      	b.n	80059d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d10b      	bne.n	80059f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f043 0206 	orr.w	r2, r3, #6
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f043 0220 	orr.w	r2, r3, #32
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059fe:	b004      	add	sp, #16
 8005a00:	4770      	bx	lr
	...

08005a04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d165      	bne.n	8005ae4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4a41      	ldr	r2, [pc, #260]	; (8005b20 <USB_SetTurnaroundTime+0x11c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d906      	bls.n	8005a2e <USB_SetTurnaroundTime+0x2a>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4a40      	ldr	r2, [pc, #256]	; (8005b24 <USB_SetTurnaroundTime+0x120>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d202      	bcs.n	8005a2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a28:	230f      	movs	r3, #15
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e062      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	4a3c      	ldr	r2, [pc, #240]	; (8005b24 <USB_SetTurnaroundTime+0x120>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d306      	bcc.n	8005a44 <USB_SetTurnaroundTime+0x40>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	4a3b      	ldr	r2, [pc, #236]	; (8005b28 <USB_SetTurnaroundTime+0x124>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d202      	bcs.n	8005a44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a3e:	230e      	movs	r3, #14
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	e057      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4a38      	ldr	r2, [pc, #224]	; (8005b28 <USB_SetTurnaroundTime+0x124>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d306      	bcc.n	8005a5a <USB_SetTurnaroundTime+0x56>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4a37      	ldr	r2, [pc, #220]	; (8005b2c <USB_SetTurnaroundTime+0x128>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d202      	bcs.n	8005a5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a54:	230d      	movs	r3, #13
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e04c      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4a33      	ldr	r2, [pc, #204]	; (8005b2c <USB_SetTurnaroundTime+0x128>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d306      	bcc.n	8005a70 <USB_SetTurnaroundTime+0x6c>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4a32      	ldr	r2, [pc, #200]	; (8005b30 <USB_SetTurnaroundTime+0x12c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d802      	bhi.n	8005a70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a6a:	230c      	movs	r3, #12
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e041      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4a2f      	ldr	r2, [pc, #188]	; (8005b30 <USB_SetTurnaroundTime+0x12c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d906      	bls.n	8005a86 <USB_SetTurnaroundTime+0x82>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4a2e      	ldr	r2, [pc, #184]	; (8005b34 <USB_SetTurnaroundTime+0x130>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d802      	bhi.n	8005a86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a80:	230b      	movs	r3, #11
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e036      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <USB_SetTurnaroundTime+0x130>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d906      	bls.n	8005a9c <USB_SetTurnaroundTime+0x98>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4a29      	ldr	r2, [pc, #164]	; (8005b38 <USB_SetTurnaroundTime+0x134>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d802      	bhi.n	8005a9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a96:	230a      	movs	r3, #10
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e02b      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4a26      	ldr	r2, [pc, #152]	; (8005b38 <USB_SetTurnaroundTime+0x134>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d906      	bls.n	8005ab2 <USB_SetTurnaroundTime+0xae>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <USB_SetTurnaroundTime+0x138>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d202      	bcs.n	8005ab2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005aac:	2309      	movs	r3, #9
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e020      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <USB_SetTurnaroundTime+0x138>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d306      	bcc.n	8005ac8 <USB_SetTurnaroundTime+0xc4>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <USB_SetTurnaroundTime+0x13c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d802      	bhi.n	8005ac8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	e015      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <USB_SetTurnaroundTime+0x13c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d906      	bls.n	8005ade <USB_SetTurnaroundTime+0xda>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <USB_SetTurnaroundTime+0x140>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d202      	bcs.n	8005ade <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ad8:	2307      	movs	r3, #7
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e00a      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ade:	2306      	movs	r3, #6
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e007      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005aea:	2309      	movs	r3, #9
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	e001      	b.n	8005af4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005af0:	2309      	movs	r3, #9
 8005af2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	00d8acbf 	.word	0x00d8acbf
 8005b24:	00e4e1c0 	.word	0x00e4e1c0
 8005b28:	00f42400 	.word	0x00f42400
 8005b2c:	01067380 	.word	0x01067380
 8005b30:	011a499f 	.word	0x011a499f
 8005b34:	01312cff 	.word	0x01312cff
 8005b38:	014ca43f 	.word	0x014ca43f
 8005b3c:	016e3600 	.word	0x016e3600
 8005b40:	01a6ab1f 	.word	0x01a6ab1f
 8005b44:	01e84800 	.word	0x01e84800

08005b48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f043 0201 	orr.w	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f023 0201 	bic.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d115      	bne.n	8005bda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bba:	2001      	movs	r0, #1
 8005bbc:	f7fc f854 	bl	8001c68 <HAL_Delay>
      ms++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fa45 	bl	8007056 <USB_GetMode>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d01e      	beq.n	8005c10 <USB_SetCurrentMode+0x84>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b31      	cmp	r3, #49	; 0x31
 8005bd6:	d9f0      	bls.n	8005bba <USB_SetCurrentMode+0x2e>
 8005bd8:	e01a      	b.n	8005c10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d115      	bne.n	8005c0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bec:	2001      	movs	r0, #1
 8005bee:	f7fc f83b 	bl	8001c68 <HAL_Delay>
      ms++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 fa2c 	bl	8007056 <USB_GetMode>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <USB_SetCurrentMode+0x84>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b31      	cmp	r3, #49	; 0x31
 8005c08:	d9f0      	bls.n	8005bec <USB_SetCurrentMode+0x60>
 8005c0a:	e001      	b.n	8005c10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e005      	b.n	8005c1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b32      	cmp	r3, #50	; 0x32
 8005c14:	d101      	bne.n	8005c1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c24:	b084      	sub	sp, #16
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b086      	sub	sp, #24
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	e009      	b.n	8005c58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	3340      	adds	r3, #64	; 0x40
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	2200      	movs	r2, #0
 8005c50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	3301      	adds	r3, #1
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b0e      	cmp	r3, #14
 8005c5c:	d9f2      	bls.n	8005c44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11c      	bne.n	8005c9e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c72:	f043 0302 	orr.w	r3, r3, #2
 8005c76:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c9c:	e00b      	b.n	8005cb6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc8:	4619      	mov	r1, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	680b      	ldr	r3, [r1, #0]
 8005cd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d10c      	bne.n	8005cf6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f965 	bl	8005fb4 <USB_SetDevSpeed>
 8005cea:	e008      	b.n	8005cfe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cec:	2101      	movs	r1, #1
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f960 	bl	8005fb4 <USB_SetDevSpeed>
 8005cf4:	e003      	b.n	8005cfe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cf6:	2103      	movs	r1, #3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f95b 	bl	8005fb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cfe:	2110      	movs	r1, #16
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f8f3 	bl	8005eec <USB_FlushTxFifo>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f91f 	bl	8005f54 <USB_FlushRxFifo>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	461a      	mov	r2, r3
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d32:	461a      	mov	r2, r3
 8005d34:	2300      	movs	r3, #0
 8005d36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2300      	movs	r3, #0
 8005d42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d44:	2300      	movs	r3, #0
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	e043      	b.n	8005dd2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d60:	d118      	bne.n	8005d94 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d74:	461a      	mov	r2, r3
 8005d76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	e013      	b.n	8005da6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e008      	b.n	8005da6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	461a      	mov	r2, r3
 8005da2:	2300      	movs	r3, #0
 8005da4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db2:	461a      	mov	r2, r3
 8005db4:	2300      	movs	r3, #0
 8005db6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d3b7      	bcc.n	8005d4a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dda:	2300      	movs	r3, #0
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	e043      	b.n	8005e68 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df6:	d118      	bne.n	8005e2a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e013      	b.n	8005e3c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e20:	461a      	mov	r2, r3
 8005e22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e008      	b.n	8005e3c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	461a      	mov	r2, r3
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	461a      	mov	r2, r3
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	3301      	adds	r3, #1
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d3b7      	bcc.n	8005de0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f043 0210 	orr.w	r2, r3, #16
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699a      	ldr	r2, [r3, #24]
 8005ea8:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <USB_DevInit+0x2c4>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f043 0208 	orr.w	r2, r3, #8
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d107      	bne.n	8005ed8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed0:	f043 0304 	orr.w	r3, r3, #4
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ee4:	b004      	add	sp, #16
 8005ee6:	4770      	bx	lr
 8005ee8:	803c3800 	.word	0x803c3800

08005eec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3301      	adds	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a13      	ldr	r2, [pc, #76]	; (8005f50 <USB_FlushTxFifo+0x64>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d901      	bls.n	8005f0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e01b      	b.n	8005f44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	daf2      	bge.n	8005efa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	019b      	lsls	r3, r3, #6
 8005f1c:	f043 0220 	orr.w	r2, r3, #32
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <USB_FlushTxFifo+0x64>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e006      	b.n	8005f44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d0f0      	beq.n	8005f24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	00030d40 	.word	0x00030d40

08005f54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <USB_FlushRxFifo+0x5c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e018      	b.n	8005fa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	daf2      	bge.n	8005f60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2210      	movs	r2, #16
 8005f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4a08      	ldr	r2, [pc, #32]	; (8005fb0 <USB_FlushRxFifo+0x5c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e006      	b.n	8005fa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b10      	cmp	r3, #16
 8005fa0:	d0f0      	beq.n	8005f84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	00030d40 	.word	0x00030d40

08005fb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	68f9      	ldr	r1, [r7, #12]
 8005fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b087      	sub	sp, #28
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0306 	and.w	r3, r3, #6
 8005ffe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006006:	2300      	movs	r3, #0
 8006008:	75fb      	strb	r3, [r7, #23]
 800600a:	e00a      	b.n	8006022 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d002      	beq.n	8006018 <USB_GetDevSpeed+0x32>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b06      	cmp	r3, #6
 8006016:	d102      	bne.n	800601e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006018:	2302      	movs	r3, #2
 800601a:	75fb      	strb	r3, [r7, #23]
 800601c:	e001      	b.n	8006022 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800601e:	230f      	movs	r3, #15
 8006020:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006022:	7dfb      	ldrb	r3, [r7, #23]
}
 8006024:	4618      	mov	r0, r3
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d13a      	bne.n	80060c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	b29b      	uxth	r3, r3
 8006064:	68f9      	ldr	r1, [r7, #12]
 8006066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800606a:	4313      	orrs	r3, r2
 800606c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d155      	bne.n	8006130 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	791b      	ldrb	r3, [r3, #4]
 800609e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	059b      	lsls	r3, r3, #22
 80060a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060a8:	4313      	orrs	r3, r2
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	e036      	b.n	8006130 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	69da      	ldr	r2, [r3, #28]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	2101      	movs	r1, #1
 80060d4:	fa01 f303 	lsl.w	r3, r1, r3
 80060d8:	041b      	lsls	r3, r3, #16
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e0:	4313      	orrs	r3, r2
 80060e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d11a      	bne.n	8006130 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	791b      	ldrb	r3, [r3, #4]
 8006114:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006116:	430b      	orrs	r3, r1
 8006118:	4313      	orrs	r3, r2
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d161      	bne.n	8006220 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800616e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006172:	d11f      	bne.n	80061b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006192:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	43db      	mvns	r3, r3
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061d4:	4013      	ands	r3, r2
 80061d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	2101      	movs	r1, #1
 80061ea:	fa01 f303 	lsl.w	r3, r1, r3
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f8:	4013      	ands	r3, r2
 80061fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	0159      	lsls	r1, r3, #5
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	440b      	add	r3, r1
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	4619      	mov	r1, r3
 8006218:	4b35      	ldr	r3, [pc, #212]	; (80062f0 <USB_DeactivateEndpoint+0x1b0>)
 800621a:	4013      	ands	r3, r2
 800621c:	600b      	str	r3, [r1, #0]
 800621e:	e060      	b.n	80062e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006236:	d11f      	bne.n	8006278 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006252:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006256:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006276:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	2101      	movs	r1, #1
 800628a:	fa01 f303 	lsl.w	r3, r1, r3
 800628e:	041b      	lsls	r3, r3, #16
 8006290:	43db      	mvns	r3, r3
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006298:	4013      	ands	r3, r2
 800629a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	2101      	movs	r1, #1
 80062ae:	fa01 f303 	lsl.w	r3, r1, r3
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	43db      	mvns	r3, r3
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062bc:	4013      	ands	r3, r2
 80062be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	0159      	lsls	r1, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	440b      	add	r3, r1
 80062d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062da:	4619      	mov	r1, r3
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <USB_DeactivateEndpoint+0x1b4>)
 80062de:	4013      	ands	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	ec337800 	.word	0xec337800
 80062f4:	eff37800 	.word	0xeff37800

080062f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	; 0x28
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	785b      	ldrb	r3, [r3, #1]
 8006314:	2b01      	cmp	r3, #1
 8006316:	f040 815c 	bne.w	80065d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d132      	bne.n	8006388 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006340:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006344:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006364:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006380:	0cdb      	lsrs	r3, r3, #19
 8006382:	04db      	lsls	r3, r3, #19
 8006384:	6113      	str	r3, [r2, #16]
 8006386:	e074      	b.n	8006472 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a2:	0cdb      	lsrs	r3, r3, #19
 80063a4:	04db      	lsls	r3, r3, #19
 80063a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	440b      	add	r3, r1
 80063e4:	1e59      	subs	r1, r3, #1
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80063ee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063f0:	4b9d      	ldr	r3, [pc, #628]	; (8006668 <USB_EPStartXfer+0x370>)
 80063f2:	400b      	ands	r3, r1
 80063f4:	69b9      	ldr	r1, [r7, #24]
 80063f6:	0148      	lsls	r0, r1, #5
 80063f8:	69f9      	ldr	r1, [r7, #28]
 80063fa:	4401      	add	r1, r0
 80063fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006400:	4313      	orrs	r3, r2
 8006402:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800641a:	69b9      	ldr	r1, [r7, #24]
 800641c:	0148      	lsls	r0, r1, #5
 800641e:	69f9      	ldr	r1, [r7, #28]
 8006420:	4401      	add	r1, r0
 8006422:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006426:	4313      	orrs	r3, r2
 8006428:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	791b      	ldrb	r3, [r3, #4]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d11f      	bne.n	8006472 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006450:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006470:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d14b      	bne.n	8006510 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	461a      	mov	r2, r3
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	791b      	ldrb	r3, [r3, #4]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d128      	bne.n	80064ee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d110      	bne.n	80064ce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	0151      	lsls	r1, r2, #5
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	440a      	add	r2, r1
 80064c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	e00f      	b.n	80064ee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	440a      	add	r2, r1
 8006504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006508:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e133      	b.n	8006778 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800652e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	791b      	ldrb	r3, [r3, #4]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d015      	beq.n	8006564 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 811b 	beq.w	8006778 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	2101      	movs	r1, #1
 8006554:	fa01 f303 	lsl.w	r3, r1, r3
 8006558:	69f9      	ldr	r1, [r7, #28]
 800655a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800655e:	4313      	orrs	r3, r2
 8006560:	634b      	str	r3, [r1, #52]	; 0x34
 8006562:	e109      	b.n	8006778 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006570:	2b00      	cmp	r3, #0
 8006572:	d110      	bne.n	8006596 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	e00f      	b.n	80065b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6919      	ldr	r1, [r3, #16]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	b298      	uxth	r0, r3
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4603      	mov	r3, r0
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fade 	bl	8006b8c <USB_WritePacket>
 80065d0:	e0d2      	b.n	8006778 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	0cdb      	lsrs	r3, r3, #19
 80065ee:	04db      	lsls	r3, r3, #19
 80065f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	440a      	add	r2, r1
 8006608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006610:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006614:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d126      	bne.n	800666c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006634:	69b9      	ldr	r1, [r7, #24]
 8006636:	0148      	lsls	r0, r1, #5
 8006638:	69f9      	ldr	r1, [r7, #28]
 800663a:	4401      	add	r1, r0
 800663c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006640:	4313      	orrs	r3, r2
 8006642:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	440a      	add	r2, r1
 800665a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006662:	6113      	str	r3, [r2, #16]
 8006664:	e03a      	b.n	80066dc <USB_EPStartXfer+0x3e4>
 8006666:	bf00      	nop
 8006668:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	4413      	add	r3, r2
 8006676:	1e5a      	subs	r2, r3, #1
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006680:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	8afa      	ldrh	r2, [r7, #22]
 8006688:	fb03 f202 	mul.w	r2, r3, r2
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	8afb      	ldrh	r3, [r7, #22]
 80066a0:	04d9      	lsls	r1, r3, #19
 80066a2:	4b38      	ldr	r3, [pc, #224]	; (8006784 <USB_EPStartXfer+0x48c>)
 80066a4:	400b      	ands	r3, r1
 80066a6:	69b9      	ldr	r1, [r7, #24]
 80066a8:	0148      	lsls	r0, r1, #5
 80066aa:	69f9      	ldr	r1, [r7, #28]
 80066ac:	4401      	add	r1, r0
 80066ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066b2:	4313      	orrs	r3, r2
 80066b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066cc:	69b9      	ldr	r1, [r7, #24]
 80066ce:	0148      	lsls	r0, r1, #5
 80066d0:	69f9      	ldr	r1, [r7, #28]
 80066d2:	4401      	add	r1, r0
 80066d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066d8:	4313      	orrs	r3, r2
 80066da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d10d      	bne.n	80066fe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6919      	ldr	r1, [r3, #16]
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fa:	460a      	mov	r2, r1
 80066fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	791b      	ldrb	r3, [r3, #4]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d128      	bne.n	8006758 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d110      	bne.n	8006738 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006730:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	e00f      	b.n	8006758 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006756:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006772:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006776:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	1ff80000 	.word	0x1ff80000

08006788 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	f040 80ce 	bne.w	8006946 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d132      	bne.n	8006818 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006810:	0cdb      	lsrs	r3, r3, #19
 8006812:	04db      	lsls	r3, r3, #19
 8006814:	6113      	str	r3, [r2, #16]
 8006816:	e04e      	b.n	80068b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	440a      	add	r2, r1
 800682e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006832:	0cdb      	lsrs	r3, r3, #19
 8006834:	04db      	lsls	r3, r3, #19
 8006836:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006852:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006856:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800685a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d903      	bls.n	8006870 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	440a      	add	r2, r1
 8006886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800688e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a6:	6939      	ldr	r1, [r7, #16]
 80068a8:	0148      	lsls	r0, r1, #5
 80068aa:	6979      	ldr	r1, [r7, #20]
 80068ac:	4401      	add	r1, r0
 80068ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068b2:	4313      	orrs	r3, r2
 80068b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d11e      	bne.n	80068fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d009      	beq.n	80068d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	461a      	mov	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	0151      	lsls	r1, r2, #5
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	440a      	add	r2, r1
 80068ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	e097      	b.n	8006a2a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	440a      	add	r2, r1
 8006910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006914:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006918:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8083 	beq.w	8006a2a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	2101      	movs	r1, #1
 8006936:	fa01 f303 	lsl.w	r3, r1, r3
 800693a:	6979      	ldr	r1, [r7, #20]
 800693c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006940:	4313      	orrs	r3, r2
 8006942:	634b      	str	r3, [r1, #52]	; 0x34
 8006944:	e071      	b.n	8006a2a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	440a      	add	r2, r1
 800695c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006960:	0cdb      	lsrs	r3, r3, #19
 8006962:	04db      	lsls	r3, r3, #19
 8006964:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	440a      	add	r2, r1
 800697c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006980:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006984:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006988:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069d8:	6939      	ldr	r1, [r7, #16]
 80069da:	0148      	lsls	r0, r1, #5
 80069dc:	6979      	ldr	r1, [r7, #20]
 80069de:	4401      	add	r1, r0
 80069e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069e4:	4313      	orrs	r3, r2
 80069e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d10d      	bne.n	8006a0a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	6919      	ldr	r1, [r3, #16]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a06:	460a      	mov	r2, r1
 8006a08:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d14a      	bne.n	8006aec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a6e:	f040 8086 	bne.w	8006b7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	7812      	ldrb	r2, [r2, #0]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ab8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d902      	bls.n	8006ad0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ace:	e056      	b.n	8006b7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae8:	d0e7      	beq.n	8006aba <USB_EPStopXfer+0x82>
 8006aea:	e048      	b.n	8006b7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b04:	d13b      	bne.n	8006b7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	7812      	ldrb	r2, [r2, #0]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d902      	bls.n	8006b64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	75fb      	strb	r3, [r7, #23]
          break;
 8006b62:	e00c      	b.n	8006b7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b7c:	d0e7      	beq.n	8006b4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b089      	sub	sp, #36	; 0x24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4611      	mov	r1, r2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	71fb      	strb	r3, [r7, #7]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006baa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d123      	bne.n	8006bfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bb2:	88bb      	ldrh	r3, [r7, #4]
 8006bb4:	3303      	adds	r3, #3
 8006bb6:	089b      	lsrs	r3, r3, #2
 8006bb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	e018      	b.n	8006bf2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	031a      	lsls	r2, r3, #12
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bcc:	461a      	mov	r2, r3
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	3301      	adds	r3, #1
 8006be4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	3301      	adds	r3, #1
 8006bea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d3e2      	bcc.n	8006bc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3724      	adds	r7, #36	; 0x24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b08b      	sub	sp, #44	; 0x2c
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	089b      	lsrs	r3, r3, #2
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c26:	88fb      	ldrh	r3, [r7, #6]
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	623b      	str	r3, [r7, #32]
 8006c32:	e014      	b.n	8006c5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	3301      	adds	r3, #1
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	3301      	adds	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	3301      	adds	r3, #1
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	3301      	adds	r3, #1
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	623b      	str	r3, [r7, #32]
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d3e6      	bcc.n	8006c34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c66:	8bfb      	ldrh	r3, [r7, #30]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01e      	beq.n	8006caa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c76:	461a      	mov	r2, r3
 8006c78:	f107 0310 	add.w	r3, r7, #16
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	701a      	strb	r2, [r3, #0]
      i++;
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	3301      	adds	r3, #1
 8006c96:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c9e:	8bfb      	ldrh	r3, [r7, #30]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ca4:	8bfb      	ldrh	r3, [r7, #30]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1ea      	bne.n	8006c80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	372c      	adds	r7, #44	; 0x2c
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d12c      	bne.n	8006d2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	db12      	blt.n	8006d0c <USB_EPSetStall+0x54>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00f      	beq.n	8006d0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	e02b      	b.n	8006d86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	db12      	blt.n	8006d66 <USB_EPSetStall+0xae>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00f      	beq.n	8006d66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	785b      	ldrb	r3, [r3, #1]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d128      	bne.n	8006e02 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	0151      	lsls	r1, r2, #5
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	440a      	add	r2, r1
 8006dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	791b      	ldrb	r3, [r3, #4]
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d003      	beq.n	8006de0 <USB_EPClearStall+0x4c>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	791b      	ldrb	r3, [r3, #4]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d138      	bne.n	8006e52 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	e027      	b.n	8006e52 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	791b      	ldrb	r3, [r3, #4]
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d003      	beq.n	8006e32 <USB_EPClearStall+0x9e>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	791b      	ldrb	r3, [r3, #4]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d10f      	bne.n	8006e52 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e50:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e82:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eda:	f023 0302 	bic.w	r3, r3, #2
 8006ede:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f08:	f023 0303 	bic.w	r3, r3, #3
 8006f0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f1c:	f043 0302 	orr.w	r3, r3, #2
 8006f20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4013      	ands	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f48:	68fb      	ldr	r3, [r7, #12]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b085      	sub	sp, #20
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	4013      	ands	r3, r2
 8006f78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	0c1b      	lsrs	r3, r3, #16
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b085      	sub	sp, #20
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	4013      	ands	r3, r2
 8006fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	b29b      	uxth	r3, r3
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fec:	68bb      	ldr	r3, [r7, #8]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b087      	sub	sp, #28
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800701e:	78fb      	ldrb	r3, [r7, #3]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	fa22 f303 	lsr.w	r3, r2, r3
 800702a:	01db      	lsls	r3, r3, #7
 800702c:	b2db      	uxtb	r3, r3
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4013      	ands	r3, r2
 8007046:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007048:	68bb      	ldr	r3, [r7, #8]
}
 800704a:	4618      	mov	r0, r3
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f003 0301 	and.w	r3, r3, #1
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007090:	f023 0307 	bic.w	r3, r3, #7
 8007094:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	460b      	mov	r3, r1
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	333c      	adds	r3, #60	; 0x3c
 80070ce:	3304      	adds	r3, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4a26      	ldr	r2, [pc, #152]	; (8007170 <USB_EP0_OutStart+0xb8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d90a      	bls.n	80070f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ec:	d101      	bne.n	80070f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e037      	b.n	8007162 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f8:	461a      	mov	r2, r3
 80070fa:	2300      	movs	r3, #0
 80070fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007120:	f043 0318 	orr.w	r3, r3, #24
 8007124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007134:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007138:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800713a:	7afb      	ldrb	r3, [r7, #11]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10f      	bne.n	8007160 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800715e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	4f54300a 	.word	0x4f54300a

08007174 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3301      	adds	r3, #1
 8007184:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4a13      	ldr	r2, [pc, #76]	; (80071d8 <USB_CoreReset+0x64>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d901      	bls.n	8007192 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e01b      	b.n	80071ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	daf2      	bge.n	8007180 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f043 0201 	orr.w	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <USB_CoreReset+0x64>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d901      	bls.n	80071bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e006      	b.n	80071ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d0f0      	beq.n	80071aa <USB_CoreReset+0x36>

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	00030d40 	.word	0x00030d40

080071dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071ec:	f005 f9dc 	bl	800c5a8 <USBD_static_malloc>
 80071f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d109      	bne.n	800720c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	32b0      	adds	r2, #176	; 0xb0
 8007202:	2100      	movs	r1, #0
 8007204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007208:	2302      	movs	r3, #2
 800720a:	e0d4      	b.n	80073b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800720c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007210:	2100      	movs	r1, #0
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f005 fb46 	bl	800c8a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	32b0      	adds	r2, #176	; 0xb0
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32b0      	adds	r2, #176	; 0xb0
 8007232:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	7c1b      	ldrb	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d138      	bne.n	80072b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007244:	4b5e      	ldr	r3, [pc, #376]	; (80073c0 <USBD_CDC_Init+0x1e4>)
 8007246:	7819      	ldrb	r1, [r3, #0]
 8007248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800724c:	2202      	movs	r2, #2
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f005 f887 	bl	800c362 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007254:	4b5a      	ldr	r3, [pc, #360]	; (80073c0 <USBD_CDC_Init+0x1e4>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	f003 020f 	and.w	r2, r3, #15
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	3324      	adds	r3, #36	; 0x24
 800726a:	2201      	movs	r2, #1
 800726c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800726e:	4b55      	ldr	r3, [pc, #340]	; (80073c4 <USBD_CDC_Init+0x1e8>)
 8007270:	7819      	ldrb	r1, [r3, #0]
 8007272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007276:	2202      	movs	r2, #2
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f005 f872 	bl	800c362 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800727e:	4b51      	ldr	r3, [pc, #324]	; (80073c4 <USBD_CDC_Init+0x1e8>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 020f 	and.w	r2, r3, #15
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	440b      	add	r3, r1
 8007292:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007296:	2201      	movs	r2, #1
 8007298:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800729a:	4b4b      	ldr	r3, [pc, #300]	; (80073c8 <USBD_CDC_Init+0x1ec>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	f003 020f 	and.w	r2, r3, #15
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	440b      	add	r3, r1
 80072ae:	3326      	adds	r3, #38	; 0x26
 80072b0:	2210      	movs	r2, #16
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e035      	b.n	8007322 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072b6:	4b42      	ldr	r3, [pc, #264]	; (80073c0 <USBD_CDC_Init+0x1e4>)
 80072b8:	7819      	ldrb	r1, [r3, #0]
 80072ba:	2340      	movs	r3, #64	; 0x40
 80072bc:	2202      	movs	r2, #2
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f005 f84f 	bl	800c362 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072c4:	4b3e      	ldr	r3, [pc, #248]	; (80073c0 <USBD_CDC_Init+0x1e4>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	f003 020f 	and.w	r2, r3, #15
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	3324      	adds	r3, #36	; 0x24
 80072da:	2201      	movs	r2, #1
 80072dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072de:	4b39      	ldr	r3, [pc, #228]	; (80073c4 <USBD_CDC_Init+0x1e8>)
 80072e0:	7819      	ldrb	r1, [r3, #0]
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	2202      	movs	r2, #2
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f005 f83b 	bl	800c362 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072ec:	4b35      	ldr	r3, [pc, #212]	; (80073c4 <USBD_CDC_Init+0x1e8>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 020f 	and.w	r2, r3, #15
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007304:	2201      	movs	r2, #1
 8007306:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007308:	4b2f      	ldr	r3, [pc, #188]	; (80073c8 <USBD_CDC_Init+0x1ec>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	f003 020f 	and.w	r2, r3, #15
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	3326      	adds	r3, #38	; 0x26
 800731e:	2210      	movs	r2, #16
 8007320:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007322:	4b29      	ldr	r3, [pc, #164]	; (80073c8 <USBD_CDC_Init+0x1ec>)
 8007324:	7819      	ldrb	r1, [r3, #0]
 8007326:	2308      	movs	r3, #8
 8007328:	2203      	movs	r2, #3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f005 f819 	bl	800c362 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007330:	4b25      	ldr	r3, [pc, #148]	; (80073c8 <USBD_CDC_Init+0x1ec>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	f003 020f 	and.w	r2, r3, #15
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	440b      	add	r3, r1
 8007344:	3324      	adds	r3, #36	; 0x24
 8007346:	2201      	movs	r2, #1
 8007348:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	33b0      	adds	r3, #176	; 0xb0
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007380:	2302      	movs	r3, #2
 8007382:	e018      	b.n	80073b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7c1b      	ldrb	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800738c:	4b0d      	ldr	r3, [pc, #52]	; (80073c4 <USBD_CDC_Init+0x1e8>)
 800738e:	7819      	ldrb	r1, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f005 f8d0 	bl	800c540 <USBD_LL_PrepareReceive>
 80073a0:	e008      	b.n	80073b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <USBD_CDC_Init+0x1e8>)
 80073a4:	7819      	ldrb	r1, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073ac:	2340      	movs	r3, #64	; 0x40
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f005 f8c6 	bl	800c540 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	200000bb 	.word	0x200000bb
 80073c4:	200000bc 	.word	0x200000bc
 80073c8:	200000bd 	.word	0x200000bd

080073cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80073d8:	4b3a      	ldr	r3, [pc, #232]	; (80074c4 <USBD_CDC_DeInit+0xf8>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f004 ffe5 	bl	800c3ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80073e4:	4b37      	ldr	r3, [pc, #220]	; (80074c4 <USBD_CDC_DeInit+0xf8>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	440b      	add	r3, r1
 80073f8:	3324      	adds	r3, #36	; 0x24
 80073fa:	2200      	movs	r2, #0
 80073fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80073fe:	4b32      	ldr	r3, [pc, #200]	; (80074c8 <USBD_CDC_DeInit+0xfc>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f004 ffd2 	bl	800c3ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800740a:	4b2f      	ldr	r3, [pc, #188]	; (80074c8 <USBD_CDC_DeInit+0xfc>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	f003 020f 	and.w	r2, r3, #15
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007422:	2200      	movs	r2, #0
 8007424:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007426:	4b29      	ldr	r3, [pc, #164]	; (80074cc <USBD_CDC_DeInit+0x100>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f004 ffbe 	bl	800c3ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007432:	4b26      	ldr	r3, [pc, #152]	; (80074cc <USBD_CDC_DeInit+0x100>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	f003 020f 	and.w	r2, r3, #15
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	3324      	adds	r3, #36	; 0x24
 8007448:	2200      	movs	r2, #0
 800744a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800744c:	4b1f      	ldr	r3, [pc, #124]	; (80074cc <USBD_CDC_DeInit+0x100>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 020f 	and.w	r2, r3, #15
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	3326      	adds	r3, #38	; 0x26
 8007462:	2200      	movs	r2, #0
 8007464:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	32b0      	adds	r2, #176	; 0xb0
 8007470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01f      	beq.n	80074b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	33b0      	adds	r3, #176	; 0xb0
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32b0      	adds	r2, #176	; 0xb0
 8007496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749a:	4618      	mov	r0, r3
 800749c:	f005 f892 	bl	800c5c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32b0      	adds	r2, #176	; 0xb0
 80074aa:	2100      	movs	r1, #0
 80074ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200000bb 	.word	0x200000bb
 80074c8:	200000bc 	.word	0x200000bc
 80074cc:	200000bd 	.word	0x200000bd

080074d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	32b0      	adds	r2, #176	; 0xb0
 80074e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e0bf      	b.n	8007680 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007508:	2b00      	cmp	r3, #0
 800750a:	d050      	beq.n	80075ae <USBD_CDC_Setup+0xde>
 800750c:	2b20      	cmp	r3, #32
 800750e:	f040 80af 	bne.w	8007670 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	88db      	ldrh	r3, [r3, #6]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d03a      	beq.n	8007590 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b25b      	sxtb	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	da1b      	bge.n	800755c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	33b0      	adds	r3, #176	; 0xb0
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800753a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	88d2      	ldrh	r2, [r2, #6]
 8007540:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	88db      	ldrh	r3, [r3, #6]
 8007546:	2b07      	cmp	r3, #7
 8007548:	bf28      	it	cs
 800754a:	2307      	movcs	r3, #7
 800754c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	89fa      	ldrh	r2, [r7, #14]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 fd43 	bl	8008fe0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800755a:	e090      	b.n	800767e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	785a      	ldrb	r2, [r3, #1]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	88db      	ldrh	r3, [r3, #6]
 800756a:	2b3f      	cmp	r3, #63	; 0x3f
 800756c:	d803      	bhi.n	8007576 <USBD_CDC_Setup+0xa6>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	88db      	ldrh	r3, [r3, #6]
 8007572:	b2da      	uxtb	r2, r3
 8007574:	e000      	b.n	8007578 <USBD_CDC_Setup+0xa8>
 8007576:	2240      	movs	r2, #64	; 0x40
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800757e:	6939      	ldr	r1, [r7, #16]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007586:	461a      	mov	r2, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 fd55 	bl	8009038 <USBD_CtlPrepareRx>
      break;
 800758e:	e076      	b.n	800767e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	33b0      	adds	r3, #176	; 0xb0
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	7850      	ldrb	r0, [r2, #1]
 80075a6:	2200      	movs	r2, #0
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	4798      	blx	r3
      break;
 80075ac:	e067      	b.n	800767e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	2b0b      	cmp	r3, #11
 80075b4:	d851      	bhi.n	800765a <USBD_CDC_Setup+0x18a>
 80075b6:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <USBD_CDC_Setup+0xec>)
 80075b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075bc:	080075ed 	.word	0x080075ed
 80075c0:	08007669 	.word	0x08007669
 80075c4:	0800765b 	.word	0x0800765b
 80075c8:	0800765b 	.word	0x0800765b
 80075cc:	0800765b 	.word	0x0800765b
 80075d0:	0800765b 	.word	0x0800765b
 80075d4:	0800765b 	.word	0x0800765b
 80075d8:	0800765b 	.word	0x0800765b
 80075dc:	0800765b 	.word	0x0800765b
 80075e0:	0800765b 	.word	0x0800765b
 80075e4:	08007617 	.word	0x08007617
 80075e8:	08007641 	.word	0x08007641
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d107      	bne.n	8007608 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075f8:	f107 030a 	add.w	r3, r7, #10
 80075fc:	2202      	movs	r2, #2
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 fced 	bl	8008fe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007606:	e032      	b.n	800766e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 fc77 	bl	8008efe <USBD_CtlError>
            ret = USBD_FAIL;
 8007610:	2303      	movs	r3, #3
 8007612:	75fb      	strb	r3, [r7, #23]
          break;
 8007614:	e02b      	b.n	800766e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b03      	cmp	r3, #3
 8007620:	d107      	bne.n	8007632 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007622:	f107 030d 	add.w	r3, r7, #13
 8007626:	2201      	movs	r2, #1
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 fcd8 	bl	8008fe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007630:	e01d      	b.n	800766e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fc62 	bl	8008efe <USBD_CtlError>
            ret = USBD_FAIL;
 800763a:	2303      	movs	r3, #3
 800763c:	75fb      	strb	r3, [r7, #23]
          break;
 800763e:	e016      	b.n	800766e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b03      	cmp	r3, #3
 800764a:	d00f      	beq.n	800766c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 fc55 	bl	8008efe <USBD_CtlError>
            ret = USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007658:	e008      	b.n	800766c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 fc4e 	bl	8008efe <USBD_CtlError>
          ret = USBD_FAIL;
 8007662:	2303      	movs	r3, #3
 8007664:	75fb      	strb	r3, [r7, #23]
          break;
 8007666:	e002      	b.n	800766e <USBD_CDC_Setup+0x19e>
          break;
 8007668:	bf00      	nop
 800766a:	e008      	b.n	800767e <USBD_CDC_Setup+0x1ae>
          break;
 800766c:	bf00      	nop
      }
      break;
 800766e:	e006      	b.n	800767e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 fc43 	bl	8008efe <USBD_CtlError>
      ret = USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	75fb      	strb	r3, [r7, #23]
      break;
 800767c:	bf00      	nop
  }

  return (uint8_t)ret;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800769a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32b0      	adds	r2, #176	; 0xb0
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e065      	b.n	800777e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	32b0      	adds	r2, #176	; 0xb0
 80076bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	f003 020f 	and.w	r2, r3, #15
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	440b      	add	r3, r1
 80076d4:	3318      	adds	r3, #24
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d02f      	beq.n	800773c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	3318      	adds	r3, #24
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	f003 010f 	and.w	r1, r3, #15
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	460b      	mov	r3, r1
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	440b      	add	r3, r1
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4403      	add	r3, r0
 8007704:	3348      	adds	r3, #72	; 0x48
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	fbb2 f1f3 	udiv	r1, r2, r3
 800770c:	fb01 f303 	mul.w	r3, r1, r3
 8007710:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007712:	2b00      	cmp	r3, #0
 8007714:	d112      	bne.n	800773c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	f003 020f 	and.w	r2, r3, #15
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	3318      	adds	r3, #24
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800772e:	78f9      	ldrb	r1, [r7, #3]
 8007730:	2300      	movs	r3, #0
 8007732:	2200      	movs	r2, #0
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f004 fee2 	bl	800c4fe <USBD_LL_Transmit>
 800773a:	e01f      	b.n	800777c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	33b0      	adds	r3, #176	; 0xb0
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d010      	beq.n	800777c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	33b0      	adds	r3, #176	; 0xb0
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	32b0      	adds	r2, #176	; 0xb0
 800779c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	32b0      	adds	r2, #176	; 0xb0
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e01a      	b.n	80077ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f004 fee0 	bl	800c582 <USBD_LL_GetRxDataSize>
 80077c2:	4602      	mov	r2, r0
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	33b0      	adds	r3, #176	; 0xb0
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077e8:	4611      	mov	r1, r2
 80077ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	32b0      	adds	r2, #176	; 0xb0
 8007808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007814:	2303      	movs	r3, #3
 8007816:	e025      	b.n	8007864 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	33b0      	adds	r3, #176	; 0xb0
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01a      	beq.n	8007862 <USBD_CDC_EP0_RxReady+0x6c>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007832:	2bff      	cmp	r3, #255	; 0xff
 8007834:	d015      	beq.n	8007862 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	33b0      	adds	r3, #176	; 0xb0
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800784e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007856:	b292      	uxth	r2, r2
 8007858:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	22ff      	movs	r2, #255	; 0xff
 800785e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007874:	2182      	movs	r1, #130	; 0x82
 8007876:	4818      	ldr	r0, [pc, #96]	; (80078d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007878:	f000 fd09 	bl	800828e <USBD_GetEpDesc>
 800787c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800787e:	2101      	movs	r1, #1
 8007880:	4815      	ldr	r0, [pc, #84]	; (80078d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007882:	f000 fd04 	bl	800828e <USBD_GetEpDesc>
 8007886:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007888:	2181      	movs	r1, #129	; 0x81
 800788a:	4813      	ldr	r0, [pc, #76]	; (80078d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800788c:	f000 fcff 	bl	800828e <USBD_GetEpDesc>
 8007890:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2210      	movs	r2, #16
 800789c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d006      	beq.n	80078b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ac:	711a      	strb	r2, [r3, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d006      	beq.n	80078c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078c0:	711a      	strb	r2, [r3, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2243      	movs	r2, #67	; 0x43
 80078ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078cc:	4b02      	ldr	r3, [pc, #8]	; (80078d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000078 	.word	0x20000078

080078dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078e4:	2182      	movs	r1, #130	; 0x82
 80078e6:	4818      	ldr	r0, [pc, #96]	; (8007948 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078e8:	f000 fcd1 	bl	800828e <USBD_GetEpDesc>
 80078ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078ee:	2101      	movs	r1, #1
 80078f0:	4815      	ldr	r0, [pc, #84]	; (8007948 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078f2:	f000 fccc 	bl	800828e <USBD_GetEpDesc>
 80078f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078f8:	2181      	movs	r1, #129	; 0x81
 80078fa:	4813      	ldr	r0, [pc, #76]	; (8007948 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078fc:	f000 fcc7 	bl	800828e <USBD_GetEpDesc>
 8007900:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2210      	movs	r2, #16
 800790c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d006      	beq.n	8007922 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2200      	movs	r2, #0
 8007918:	711a      	strb	r2, [r3, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f042 0202 	orr.w	r2, r2, #2
 8007920:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d006      	beq.n	8007936 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	711a      	strb	r2, [r3, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f042 0202 	orr.w	r2, r2, #2
 8007934:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2243      	movs	r2, #67	; 0x43
 800793a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800793c:	4b02      	ldr	r3, [pc, #8]	; (8007948 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000078 	.word	0x20000078

0800794c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007954:	2182      	movs	r1, #130	; 0x82
 8007956:	4818      	ldr	r0, [pc, #96]	; (80079b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007958:	f000 fc99 	bl	800828e <USBD_GetEpDesc>
 800795c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800795e:	2101      	movs	r1, #1
 8007960:	4815      	ldr	r0, [pc, #84]	; (80079b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007962:	f000 fc94 	bl	800828e <USBD_GetEpDesc>
 8007966:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007968:	2181      	movs	r1, #129	; 0x81
 800796a:	4813      	ldr	r0, [pc, #76]	; (80079b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800796c:	f000 fc8f 	bl	800828e <USBD_GetEpDesc>
 8007970:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2210      	movs	r2, #16
 800797c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d006      	beq.n	8007992 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2200      	movs	r2, #0
 8007988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800798c:	711a      	strb	r2, [r3, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a0:	711a      	strb	r2, [r3, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2243      	movs	r2, #67	; 0x43
 80079aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079ac:	4b02      	ldr	r3, [pc, #8]	; (80079b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000078 	.word	0x20000078

080079bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	220a      	movs	r2, #10
 80079c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079ca:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	20000034 	.word	0x20000034

080079dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e009      	b.n	8007a04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	33b0      	adds	r3, #176	; 0xb0
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	32b0      	adds	r2, #176	; 0xb0
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e008      	b.n	8007a48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	32b0      	adds	r2, #176	; 0xb0
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e004      	b.n	8007a82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
	...

08007a90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32b0      	adds	r2, #176	; 0xb0
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32b0      	adds	r2, #176	; 0xb0
 8007ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e018      	b.n	8007af0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	7c1b      	ldrb	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <USBD_CDC_ReceivePacket+0x68>)
 8007ac8:	7819      	ldrb	r1, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f004 fd33 	bl	800c540 <USBD_LL_PrepareReceive>
 8007ada:	e008      	b.n	8007aee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007adc:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <USBD_CDC_ReceivePacket+0x68>)
 8007ade:	7819      	ldrb	r1, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae6:	2340      	movs	r3, #64	; 0x40
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f004 fd29 	bl	800c540 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	200000bc 	.word	0x200000bc

08007afc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e01f      	b.n	8007b54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	79fa      	ldrb	r2, [r7, #7]
 8007b46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f004 fba3 	bl	800c294 <USBD_LL_Init>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e025      	b.n	8007bc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32ae      	adds	r2, #174	; 0xae
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00f      	beq.n	8007bb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	32ae      	adds	r2, #174	; 0xae
 8007b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	f107 020e 	add.w	r2, r7, #14
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	4602      	mov	r2, r0
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f004 fbab 	bl	800c32c <USBD_LL_Start>
 8007bd6:	4603      	mov	r3, r0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f001 f908 	bl	8008e8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c96:	f003 031f 	and.w	r3, r3, #31
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d01a      	beq.n	8007cd4 <USBD_LL_SetupStage+0x72>
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d822      	bhi.n	8007ce8 <USBD_LL_SetupStage+0x86>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <USBD_LL_SetupStage+0x4a>
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d00a      	beq.n	8007cc0 <USBD_LL_SetupStage+0x5e>
 8007caa:	e01d      	b.n	8007ce8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fb5f 	bl	8008378 <USBD_StdDevReq>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbe:	e020      	b.n	8007d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fbc7 	bl	800845c <USBD_StdItfReq>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd2:	e016      	b.n	8007d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fc29 	bl	8008534 <USBD_StdEPReq>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce6:	e00c      	b.n	8007d02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f004 fb78 	bl	800c3ec <USBD_LL_StallEP>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007d00:	bf00      	nop
  }

  return ret;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	460b      	mov	r3, r1
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d16e      	bne.n	8007e02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	f040 8098 	bne.w	8007e68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d913      	bls.n	8007d6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	1ad2      	subs	r2, r2, r3
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	bf28      	it	cs
 8007d5e:	4613      	movcs	r3, r2
 8007d60:	461a      	mov	r2, r3
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f001 f984 	bl	8009072 <USBD_CtlContinueRx>
 8007d6a:	e07d      	b.n	8007e68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d72:	f003 031f 	and.w	r3, r3, #31
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d014      	beq.n	8007da4 <USBD_LL_DataOutStage+0x98>
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d81d      	bhi.n	8007dba <USBD_LL_DataOutStage+0xae>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d002      	beq.n	8007d88 <USBD_LL_DataOutStage+0x7c>
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d003      	beq.n	8007d8e <USBD_LL_DataOutStage+0x82>
 8007d86:	e018      	b.n	8007dba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d8c:	e018      	b.n	8007dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fa5e 	bl	800825a <USBD_CoreFindIF>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75bb      	strb	r3, [r7, #22]
            break;
 8007da2:	e00d      	b.n	8007dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	4619      	mov	r1, r3
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fa60 	bl	8008274 <USBD_CoreFindEP>
 8007db4:	4603      	mov	r3, r0
 8007db6:	75bb      	strb	r3, [r7, #22]
            break;
 8007db8:	e002      	b.n	8007dc0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75bb      	strb	r3, [r7, #22]
            break;
 8007dbe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007dc0:	7dbb      	ldrb	r3, [r7, #22]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d119      	bne.n	8007dfa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d113      	bne.n	8007dfa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007dd2:	7dba      	ldrb	r2, [r7, #22]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	32ae      	adds	r2, #174	; 0xae
 8007dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007de2:	7dba      	ldrb	r2, [r7, #22]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dea:	7dba      	ldrb	r2, [r7, #22]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	32ae      	adds	r2, #174	; 0xae
 8007df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 f94a 	bl	8009094 <USBD_CtlSendStatus>
 8007e00:	e032      	b.n	8007e68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 fa31 	bl	8008274 <USBD_CoreFindEP>
 8007e12:	4603      	mov	r3, r0
 8007e14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e16:	7dbb      	ldrb	r3, [r7, #22]
 8007e18:	2bff      	cmp	r3, #255	; 0xff
 8007e1a:	d025      	beq.n	8007e68 <USBD_LL_DataOutStage+0x15c>
 8007e1c:	7dbb      	ldrb	r3, [r7, #22]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d122      	bne.n	8007e68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d117      	bne.n	8007e5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e2e:	7dba      	ldrb	r2, [r7, #22]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	32ae      	adds	r2, #174	; 0xae
 8007e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00f      	beq.n	8007e5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e3e:	7dba      	ldrb	r2, [r7, #22]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e46:	7dba      	ldrb	r2, [r7, #22]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	32ae      	adds	r2, #174	; 0xae
 8007e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	7afa      	ldrb	r2, [r7, #11]
 8007e54:	4611      	mov	r1, r2
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	4798      	blx	r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	e000      	b.n	8007e6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b086      	sub	sp, #24
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	607a      	str	r2, [r7, #4]
 8007e7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d16f      	bne.n	8007f66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3314      	adds	r3, #20
 8007e8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d15a      	bne.n	8007f4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d914      	bls.n	8007ecc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f001 f8ac 	bl	8009016 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f004 fb3b 	bl	800c540 <USBD_LL_PrepareReceive>
 8007eca:	e03f      	b.n	8007f4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d11c      	bne.n	8007f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d316      	bcc.n	8007f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d20f      	bcs.n	8007f12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f001 f88d 	bl	8009016 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f04:	2300      	movs	r3, #0
 8007f06:	2200      	movs	r2, #0
 8007f08:	2100      	movs	r1, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f004 fb18 	bl	800c540 <USBD_LL_PrepareReceive>
 8007f10:	e01c      	b.n	8007f4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d10f      	bne.n	8007f3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d009      	beq.n	8007f3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f3e:	2180      	movs	r1, #128	; 0x80
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f004 fa53 	bl	800c3ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f001 f8b7 	bl	80090ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d03a      	beq.n	8007fcc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fe42 	bl	8007be0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f64:	e032      	b.n	8007fcc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	4619      	mov	r1, r3
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 f97f 	bl	8008274 <USBD_CoreFindEP>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	2bff      	cmp	r3, #255	; 0xff
 8007f7e:	d025      	beq.n	8007fcc <USBD_LL_DataInStage+0x15a>
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d122      	bne.n	8007fcc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d11c      	bne.n	8007fcc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f92:	7dfa      	ldrb	r2, [r7, #23]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	32ae      	adds	r2, #174	; 0xae
 8007f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d014      	beq.n	8007fcc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007fa2:	7dfa      	ldrb	r2, [r7, #23]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007faa:	7dfa      	ldrb	r2, [r7, #23]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	32ae      	adds	r2, #174	; 0xae
 8007fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	7afa      	ldrb	r2, [r7, #11]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	4798      	blx	r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fc2:	7dbb      	ldrb	r3, [r7, #22]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fc8:	7dbb      	ldrb	r3, [r7, #22]
 8007fca:	e000      	b.n	8007fce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d014      	beq.n	800803c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00e      	beq.n	800803c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6852      	ldr	r2, [r2, #4]
 800802a:	b2d2      	uxtb	r2, r2
 800802c:	4611      	mov	r1, r2
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008038:	2303      	movs	r3, #3
 800803a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	2200      	movs	r2, #0
 8008040:	2100      	movs	r1, #0
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f004 f98d 	bl	800c362 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2240      	movs	r2, #64	; 0x40
 8008054:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008058:	2340      	movs	r3, #64	; 0x40
 800805a:	2200      	movs	r2, #0
 800805c:	2180      	movs	r1, #128	; 0x80
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f004 f97f 	bl	800c362 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2240      	movs	r2, #64	; 0x40
 800806e:	621a      	str	r2, [r3, #32]

  return ret;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	460b      	mov	r3, r1
 8008084:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	78fa      	ldrb	r2, [r7, #3]
 800808a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2204      	movs	r2, #4
 80080b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d106      	bne.n	80080e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b03      	cmp	r3, #3
 8008108:	d110      	bne.n	800812c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	32ae      	adds	r2, #174	; 0xae
 800814c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008154:	2303      	movs	r3, #3
 8008156:	e01c      	b.n	8008192 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b03      	cmp	r3, #3
 8008162:	d115      	bne.n	8008190 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	32ae      	adds	r2, #174	; 0xae
 800816e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32ae      	adds	r2, #174	; 0xae
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	78fa      	ldrb	r2, [r7, #3]
 800818a:	4611      	mov	r1, r2
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	32ae      	adds	r2, #174	; 0xae
 80081b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e01c      	b.n	80081f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d115      	bne.n	80081f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	32ae      	adds	r2, #174	; 0xae
 80081d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32ae      	adds	r2, #174	; 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	4611      	mov	r1, r2
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00e      	beq.n	8008250 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	6852      	ldr	r2, [r2, #4]
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	4611      	mov	r1, r2
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008266:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008280:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d920      	bls.n	80082f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082be:	e013      	b.n	80082e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082c0:	f107 030a 	add.w	r3, r7, #10
 80082c4:	4619      	mov	r1, r3
 80082c6:	6978      	ldr	r0, [r7, #20]
 80082c8:	f000 f81b 	bl	8008302 <USBD_GetNextDesc>
 80082cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	2b05      	cmp	r3, #5
 80082d4:	d108      	bne.n	80082e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	789b      	ldrb	r3, [r3, #2]
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d008      	beq.n	80082f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	885b      	ldrh	r3, [r3, #2]
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	897b      	ldrh	r3, [r7, #10]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d8e5      	bhi.n	80082c0 <USBD_GetEpDesc+0x32>
 80082f4:	e000      	b.n	80082f8 <USBD_GetEpDesc+0x6a>
          break;
 80082f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082f8:	693b      	ldr	r3, [r7, #16]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	881a      	ldrh	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	b29b      	uxth	r3, r3
 800831a:	4413      	add	r3, r2
 800831c:	b29a      	uxth	r2, r3
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4413      	add	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800832e:	68fb      	ldr	r3, [r7, #12]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	3301      	adds	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800835a:	8a3b      	ldrh	r3, [r7, #16]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	b21a      	sxth	r2, r3
 8008360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008364:	4313      	orrs	r3, r2
 8008366:	b21b      	sxth	r3, r3
 8008368:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800836a:	89fb      	ldrh	r3, [r7, #14]
}
 800836c:	4618      	mov	r0, r3
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800838e:	2b40      	cmp	r3, #64	; 0x40
 8008390:	d005      	beq.n	800839e <USBD_StdDevReq+0x26>
 8008392:	2b40      	cmp	r3, #64	; 0x40
 8008394:	d857      	bhi.n	8008446 <USBD_StdDevReq+0xce>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00f      	beq.n	80083ba <USBD_StdDevReq+0x42>
 800839a:	2b20      	cmp	r3, #32
 800839c:	d153      	bne.n	8008446 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	32ae      	adds	r2, #174	; 0xae
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	4798      	blx	r3
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
      break;
 80083b8:	e04a      	b.n	8008450 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	785b      	ldrb	r3, [r3, #1]
 80083be:	2b09      	cmp	r3, #9
 80083c0:	d83b      	bhi.n	800843a <USBD_StdDevReq+0xc2>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <USBD_StdDevReq+0x50>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	08008431 	.word	0x08008431
 80083d0:	0800843b 	.word	0x0800843b
 80083d4:	08008427 	.word	0x08008427
 80083d8:	0800843b 	.word	0x0800843b
 80083dc:	080083fb 	.word	0x080083fb
 80083e0:	080083f1 	.word	0x080083f1
 80083e4:	0800843b 	.word	0x0800843b
 80083e8:	08008413 	.word	0x08008413
 80083ec:	08008405 	.word	0x08008405
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa3c 	bl	8008870 <USBD_GetDescriptor>
          break;
 80083f8:	e024      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fba1 	bl	8008b44 <USBD_SetAddress>
          break;
 8008402:	e01f      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fbe0 	bl	8008bcc <USBD_SetConfig>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
          break;
 8008410:	e018      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fc83 	bl	8008d20 <USBD_GetConfig>
          break;
 800841a:	e013      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fcb4 	bl	8008d8c <USBD_GetStatus>
          break;
 8008424:	e00e      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fce3 	bl	8008df4 <USBD_SetFeature>
          break;
 800842e:	e009      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fd07 	bl	8008e46 <USBD_ClrFeature>
          break;
 8008438:	e004      	b.n	8008444 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fd5e 	bl	8008efe <USBD_CtlError>
          break;
 8008442:	bf00      	nop
      }
      break;
 8008444:	e004      	b.n	8008450 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fd58 	bl	8008efe <USBD_CtlError>
      break;
 800844e:	bf00      	nop
  }

  return ret;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop

0800845c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d005      	beq.n	8008482 <USBD_StdItfReq+0x26>
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d852      	bhi.n	8008520 <USBD_StdItfReq+0xc4>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <USBD_StdItfReq+0x26>
 800847e:	2b20      	cmp	r3, #32
 8008480:	d14e      	bne.n	8008520 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	3b01      	subs	r3, #1
 800848c:	2b02      	cmp	r3, #2
 800848e:	d840      	bhi.n	8008512 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	889b      	ldrh	r3, [r3, #4]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b01      	cmp	r3, #1
 8008498:	d836      	bhi.n	8008508 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	889b      	ldrh	r3, [r3, #4]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fed9 	bl	800825a <USBD_CoreFindIF>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2bff      	cmp	r3, #255	; 0xff
 80084b0:	d01d      	beq.n	80084ee <USBD_StdItfReq+0x92>
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d11a      	bne.n	80084ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084b8:	7bba      	ldrb	r2, [r7, #14]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32ae      	adds	r2, #174	; 0xae
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00f      	beq.n	80084e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084c8:	7bba      	ldrb	r2, [r7, #14]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084d0:	7bba      	ldrb	r2, [r7, #14]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	32ae      	adds	r2, #174	; 0xae
 80084d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	4798      	blx	r3
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084e6:	e004      	b.n	80084f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084e8:	2303      	movs	r3, #3
 80084ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084ec:	e001      	b.n	80084f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084ee:	2303      	movs	r3, #3
 80084f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	88db      	ldrh	r3, [r3, #6]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d110      	bne.n	800851c <USBD_StdItfReq+0xc0>
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10d      	bne.n	800851c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fdc7 	bl	8009094 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008506:	e009      	b.n	800851c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fcf7 	bl	8008efe <USBD_CtlError>
          break;
 8008510:	e004      	b.n	800851c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fcf2 	bl	8008efe <USBD_CtlError>
          break;
 800851a:	e000      	b.n	800851e <USBD_StdItfReq+0xc2>
          break;
 800851c:	bf00      	nop
      }
      break;
 800851e:	e004      	b.n	800852a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fceb 	bl	8008efe <USBD_CtlError>
      break;
 8008528:	bf00      	nop
  }

  return ret;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	889b      	ldrh	r3, [r3, #4]
 8008546:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008550:	2b40      	cmp	r3, #64	; 0x40
 8008552:	d007      	beq.n	8008564 <USBD_StdEPReq+0x30>
 8008554:	2b40      	cmp	r3, #64	; 0x40
 8008556:	f200 817f 	bhi.w	8008858 <USBD_StdEPReq+0x324>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d02a      	beq.n	80085b4 <USBD_StdEPReq+0x80>
 800855e:	2b20      	cmp	r3, #32
 8008560:	f040 817a 	bne.w	8008858 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff fe83 	bl	8008274 <USBD_CoreFindEP>
 800856e:	4603      	mov	r3, r0
 8008570:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008572:	7b7b      	ldrb	r3, [r7, #13]
 8008574:	2bff      	cmp	r3, #255	; 0xff
 8008576:	f000 8174 	beq.w	8008862 <USBD_StdEPReq+0x32e>
 800857a:	7b7b      	ldrb	r3, [r7, #13]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 8170 	bne.w	8008862 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008582:	7b7a      	ldrb	r2, [r7, #13]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800858a:	7b7a      	ldrb	r2, [r7, #13]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	32ae      	adds	r2, #174	; 0xae
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8163 	beq.w	8008862 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800859c:	7b7a      	ldrb	r2, [r7, #13]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	32ae      	adds	r2, #174	; 0xae
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085b2:	e156      	b.n	8008862 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d008      	beq.n	80085ce <USBD_StdEPReq+0x9a>
 80085bc:	2b03      	cmp	r3, #3
 80085be:	f300 8145 	bgt.w	800884c <USBD_StdEPReq+0x318>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 809b 	beq.w	80086fe <USBD_StdEPReq+0x1ca>
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d03c      	beq.n	8008646 <USBD_StdEPReq+0x112>
 80085cc:	e13e      	b.n	800884c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d002      	beq.n	80085e0 <USBD_StdEPReq+0xac>
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d016      	beq.n	800860c <USBD_StdEPReq+0xd8>
 80085de:	e02c      	b.n	800863a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00d      	beq.n	8008602 <USBD_StdEPReq+0xce>
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b80      	cmp	r3, #128	; 0x80
 80085ea:	d00a      	beq.n	8008602 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f003 fefb 	bl	800c3ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085f6:	2180      	movs	r1, #128	; 0x80
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f003 fef7 	bl	800c3ec <USBD_LL_StallEP>
 80085fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008600:	e020      	b.n	8008644 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fc7a 	bl	8008efe <USBD_CtlError>
              break;
 800860a:	e01b      	b.n	8008644 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10e      	bne.n	8008632 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00b      	beq.n	8008632 <USBD_StdEPReq+0xfe>
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	2b80      	cmp	r3, #128	; 0x80
 800861e:	d008      	beq.n	8008632 <USBD_StdEPReq+0xfe>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	88db      	ldrh	r3, [r3, #6]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d104      	bne.n	8008632 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f003 fedd 	bl	800c3ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fd2e 	bl	8009094 <USBD_CtlSendStatus>

              break;
 8008638:	e004      	b.n	8008644 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fc5e 	bl	8008efe <USBD_CtlError>
              break;
 8008642:	bf00      	nop
          }
          break;
 8008644:	e107      	b.n	8008856 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d002      	beq.n	8008658 <USBD_StdEPReq+0x124>
 8008652:	2b03      	cmp	r3, #3
 8008654:	d016      	beq.n	8008684 <USBD_StdEPReq+0x150>
 8008656:	e04b      	b.n	80086f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <USBD_StdEPReq+0x146>
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b80      	cmp	r3, #128	; 0x80
 8008662:	d00a      	beq.n	800867a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f003 febf 	bl	800c3ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800866e:	2180      	movs	r1, #128	; 0x80
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f003 febb 	bl	800c3ec <USBD_LL_StallEP>
 8008676:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008678:	e040      	b.n	80086fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fc3e 	bl	8008efe <USBD_CtlError>
              break;
 8008682:	e03b      	b.n	80086fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	885b      	ldrh	r3, [r3, #2]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d136      	bne.n	80086fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f003 fec5 	bl	800c42a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fcf7 	bl	8009094 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7ff fde2 	bl	8008274 <USBD_CoreFindEP>
 80086b0:	4603      	mov	r3, r0
 80086b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086b4:	7b7b      	ldrb	r3, [r7, #13]
 80086b6:	2bff      	cmp	r3, #255	; 0xff
 80086b8:	d01f      	beq.n	80086fa <USBD_StdEPReq+0x1c6>
 80086ba:	7b7b      	ldrb	r3, [r7, #13]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d11c      	bne.n	80086fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086c0:	7b7a      	ldrb	r2, [r7, #13]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086c8:	7b7a      	ldrb	r2, [r7, #13]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	32ae      	adds	r2, #174	; 0xae
 80086ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d010      	beq.n	80086fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086d8:	7b7a      	ldrb	r2, [r7, #13]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	32ae      	adds	r2, #174	; 0xae
 80086de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4798      	blx	r3
 80086ea:	4603      	mov	r3, r0
 80086ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086ee:	e004      	b.n	80086fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fc03 	bl	8008efe <USBD_CtlError>
              break;
 80086f8:	e000      	b.n	80086fc <USBD_StdEPReq+0x1c8>
              break;
 80086fa:	bf00      	nop
          }
          break;
 80086fc:	e0ab      	b.n	8008856 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d002      	beq.n	8008710 <USBD_StdEPReq+0x1dc>
 800870a:	2b03      	cmp	r3, #3
 800870c:	d032      	beq.n	8008774 <USBD_StdEPReq+0x240>
 800870e:	e097      	b.n	8008840 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d007      	beq.n	8008726 <USBD_StdEPReq+0x1f2>
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b80      	cmp	r3, #128	; 0x80
 800871a:	d004      	beq.n	8008726 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fbed 	bl	8008efe <USBD_CtlError>
                break;
 8008724:	e091      	b.n	800884a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800872a:	2b00      	cmp	r3, #0
 800872c:	da0b      	bge.n	8008746 <USBD_StdEPReq+0x212>
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	3310      	adds	r3, #16
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	3304      	adds	r3, #4
 8008744:	e00b      	b.n	800875e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4413      	add	r3, r2
 800875c:	3304      	adds	r3, #4
 800875e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2202      	movs	r2, #2
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fc37 	bl	8008fe0 <USBD_CtlSendData>
              break;
 8008772:	e06a      	b.n	800884a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008778:	2b00      	cmp	r3, #0
 800877a:	da11      	bge.n	80087a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	f003 020f 	and.w	r2, r3, #15
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	3324      	adds	r3, #36	; 0x24
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d117      	bne.n	80087c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fbb0 	bl	8008efe <USBD_CtlError>
                  break;
 800879e:	e054      	b.n	800884a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	f003 020f 	and.w	r2, r3, #15
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fb9d 	bl	8008efe <USBD_CtlError>
                  break;
 80087c4:	e041      	b.n	800884a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da0b      	bge.n	80087e6 <USBD_StdEPReq+0x2b2>
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	3310      	adds	r3, #16
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	3304      	adds	r3, #4
 80087e4:	e00b      	b.n	80087fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	4413      	add	r3, r2
 80087fc:	3304      	adds	r3, #4
 80087fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <USBD_StdEPReq+0x2d8>
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	2b80      	cmp	r3, #128	; 0x80
 800880a:	d103      	bne.n	8008814 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	e00e      	b.n	8008832 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f003 fe25 	bl	800c468 <USBD_LL_IsStallEP>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e002      	b.n	8008832 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2202      	movs	r2, #2
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fbd1 	bl	8008fe0 <USBD_CtlSendData>
              break;
 800883e:	e004      	b.n	800884a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fb5b 	bl	8008efe <USBD_CtlError>
              break;
 8008848:	bf00      	nop
          }
          break;
 800884a:	e004      	b.n	8008856 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fb55 	bl	8008efe <USBD_CtlError>
          break;
 8008854:	bf00      	nop
      }
      break;
 8008856:	e005      	b.n	8008864 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fb4f 	bl	8008efe <USBD_CtlError>
      break;
 8008860:	e000      	b.n	8008864 <USBD_StdEPReq+0x330>
      break;
 8008862:	bf00      	nop
  }

  return ret;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	b29b      	uxth	r3, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	2b06      	cmp	r3, #6
 8008892:	f200 8128 	bhi.w	8008ae6 <USBD_GetDescriptor+0x276>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <USBD_GetDescriptor+0x2c>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088b9 	.word	0x080088b9
 80088a0:	080088d1 	.word	0x080088d1
 80088a4:	08008911 	.word	0x08008911
 80088a8:	08008ae7 	.word	0x08008ae7
 80088ac:	08008ae7 	.word	0x08008ae7
 80088b0:	08008a87 	.word	0x08008a87
 80088b4:	08008ab3 	.word	0x08008ab3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	7c12      	ldrb	r2, [r2, #16]
 80088c4:	f107 0108 	add.w	r1, r7, #8
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	60f8      	str	r0, [r7, #12]
      break;
 80088ce:	e112      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	7c1b      	ldrb	r3, [r3, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10d      	bne.n	80088f4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e0:	f107 0208 	add.w	r2, r7, #8
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3301      	adds	r3, #1
 80088ee:	2202      	movs	r2, #2
 80088f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088f2:	e100      	b.n	8008af6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	f107 0208 	add.w	r2, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3301      	adds	r3, #1
 800890a:	2202      	movs	r2, #2
 800890c:	701a      	strb	r2, [r3, #0]
      break;
 800890e:	e0f2      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	885b      	ldrh	r3, [r3, #2]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b05      	cmp	r3, #5
 8008918:	f200 80ac 	bhi.w	8008a74 <USBD_GetDescriptor+0x204>
 800891c:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <USBD_GetDescriptor+0xb4>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	0800893d 	.word	0x0800893d
 8008928:	08008971 	.word	0x08008971
 800892c:	080089a5 	.word	0x080089a5
 8008930:	080089d9 	.word	0x080089d9
 8008934:	08008a0d 	.word	0x08008a0d
 8008938:	08008a41 	.word	0x08008a41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00b      	beq.n	8008960 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	7c12      	ldrb	r2, [r2, #16]
 8008954:	f107 0108 	add.w	r1, r7, #8
 8008958:	4610      	mov	r0, r2
 800895a:	4798      	blx	r3
 800895c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895e:	e091      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 facb 	bl	8008efe <USBD_CtlError>
            err++;
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	3301      	adds	r3, #1
 800896c:	72fb      	strb	r3, [r7, #11]
          break;
 800896e:	e089      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	7c12      	ldrb	r2, [r2, #16]
 8008988:	f107 0108 	add.w	r1, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008992:	e077      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fab1 	bl	8008efe <USBD_CtlError>
            err++;
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	3301      	adds	r3, #1
 80089a0:	72fb      	strb	r3, [r7, #11]
          break;
 80089a2:	e06f      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	7c12      	ldrb	r2, [r2, #16]
 80089bc:	f107 0108 	add.w	r1, r7, #8
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c6:	e05d      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fa97 	bl	8008efe <USBD_CtlError>
            err++;
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	3301      	adds	r3, #1
 80089d4:	72fb      	strb	r3, [r7, #11]
          break;
 80089d6:	e055      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	7c12      	ldrb	r2, [r2, #16]
 80089f0:	f107 0108 	add.w	r1, r7, #8
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089fa:	e043      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa7d 	bl	8008efe <USBD_CtlError>
            err++;
 8008a04:	7afb      	ldrb	r3, [r7, #11]
 8008a06:	3301      	adds	r3, #1
 8008a08:	72fb      	strb	r3, [r7, #11]
          break;
 8008a0a:	e03b      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	7c12      	ldrb	r2, [r2, #16]
 8008a24:	f107 0108 	add.w	r1, r7, #8
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4798      	blx	r3
 8008a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2e:	e029      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa63 	bl	8008efe <USBD_CtlError>
            err++;
 8008a38:	7afb      	ldrb	r3, [r7, #11]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3e:	e021      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00b      	beq.n	8008a64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	7c12      	ldrb	r2, [r2, #16]
 8008a58:	f107 0108 	add.w	r1, r7, #8
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4798      	blx	r3
 8008a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a62:	e00f      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa49 	bl	8008efe <USBD_CtlError>
            err++;
 8008a6c:	7afb      	ldrb	r3, [r7, #11]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	72fb      	strb	r3, [r7, #11]
          break;
 8008a72:	e007      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa41 	bl	8008efe <USBD_CtlError>
          err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a82:	bf00      	nop
      }
      break;
 8008a84:	e037      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	7c1b      	ldrb	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a96:	f107 0208 	add.w	r2, r7, #8
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4798      	blx	r3
 8008a9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aa0:	e029      	b.n	8008af6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fa2a 	bl	8008efe <USBD_CtlError>
        err++;
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	3301      	adds	r3, #1
 8008aae:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab0:	e021      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7c1b      	ldrb	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10d      	bne.n	8008ad6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac2:	f107 0208 	add.w	r2, r7, #8
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4798      	blx	r3
 8008aca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad4:	e00f      	b.n	8008af6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fa10 	bl	8008efe <USBD_CtlError>
        err++;
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae4:	e007      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fa08 	bl	8008efe <USBD_CtlError>
      err++;
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	3301      	adds	r3, #1
 8008af2:	72fb      	strb	r3, [r7, #11]
      break;
 8008af4:	bf00      	nop
  }

  if (err != 0U)
 8008af6:	7afb      	ldrb	r3, [r7, #11]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d11e      	bne.n	8008b3a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	88db      	ldrh	r3, [r3, #6]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d016      	beq.n	8008b32 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b04:	893b      	ldrh	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00e      	beq.n	8008b28 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	88da      	ldrh	r2, [r3, #6]
 8008b0e:	893b      	ldrh	r3, [r7, #8]
 8008b10:	4293      	cmp	r3, r2
 8008b12:	bf28      	it	cs
 8008b14:	4613      	movcs	r3, r2
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b1a:	893b      	ldrh	r3, [r7, #8]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fa5d 	bl	8008fe0 <USBD_CtlSendData>
 8008b26:	e009      	b.n	8008b3c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f9e7 	bl	8008efe <USBD_CtlError>
 8008b30:	e004      	b.n	8008b3c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 faae 	bl	8009094 <USBD_CtlSendStatus>
 8008b38:	e000      	b.n	8008b3c <USBD_GetDescriptor+0x2cc>
    return;
 8008b3a:	bf00      	nop
  }
}
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop

08008b44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	889b      	ldrh	r3, [r3, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d131      	bne.n	8008bba <USBD_SetAddress+0x76>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	88db      	ldrh	r3, [r3, #6]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d12d      	bne.n	8008bba <USBD_SetAddress+0x76>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	2b7f      	cmp	r3, #127	; 0x7f
 8008b64:	d829      	bhi.n	8008bba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d104      	bne.n	8008b88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f9bc 	bl	8008efe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	e01d      	b.n	8008bc4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	7bfa      	ldrb	r2, [r7, #15]
 8008b8c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f003 fc93 	bl	800c4c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa7a 	bl	8009094 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bae:	e009      	b.n	8008bc4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb8:	e004      	b.n	8008bc4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f99e 	bl	8008efe <USBD_CtlError>
  }
}
 8008bc2:	bf00      	nop
 8008bc4:	bf00      	nop
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	885b      	ldrh	r3, [r3, #2]
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	4b4e      	ldr	r3, [pc, #312]	; (8008d1c <USBD_SetConfig+0x150>)
 8008be2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008be4:	4b4d      	ldr	r3, [pc, #308]	; (8008d1c <USBD_SetConfig+0x150>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d905      	bls.n	8008bf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f985 	bl	8008efe <USBD_CtlError>
    return USBD_FAIL;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e08c      	b.n	8008d12 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d002      	beq.n	8008c0a <USBD_SetConfig+0x3e>
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d029      	beq.n	8008c5c <USBD_SetConfig+0x90>
 8008c08:	e075      	b.n	8008cf6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c0a:	4b44      	ldr	r3, [pc, #272]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d020      	beq.n	8008c54 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c12:	4b42      	ldr	r3, [pc, #264]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c1c:	4b3f      	ldr	r3, [pc, #252]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7fe ffe7 	bl	8007bf6 <USBD_SetClassConfig>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d008      	beq.n	8008c44 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f962 	bl	8008efe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c42:	e065      	b.n	8008d10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fa25 	bl	8009094 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c52:	e05d      	b.n	8008d10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fa1d 	bl	8009094 <USBD_CtlSendStatus>
      break;
 8008c5a:	e059      	b.n	8008d10 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c5c:	4b2f      	ldr	r3, [pc, #188]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d112      	bne.n	8008c8a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c6c:	4b2b      	ldr	r3, [pc, #172]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	461a      	mov	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c76:	4b29      	ldr	r3, [pc, #164]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7fe ffd6 	bl	8007c2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa06 	bl	8009094 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c88:	e042      	b.n	8008d10 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c8a:	4b24      	ldr	r3, [pc, #144]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d02a      	beq.n	8008cee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7fe ffc4 	bl	8007c2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ca6:	4b1d      	ldr	r3, [pc, #116]	; (8008d1c <USBD_SetConfig+0x150>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <USBD_SetConfig+0x150>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7fe ff9d 	bl	8007bf6 <USBD_SetClassConfig>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00f      	beq.n	8008ce6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f918 	bl	8008efe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7fe ffa9 	bl	8007c2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ce4:	e014      	b.n	8008d10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f9d4 	bl	8009094 <USBD_CtlSendStatus>
      break;
 8008cec:	e010      	b.n	8008d10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f9d0 	bl	8009094 <USBD_CtlSendStatus>
      break;
 8008cf4:	e00c      	b.n	8008d10 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f900 	bl	8008efe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cfe:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <USBD_SetConfig+0x150>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7fe ff92 	bl	8007c2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0e:	bf00      	nop
  }

  return ret;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20000370 	.word	0x20000370

08008d20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	88db      	ldrh	r3, [r3, #6]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d004      	beq.n	8008d3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f8e2 	bl	8008efe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d3a:	e023      	b.n	8008d84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	dc02      	bgt.n	8008d4e <USBD_GetConfig+0x2e>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dc03      	bgt.n	8008d54 <USBD_GetConfig+0x34>
 8008d4c:	e015      	b.n	8008d7a <USBD_GetConfig+0x5a>
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d00b      	beq.n	8008d6a <USBD_GetConfig+0x4a>
 8008d52:	e012      	b.n	8008d7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f93c 	bl	8008fe0 <USBD_CtlSendData>
        break;
 8008d68:	e00c      	b.n	8008d84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f934 	bl	8008fe0 <USBD_CtlSendData>
        break;
 8008d78:	e004      	b.n	8008d84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f8be 	bl	8008efe <USBD_CtlError>
        break;
 8008d82:	bf00      	nop
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d81e      	bhi.n	8008de2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	88db      	ldrh	r3, [r3, #6]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d004      	beq.n	8008db6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f8a5 	bl	8008efe <USBD_CtlError>
        break;
 8008db4:	e01a      	b.n	8008dec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f043 0202 	orr.w	r2, r3, #2
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f900 	bl	8008fe0 <USBD_CtlSendData>
      break;
 8008de0:	e004      	b.n	8008dec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f88a 	bl	8008efe <USBD_CtlError>
      break;
 8008dea:	bf00      	nop
  }
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	885b      	ldrh	r3, [r3, #2]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d107      	bne.n	8008e16 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f940 	bl	8009094 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e14:	e013      	b.n	8008e3e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	885b      	ldrh	r3, [r3, #2]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d10b      	bne.n	8008e36 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	889b      	ldrh	r3, [r3, #4]
 8008e22:	0a1b      	lsrs	r3, r3, #8
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f930 	bl	8009094 <USBD_CtlSendStatus>
}
 8008e34:	e003      	b.n	8008e3e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f860 	bl	8008efe <USBD_CtlError>
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d80b      	bhi.n	8008e76 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	885b      	ldrh	r3, [r3, #2]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d10c      	bne.n	8008e80 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f910 	bl	8009094 <USBD_CtlSendStatus>
      }
      break;
 8008e74:	e004      	b.n	8008e80 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f840 	bl	8008efe <USBD_CtlError>
      break;
 8008e7e:	e000      	b.n	8008e82 <USBD_ClrFeature+0x3c>
      break;
 8008e80:	bf00      	nop
  }
}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	781a      	ldrb	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f7ff fa41 	bl	800833c <SWAPBYTE>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff fa34 	bl	800833c <SWAPBYTE>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f7ff fa27 	bl	800833c <SWAPBYTE>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	80da      	strh	r2, [r3, #6]
}
 8008ef6:	bf00      	nop
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f08:	2180      	movs	r1, #128	; 0x80
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f003 fa6e 	bl	800c3ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f10:	2100      	movs	r1, #0
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f003 fa6a 	bl	800c3ec <USBD_LL_StallEP>
}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d036      	beq.n	8008fa4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f3a:	6938      	ldr	r0, [r7, #16]
 8008f3c:	f000 f836 	bl	8008fac <USBD_GetLen>
 8008f40:	4603      	mov	r3, r0
 8008f42:	3301      	adds	r3, #1
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	4413      	add	r3, r2
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	4413      	add	r3, r2
 8008f66:	2203      	movs	r2, #3
 8008f68:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f70:	e013      	b.n	8008f9a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	4413      	add	r3, r2
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	7812      	ldrb	r2, [r2, #0]
 8008f7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	3301      	adds	r3, #1
 8008f82:	613b      	str	r3, [r7, #16]
    idx++;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	3301      	adds	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	4413      	add	r3, r2
 8008f90:	2200      	movs	r2, #0
 8008f92:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
 8008f96:	3301      	adds	r3, #1
 8008f98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e7      	bne.n	8008f72 <USBD_GetString+0x52>
 8008fa2:	e000      	b.n	8008fa6 <USBD_GetString+0x86>
    return;
 8008fa4:	bf00      	nop
  }
}
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fbc:	e005      	b.n	8008fca <USBD_GetLen+0x1e>
  {
    len++;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1f5      	bne.n	8008fbe <USBD_GetLen+0x12>
  }

  return len;
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2202      	movs	r2, #2
 8008ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	2100      	movs	r1, #0
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f003 fa79 	bl	800c4fe <USBD_LL_Transmit>

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	2100      	movs	r1, #0
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f003 fa68 	bl	800c4fe <USBD_LL_Transmit>

  return USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2203      	movs	r2, #3
 8009048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	2100      	movs	r1, #0
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f003 fa6c 	bl	800c540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	2100      	movs	r1, #0
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f003 fa5b 	bl	800c540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2204      	movs	r2, #4
 80090a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090a4:	2300      	movs	r3, #0
 80090a6:	2200      	movs	r2, #0
 80090a8:	2100      	movs	r1, #0
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f003 fa27 	bl	800c4fe <USBD_LL_Transmit>

  return USBD_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2205      	movs	r2, #5
 80090c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ca:	2300      	movs	r3, #0
 80090cc:	2200      	movs	r2, #0
 80090ce:	2100      	movs	r1, #0
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f003 fa35 	bl	800c540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <__NVIC_SetPriority>:
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	db0a      	blt.n	800910a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	490c      	ldr	r1, [pc, #48]	; (800912c <__NVIC_SetPriority+0x4c>)
 80090fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090fe:	0112      	lsls	r2, r2, #4
 8009100:	b2d2      	uxtb	r2, r2
 8009102:	440b      	add	r3, r1
 8009104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009108:	e00a      	b.n	8009120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	b2da      	uxtb	r2, r3
 800910e:	4908      	ldr	r1, [pc, #32]	; (8009130 <__NVIC_SetPriority+0x50>)
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	f003 030f 	and.w	r3, r3, #15
 8009116:	3b04      	subs	r3, #4
 8009118:	0112      	lsls	r2, r2, #4
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	440b      	add	r3, r1
 800911e:	761a      	strb	r2, [r3, #24]
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	e000e100 	.word	0xe000e100
 8009130:	e000ed00 	.word	0xe000ed00

08009134 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <SysTick_Handler+0x1c>)
 800913a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800913c:	f001 fd28 	bl	800ab90 <xTaskGetSchedulerState>
 8009140:	4603      	mov	r3, r0
 8009142:	2b01      	cmp	r3, #1
 8009144:	d001      	beq.n	800914a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009146:	f002 fb0f 	bl	800b768 <xPortSysTickHandler>
  }
}
 800914a:	bf00      	nop
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	e000e010 	.word	0xe000e010

08009154 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009158:	2100      	movs	r1, #0
 800915a:	f06f 0004 	mvn.w	r0, #4
 800915e:	f7ff ffbf 	bl	80090e0 <__NVIC_SetPriority>
#endif
}
 8009162:	bf00      	nop
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800916e:	f3ef 8305 	mrs	r3, IPSR
 8009172:	603b      	str	r3, [r7, #0]
  return(result);
 8009174:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800917a:	f06f 0305 	mvn.w	r3, #5
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	e00c      	b.n	800919c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009182:	4b0a      	ldr	r3, [pc, #40]	; (80091ac <osKernelInitialize+0x44>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d105      	bne.n	8009196 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800918a:	4b08      	ldr	r3, [pc, #32]	; (80091ac <osKernelInitialize+0x44>)
 800918c:	2201      	movs	r2, #1
 800918e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009190:	2300      	movs	r3, #0
 8009192:	607b      	str	r3, [r7, #4]
 8009194:	e002      	b.n	800919c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009196:	f04f 33ff 	mov.w	r3, #4294967295
 800919a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800919c:	687b      	ldr	r3, [r7, #4]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	20000374 	.word	0x20000374

080091b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091b6:	f3ef 8305 	mrs	r3, IPSR
 80091ba:	603b      	str	r3, [r7, #0]
  return(result);
 80091bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80091c2:	f06f 0305 	mvn.w	r3, #5
 80091c6:	607b      	str	r3, [r7, #4]
 80091c8:	e010      	b.n	80091ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80091ca:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <osKernelStart+0x48>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d109      	bne.n	80091e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80091d2:	f7ff ffbf 	bl	8009154 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80091d6:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <osKernelStart+0x48>)
 80091d8:	2202      	movs	r2, #2
 80091da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80091dc:	f001 f87c 	bl	800a2d8 <vTaskStartScheduler>
      stat = osOK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	607b      	str	r3, [r7, #4]
 80091e4:	e002      	b.n	80091ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80091ec:	687b      	ldr	r3, [r7, #4]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000374 	.word	0x20000374

080091fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08e      	sub	sp, #56	; 0x38
 8009200:	af04      	add	r7, sp, #16
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009208:	2300      	movs	r3, #0
 800920a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800920c:	f3ef 8305 	mrs	r3, IPSR
 8009210:	617b      	str	r3, [r7, #20]
  return(result);
 8009212:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009214:	2b00      	cmp	r3, #0
 8009216:	d17e      	bne.n	8009316 <osThreadNew+0x11a>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d07b      	beq.n	8009316 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800921e:	2380      	movs	r3, #128	; 0x80
 8009220:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009222:	2318      	movs	r3, #24
 8009224:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009226:	2300      	movs	r3, #0
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800922a:	f04f 33ff 	mov.w	r3, #4294967295
 800922e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d045      	beq.n	80092c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <osThreadNew+0x48>
        name = attr->name;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d008      	beq.n	800926a <osThreadNew+0x6e>
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	2b38      	cmp	r3, #56	; 0x38
 800925c:	d805      	bhi.n	800926a <osThreadNew+0x6e>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <osThreadNew+0x72>
        return (NULL);
 800926a:	2300      	movs	r3, #0
 800926c:	e054      	b.n	8009318 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	089b      	lsrs	r3, r3, #2
 800927c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00e      	beq.n	80092a4 <osThreadNew+0xa8>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	2bbb      	cmp	r3, #187	; 0xbb
 800928c:	d90a      	bls.n	80092a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009292:	2b00      	cmp	r3, #0
 8009294:	d006      	beq.n	80092a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <osThreadNew+0xa8>
        mem = 1;
 800929e:	2301      	movs	r3, #1
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	e010      	b.n	80092c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10c      	bne.n	80092c6 <osThreadNew+0xca>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d108      	bne.n	80092c6 <osThreadNew+0xca>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d104      	bne.n	80092c6 <osThreadNew+0xca>
          mem = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	61bb      	str	r3, [r7, #24]
 80092c0:	e001      	b.n	80092c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d110      	bne.n	80092ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092d4:	9202      	str	r2, [sp, #8]
 80092d6:	9301      	str	r3, [sp, #4]
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	6a3a      	ldr	r2, [r7, #32]
 80092e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 fe0c 	bl	8009f00 <xTaskCreateStatic>
 80092e8:	4603      	mov	r3, r0
 80092ea:	613b      	str	r3, [r7, #16]
 80092ec:	e013      	b.n	8009316 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d110      	bne.n	8009316 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	f107 0310 	add.w	r3, r7, #16
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 fe57 	bl	8009fba <xTaskCreate>
 800930c:	4603      	mov	r3, r0
 800930e:	2b01      	cmp	r3, #1
 8009310:	d001      	beq.n	8009316 <osThreadNew+0x11a>
            hTask = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009316:	693b      	ldr	r3, [r7, #16]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3728      	adds	r7, #40	; 0x28
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009328:	f3ef 8305 	mrs	r3, IPSR
 800932c:	60bb      	str	r3, [r7, #8]
  return(result);
 800932e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <osDelay+0x1c>
    stat = osErrorISR;
 8009334:	f06f 0305 	mvn.w	r3, #5
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	e007      	b.n	800934c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800933c:	2300      	movs	r3, #0
 800933e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 ff92 	bl	800a270 <vTaskDelay>
    }
  }

  return (stat);
 800934c:	68fb      	ldr	r3, [r7, #12]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4a07      	ldr	r2, [pc, #28]	; (8009384 <vApplicationGetIdleTaskMemory+0x2c>)
 8009368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	4a06      	ldr	r2, [pc, #24]	; (8009388 <vApplicationGetIdleTaskMemory+0x30>)
 800936e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2280      	movs	r2, #128	; 0x80
 8009374:	601a      	str	r2, [r3, #0]
}
 8009376:	bf00      	nop
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000378 	.word	0x20000378
 8009388:	20000434 	.word	0x20000434

0800938c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4a07      	ldr	r2, [pc, #28]	; (80093b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800939c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	4a06      	ldr	r2, [pc, #24]	; (80093bc <vApplicationGetTimerTaskMemory+0x30>)
 80093a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093aa:	601a      	str	r2, [r3, #0]
}
 80093ac:	bf00      	nop
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20000634 	.word	0x20000634
 80093bc:	200006f0 	.word	0x200006f0

080093c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f103 0208 	add.w	r2, r3, #8
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f04f 32ff 	mov.w	r2, #4294967295
 80093d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f103 0208 	add.w	r2, r3, #8
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f103 0208 	add.w	r2, r3, #8
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800940e:	bf00      	nop
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800941a:	b480      	push	{r7}
 800941c:	b085      	sub	sp, #20
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	1c5a      	adds	r2, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	601a      	str	r2, [r3, #0]
}
 8009456:	bf00      	nop
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009462:	b480      	push	{r7}
 8009464:	b085      	sub	sp, #20
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009478:	d103      	bne.n	8009482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	e00c      	b.n	800949c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	3308      	adds	r3, #8
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	e002      	b.n	8009490 <vListInsert+0x2e>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	429a      	cmp	r2, r3
 800949a:	d2f6      	bcs.n	800948a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	601a      	str	r2, [r3, #0]
}
 80094c8:	bf00      	nop
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	6892      	ldr	r2, [r2, #8]
 80094ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6852      	ldr	r2, [r2, #4]
 80094f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d103      	bne.n	8009508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	1e5a      	subs	r2, r3, #1
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10a      	bne.n	8009552 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009552:	f002 f877 	bl	800b644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955e:	68f9      	ldr	r1, [r7, #12]
 8009560:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009562:	fb01 f303 	mul.w	r3, r1, r3
 8009566:	441a      	add	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	3b01      	subs	r3, #1
 8009584:	68f9      	ldr	r1, [r7, #12]
 8009586:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009588:	fb01 f303 	mul.w	r3, r1, r3
 800958c:	441a      	add	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	22ff      	movs	r2, #255	; 0xff
 8009596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	22ff      	movs	r2, #255	; 0xff
 800959e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d114      	bne.n	80095d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d01a      	beq.n	80095e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3310      	adds	r3, #16
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 f929 	bl	800a80c <xTaskRemoveFromEventList>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d012      	beq.n	80095e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095c0:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <xQueueGenericReset+0xcc>)
 80095c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	e009      	b.n	80095e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3310      	adds	r3, #16
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fef2 	bl	80093c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3324      	adds	r3, #36	; 0x24
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7ff feed 	bl	80093c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095e6:	f002 f85d 	bl	800b6a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095ea:	2301      	movs	r3, #1
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	e000ed04 	.word	0xe000ed04

080095f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08e      	sub	sp, #56	; 0x38
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10a      	bne.n	800963e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
}
 800963a:	bf00      	nop
 800963c:	e7fe      	b.n	800963c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <xQueueGenericCreateStatic+0x52>
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <xQueueGenericCreateStatic+0x56>
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <xQueueGenericCreateStatic+0x58>
 800964e:	2300      	movs	r3, #0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10a      	bne.n	800966a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	623b      	str	r3, [r7, #32]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d102      	bne.n	8009676 <xQueueGenericCreateStatic+0x7e>
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <xQueueGenericCreateStatic+0x82>
 8009676:	2301      	movs	r3, #1
 8009678:	e000      	b.n	800967c <xQueueGenericCreateStatic+0x84>
 800967a:	2300      	movs	r3, #0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10a      	bne.n	8009696 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	61fb      	str	r3, [r7, #28]
}
 8009692:	bf00      	nop
 8009694:	e7fe      	b.n	8009694 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009696:	2350      	movs	r3, #80	; 0x50
 8009698:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b50      	cmp	r3, #80	; 0x50
 800969e:	d00a      	beq.n	80096b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	61bb      	str	r3, [r7, #24]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00d      	beq.n	80096de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	4613      	mov	r3, r2
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	68b9      	ldr	r1, [r7, #8]
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 f805 	bl	80096e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3730      	adds	r7, #48	; 0x30
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d103      	bne.n	8009704 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	e002      	b.n	800970a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009716:	2101      	movs	r1, #1
 8009718:	69b8      	ldr	r0, [r7, #24]
 800971a:	f7ff ff05 	bl	8009528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	78fa      	ldrb	r2, [r7, #3]
 8009722:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08e      	sub	sp, #56	; 0x38
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800973e:	2300      	movs	r3, #0
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <xQueueGenericSend+0x32>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d103      	bne.n	8009770 <xQueueGenericSend+0x40>
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <xQueueGenericSend+0x44>
 8009770:	2301      	movs	r3, #1
 8009772:	e000      	b.n	8009776 <xQueueGenericSend+0x46>
 8009774:	2300      	movs	r3, #0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10a      	bne.n	8009790 <xQueueGenericSend+0x60>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800978c:	bf00      	nop
 800978e:	e7fe      	b.n	800978e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d103      	bne.n	800979e <xQueueGenericSend+0x6e>
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979a:	2b01      	cmp	r3, #1
 800979c:	d101      	bne.n	80097a2 <xQueueGenericSend+0x72>
 800979e:	2301      	movs	r3, #1
 80097a0:	e000      	b.n	80097a4 <xQueueGenericSend+0x74>
 80097a2:	2300      	movs	r3, #0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10a      	bne.n	80097be <xQueueGenericSend+0x8e>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	623b      	str	r3, [r7, #32]
}
 80097ba:	bf00      	nop
 80097bc:	e7fe      	b.n	80097bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097be:	f001 f9e7 	bl	800ab90 <xTaskGetSchedulerState>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d102      	bne.n	80097ce <xQueueGenericSend+0x9e>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <xQueueGenericSend+0xa2>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <xQueueGenericSend+0xa4>
 80097d2:	2300      	movs	r3, #0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10a      	bne.n	80097ee <xQueueGenericSend+0xbe>
	__asm volatile
 80097d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	61fb      	str	r3, [r7, #28]
}
 80097ea:	bf00      	nop
 80097ec:	e7fe      	b.n	80097ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097ee:	f001 ff29 	bl	800b644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d302      	bcc.n	8009804 <xQueueGenericSend+0xd4>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d129      	bne.n	8009858 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	68b9      	ldr	r1, [r7, #8]
 8009808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800980a:	f000 fa0b 	bl	8009c24 <prvCopyDataToQueue>
 800980e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	d010      	beq.n	800983a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	3324      	adds	r3, #36	; 0x24
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fff5 	bl	800a80c <xTaskRemoveFromEventList>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d013      	beq.n	8009850 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009828:	4b3f      	ldr	r3, [pc, #252]	; (8009928 <xQueueGenericSend+0x1f8>)
 800982a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	e00a      	b.n	8009850 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009840:	4b39      	ldr	r3, [pc, #228]	; (8009928 <xQueueGenericSend+0x1f8>)
 8009842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009850:	f001 ff28 	bl	800b6a4 <vPortExitCritical>
				return pdPASS;
 8009854:	2301      	movs	r3, #1
 8009856:	e063      	b.n	8009920 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d103      	bne.n	8009866 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800985e:	f001 ff21 	bl	800b6a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009862:	2300      	movs	r3, #0
 8009864:	e05c      	b.n	8009920 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800986c:	f107 0314 	add.w	r3, r7, #20
 8009870:	4618      	mov	r0, r3
 8009872:	f001 f82f 	bl	800a8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009876:	2301      	movs	r3, #1
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800987a:	f001 ff13 	bl	800b6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800987e:	f000 fd9b 	bl	800a3b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009882:	f001 fedf 	bl	800b644 <vPortEnterCritical>
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800988c:	b25b      	sxtb	r3, r3
 800988e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009892:	d103      	bne.n	800989c <xQueueGenericSend+0x16c>
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098a2:	b25b      	sxtb	r3, r3
 80098a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a8:	d103      	bne.n	80098b2 <xQueueGenericSend+0x182>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098b2:	f001 fef7 	bl	800b6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098b6:	1d3a      	adds	r2, r7, #4
 80098b8:	f107 0314 	add.w	r3, r7, #20
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f001 f81e 	bl	800a900 <xTaskCheckForTimeOut>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d124      	bne.n	8009914 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098cc:	f000 faa2 	bl	8009e14 <prvIsQueueFull>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d018      	beq.n	8009908 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	3310      	adds	r3, #16
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	4611      	mov	r1, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 ff44 	bl	800a76c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098e6:	f000 fa2d 	bl	8009d44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098ea:	f000 fd73 	bl	800a3d4 <xTaskResumeAll>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f47f af7c 	bne.w	80097ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <xQueueGenericSend+0x1f8>)
 80098f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	e772      	b.n	80097ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800990a:	f000 fa1b 	bl	8009d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800990e:	f000 fd61 	bl	800a3d4 <xTaskResumeAll>
 8009912:	e76c      	b.n	80097ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009916:	f000 fa15 	bl	8009d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800991a:	f000 fd5b 	bl	800a3d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800991e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009920:	4618      	mov	r0, r3
 8009922:	3738      	adds	r7, #56	; 0x38
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b090      	sub	sp, #64	; 0x40
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d103      	bne.n	8009968 <xQueueGenericSendFromISR+0x3c>
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <xQueueGenericSendFromISR+0x40>
 8009968:	2301      	movs	r3, #1
 800996a:	e000      	b.n	800996e <xQueueGenericSendFromISR+0x42>
 800996c:	2300      	movs	r3, #0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10a      	bne.n	8009988 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	2b02      	cmp	r3, #2
 800998c:	d103      	bne.n	8009996 <xQueueGenericSendFromISR+0x6a>
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <xQueueGenericSendFromISR+0x6e>
 8009996:	2301      	movs	r3, #1
 8009998:	e000      	b.n	800999c <xQueueGenericSendFromISR+0x70>
 800999a:	2300      	movs	r3, #0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	623b      	str	r3, [r7, #32]
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099b6:	f001 ff27 	bl	800b808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099ba:	f3ef 8211 	mrs	r2, BASEPRI
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	61fa      	str	r2, [r7, #28]
 80099d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099de:	429a      	cmp	r2, r3
 80099e0:	d302      	bcc.n	80099e8 <xQueueGenericSendFromISR+0xbc>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d12f      	bne.n	8009a48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099fe:	f000 f911 	bl	8009c24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0a:	d112      	bne.n	8009a32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d016      	beq.n	8009a42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	3324      	adds	r3, #36	; 0x24
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 fef7 	bl	800a80c <xTaskRemoveFromEventList>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00e      	beq.n	8009a42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00b      	beq.n	8009a42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	e007      	b.n	8009a42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a36:	3301      	adds	r3, #1
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	b25a      	sxtb	r2, r3
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a42:	2301      	movs	r3, #1
 8009a44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009a46:	e001      	b.n	8009a4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3740      	adds	r7, #64	; 0x40
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08c      	sub	sp, #48	; 0x30
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a70:	2300      	movs	r3, #0
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <xQueueReceive+0x30>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	623b      	str	r3, [r7, #32]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d103      	bne.n	8009aa2 <xQueueReceive+0x3e>
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <xQueueReceive+0x42>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <xQueueReceive+0x44>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <xQueueReceive+0x5e>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	61fb      	str	r3, [r7, #28]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ac2:	f001 f865 	bl	800ab90 <xTaskGetSchedulerState>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d102      	bne.n	8009ad2 <xQueueReceive+0x6e>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <xQueueReceive+0x72>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e000      	b.n	8009ad8 <xQueueReceive+0x74>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10a      	bne.n	8009af2 <xQueueReceive+0x8e>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	61bb      	str	r3, [r7, #24]
}
 8009aee:	bf00      	nop
 8009af0:	e7fe      	b.n	8009af0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009af2:	f001 fda7 	bl	800b644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d01f      	beq.n	8009b42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b06:	f000 f8f7 	bl	8009cf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	1e5a      	subs	r2, r3, #1
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00f      	beq.n	8009b3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	3310      	adds	r3, #16
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fe74 	bl	800a80c <xTaskRemoveFromEventList>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d007      	beq.n	8009b3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b2a:	4b3d      	ldr	r3, [pc, #244]	; (8009c20 <xQueueReceive+0x1bc>)
 8009b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b3a:	f001 fdb3 	bl	800b6a4 <vPortExitCritical>
				return pdPASS;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e069      	b.n	8009c16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d103      	bne.n	8009b50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b48:	f001 fdac 	bl	800b6a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e062      	b.n	8009c16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d106      	bne.n	8009b64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b56:	f107 0310 	add.w	r3, r7, #16
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 feba 	bl	800a8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b60:	2301      	movs	r3, #1
 8009b62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b64:	f001 fd9e 	bl	800b6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b68:	f000 fc26 	bl	800a3b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b6c:	f001 fd6a 	bl	800b644 <vPortEnterCritical>
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b76:	b25b      	sxtb	r3, r3
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7c:	d103      	bne.n	8009b86 <xQueueReceive+0x122>
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b8c:	b25b      	sxtb	r3, r3
 8009b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b92:	d103      	bne.n	8009b9c <xQueueReceive+0x138>
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b9c:	f001 fd82 	bl	800b6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ba0:	1d3a      	adds	r2, r7, #4
 8009ba2:	f107 0310 	add.w	r3, r7, #16
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fea9 	bl	800a900 <xTaskCheckForTimeOut>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d123      	bne.n	8009bfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb6:	f000 f917 	bl	8009de8 <prvIsQueueEmpty>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d017      	beq.n	8009bf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	3324      	adds	r3, #36	; 0x24
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fdcf 	bl	800a76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bd0:	f000 f8b8 	bl	8009d44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009bd4:	f000 fbfe 	bl	800a3d4 <xTaskResumeAll>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d189      	bne.n	8009af2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009bde:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <xQueueReceive+0x1bc>)
 8009be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	e780      	b.n	8009af2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bf2:	f000 f8a7 	bl	8009d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bf6:	f000 fbed 	bl	800a3d4 <xTaskResumeAll>
 8009bfa:	e77a      	b.n	8009af2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bfe:	f000 f8a1 	bl	8009d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c02:	f000 fbe7 	bl	800a3d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c08:	f000 f8ee 	bl	8009de8 <prvIsQueueEmpty>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f43f af6f 	beq.w	8009af2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3730      	adds	r7, #48	; 0x30
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	e000ed04 	.word	0xe000ed04

08009c24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c30:	2300      	movs	r3, #0
 8009c32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10d      	bne.n	8009c5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d14d      	bne.n	8009ce6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 ffbc 	bl	800abcc <xTaskPriorityDisinherit>
 8009c54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	609a      	str	r2, [r3, #8]
 8009c5c:	e043      	b.n	8009ce6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d119      	bne.n	8009c98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6858      	ldr	r0, [r3, #4]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	f002 fe0a 	bl	800c888 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	441a      	add	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d32b      	bcc.n	8009ce6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	605a      	str	r2, [r3, #4]
 8009c96:	e026      	b.n	8009ce6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	68d8      	ldr	r0, [r3, #12]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	f002 fdf0 	bl	800c888 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	68da      	ldr	r2, [r3, #12]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb0:	425b      	negs	r3, r3
 8009cb2:	441a      	add	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	68da      	ldr	r2, [r3, #12]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d207      	bcs.n	8009cd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	425b      	negs	r3, r3
 8009cce:	441a      	add	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d105      	bne.n	8009ce6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009cee:	697b      	ldr	r3, [r7, #20]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d018      	beq.n	8009d3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	441a      	add	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d303      	bcc.n	8009d2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	68d9      	ldr	r1, [r3, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d34:	461a      	mov	r2, r3
 8009d36:	6838      	ldr	r0, [r7, #0]
 8009d38:	f002 fda6 	bl	800c888 <memcpy>
	}
}
 8009d3c:	bf00      	nop
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d4c:	f001 fc7a 	bl	800b644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d58:	e011      	b.n	8009d7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d012      	beq.n	8009d88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3324      	adds	r3, #36	; 0x24
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 fd50 	bl	800a80c <xTaskRemoveFromEventList>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d72:	f000 fe27 	bl	800a9c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dce9      	bgt.n	8009d5a <prvUnlockQueue+0x16>
 8009d86:	e000      	b.n	8009d8a <prvUnlockQueue+0x46>
					break;
 8009d88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	22ff      	movs	r2, #255	; 0xff
 8009d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d92:	f001 fc87 	bl	800b6a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d96:	f001 fc55 	bl	800b644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009da0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009da2:	e011      	b.n	8009dc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d012      	beq.n	8009dd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3310      	adds	r3, #16
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 fd2b 	bl	800a80c <xTaskRemoveFromEventList>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009dbc:	f000 fe02 	bl	800a9c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dce9      	bgt.n	8009da4 <prvUnlockQueue+0x60>
 8009dd0:	e000      	b.n	8009dd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009dd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	22ff      	movs	r2, #255	; 0xff
 8009dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ddc:	f001 fc62 	bl	800b6a4 <vPortExitCritical>
}
 8009de0:	bf00      	nop
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009df0:	f001 fc28 	bl	800b644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d102      	bne.n	8009e02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e001      	b.n	8009e06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e06:	f001 fc4d 	bl	800b6a4 <vPortExitCritical>

	return xReturn;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e1c:	f001 fc12 	bl	800b644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d102      	bne.n	8009e32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	e001      	b.n	8009e36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e36:	f001 fc35 	bl	800b6a4 <vPortExitCritical>

	return xReturn;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	e014      	b.n	8009e7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e54:	4a0f      	ldr	r2, [pc, #60]	; (8009e94 <vQueueAddToRegistry+0x50>)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10b      	bne.n	8009e78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e60:	490c      	ldr	r1, [pc, #48]	; (8009e94 <vQueueAddToRegistry+0x50>)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e6a:	4a0a      	ldr	r2, [pc, #40]	; (8009e94 <vQueueAddToRegistry+0x50>)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	4413      	add	r3, r2
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e76:	e006      	b.n	8009e86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b07      	cmp	r3, #7
 8009e82:	d9e7      	bls.n	8009e54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20000af0 	.word	0x20000af0

08009e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ea8:	f001 fbcc 	bl	800b644 <vPortEnterCritical>
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009eb2:	b25b      	sxtb	r3, r3
 8009eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb8:	d103      	bne.n	8009ec2 <vQueueWaitForMessageRestricted+0x2a>
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ec8:	b25b      	sxtb	r3, r3
 8009eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ece:	d103      	bne.n	8009ed8 <vQueueWaitForMessageRestricted+0x40>
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ed8:	f001 fbe4 	bl	800b6a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d106      	bne.n	8009ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	3324      	adds	r3, #36	; 0x24
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 fc61 	bl	800a7b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ef2:	6978      	ldr	r0, [r7, #20]
 8009ef4:	f7ff ff26 	bl	8009d44 <prvUnlockQueue>
	}
 8009ef8:	bf00      	nop
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08e      	sub	sp, #56	; 0x38
 8009f04:	af04      	add	r7, sp, #16
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	623b      	str	r3, [r7, #32]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10a      	bne.n	8009f46 <xTaskCreateStatic+0x46>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	61fb      	str	r3, [r7, #28]
}
 8009f42:	bf00      	nop
 8009f44:	e7fe      	b.n	8009f44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f46:	23bc      	movs	r3, #188	; 0xbc
 8009f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2bbc      	cmp	r3, #188	; 0xbc
 8009f4e:	d00a      	beq.n	8009f66 <xTaskCreateStatic+0x66>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	61bb      	str	r3, [r7, #24]
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d01e      	beq.n	8009fac <xTaskCreateStatic+0xac>
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d01b      	beq.n	8009fac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	2202      	movs	r2, #2
 8009f82:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f86:	2300      	movs	r3, #0
 8009f88:	9303      	str	r3, [sp, #12]
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	9302      	str	r3, [sp, #8]
 8009f8e:	f107 0314 	add.w	r3, r7, #20
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	68b9      	ldr	r1, [r7, #8]
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 f850 	bl	800a044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fa6:	f000 f8f3 	bl	800a190 <prvAddNewTaskToReadyList>
 8009faa:	e001      	b.n	8009fb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009fac:	2300      	movs	r3, #0
 8009fae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009fb0:	697b      	ldr	r3, [r7, #20]
	}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3728      	adds	r7, #40	; 0x28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b08c      	sub	sp, #48	; 0x30
 8009fbe:	af04      	add	r7, sp, #16
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	603b      	str	r3, [r7, #0]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009fca:	88fb      	ldrh	r3, [r7, #6]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 fc5a 	bl	800b888 <pvPortMalloc>
 8009fd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00e      	beq.n	8009ffa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009fdc:	20bc      	movs	r0, #188	; 0xbc
 8009fde:	f001 fc53 	bl	800b888 <pvPortMalloc>
 8009fe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	631a      	str	r2, [r3, #48]	; 0x30
 8009ff0:	e005      	b.n	8009ffe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ff2:	6978      	ldr	r0, [r7, #20]
 8009ff4:	f001 fd14 	bl	800ba20 <vPortFree>
 8009ff8:	e001      	b.n	8009ffe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d017      	beq.n	800a034 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a00c:	88fa      	ldrh	r2, [r7, #6]
 800a00e:	2300      	movs	r3, #0
 800a010:	9303      	str	r3, [sp, #12]
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	9302      	str	r3, [sp, #8]
 800a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f80e 	bl	800a044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a028:	69f8      	ldr	r0, [r7, #28]
 800a02a:	f000 f8b1 	bl	800a190 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a02e:	2301      	movs	r3, #1
 800a030:	61bb      	str	r3, [r7, #24]
 800a032:	e002      	b.n	800a03a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a034:	f04f 33ff 	mov.w	r3, #4294967295
 800a038:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a03a:	69bb      	ldr	r3, [r7, #24]
	}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3720      	adds	r7, #32
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	461a      	mov	r2, r3
 800a05c:	21a5      	movs	r1, #165	; 0xa5
 800a05e:	f002 fc21 	bl	800c8a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a06c:	3b01      	subs	r3, #1
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	f023 0307 	bic.w	r3, r3, #7
 800a07a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	f003 0307 	and.w	r3, r3, #7
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00a      	beq.n	800a09c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	617b      	str	r3, [r7, #20]
}
 800a098:	bf00      	nop
 800a09a:	e7fe      	b.n	800a09a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d01f      	beq.n	800a0e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61fb      	str	r3, [r7, #28]
 800a0a6:	e012      	b.n	800a0ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	7819      	ldrb	r1, [r3, #0]
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	3334      	adds	r3, #52	; 0x34
 800a0b8:	460a      	mov	r2, r1
 800a0ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d006      	beq.n	800a0d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	2b0f      	cmp	r3, #15
 800a0d2:	d9e9      	bls.n	800a0a8 <prvInitialiseNewTask+0x64>
 800a0d4:	e000      	b.n	800a0d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a0d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0e0:	e003      	b.n	800a0ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	2b37      	cmp	r3, #55	; 0x37
 800a0ee:	d901      	bls.n	800a0f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0f0:	2337      	movs	r3, #55	; 0x37
 800a0f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	2200      	movs	r2, #0
 800a104:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	3304      	adds	r3, #4
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff f978 	bl	8009400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	3318      	adds	r3, #24
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff f973 	bl	8009400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a12e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a132:	2200      	movs	r2, #0
 800a134:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	3354      	adds	r3, #84	; 0x54
 800a144:	2260      	movs	r2, #96	; 0x60
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f002 fbab 	bl	800c8a4 <memset>
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	4a0c      	ldr	r2, [pc, #48]	; (800a184 <prvInitialiseNewTask+0x140>)
 800a152:	659a      	str	r2, [r3, #88]	; 0x58
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	4a0c      	ldr	r2, [pc, #48]	; (800a188 <prvInitialiseNewTask+0x144>)
 800a158:	65da      	str	r2, [r3, #92]	; 0x5c
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	4a0b      	ldr	r2, [pc, #44]	; (800a18c <prvInitialiseNewTask+0x148>)
 800a15e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	68f9      	ldr	r1, [r7, #12]
 800a164:	69b8      	ldr	r0, [r7, #24]
 800a166:	f001 f941 	bl	800b3ec <pxPortInitialiseStack>
 800a16a:	4602      	mov	r2, r0
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a17a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a17c:	bf00      	nop
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	0800fc24 	.word	0x0800fc24
 800a188:	0800fc44 	.word	0x0800fc44
 800a18c:	0800fc04 	.word	0x0800fc04

0800a190 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a198:	f001 fa54 	bl	800b644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a19c:	4b2d      	ldr	r3, [pc, #180]	; (800a254 <prvAddNewTaskToReadyList+0xc4>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	4a2c      	ldr	r2, [pc, #176]	; (800a254 <prvAddNewTaskToReadyList+0xc4>)
 800a1a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a1a6:	4b2c      	ldr	r3, [pc, #176]	; (800a258 <prvAddNewTaskToReadyList+0xc8>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d109      	bne.n	800a1c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a1ae:	4a2a      	ldr	r2, [pc, #168]	; (800a258 <prvAddNewTaskToReadyList+0xc8>)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1b4:	4b27      	ldr	r3, [pc, #156]	; (800a254 <prvAddNewTaskToReadyList+0xc4>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d110      	bne.n	800a1de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a1bc:	f000 fc26 	bl	800aa0c <prvInitialiseTaskLists>
 800a1c0:	e00d      	b.n	800a1de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a1c2:	4b26      	ldr	r3, [pc, #152]	; (800a25c <prvAddNewTaskToReadyList+0xcc>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d109      	bne.n	800a1de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a1ca:	4b23      	ldr	r3, [pc, #140]	; (800a258 <prvAddNewTaskToReadyList+0xc8>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d802      	bhi.n	800a1de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1d8:	4a1f      	ldr	r2, [pc, #124]	; (800a258 <prvAddNewTaskToReadyList+0xc8>)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1de:	4b20      	ldr	r3, [pc, #128]	; (800a260 <prvAddNewTaskToReadyList+0xd0>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	4a1e      	ldr	r2, [pc, #120]	; (800a260 <prvAddNewTaskToReadyList+0xd0>)
 800a1e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a1e8:	4b1d      	ldr	r3, [pc, #116]	; (800a260 <prvAddNewTaskToReadyList+0xd0>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f4:	4b1b      	ldr	r3, [pc, #108]	; (800a264 <prvAddNewTaskToReadyList+0xd4>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d903      	bls.n	800a204 <prvAddNewTaskToReadyList+0x74>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	4a18      	ldr	r2, [pc, #96]	; (800a264 <prvAddNewTaskToReadyList+0xd4>)
 800a202:	6013      	str	r3, [r2, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4a15      	ldr	r2, [pc, #84]	; (800a268 <prvAddNewTaskToReadyList+0xd8>)
 800a212:	441a      	add	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3304      	adds	r3, #4
 800a218:	4619      	mov	r1, r3
 800a21a:	4610      	mov	r0, r2
 800a21c:	f7ff f8fd 	bl	800941a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a220:	f001 fa40 	bl	800b6a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a224:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <prvAddNewTaskToReadyList+0xcc>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00e      	beq.n	800a24a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <prvAddNewTaskToReadyList+0xc8>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	429a      	cmp	r2, r3
 800a238:	d207      	bcs.n	800a24a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a23a:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <prvAddNewTaskToReadyList+0xdc>)
 800a23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a24a:	bf00      	nop
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20001004 	.word	0x20001004
 800a258:	20000b30 	.word	0x20000b30
 800a25c:	20001010 	.word	0x20001010
 800a260:	20001020 	.word	0x20001020
 800a264:	2000100c 	.word	0x2000100c
 800a268:	20000b34 	.word	0x20000b34
 800a26c:	e000ed04 	.word	0xe000ed04

0800a270 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d017      	beq.n	800a2b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a282:	4b13      	ldr	r3, [pc, #76]	; (800a2d0 <vTaskDelay+0x60>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <vTaskDelay+0x30>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	60bb      	str	r3, [r7, #8]
}
 800a29c:	bf00      	nop
 800a29e:	e7fe      	b.n	800a29e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a2a0:	f000 f88a 	bl	800a3b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fcfe 	bl	800aca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a2ac:	f000 f892 	bl	800a3d4 <xTaskResumeAll>
 800a2b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d107      	bne.n	800a2c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a2b8:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <vTaskDelay+0x64>)
 800a2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2c8:	bf00      	nop
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	2000102c 	.word	0x2000102c
 800a2d4:	e000ed04 	.word	0xe000ed04

0800a2d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	; 0x28
 800a2dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2e6:	463a      	mov	r2, r7
 800a2e8:	1d39      	adds	r1, r7, #4
 800a2ea:	f107 0308 	add.w	r3, r7, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff f832 	bl	8009358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	9202      	str	r2, [sp, #8]
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	2300      	movs	r3, #0
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	2300      	movs	r3, #0
 800a304:	460a      	mov	r2, r1
 800a306:	4924      	ldr	r1, [pc, #144]	; (800a398 <vTaskStartScheduler+0xc0>)
 800a308:	4824      	ldr	r0, [pc, #144]	; (800a39c <vTaskStartScheduler+0xc4>)
 800a30a:	f7ff fdf9 	bl	8009f00 <xTaskCreateStatic>
 800a30e:	4603      	mov	r3, r0
 800a310:	4a23      	ldr	r2, [pc, #140]	; (800a3a0 <vTaskStartScheduler+0xc8>)
 800a312:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a314:	4b22      	ldr	r3, [pc, #136]	; (800a3a0 <vTaskStartScheduler+0xc8>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a31c:	2301      	movs	r3, #1
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	e001      	b.n	800a326 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a322:	2300      	movs	r3, #0
 800a324:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d102      	bne.n	800a332 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a32c:	f000 fd10 	bl	800ad50 <xTimerCreateTimerTask>
 800a330:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d11b      	bne.n	800a370 <vTaskStartScheduler+0x98>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	613b      	str	r3, [r7, #16]
}
 800a34a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a34c:	4b15      	ldr	r3, [pc, #84]	; (800a3a4 <vTaskStartScheduler+0xcc>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3354      	adds	r3, #84	; 0x54
 800a352:	4a15      	ldr	r2, [pc, #84]	; (800a3a8 <vTaskStartScheduler+0xd0>)
 800a354:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a356:	4b15      	ldr	r3, [pc, #84]	; (800a3ac <vTaskStartScheduler+0xd4>)
 800a358:	f04f 32ff 	mov.w	r2, #4294967295
 800a35c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a35e:	4b14      	ldr	r3, [pc, #80]	; (800a3b0 <vTaskStartScheduler+0xd8>)
 800a360:	2201      	movs	r2, #1
 800a362:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a364:	4b13      	ldr	r3, [pc, #76]	; (800a3b4 <vTaskStartScheduler+0xdc>)
 800a366:	2200      	movs	r2, #0
 800a368:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a36a:	f001 f8c9 	bl	800b500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a36e:	e00e      	b.n	800a38e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a376:	d10a      	bne.n	800a38e <vTaskStartScheduler+0xb6>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	60fb      	str	r3, [r7, #12]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <vTaskStartScheduler+0xb4>
}
 800a38e:	bf00      	nop
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	0800d1ec 	.word	0x0800d1ec
 800a39c:	0800a9dd 	.word	0x0800a9dd
 800a3a0:	20001028 	.word	0x20001028
 800a3a4:	20000b30 	.word	0x20000b30
 800a3a8:	20000128 	.word	0x20000128
 800a3ac:	20001024 	.word	0x20001024
 800a3b0:	20001010 	.word	0x20001010
 800a3b4:	20001008 	.word	0x20001008

0800a3b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a3bc:	4b04      	ldr	r3, [pc, #16]	; (800a3d0 <vTaskSuspendAll+0x18>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	4a03      	ldr	r2, [pc, #12]	; (800a3d0 <vTaskSuspendAll+0x18>)
 800a3c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a3c6:	bf00      	nop
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	2000102c 	.word	0x2000102c

0800a3d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3e2:	4b42      	ldr	r3, [pc, #264]	; (800a4ec <xTaskResumeAll+0x118>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10a      	bne.n	800a400 <xTaskResumeAll+0x2c>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	603b      	str	r3, [r7, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a400:	f001 f920 	bl	800b644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a404:	4b39      	ldr	r3, [pc, #228]	; (800a4ec <xTaskResumeAll+0x118>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3b01      	subs	r3, #1
 800a40a:	4a38      	ldr	r2, [pc, #224]	; (800a4ec <xTaskResumeAll+0x118>)
 800a40c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a40e:	4b37      	ldr	r3, [pc, #220]	; (800a4ec <xTaskResumeAll+0x118>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d162      	bne.n	800a4dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a416:	4b36      	ldr	r3, [pc, #216]	; (800a4f0 <xTaskResumeAll+0x11c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d05e      	beq.n	800a4dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a41e:	e02f      	b.n	800a480 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a420:	4b34      	ldr	r3, [pc, #208]	; (800a4f4 <xTaskResumeAll+0x120>)
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3318      	adds	r3, #24
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff f851 	bl	80094d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3304      	adds	r3, #4
 800a436:	4618      	mov	r0, r3
 800a438:	f7ff f84c 	bl	80094d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	4b2d      	ldr	r3, [pc, #180]	; (800a4f8 <xTaskResumeAll+0x124>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	d903      	bls.n	800a450 <xTaskResumeAll+0x7c>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	4a2a      	ldr	r2, [pc, #168]	; (800a4f8 <xTaskResumeAll+0x124>)
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a454:	4613      	mov	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4413      	add	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4a27      	ldr	r2, [pc, #156]	; (800a4fc <xTaskResumeAll+0x128>)
 800a45e:	441a      	add	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3304      	adds	r3, #4
 800a464:	4619      	mov	r1, r3
 800a466:	4610      	mov	r0, r2
 800a468:	f7fe ffd7 	bl	800941a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a470:	4b23      	ldr	r3, [pc, #140]	; (800a500 <xTaskResumeAll+0x12c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a476:	429a      	cmp	r2, r3
 800a478:	d302      	bcc.n	800a480 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a47a:	4b22      	ldr	r3, [pc, #136]	; (800a504 <xTaskResumeAll+0x130>)
 800a47c:	2201      	movs	r2, #1
 800a47e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a480:	4b1c      	ldr	r3, [pc, #112]	; (800a4f4 <xTaskResumeAll+0x120>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1cb      	bne.n	800a420 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a48e:	f000 fb5f 	bl	800ab50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a492:	4b1d      	ldr	r3, [pc, #116]	; (800a508 <xTaskResumeAll+0x134>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d010      	beq.n	800a4c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a49e:	f000 f847 	bl	800a530 <xTaskIncrementTick>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a4a8:	4b16      	ldr	r3, [pc, #88]	; (800a504 <xTaskResumeAll+0x130>)
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1f1      	bne.n	800a49e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a4ba:	4b13      	ldr	r3, [pc, #76]	; (800a508 <xTaskResumeAll+0x134>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4c0:	4b10      	ldr	r3, [pc, #64]	; (800a504 <xTaskResumeAll+0x130>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d009      	beq.n	800a4dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4cc:	4b0f      	ldr	r3, [pc, #60]	; (800a50c <xTaskResumeAll+0x138>)
 800a4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4dc:	f001 f8e2 	bl	800b6a4 <vPortExitCritical>

	return xAlreadyYielded;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	2000102c 	.word	0x2000102c
 800a4f0:	20001004 	.word	0x20001004
 800a4f4:	20000fc4 	.word	0x20000fc4
 800a4f8:	2000100c 	.word	0x2000100c
 800a4fc:	20000b34 	.word	0x20000b34
 800a500:	20000b30 	.word	0x20000b30
 800a504:	20001018 	.word	0x20001018
 800a508:	20001014 	.word	0x20001014
 800a50c:	e000ed04 	.word	0xe000ed04

0800a510 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a516:	4b05      	ldr	r3, [pc, #20]	; (800a52c <xTaskGetTickCount+0x1c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a51c:	687b      	ldr	r3, [r7, #4]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	20001008 	.word	0x20001008

0800a530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a53a:	4b4f      	ldr	r3, [pc, #316]	; (800a678 <xTaskIncrementTick+0x148>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f040 808f 	bne.w	800a662 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a544:	4b4d      	ldr	r3, [pc, #308]	; (800a67c <xTaskIncrementTick+0x14c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a54c:	4a4b      	ldr	r2, [pc, #300]	; (800a67c <xTaskIncrementTick+0x14c>)
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d120      	bne.n	800a59a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a558:	4b49      	ldr	r3, [pc, #292]	; (800a680 <xTaskIncrementTick+0x150>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00a      	beq.n	800a578 <xTaskIncrementTick+0x48>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	603b      	str	r3, [r7, #0]
}
 800a574:	bf00      	nop
 800a576:	e7fe      	b.n	800a576 <xTaskIncrementTick+0x46>
 800a578:	4b41      	ldr	r3, [pc, #260]	; (800a680 <xTaskIncrementTick+0x150>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	4b41      	ldr	r3, [pc, #260]	; (800a684 <xTaskIncrementTick+0x154>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a3f      	ldr	r2, [pc, #252]	; (800a680 <xTaskIncrementTick+0x150>)
 800a584:	6013      	str	r3, [r2, #0]
 800a586:	4a3f      	ldr	r2, [pc, #252]	; (800a684 <xTaskIncrementTick+0x154>)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	4b3e      	ldr	r3, [pc, #248]	; (800a688 <xTaskIncrementTick+0x158>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3301      	adds	r3, #1
 800a592:	4a3d      	ldr	r2, [pc, #244]	; (800a688 <xTaskIncrementTick+0x158>)
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	f000 fadb 	bl	800ab50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a59a:	4b3c      	ldr	r3, [pc, #240]	; (800a68c <xTaskIncrementTick+0x15c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d349      	bcc.n	800a638 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5a4:	4b36      	ldr	r3, [pc, #216]	; (800a680 <xTaskIncrementTick+0x150>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d104      	bne.n	800a5b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5ae:	4b37      	ldr	r3, [pc, #220]	; (800a68c <xTaskIncrementTick+0x15c>)
 800a5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b4:	601a      	str	r2, [r3, #0]
					break;
 800a5b6:	e03f      	b.n	800a638 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b8:	4b31      	ldr	r3, [pc, #196]	; (800a680 <xTaskIncrementTick+0x150>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d203      	bcs.n	800a5d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5d0:	4a2e      	ldr	r2, [pc, #184]	; (800a68c <xTaskIncrementTick+0x15c>)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5d6:	e02f      	b.n	800a638 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe ff79 	bl	80094d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d004      	beq.n	800a5f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	3318      	adds	r3, #24
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe ff70 	bl	80094d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f8:	4b25      	ldr	r3, [pc, #148]	; (800a690 <xTaskIncrementTick+0x160>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d903      	bls.n	800a608 <xTaskIncrementTick+0xd8>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a604:	4a22      	ldr	r2, [pc, #136]	; (800a690 <xTaskIncrementTick+0x160>)
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60c:	4613      	mov	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4a1f      	ldr	r2, [pc, #124]	; (800a694 <xTaskIncrementTick+0x164>)
 800a616:	441a      	add	r2, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	3304      	adds	r3, #4
 800a61c:	4619      	mov	r1, r3
 800a61e:	4610      	mov	r0, r2
 800a620:	f7fe fefb 	bl	800941a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a628:	4b1b      	ldr	r3, [pc, #108]	; (800a698 <xTaskIncrementTick+0x168>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	429a      	cmp	r2, r3
 800a630:	d3b8      	bcc.n	800a5a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a632:	2301      	movs	r3, #1
 800a634:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a636:	e7b5      	b.n	800a5a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a638:	4b17      	ldr	r3, [pc, #92]	; (800a698 <xTaskIncrementTick+0x168>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a63e:	4915      	ldr	r1, [pc, #84]	; (800a694 <xTaskIncrementTick+0x164>)
 800a640:	4613      	mov	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	440b      	add	r3, r1
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d901      	bls.n	800a654 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a650:	2301      	movs	r3, #1
 800a652:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a654:	4b11      	ldr	r3, [pc, #68]	; (800a69c <xTaskIncrementTick+0x16c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d007      	beq.n	800a66c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a65c:	2301      	movs	r3, #1
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	e004      	b.n	800a66c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a662:	4b0f      	ldr	r3, [pc, #60]	; (800a6a0 <xTaskIncrementTick+0x170>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3301      	adds	r3, #1
 800a668:	4a0d      	ldr	r2, [pc, #52]	; (800a6a0 <xTaskIncrementTick+0x170>)
 800a66a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a66c:	697b      	ldr	r3, [r7, #20]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3718      	adds	r7, #24
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	2000102c 	.word	0x2000102c
 800a67c:	20001008 	.word	0x20001008
 800a680:	20000fbc 	.word	0x20000fbc
 800a684:	20000fc0 	.word	0x20000fc0
 800a688:	2000101c 	.word	0x2000101c
 800a68c:	20001024 	.word	0x20001024
 800a690:	2000100c 	.word	0x2000100c
 800a694:	20000b34 	.word	0x20000b34
 800a698:	20000b30 	.word	0x20000b30
 800a69c:	20001018 	.word	0x20001018
 800a6a0:	20001014 	.word	0x20001014

0800a6a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6aa:	4b2a      	ldr	r3, [pc, #168]	; (800a754 <vTaskSwitchContext+0xb0>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a6b2:	4b29      	ldr	r3, [pc, #164]	; (800a758 <vTaskSwitchContext+0xb4>)
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a6b8:	e046      	b.n	800a748 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a6ba:	4b27      	ldr	r3, [pc, #156]	; (800a758 <vTaskSwitchContext+0xb4>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c0:	4b26      	ldr	r3, [pc, #152]	; (800a75c <vTaskSwitchContext+0xb8>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	60fb      	str	r3, [r7, #12]
 800a6c6:	e010      	b.n	800a6ea <vTaskSwitchContext+0x46>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	607b      	str	r3, [r7, #4]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <vTaskSwitchContext+0x3e>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	60fb      	str	r3, [r7, #12]
 800a6ea:	491d      	ldr	r1, [pc, #116]	; (800a760 <vTaskSwitchContext+0xbc>)
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	440b      	add	r3, r1
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d0e4      	beq.n	800a6c8 <vTaskSwitchContext+0x24>
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4a15      	ldr	r2, [pc, #84]	; (800a760 <vTaskSwitchContext+0xbc>)
 800a70a:	4413      	add	r3, r2
 800a70c:	60bb      	str	r3, [r7, #8]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	605a      	str	r2, [r3, #4]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	3308      	adds	r3, #8
 800a720:	429a      	cmp	r2, r3
 800a722:	d104      	bne.n	800a72e <vTaskSwitchContext+0x8a>
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	605a      	str	r2, [r3, #4]
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	4a0b      	ldr	r2, [pc, #44]	; (800a764 <vTaskSwitchContext+0xc0>)
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	4a08      	ldr	r2, [pc, #32]	; (800a75c <vTaskSwitchContext+0xb8>)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a73e:	4b09      	ldr	r3, [pc, #36]	; (800a764 <vTaskSwitchContext+0xc0>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3354      	adds	r3, #84	; 0x54
 800a744:	4a08      	ldr	r2, [pc, #32]	; (800a768 <vTaskSwitchContext+0xc4>)
 800a746:	6013      	str	r3, [r2, #0]
}
 800a748:	bf00      	nop
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	2000102c 	.word	0x2000102c
 800a758:	20001018 	.word	0x20001018
 800a75c:	2000100c 	.word	0x2000100c
 800a760:	20000b34 	.word	0x20000b34
 800a764:	20000b30 	.word	0x20000b30
 800a768:	20000128 	.word	0x20000128

0800a76c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10a      	bne.n	800a792 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	60fb      	str	r3, [r7, #12]
}
 800a78e:	bf00      	nop
 800a790:	e7fe      	b.n	800a790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a792:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <vTaskPlaceOnEventList+0x44>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3318      	adds	r3, #24
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7fe fe61 	bl	8009462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	6838      	ldr	r0, [r7, #0]
 800a7a4:	f000 fa80 	bl	800aca8 <prvAddCurrentTaskToDelayedList>
}
 800a7a8:	bf00      	nop
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20000b30 	.word	0x20000b30

0800a7b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10a      	bne.n	800a7dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	617b      	str	r3, [r7, #20]
}
 800a7d8:	bf00      	nop
 800a7da:	e7fe      	b.n	800a7da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7dc:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <vTaskPlaceOnEventListRestricted+0x54>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	3318      	adds	r3, #24
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f7fe fe18 	bl	800941a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	68b8      	ldr	r0, [r7, #8]
 800a7fa:	f000 fa55 	bl	800aca8 <prvAddCurrentTaskToDelayedList>
	}
 800a7fe:	bf00      	nop
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20000b30 	.word	0x20000b30

0800a80c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10a      	bne.n	800a838 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	60fb      	str	r3, [r7, #12]
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	3318      	adds	r3, #24
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fe fe49 	bl	80094d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a842:	4b1e      	ldr	r3, [pc, #120]	; (800a8bc <xTaskRemoveFromEventList+0xb0>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d11d      	bne.n	800a886 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	3304      	adds	r3, #4
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fe40 	bl	80094d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a858:	4b19      	ldr	r3, [pc, #100]	; (800a8c0 <xTaskRemoveFromEventList+0xb4>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d903      	bls.n	800a868 <xTaskRemoveFromEventList+0x5c>
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	4a16      	ldr	r2, [pc, #88]	; (800a8c0 <xTaskRemoveFromEventList+0xb4>)
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a86c:	4613      	mov	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4413      	add	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4a13      	ldr	r2, [pc, #76]	; (800a8c4 <xTaskRemoveFromEventList+0xb8>)
 800a876:	441a      	add	r2, r3
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	3304      	adds	r3, #4
 800a87c:	4619      	mov	r1, r3
 800a87e:	4610      	mov	r0, r2
 800a880:	f7fe fdcb 	bl	800941a <vListInsertEnd>
 800a884:	e005      	b.n	800a892 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	3318      	adds	r3, #24
 800a88a:	4619      	mov	r1, r3
 800a88c:	480e      	ldr	r0, [pc, #56]	; (800a8c8 <xTaskRemoveFromEventList+0xbc>)
 800a88e:	f7fe fdc4 	bl	800941a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a896:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <xTaskRemoveFromEventList+0xc0>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d905      	bls.n	800a8ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <xTaskRemoveFromEventList+0xc4>)
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	e001      	b.n	800a8b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a8b0:	697b      	ldr	r3, [r7, #20]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	2000102c 	.word	0x2000102c
 800a8c0:	2000100c 	.word	0x2000100c
 800a8c4:	20000b34 	.word	0x20000b34
 800a8c8:	20000fc4 	.word	0x20000fc4
 800a8cc:	20000b30 	.word	0x20000b30
 800a8d0:	20001018 	.word	0x20001018

0800a8d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <vTaskInternalSetTimeOutState+0x24>)
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8e4:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <vTaskInternalSetTimeOutState+0x28>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	605a      	str	r2, [r3, #4]
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	2000101c 	.word	0x2000101c
 800a8fc:	20001008 	.word	0x20001008

0800a900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10a      	bne.n	800a926 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	613b      	str	r3, [r7, #16]
}
 800a922:	bf00      	nop
 800a924:	e7fe      	b.n	800a924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	60fb      	str	r3, [r7, #12]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a942:	f000 fe7f 	bl	800b644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a946:	4b1d      	ldr	r3, [pc, #116]	; (800a9bc <xTaskCheckForTimeOut+0xbc>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	69ba      	ldr	r2, [r7, #24]
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95e:	d102      	bne.n	800a966 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a960:	2300      	movs	r3, #0
 800a962:	61fb      	str	r3, [r7, #28]
 800a964:	e023      	b.n	800a9ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <xTaskCheckForTimeOut+0xc0>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d007      	beq.n	800a982 <xTaskCheckForTimeOut+0x82>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d302      	bcc.n	800a982 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a97c:	2301      	movs	r3, #1
 800a97e:	61fb      	str	r3, [r7, #28]
 800a980:	e015      	b.n	800a9ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d20b      	bcs.n	800a9a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	1ad2      	subs	r2, r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff ff9b 	bl	800a8d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	61fb      	str	r3, [r7, #28]
 800a9a2:	e004      	b.n	800a9ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a9ae:	f000 fe79 	bl	800b6a4 <vPortExitCritical>

	return xReturn;
 800a9b2:	69fb      	ldr	r3, [r7, #28]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3720      	adds	r7, #32
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	20001008 	.word	0x20001008
 800a9c0:	2000101c 	.word	0x2000101c

0800a9c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a9c8:	4b03      	ldr	r3, [pc, #12]	; (800a9d8 <vTaskMissedYield+0x14>)
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	601a      	str	r2, [r3, #0]
}
 800a9ce:	bf00      	nop
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	20001018 	.word	0x20001018

0800a9dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9e4:	f000 f852 	bl	800aa8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9e8:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <prvIdleTask+0x28>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d9f9      	bls.n	800a9e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9f0:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <prvIdleTask+0x2c>)
 800a9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa00:	e7f0      	b.n	800a9e4 <prvIdleTask+0x8>
 800aa02:	bf00      	nop
 800aa04:	20000b34 	.word	0x20000b34
 800aa08:	e000ed04 	.word	0xe000ed04

0800aa0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa12:	2300      	movs	r3, #0
 800aa14:	607b      	str	r3, [r7, #4]
 800aa16:	e00c      	b.n	800aa32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4a12      	ldr	r2, [pc, #72]	; (800aa6c <prvInitialiseTaskLists+0x60>)
 800aa24:	4413      	add	r3, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe fcca 	bl	80093c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	607b      	str	r3, [r7, #4]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b37      	cmp	r3, #55	; 0x37
 800aa36:	d9ef      	bls.n	800aa18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa38:	480d      	ldr	r0, [pc, #52]	; (800aa70 <prvInitialiseTaskLists+0x64>)
 800aa3a:	f7fe fcc1 	bl	80093c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa3e:	480d      	ldr	r0, [pc, #52]	; (800aa74 <prvInitialiseTaskLists+0x68>)
 800aa40:	f7fe fcbe 	bl	80093c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa44:	480c      	ldr	r0, [pc, #48]	; (800aa78 <prvInitialiseTaskLists+0x6c>)
 800aa46:	f7fe fcbb 	bl	80093c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa4a:	480c      	ldr	r0, [pc, #48]	; (800aa7c <prvInitialiseTaskLists+0x70>)
 800aa4c:	f7fe fcb8 	bl	80093c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa50:	480b      	ldr	r0, [pc, #44]	; (800aa80 <prvInitialiseTaskLists+0x74>)
 800aa52:	f7fe fcb5 	bl	80093c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa56:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <prvInitialiseTaskLists+0x78>)
 800aa58:	4a05      	ldr	r2, [pc, #20]	; (800aa70 <prvInitialiseTaskLists+0x64>)
 800aa5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa5c:	4b0a      	ldr	r3, [pc, #40]	; (800aa88 <prvInitialiseTaskLists+0x7c>)
 800aa5e:	4a05      	ldr	r2, [pc, #20]	; (800aa74 <prvInitialiseTaskLists+0x68>)
 800aa60:	601a      	str	r2, [r3, #0]
}
 800aa62:	bf00      	nop
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20000b34 	.word	0x20000b34
 800aa70:	20000f94 	.word	0x20000f94
 800aa74:	20000fa8 	.word	0x20000fa8
 800aa78:	20000fc4 	.word	0x20000fc4
 800aa7c:	20000fd8 	.word	0x20000fd8
 800aa80:	20000ff0 	.word	0x20000ff0
 800aa84:	20000fbc 	.word	0x20000fbc
 800aa88:	20000fc0 	.word	0x20000fc0

0800aa8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa92:	e019      	b.n	800aac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa94:	f000 fdd6 	bl	800b644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa98:	4b10      	ldr	r3, [pc, #64]	; (800aadc <prvCheckTasksWaitingTermination+0x50>)
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fe fd15 	bl	80094d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aaaa:	4b0d      	ldr	r3, [pc, #52]	; (800aae0 <prvCheckTasksWaitingTermination+0x54>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	4a0b      	ldr	r2, [pc, #44]	; (800aae0 <prvCheckTasksWaitingTermination+0x54>)
 800aab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aab4:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <prvCheckTasksWaitingTermination+0x58>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	4a0a      	ldr	r2, [pc, #40]	; (800aae4 <prvCheckTasksWaitingTermination+0x58>)
 800aabc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aabe:	f000 fdf1 	bl	800b6a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f810 	bl	800aae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aac8:	4b06      	ldr	r3, [pc, #24]	; (800aae4 <prvCheckTasksWaitingTermination+0x58>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e1      	bne.n	800aa94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20000fd8 	.word	0x20000fd8
 800aae0:	20001004 	.word	0x20001004
 800aae4:	20000fec 	.word	0x20000fec

0800aae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3354      	adds	r3, #84	; 0x54
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f002 f841 	bl	800cb7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d108      	bne.n	800ab16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 ff89 	bl	800ba20 <vPortFree>
				vPortFree( pxTCB );
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 ff86 	bl	800ba20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab14:	e018      	b.n	800ab48 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d103      	bne.n	800ab28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 ff7d 	bl	800ba20 <vPortFree>
	}
 800ab26:	e00f      	b.n	800ab48 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d00a      	beq.n	800ab48 <prvDeleteTCB+0x60>
	__asm volatile
 800ab32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	60fb      	str	r3, [r7, #12]
}
 800ab44:	bf00      	nop
 800ab46:	e7fe      	b.n	800ab46 <prvDeleteTCB+0x5e>
	}
 800ab48:	bf00      	nop
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <prvResetNextTaskUnblockTime+0x38>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d104      	bne.n	800ab6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab60:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <prvResetNextTaskUnblockTime+0x3c>)
 800ab62:	f04f 32ff 	mov.w	r2, #4294967295
 800ab66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab68:	e008      	b.n	800ab7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab6a:	4b07      	ldr	r3, [pc, #28]	; (800ab88 <prvResetNextTaskUnblockTime+0x38>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	4a04      	ldr	r2, [pc, #16]	; (800ab8c <prvResetNextTaskUnblockTime+0x3c>)
 800ab7a:	6013      	str	r3, [r2, #0]
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	20000fbc 	.word	0x20000fbc
 800ab8c:	20001024 	.word	0x20001024

0800ab90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab96:	4b0b      	ldr	r3, [pc, #44]	; (800abc4 <xTaskGetSchedulerState+0x34>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	607b      	str	r3, [r7, #4]
 800aba2:	e008      	b.n	800abb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aba4:	4b08      	ldr	r3, [pc, #32]	; (800abc8 <xTaskGetSchedulerState+0x38>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d102      	bne.n	800abb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abac:	2302      	movs	r3, #2
 800abae:	607b      	str	r3, [r7, #4]
 800abb0:	e001      	b.n	800abb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abb2:	2300      	movs	r3, #0
 800abb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abb6:	687b      	ldr	r3, [r7, #4]
	}
 800abb8:	4618      	mov	r0, r3
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	20001010 	.word	0x20001010
 800abc8:	2000102c 	.word	0x2000102c

0800abcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abd8:	2300      	movs	r3, #0
 800abda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d056      	beq.n	800ac90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abe2:	4b2e      	ldr	r3, [pc, #184]	; (800ac9c <xTaskPriorityDisinherit+0xd0>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d00a      	beq.n	800ac02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	60fb      	str	r3, [r7, #12]
}
 800abfe:	bf00      	nop
 800ac00:	e7fe      	b.n	800ac00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10a      	bne.n	800ac20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	60bb      	str	r3, [r7, #8]
}
 800ac1c:	bf00      	nop
 800ac1e:	e7fe      	b.n	800ac1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac24:	1e5a      	subs	r2, r3, #1
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d02c      	beq.n	800ac90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d128      	bne.n	800ac90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	3304      	adds	r3, #4
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fc46 	bl	80094d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac60:	4b0f      	ldr	r3, [pc, #60]	; (800aca0 <xTaskPriorityDisinherit+0xd4>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d903      	bls.n	800ac70 <xTaskPriorityDisinherit+0xa4>
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	4a0c      	ldr	r2, [pc, #48]	; (800aca0 <xTaskPriorityDisinherit+0xd4>)
 800ac6e:	6013      	str	r3, [r2, #0]
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4a09      	ldr	r2, [pc, #36]	; (800aca4 <xTaskPriorityDisinherit+0xd8>)
 800ac7e:	441a      	add	r2, r3
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	3304      	adds	r3, #4
 800ac84:	4619      	mov	r1, r3
 800ac86:	4610      	mov	r0, r2
 800ac88:	f7fe fbc7 	bl	800941a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac90:	697b      	ldr	r3, [r7, #20]
	}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20000b30 	.word	0x20000b30
 800aca0:	2000100c 	.word	0x2000100c
 800aca4:	20000b34 	.word	0x20000b34

0800aca8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800acb2:	4b21      	ldr	r3, [pc, #132]	; (800ad38 <prvAddCurrentTaskToDelayedList+0x90>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acb8:	4b20      	ldr	r3, [pc, #128]	; (800ad3c <prvAddCurrentTaskToDelayedList+0x94>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	3304      	adds	r3, #4
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fe fc08 	bl	80094d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acca:	d10a      	bne.n	800ace2 <prvAddCurrentTaskToDelayedList+0x3a>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d007      	beq.n	800ace2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acd2:	4b1a      	ldr	r3, [pc, #104]	; (800ad3c <prvAddCurrentTaskToDelayedList+0x94>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3304      	adds	r3, #4
 800acd8:	4619      	mov	r1, r3
 800acda:	4819      	ldr	r0, [pc, #100]	; (800ad40 <prvAddCurrentTaskToDelayedList+0x98>)
 800acdc:	f7fe fb9d 	bl	800941a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ace0:	e026      	b.n	800ad30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4413      	add	r3, r2
 800ace8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acea:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <prvAddCurrentTaskToDelayedList+0x94>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68ba      	ldr	r2, [r7, #8]
 800acf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d209      	bcs.n	800ad0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acfa:	4b12      	ldr	r3, [pc, #72]	; (800ad44 <prvAddCurrentTaskToDelayedList+0x9c>)
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <prvAddCurrentTaskToDelayedList+0x94>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3304      	adds	r3, #4
 800ad04:	4619      	mov	r1, r3
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7fe fbab 	bl	8009462 <vListInsert>
}
 800ad0c:	e010      	b.n	800ad30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad0e:	4b0e      	ldr	r3, [pc, #56]	; (800ad48 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <prvAddCurrentTaskToDelayedList+0x94>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3304      	adds	r3, #4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7fe fba1 	bl	8009462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad20:	4b0a      	ldr	r3, [pc, #40]	; (800ad4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d202      	bcs.n	800ad30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad2a:	4a08      	ldr	r2, [pc, #32]	; (800ad4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	6013      	str	r3, [r2, #0]
}
 800ad30:	bf00      	nop
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20001008 	.word	0x20001008
 800ad3c:	20000b30 	.word	0x20000b30
 800ad40:	20000ff0 	.word	0x20000ff0
 800ad44:	20000fc0 	.word	0x20000fc0
 800ad48:	20000fbc 	.word	0x20000fbc
 800ad4c:	20001024 	.word	0x20001024

0800ad50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08a      	sub	sp, #40	; 0x28
 800ad54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad5a:	f000 fb07 	bl	800b36c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad5e:	4b1c      	ldr	r3, [pc, #112]	; (800add0 <xTimerCreateTimerTask+0x80>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d021      	beq.n	800adaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad6e:	1d3a      	adds	r2, r7, #4
 800ad70:	f107 0108 	add.w	r1, r7, #8
 800ad74:	f107 030c 	add.w	r3, r7, #12
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe fb07 	bl	800938c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	9202      	str	r2, [sp, #8]
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	2302      	movs	r3, #2
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	460a      	mov	r2, r1
 800ad90:	4910      	ldr	r1, [pc, #64]	; (800add4 <xTimerCreateTimerTask+0x84>)
 800ad92:	4811      	ldr	r0, [pc, #68]	; (800add8 <xTimerCreateTimerTask+0x88>)
 800ad94:	f7ff f8b4 	bl	8009f00 <xTaskCreateStatic>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	4a10      	ldr	r2, [pc, #64]	; (800addc <xTimerCreateTimerTask+0x8c>)
 800ad9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad9e:	4b0f      	ldr	r3, [pc, #60]	; (800addc <xTimerCreateTimerTask+0x8c>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ada6:	2301      	movs	r3, #1
 800ada8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10a      	bne.n	800adc6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	613b      	str	r3, [r7, #16]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800adc6:	697b      	ldr	r3, [r7, #20]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	20001060 	.word	0x20001060
 800add4:	0800d1f4 	.word	0x0800d1f4
 800add8:	0800af15 	.word	0x0800af15
 800addc:	20001064 	.word	0x20001064

0800ade0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800adee:	2300      	movs	r3, #0
 800adf0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10a      	bne.n	800ae0e <xTimerGenericCommand+0x2e>
	__asm volatile
 800adf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfc:	f383 8811 	msr	BASEPRI, r3
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	623b      	str	r3, [r7, #32]
}
 800ae0a:	bf00      	nop
 800ae0c:	e7fe      	b.n	800ae0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae0e:	4b1a      	ldr	r3, [pc, #104]	; (800ae78 <xTimerGenericCommand+0x98>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d02a      	beq.n	800ae6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2b05      	cmp	r3, #5
 800ae26:	dc18      	bgt.n	800ae5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae28:	f7ff feb2 	bl	800ab90 <xTaskGetSchedulerState>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d109      	bne.n	800ae46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae32:	4b11      	ldr	r3, [pc, #68]	; (800ae78 <xTimerGenericCommand+0x98>)
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	f107 0110 	add.w	r1, r7, #16
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3e:	f7fe fc77 	bl	8009730 <xQueueGenericSend>
 800ae42:	6278      	str	r0, [r7, #36]	; 0x24
 800ae44:	e012      	b.n	800ae6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae46:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <xTimerGenericCommand+0x98>)
 800ae48:	6818      	ldr	r0, [r3, #0]
 800ae4a:	f107 0110 	add.w	r1, r7, #16
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2200      	movs	r2, #0
 800ae52:	f7fe fc6d 	bl	8009730 <xQueueGenericSend>
 800ae56:	6278      	str	r0, [r7, #36]	; 0x24
 800ae58:	e008      	b.n	800ae6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae5a:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <xTimerGenericCommand+0x98>)
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	f107 0110 	add.w	r1, r7, #16
 800ae62:	2300      	movs	r3, #0
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	f7fe fd61 	bl	800992c <xQueueGenericSendFromISR>
 800ae6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3728      	adds	r7, #40	; 0x28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20001060 	.word	0x20001060

0800ae7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae86:	4b22      	ldr	r3, [pc, #136]	; (800af10 <prvProcessExpiredTimer+0x94>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	3304      	adds	r3, #4
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fe fb1d 	bl	80094d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aea0:	f003 0304 	and.w	r3, r3, #4
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d022      	beq.n	800aeee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	699a      	ldr	r2, [r3, #24]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	18d1      	adds	r1, r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	6978      	ldr	r0, [r7, #20]
 800aeb6:	f000 f8d1 	bl	800b05c <prvInsertTimerInActiveList>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d01f      	beq.n	800af00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aec0:	2300      	movs	r3, #0
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	2300      	movs	r3, #0
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	2100      	movs	r1, #0
 800aeca:	6978      	ldr	r0, [r7, #20]
 800aecc:	f7ff ff88 	bl	800ade0 <xTimerGenericCommand>
 800aed0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d113      	bne.n	800af00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	60fb      	str	r3, [r7, #12]
}
 800aeea:	bf00      	nop
 800aeec:	e7fe      	b.n	800aeec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aef4:	f023 0301 	bic.w	r3, r3, #1
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	6a1b      	ldr	r3, [r3, #32]
 800af04:	6978      	ldr	r0, [r7, #20]
 800af06:	4798      	blx	r3
}
 800af08:	bf00      	nop
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	20001058 	.word	0x20001058

0800af14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af1c:	f107 0308 	add.w	r3, r7, #8
 800af20:	4618      	mov	r0, r3
 800af22:	f000 f857 	bl	800afd4 <prvGetNextExpireTime>
 800af26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4619      	mov	r1, r3
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f000 f803 	bl	800af38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af32:	f000 f8d5 	bl	800b0e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af36:	e7f1      	b.n	800af1c <prvTimerTask+0x8>

0800af38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af42:	f7ff fa39 	bl	800a3b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af46:	f107 0308 	add.w	r3, r7, #8
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 f866 	bl	800b01c <prvSampleTimeNow>
 800af50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d130      	bne.n	800afba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10a      	bne.n	800af74 <prvProcessTimerOrBlockTask+0x3c>
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	429a      	cmp	r2, r3
 800af64:	d806      	bhi.n	800af74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af66:	f7ff fa35 	bl	800a3d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af6a:	68f9      	ldr	r1, [r7, #12]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff ff85 	bl	800ae7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af72:	e024      	b.n	800afbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d008      	beq.n	800af8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af7a:	4b13      	ldr	r3, [pc, #76]	; (800afc8 <prvProcessTimerOrBlockTask+0x90>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d101      	bne.n	800af88 <prvProcessTimerOrBlockTask+0x50>
 800af84:	2301      	movs	r3, #1
 800af86:	e000      	b.n	800af8a <prvProcessTimerOrBlockTask+0x52>
 800af88:	2300      	movs	r3, #0
 800af8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af8c:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <prvProcessTimerOrBlockTask+0x94>)
 800af8e:	6818      	ldr	r0, [r3, #0]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	4619      	mov	r1, r3
 800af9a:	f7fe ff7d 	bl	8009e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af9e:	f7ff fa19 	bl	800a3d4 <xTaskResumeAll>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10a      	bne.n	800afbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800afa8:	4b09      	ldr	r3, [pc, #36]	; (800afd0 <prvProcessTimerOrBlockTask+0x98>)
 800afaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	f3bf 8f6f 	isb	sy
}
 800afb8:	e001      	b.n	800afbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800afba:	f7ff fa0b 	bl	800a3d4 <xTaskResumeAll>
}
 800afbe:	bf00      	nop
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	2000105c 	.word	0x2000105c
 800afcc:	20001060 	.word	0x20001060
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afdc:	4b0e      	ldr	r3, [pc, #56]	; (800b018 <prvGetNextExpireTime+0x44>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <prvGetNextExpireTime+0x16>
 800afe6:	2201      	movs	r2, #1
 800afe8:	e000      	b.n	800afec <prvGetNextExpireTime+0x18>
 800afea:	2200      	movs	r2, #0
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d105      	bne.n	800b004 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aff8:	4b07      	ldr	r3, [pc, #28]	; (800b018 <prvGetNextExpireTime+0x44>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	e001      	b.n	800b008 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b004:	2300      	movs	r3, #0
 800b006:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b008:	68fb      	ldr	r3, [r7, #12]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	20001058 	.word	0x20001058

0800b01c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b024:	f7ff fa74 	bl	800a510 <xTaskGetTickCount>
 800b028:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b02a:	4b0b      	ldr	r3, [pc, #44]	; (800b058 <prvSampleTimeNow+0x3c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	429a      	cmp	r2, r3
 800b032:	d205      	bcs.n	800b040 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b034:	f000 f936 	bl	800b2a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	e002      	b.n	800b046 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b046:	4a04      	ldr	r2, [pc, #16]	; (800b058 <prvSampleTimeNow+0x3c>)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b04c:	68fb      	ldr	r3, [r7, #12]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20001068 	.word	0x20001068

0800b05c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d812      	bhi.n	800b0a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	1ad2      	subs	r2, r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d302      	bcc.n	800b096 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b090:	2301      	movs	r3, #1
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	e01b      	b.n	800b0ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b096:	4b10      	ldr	r3, [pc, #64]	; (800b0d8 <prvInsertTimerInActiveList+0x7c>)
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3304      	adds	r3, #4
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	f7fe f9de 	bl	8009462 <vListInsert>
 800b0a6:	e012      	b.n	800b0ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d206      	bcs.n	800b0be <prvInsertTimerInActiveList+0x62>
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d302      	bcc.n	800b0be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	e007      	b.n	800b0ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0be:	4b07      	ldr	r3, [pc, #28]	; (800b0dc <prvInsertTimerInActiveList+0x80>)
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	f7fe f9ca 	bl	8009462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0ce:	697b      	ldr	r3, [r7, #20]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	2000105c 	.word	0x2000105c
 800b0dc:	20001058 	.word	0x20001058

0800b0e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08e      	sub	sp, #56	; 0x38
 800b0e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0e6:	e0ca      	b.n	800b27e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	da18      	bge.n	800b120 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0ee:	1d3b      	adds	r3, r7, #4
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10a      	bne.n	800b110 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	61fb      	str	r3, [r7, #28]
}
 800b10c:	bf00      	nop
 800b10e:	e7fe      	b.n	800b10e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b116:	6850      	ldr	r0, [r2, #4]
 800b118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b11a:	6892      	ldr	r2, [r2, #8]
 800b11c:	4611      	mov	r1, r2
 800b11e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	f2c0 80aa 	blt.w	800b27c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d004      	beq.n	800b13e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	3304      	adds	r3, #4
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe f9cb 	bl	80094d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b13e:	463b      	mov	r3, r7
 800b140:	4618      	mov	r0, r3
 800b142:	f7ff ff6b 	bl	800b01c <prvSampleTimeNow>
 800b146:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b09      	cmp	r3, #9
 800b14c:	f200 8097 	bhi.w	800b27e <prvProcessReceivedCommands+0x19e>
 800b150:	a201      	add	r2, pc, #4	; (adr r2, 800b158 <prvProcessReceivedCommands+0x78>)
 800b152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b156:	bf00      	nop
 800b158:	0800b181 	.word	0x0800b181
 800b15c:	0800b181 	.word	0x0800b181
 800b160:	0800b181 	.word	0x0800b181
 800b164:	0800b1f5 	.word	0x0800b1f5
 800b168:	0800b209 	.word	0x0800b209
 800b16c:	0800b253 	.word	0x0800b253
 800b170:	0800b181 	.word	0x0800b181
 800b174:	0800b181 	.word	0x0800b181
 800b178:	0800b1f5 	.word	0x0800b1f5
 800b17c:	0800b209 	.word	0x0800b209
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b186:	f043 0301 	orr.w	r3, r3, #1
 800b18a:	b2da      	uxtb	r2, r3
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	18d1      	adds	r1, r2, r3
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a0:	f7ff ff5c 	bl	800b05c <prvInsertTimerInActiveList>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d069      	beq.n	800b27e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d05e      	beq.n	800b27e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	441a      	add	r2, r3
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1d2:	f7ff fe05 	bl	800ade0 <xTimerGenericCommand>
 800b1d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d14f      	bne.n	800b27e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	61bb      	str	r3, [r7, #24]
}
 800b1f0:	bf00      	nop
 800b1f2:	e7fe      	b.n	800b1f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1fa:	f023 0301 	bic.w	r3, r3, #1
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b206:	e03a      	b.n	800b27e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b20e:	f043 0301 	orr.w	r3, r3, #1
 800b212:	b2da      	uxtb	r2, r3
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10a      	bne.n	800b23e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	617b      	str	r3, [r7, #20]
}
 800b23a:	bf00      	nop
 800b23c:	e7fe      	b.n	800b23c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	699a      	ldr	r2, [r3, #24]
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	18d1      	adds	r1, r2, r3
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b24a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b24c:	f7ff ff06 	bl	800b05c <prvInsertTimerInActiveList>
					break;
 800b250:	e015      	b.n	800b27e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b258:	f003 0302 	and.w	r3, r3, #2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d103      	bne.n	800b268 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b262:	f000 fbdd 	bl	800ba20 <vPortFree>
 800b266:	e00a      	b.n	800b27e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b26e:	f023 0301 	bic.w	r3, r3, #1
 800b272:	b2da      	uxtb	r2, r3
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b27a:	e000      	b.n	800b27e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b27c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b27e:	4b08      	ldr	r3, [pc, #32]	; (800b2a0 <prvProcessReceivedCommands+0x1c0>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	1d39      	adds	r1, r7, #4
 800b284:	2200      	movs	r2, #0
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe fbec 	bl	8009a64 <xQueueReceive>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f47f af2a 	bne.w	800b0e8 <prvProcessReceivedCommands+0x8>
	}
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	3730      	adds	r7, #48	; 0x30
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	20001060 	.word	0x20001060

0800b2a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b088      	sub	sp, #32
 800b2a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2aa:	e048      	b.n	800b33e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2ac:	4b2d      	ldr	r3, [pc, #180]	; (800b364 <prvSwitchTimerLists+0xc0>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2b6:	4b2b      	ldr	r3, [pc, #172]	; (800b364 <prvSwitchTimerLists+0xc0>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fe f905 	bl	80094d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d8:	f003 0304 	and.w	r3, r3, #4
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d02e      	beq.n	800b33e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d90e      	bls.n	800b310 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2fe:	4b19      	ldr	r3, [pc, #100]	; (800b364 <prvSwitchTimerLists+0xc0>)
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3304      	adds	r3, #4
 800b306:	4619      	mov	r1, r3
 800b308:	4610      	mov	r0, r2
 800b30a:	f7fe f8aa 	bl	8009462 <vListInsert>
 800b30e:	e016      	b.n	800b33e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b310:	2300      	movs	r3, #0
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	2300      	movs	r3, #0
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	2100      	movs	r1, #0
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f7ff fd60 	bl	800ade0 <xTimerGenericCommand>
 800b320:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	603b      	str	r3, [r7, #0]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <prvSwitchTimerLists+0xc0>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1b1      	bne.n	800b2ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b348:	4b06      	ldr	r3, [pc, #24]	; (800b364 <prvSwitchTimerLists+0xc0>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b34e:	4b06      	ldr	r3, [pc, #24]	; (800b368 <prvSwitchTimerLists+0xc4>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a04      	ldr	r2, [pc, #16]	; (800b364 <prvSwitchTimerLists+0xc0>)
 800b354:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b356:	4a04      	ldr	r2, [pc, #16]	; (800b368 <prvSwitchTimerLists+0xc4>)
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	6013      	str	r3, [r2, #0]
}
 800b35c:	bf00      	nop
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	20001058 	.word	0x20001058
 800b368:	2000105c 	.word	0x2000105c

0800b36c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b372:	f000 f967 	bl	800b644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b376:	4b15      	ldr	r3, [pc, #84]	; (800b3cc <prvCheckForValidListAndQueue+0x60>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d120      	bne.n	800b3c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b37e:	4814      	ldr	r0, [pc, #80]	; (800b3d0 <prvCheckForValidListAndQueue+0x64>)
 800b380:	f7fe f81e 	bl	80093c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b384:	4813      	ldr	r0, [pc, #76]	; (800b3d4 <prvCheckForValidListAndQueue+0x68>)
 800b386:	f7fe f81b 	bl	80093c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b38a:	4b13      	ldr	r3, [pc, #76]	; (800b3d8 <prvCheckForValidListAndQueue+0x6c>)
 800b38c:	4a10      	ldr	r2, [pc, #64]	; (800b3d0 <prvCheckForValidListAndQueue+0x64>)
 800b38e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b390:	4b12      	ldr	r3, [pc, #72]	; (800b3dc <prvCheckForValidListAndQueue+0x70>)
 800b392:	4a10      	ldr	r2, [pc, #64]	; (800b3d4 <prvCheckForValidListAndQueue+0x68>)
 800b394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b396:	2300      	movs	r3, #0
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	4b11      	ldr	r3, [pc, #68]	; (800b3e0 <prvCheckForValidListAndQueue+0x74>)
 800b39c:	4a11      	ldr	r2, [pc, #68]	; (800b3e4 <prvCheckForValidListAndQueue+0x78>)
 800b39e:	2110      	movs	r1, #16
 800b3a0:	200a      	movs	r0, #10
 800b3a2:	f7fe f929 	bl	80095f8 <xQueueGenericCreateStatic>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	4a08      	ldr	r2, [pc, #32]	; (800b3cc <prvCheckForValidListAndQueue+0x60>)
 800b3aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b3ac:	4b07      	ldr	r3, [pc, #28]	; (800b3cc <prvCheckForValidListAndQueue+0x60>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d005      	beq.n	800b3c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b3b4:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <prvCheckForValidListAndQueue+0x60>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	490b      	ldr	r1, [pc, #44]	; (800b3e8 <prvCheckForValidListAndQueue+0x7c>)
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fe fd42 	bl	8009e44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3c0:	f000 f970 	bl	800b6a4 <vPortExitCritical>
}
 800b3c4:	bf00      	nop
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	20001060 	.word	0x20001060
 800b3d0:	20001030 	.word	0x20001030
 800b3d4:	20001044 	.word	0x20001044
 800b3d8:	20001058 	.word	0x20001058
 800b3dc:	2000105c 	.word	0x2000105c
 800b3e0:	2000110c 	.word	0x2000110c
 800b3e4:	2000106c 	.word	0x2000106c
 800b3e8:	0800d1fc 	.word	0x0800d1fc

0800b3ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3b04      	subs	r3, #4
 800b3fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3b04      	subs	r3, #4
 800b40a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	f023 0201 	bic.w	r2, r3, #1
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3b04      	subs	r3, #4
 800b41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b41c:	4a0c      	ldr	r2, [pc, #48]	; (800b450 <pxPortInitialiseStack+0x64>)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	3b14      	subs	r3, #20
 800b426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3b04      	subs	r3, #4
 800b432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f06f 0202 	mvn.w	r2, #2
 800b43a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3b20      	subs	r3, #32
 800b440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b442:	68fb      	ldr	r3, [r7, #12]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	0800b455 	.word	0x0800b455

0800b454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b45e:	4b12      	ldr	r3, [pc, #72]	; (800b4a8 <prvTaskExitError+0x54>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b466:	d00a      	beq.n	800b47e <prvTaskExitError+0x2a>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	60fb      	str	r3, [r7, #12]
}
 800b47a:	bf00      	nop
 800b47c:	e7fe      	b.n	800b47c <prvTaskExitError+0x28>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	60bb      	str	r3, [r7, #8]
}
 800b490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b492:	bf00      	nop
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0fc      	beq.n	800b494 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b49a:	bf00      	nop
 800b49c:	bf00      	nop
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	200000c0 	.word	0x200000c0
 800b4ac:	00000000 	.word	0x00000000

0800b4b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4b0:	4b07      	ldr	r3, [pc, #28]	; (800b4d0 <pxCurrentTCBConst2>)
 800b4b2:	6819      	ldr	r1, [r3, #0]
 800b4b4:	6808      	ldr	r0, [r1, #0]
 800b4b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ba:	f380 8809 	msr	PSP, r0
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f04f 0000 	mov.w	r0, #0
 800b4c6:	f380 8811 	msr	BASEPRI, r0
 800b4ca:	4770      	bx	lr
 800b4cc:	f3af 8000 	nop.w

0800b4d0 <pxCurrentTCBConst2>:
 800b4d0:	20000b30 	.word	0x20000b30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop

0800b4d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4d8:	4808      	ldr	r0, [pc, #32]	; (800b4fc <prvPortStartFirstTask+0x24>)
 800b4da:	6800      	ldr	r0, [r0, #0]
 800b4dc:	6800      	ldr	r0, [r0, #0]
 800b4de:	f380 8808 	msr	MSP, r0
 800b4e2:	f04f 0000 	mov.w	r0, #0
 800b4e6:	f380 8814 	msr	CONTROL, r0
 800b4ea:	b662      	cpsie	i
 800b4ec:	b661      	cpsie	f
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	df00      	svc	0
 800b4f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4fa:	bf00      	nop
 800b4fc:	e000ed08 	.word	0xe000ed08

0800b500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b506:	4b46      	ldr	r3, [pc, #280]	; (800b620 <xPortStartScheduler+0x120>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a46      	ldr	r2, [pc, #280]	; (800b624 <xPortStartScheduler+0x124>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d10a      	bne.n	800b526 <xPortStartScheduler+0x26>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	613b      	str	r3, [r7, #16]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b526:	4b3e      	ldr	r3, [pc, #248]	; (800b620 <xPortStartScheduler+0x120>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a3f      	ldr	r2, [pc, #252]	; (800b628 <xPortStartScheduler+0x128>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d10a      	bne.n	800b546 <xPortStartScheduler+0x46>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	60fb      	str	r3, [r7, #12]
}
 800b542:	bf00      	nop
 800b544:	e7fe      	b.n	800b544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b546:	4b39      	ldr	r3, [pc, #228]	; (800b62c <xPortStartScheduler+0x12c>)
 800b548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	22ff      	movs	r2, #255	; 0xff
 800b556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	4b31      	ldr	r3, [pc, #196]	; (800b630 <xPortStartScheduler+0x130>)
 800b56c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b56e:	4b31      	ldr	r3, [pc, #196]	; (800b634 <xPortStartScheduler+0x134>)
 800b570:	2207      	movs	r2, #7
 800b572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b574:	e009      	b.n	800b58a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b576:	4b2f      	ldr	r3, [pc, #188]	; (800b634 <xPortStartScheduler+0x134>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	4a2d      	ldr	r2, [pc, #180]	; (800b634 <xPortStartScheduler+0x134>)
 800b57e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b580:	78fb      	ldrb	r3, [r7, #3]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	005b      	lsls	r3, r3, #1
 800b586:	b2db      	uxtb	r3, r3
 800b588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b58a:	78fb      	ldrb	r3, [r7, #3]
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b592:	2b80      	cmp	r3, #128	; 0x80
 800b594:	d0ef      	beq.n	800b576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b596:	4b27      	ldr	r3, [pc, #156]	; (800b634 <xPortStartScheduler+0x134>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f1c3 0307 	rsb	r3, r3, #7
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d00a      	beq.n	800b5b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	60bb      	str	r3, [r7, #8]
}
 800b5b4:	bf00      	nop
 800b5b6:	e7fe      	b.n	800b5b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5b8:	4b1e      	ldr	r3, [pc, #120]	; (800b634 <xPortStartScheduler+0x134>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	021b      	lsls	r3, r3, #8
 800b5be:	4a1d      	ldr	r2, [pc, #116]	; (800b634 <xPortStartScheduler+0x134>)
 800b5c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5c2:	4b1c      	ldr	r3, [pc, #112]	; (800b634 <xPortStartScheduler+0x134>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5ca:	4a1a      	ldr	r2, [pc, #104]	; (800b634 <xPortStartScheduler+0x134>)
 800b5cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5d6:	4b18      	ldr	r3, [pc, #96]	; (800b638 <xPortStartScheduler+0x138>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a17      	ldr	r2, [pc, #92]	; (800b638 <xPortStartScheduler+0x138>)
 800b5dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5e2:	4b15      	ldr	r3, [pc, #84]	; (800b638 <xPortStartScheduler+0x138>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a14      	ldr	r2, [pc, #80]	; (800b638 <xPortStartScheduler+0x138>)
 800b5e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5ee:	f000 f8dd 	bl	800b7ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5f2:	4b12      	ldr	r3, [pc, #72]	; (800b63c <xPortStartScheduler+0x13c>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5f8:	f000 f8fc 	bl	800b7f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5fc:	4b10      	ldr	r3, [pc, #64]	; (800b640 <xPortStartScheduler+0x140>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a0f      	ldr	r2, [pc, #60]	; (800b640 <xPortStartScheduler+0x140>)
 800b602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b608:	f7ff ff66 	bl	800b4d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b60c:	f7ff f84a 	bl	800a6a4 <vTaskSwitchContext>
	prvTaskExitError();
 800b610:	f7ff ff20 	bl	800b454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	e000ed00 	.word	0xe000ed00
 800b624:	410fc271 	.word	0x410fc271
 800b628:	410fc270 	.word	0x410fc270
 800b62c:	e000e400 	.word	0xe000e400
 800b630:	2000115c 	.word	0x2000115c
 800b634:	20001160 	.word	0x20001160
 800b638:	e000ed20 	.word	0xe000ed20
 800b63c:	200000c0 	.word	0x200000c0
 800b640:	e000ef34 	.word	0xe000ef34

0800b644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	607b      	str	r3, [r7, #4]
}
 800b65c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b65e:	4b0f      	ldr	r3, [pc, #60]	; (800b69c <vPortEnterCritical+0x58>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3301      	adds	r3, #1
 800b664:	4a0d      	ldr	r2, [pc, #52]	; (800b69c <vPortEnterCritical+0x58>)
 800b666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b668:	4b0c      	ldr	r3, [pc, #48]	; (800b69c <vPortEnterCritical+0x58>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d10f      	bne.n	800b690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b670:	4b0b      	ldr	r3, [pc, #44]	; (800b6a0 <vPortEnterCritical+0x5c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <vPortEnterCritical+0x4c>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	603b      	str	r3, [r7, #0]
}
 800b68c:	bf00      	nop
 800b68e:	e7fe      	b.n	800b68e <vPortEnterCritical+0x4a>
	}
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	200000c0 	.word	0x200000c0
 800b6a0:	e000ed04 	.word	0xe000ed04

0800b6a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6aa:	4b12      	ldr	r3, [pc, #72]	; (800b6f4 <vPortExitCritical+0x50>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <vPortExitCritical+0x24>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	607b      	str	r3, [r7, #4]
}
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6c8:	4b0a      	ldr	r3, [pc, #40]	; (800b6f4 <vPortExitCritical+0x50>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	4a09      	ldr	r2, [pc, #36]	; (800b6f4 <vPortExitCritical+0x50>)
 800b6d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6d2:	4b08      	ldr	r3, [pc, #32]	; (800b6f4 <vPortExitCritical+0x50>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d105      	bne.n	800b6e6 <vPortExitCritical+0x42>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	f383 8811 	msr	BASEPRI, r3
}
 800b6e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6e6:	bf00      	nop
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	200000c0 	.word	0x200000c0
	...

0800b700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b700:	f3ef 8009 	mrs	r0, PSP
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	4b15      	ldr	r3, [pc, #84]	; (800b760 <pxCurrentTCBConst>)
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	f01e 0f10 	tst.w	lr, #16
 800b710:	bf08      	it	eq
 800b712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71a:	6010      	str	r0, [r2, #0]
 800b71c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b720:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b724:	f380 8811 	msr	BASEPRI, r0
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f7fe ffb8 	bl	800a6a4 <vTaskSwitchContext>
 800b734:	f04f 0000 	mov.w	r0, #0
 800b738:	f380 8811 	msr	BASEPRI, r0
 800b73c:	bc09      	pop	{r0, r3}
 800b73e:	6819      	ldr	r1, [r3, #0]
 800b740:	6808      	ldr	r0, [r1, #0]
 800b742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b746:	f01e 0f10 	tst.w	lr, #16
 800b74a:	bf08      	it	eq
 800b74c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b750:	f380 8809 	msr	PSP, r0
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	f3af 8000 	nop.w

0800b760 <pxCurrentTCBConst>:
 800b760:	20000b30 	.word	0x20000b30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop

0800b768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	607b      	str	r3, [r7, #4]
}
 800b780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b782:	f7fe fed5 	bl	800a530 <xTaskIncrementTick>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d003      	beq.n	800b794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b78c:	4b06      	ldr	r3, [pc, #24]	; (800b7a8 <xPortSysTickHandler+0x40>)
 800b78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	2300      	movs	r3, #0
 800b796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	f383 8811 	msr	BASEPRI, r3
}
 800b79e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7a0:	bf00      	nop
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	e000ed04 	.word	0xe000ed04

0800b7ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7b0:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <vPortSetupTimerInterrupt+0x34>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7b6:	4b0b      	ldr	r3, [pc, #44]	; (800b7e4 <vPortSetupTimerInterrupt+0x38>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	; (800b7e8 <vPortSetupTimerInterrupt+0x3c>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a0a      	ldr	r2, [pc, #40]	; (800b7ec <vPortSetupTimerInterrupt+0x40>)
 800b7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c6:	099b      	lsrs	r3, r3, #6
 800b7c8:	4a09      	ldr	r2, [pc, #36]	; (800b7f0 <vPortSetupTimerInterrupt+0x44>)
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7ce:	4b04      	ldr	r3, [pc, #16]	; (800b7e0 <vPortSetupTimerInterrupt+0x34>)
 800b7d0:	2207      	movs	r2, #7
 800b7d2:	601a      	str	r2, [r3, #0]
}
 800b7d4:	bf00      	nop
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	e000e010 	.word	0xe000e010
 800b7e4:	e000e018 	.word	0xe000e018
 800b7e8:	20000028 	.word	0x20000028
 800b7ec:	10624dd3 	.word	0x10624dd3
 800b7f0:	e000e014 	.word	0xe000e014

0800b7f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b804 <vPortEnableVFP+0x10>
 800b7f8:	6801      	ldr	r1, [r0, #0]
 800b7fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7fe:	6001      	str	r1, [r0, #0]
 800b800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b802:	bf00      	nop
 800b804:	e000ed88 	.word	0xe000ed88

0800b808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b80e:	f3ef 8305 	mrs	r3, IPSR
 800b812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b0f      	cmp	r3, #15
 800b818:	d914      	bls.n	800b844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b81a:	4a17      	ldr	r2, [pc, #92]	; (800b878 <vPortValidateInterruptPriority+0x70>)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	4413      	add	r3, r2
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b824:	4b15      	ldr	r3, [pc, #84]	; (800b87c <vPortValidateInterruptPriority+0x74>)
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	7afa      	ldrb	r2, [r7, #11]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d20a      	bcs.n	800b844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	607b      	str	r3, [r7, #4]
}
 800b840:	bf00      	nop
 800b842:	e7fe      	b.n	800b842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b844:	4b0e      	ldr	r3, [pc, #56]	; (800b880 <vPortValidateInterruptPriority+0x78>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b84c:	4b0d      	ldr	r3, [pc, #52]	; (800b884 <vPortValidateInterruptPriority+0x7c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	429a      	cmp	r2, r3
 800b852:	d90a      	bls.n	800b86a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	603b      	str	r3, [r7, #0]
}
 800b866:	bf00      	nop
 800b868:	e7fe      	b.n	800b868 <vPortValidateInterruptPriority+0x60>
	}
 800b86a:	bf00      	nop
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	e000e3f0 	.word	0xe000e3f0
 800b87c:	2000115c 	.word	0x2000115c
 800b880:	e000ed0c 	.word	0xe000ed0c
 800b884:	20001160 	.word	0x20001160

0800b888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08a      	sub	sp, #40	; 0x28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b890:	2300      	movs	r3, #0
 800b892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b894:	f7fe fd90 	bl	800a3b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b898:	4b5b      	ldr	r3, [pc, #364]	; (800ba08 <pvPortMalloc+0x180>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8a0:	f000 f920 	bl	800bae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8a4:	4b59      	ldr	r3, [pc, #356]	; (800ba0c <pvPortMalloc+0x184>)
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f040 8093 	bne.w	800b9d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01d      	beq.n	800b8f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b8b8:	2208      	movs	r2, #8
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4413      	add	r3, r2
 800b8be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d014      	beq.n	800b8f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f023 0307 	bic.w	r3, r3, #7
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f003 0307 	and.w	r3, r3, #7
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00a      	beq.n	800b8f4 <pvPortMalloc+0x6c>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	617b      	str	r3, [r7, #20]
}
 800b8f0:	bf00      	nop
 800b8f2:	e7fe      	b.n	800b8f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d06e      	beq.n	800b9d8 <pvPortMalloc+0x150>
 800b8fa:	4b45      	ldr	r3, [pc, #276]	; (800ba10 <pvPortMalloc+0x188>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d869      	bhi.n	800b9d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b904:	4b43      	ldr	r3, [pc, #268]	; (800ba14 <pvPortMalloc+0x18c>)
 800b906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b908:	4b42      	ldr	r3, [pc, #264]	; (800ba14 <pvPortMalloc+0x18c>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b90e:	e004      	b.n	800b91a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	d903      	bls.n	800b92c <pvPortMalloc+0xa4>
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1f1      	bne.n	800b910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b92c:	4b36      	ldr	r3, [pc, #216]	; (800ba08 <pvPortMalloc+0x180>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b932:	429a      	cmp	r2, r3
 800b934:	d050      	beq.n	800b9d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b936:	6a3b      	ldr	r3, [r7, #32]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2208      	movs	r2, #8
 800b93c:	4413      	add	r3, r2
 800b93e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	1ad2      	subs	r2, r2, r3
 800b950:	2308      	movs	r3, #8
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	429a      	cmp	r2, r3
 800b956:	d91f      	bls.n	800b998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4413      	add	r3, r2
 800b95e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	f003 0307 	and.w	r3, r3, #7
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00a      	beq.n	800b980 <pvPortMalloc+0xf8>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	613b      	str	r3, [r7, #16]
}
 800b97c:	bf00      	nop
 800b97e:	e7fe      	b.n	800b97e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	1ad2      	subs	r2, r2, r3
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b992:	69b8      	ldr	r0, [r7, #24]
 800b994:	f000 f908 	bl	800bba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b998:	4b1d      	ldr	r3, [pc, #116]	; (800ba10 <pvPortMalloc+0x188>)
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	4a1b      	ldr	r2, [pc, #108]	; (800ba10 <pvPortMalloc+0x188>)
 800b9a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9a6:	4b1a      	ldr	r3, [pc, #104]	; (800ba10 <pvPortMalloc+0x188>)
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	4b1b      	ldr	r3, [pc, #108]	; (800ba18 <pvPortMalloc+0x190>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d203      	bcs.n	800b9ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9b2:	4b17      	ldr	r3, [pc, #92]	; (800ba10 <pvPortMalloc+0x188>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a18      	ldr	r2, [pc, #96]	; (800ba18 <pvPortMalloc+0x190>)
 800b9b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	685a      	ldr	r2, [r3, #4]
 800b9be:	4b13      	ldr	r3, [pc, #76]	; (800ba0c <pvPortMalloc+0x184>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9ce:	4b13      	ldr	r3, [pc, #76]	; (800ba1c <pvPortMalloc+0x194>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	4a11      	ldr	r2, [pc, #68]	; (800ba1c <pvPortMalloc+0x194>)
 800b9d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9d8:	f7fe fcfc 	bl	800a3d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	f003 0307 	and.w	r3, r3, #7
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <pvPortMalloc+0x174>
	__asm volatile
 800b9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	60fb      	str	r3, [r7, #12]
}
 800b9f8:	bf00      	nop
 800b9fa:	e7fe      	b.n	800b9fa <pvPortMalloc+0x172>
	return pvReturn;
 800b9fc:	69fb      	ldr	r3, [r7, #28]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3728      	adds	r7, #40	; 0x28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20004d6c 	.word	0x20004d6c
 800ba0c:	20004d80 	.word	0x20004d80
 800ba10:	20004d70 	.word	0x20004d70
 800ba14:	20004d64 	.word	0x20004d64
 800ba18:	20004d74 	.word	0x20004d74
 800ba1c:	20004d78 	.word	0x20004d78

0800ba20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d04d      	beq.n	800bace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba32:	2308      	movs	r3, #8
 800ba34:	425b      	negs	r3, r3
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	4413      	add	r3, r2
 800ba3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	4b24      	ldr	r3, [pc, #144]	; (800bad8 <vPortFree+0xb8>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4013      	ands	r3, r2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10a      	bne.n	800ba64 <vPortFree+0x44>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	60fb      	str	r3, [r7, #12]
}
 800ba60:	bf00      	nop
 800ba62:	e7fe      	b.n	800ba62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00a      	beq.n	800ba82 <vPortFree+0x62>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	60bb      	str	r3, [r7, #8]
}
 800ba7e:	bf00      	nop
 800ba80:	e7fe      	b.n	800ba80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	4b14      	ldr	r3, [pc, #80]	; (800bad8 <vPortFree+0xb8>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d01e      	beq.n	800bace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d11a      	bne.n	800bace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	4b0e      	ldr	r3, [pc, #56]	; (800bad8 <vPortFree+0xb8>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	43db      	mvns	r3, r3
 800baa2:	401a      	ands	r2, r3
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800baa8:	f7fe fc86 	bl	800a3b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	685a      	ldr	r2, [r3, #4]
 800bab0:	4b0a      	ldr	r3, [pc, #40]	; (800badc <vPortFree+0xbc>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4413      	add	r3, r2
 800bab6:	4a09      	ldr	r2, [pc, #36]	; (800badc <vPortFree+0xbc>)
 800bab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800baba:	6938      	ldr	r0, [r7, #16]
 800babc:	f000 f874 	bl	800bba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bac0:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <vPortFree+0xc0>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3301      	adds	r3, #1
 800bac6:	4a06      	ldr	r2, [pc, #24]	; (800bae0 <vPortFree+0xc0>)
 800bac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800baca:	f7fe fc83 	bl	800a3d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bace:	bf00      	nop
 800bad0:	3718      	adds	r7, #24
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20004d80 	.word	0x20004d80
 800badc:	20004d70 	.word	0x20004d70
 800bae0:	20004d7c 	.word	0x20004d7c

0800bae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800baea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800baee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800baf0:	4b27      	ldr	r3, [pc, #156]	; (800bb90 <prvHeapInit+0xac>)
 800baf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f003 0307 	and.w	r3, r3, #7
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00c      	beq.n	800bb18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3307      	adds	r3, #7
 800bb02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f023 0307 	bic.w	r3, r3, #7
 800bb0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	4a1f      	ldr	r2, [pc, #124]	; (800bb90 <prvHeapInit+0xac>)
 800bb14:	4413      	add	r3, r2
 800bb16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb1c:	4a1d      	ldr	r2, [pc, #116]	; (800bb94 <prvHeapInit+0xb0>)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb22:	4b1c      	ldr	r3, [pc, #112]	; (800bb94 <prvHeapInit+0xb0>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb30:	2208      	movs	r2, #8
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	1a9b      	subs	r3, r3, r2
 800bb36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f023 0307 	bic.w	r3, r3, #7
 800bb3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	4a15      	ldr	r2, [pc, #84]	; (800bb98 <prvHeapInit+0xb4>)
 800bb44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb46:	4b14      	ldr	r3, [pc, #80]	; (800bb98 <prvHeapInit+0xb4>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb4e:	4b12      	ldr	r3, [pc, #72]	; (800bb98 <prvHeapInit+0xb4>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2200      	movs	r2, #0
 800bb54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	1ad2      	subs	r2, r2, r3
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb64:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <prvHeapInit+0xb4>)
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	4a0a      	ldr	r2, [pc, #40]	; (800bb9c <prvHeapInit+0xb8>)
 800bb72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	4a09      	ldr	r2, [pc, #36]	; (800bba0 <prvHeapInit+0xbc>)
 800bb7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb7c:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <prvHeapInit+0xc0>)
 800bb7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb82:	601a      	str	r2, [r3, #0]
}
 800bb84:	bf00      	nop
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	20001164 	.word	0x20001164
 800bb94:	20004d64 	.word	0x20004d64
 800bb98:	20004d6c 	.word	0x20004d6c
 800bb9c:	20004d74 	.word	0x20004d74
 800bba0:	20004d70 	.word	0x20004d70
 800bba4:	20004d80 	.word	0x20004d80

0800bba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbb0:	4b28      	ldr	r3, [pc, #160]	; (800bc54 <prvInsertBlockIntoFreeList+0xac>)
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	e002      	b.n	800bbbc <prvInsertBlockIntoFreeList+0x14>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	60fb      	str	r3, [r7, #12]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d8f7      	bhi.n	800bbb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d108      	bne.n	800bbea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	441a      	add	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	441a      	add	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d118      	bne.n	800bc30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	4b15      	ldr	r3, [pc, #84]	; (800bc58 <prvInsertBlockIntoFreeList+0xb0>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d00d      	beq.n	800bc26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	441a      	add	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	601a      	str	r2, [r3, #0]
 800bc24:	e008      	b.n	800bc38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc26:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <prvInsertBlockIntoFreeList+0xb0>)
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	e003      	b.n	800bc38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d002      	beq.n	800bc46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc46:	bf00      	nop
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	20004d64 	.word	0x20004d64
 800bc58:	20004d6c 	.word	0x20004d6c

0800bc5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc60:	2200      	movs	r2, #0
 800bc62:	4912      	ldr	r1, [pc, #72]	; (800bcac <MX_USB_DEVICE_Init+0x50>)
 800bc64:	4812      	ldr	r0, [pc, #72]	; (800bcb0 <MX_USB_DEVICE_Init+0x54>)
 800bc66:	f7fb ff49 	bl	8007afc <USBD_Init>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc70:	f7f5 fcfe 	bl	8001670 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc74:	490f      	ldr	r1, [pc, #60]	; (800bcb4 <MX_USB_DEVICE_Init+0x58>)
 800bc76:	480e      	ldr	r0, [pc, #56]	; (800bcb0 <MX_USB_DEVICE_Init+0x54>)
 800bc78:	f7fb ff70 	bl	8007b5c <USBD_RegisterClass>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc82:	f7f5 fcf5 	bl	8001670 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc86:	490c      	ldr	r1, [pc, #48]	; (800bcb8 <MX_USB_DEVICE_Init+0x5c>)
 800bc88:	4809      	ldr	r0, [pc, #36]	; (800bcb0 <MX_USB_DEVICE_Init+0x54>)
 800bc8a:	f7fb fea7 	bl	80079dc <USBD_CDC_RegisterInterface>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d001      	beq.n	800bc98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc94:	f7f5 fcec 	bl	8001670 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc98:	4805      	ldr	r0, [pc, #20]	; (800bcb0 <MX_USB_DEVICE_Init+0x54>)
 800bc9a:	f7fb ff95 	bl	8007bc8 <USBD_Start>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bca4:	f7f5 fce4 	bl	8001670 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bca8:	bf00      	nop
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	200000d8 	.word	0x200000d8
 800bcb0:	20004d84 	.word	0x20004d84
 800bcb4:	20000040 	.word	0x20000040
 800bcb8:	200000c4 	.word	0x200000c4

0800bcbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	4905      	ldr	r1, [pc, #20]	; (800bcd8 <CDC_Init_FS+0x1c>)
 800bcc4:	4805      	ldr	r0, [pc, #20]	; (800bcdc <CDC_Init_FS+0x20>)
 800bcc6:	f7fb fea3 	bl	8007a10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bcca:	4905      	ldr	r1, [pc, #20]	; (800bce0 <CDC_Init_FS+0x24>)
 800bccc:	4803      	ldr	r0, [pc, #12]	; (800bcdc <CDC_Init_FS+0x20>)
 800bcce:	f7fb fec1 	bl	8007a54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20005860 	.word	0x20005860
 800bcdc:	20004d84 	.word	0x20004d84
 800bce0:	20005060 	.word	0x20005060

0800bce4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bce4:	b480      	push	{r7}
 800bce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bce8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	6039      	str	r1, [r7, #0]
 800bcfe:	71fb      	strb	r3, [r7, #7]
 800bd00:	4613      	mov	r3, r2
 800bd02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd04:	79fb      	ldrb	r3, [r7, #7]
 800bd06:	2b23      	cmp	r3, #35	; 0x23
 800bd08:	d84a      	bhi.n	800bda0 <CDC_Control_FS+0xac>
 800bd0a:	a201      	add	r2, pc, #4	; (adr r2, 800bd10 <CDC_Control_FS+0x1c>)
 800bd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd10:	0800bda1 	.word	0x0800bda1
 800bd14:	0800bda1 	.word	0x0800bda1
 800bd18:	0800bda1 	.word	0x0800bda1
 800bd1c:	0800bda1 	.word	0x0800bda1
 800bd20:	0800bda1 	.word	0x0800bda1
 800bd24:	0800bda1 	.word	0x0800bda1
 800bd28:	0800bda1 	.word	0x0800bda1
 800bd2c:	0800bda1 	.word	0x0800bda1
 800bd30:	0800bda1 	.word	0x0800bda1
 800bd34:	0800bda1 	.word	0x0800bda1
 800bd38:	0800bda1 	.word	0x0800bda1
 800bd3c:	0800bda1 	.word	0x0800bda1
 800bd40:	0800bda1 	.word	0x0800bda1
 800bd44:	0800bda1 	.word	0x0800bda1
 800bd48:	0800bda1 	.word	0x0800bda1
 800bd4c:	0800bda1 	.word	0x0800bda1
 800bd50:	0800bda1 	.word	0x0800bda1
 800bd54:	0800bda1 	.word	0x0800bda1
 800bd58:	0800bda1 	.word	0x0800bda1
 800bd5c:	0800bda1 	.word	0x0800bda1
 800bd60:	0800bda1 	.word	0x0800bda1
 800bd64:	0800bda1 	.word	0x0800bda1
 800bd68:	0800bda1 	.word	0x0800bda1
 800bd6c:	0800bda1 	.word	0x0800bda1
 800bd70:	0800bda1 	.word	0x0800bda1
 800bd74:	0800bda1 	.word	0x0800bda1
 800bd78:	0800bda1 	.word	0x0800bda1
 800bd7c:	0800bda1 	.word	0x0800bda1
 800bd80:	0800bda1 	.word	0x0800bda1
 800bd84:	0800bda1 	.word	0x0800bda1
 800bd88:	0800bda1 	.word	0x0800bda1
 800bd8c:	0800bda1 	.word	0x0800bda1
 800bd90:	0800bda1 	.word	0x0800bda1
 800bd94:	0800bda1 	.word	0x0800bda1
 800bd98:	0800bda1 	.word	0x0800bda1
 800bd9c:	0800bda1 	.word	0x0800bda1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bda0:	bf00      	nop
  }

  return (USBD_OK);
 800bda2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	4805      	ldr	r0, [pc, #20]	; (800bdd4 <CDC_Receive_FS+0x24>)
 800bdbe:	f7fb fe49 	bl	8007a54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bdc2:	4804      	ldr	r0, [pc, #16]	; (800bdd4 <CDC_Receive_FS+0x24>)
 800bdc4:	f7fb fe64 	bl	8007a90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bdc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20004d84 	.word	0x20004d84

0800bdd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	4613      	mov	r3, r2
 800bde4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bdea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	371c      	adds	r7, #28
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
	...

0800bdfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	4603      	mov	r3, r0
 800be04:	6039      	str	r1, [r7, #0]
 800be06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2212      	movs	r2, #18
 800be0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be0e:	4b03      	ldr	r3, [pc, #12]	; (800be1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800be10:	4618      	mov	r0, r3
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	200000f4 	.word	0x200000f4

0800be20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	6039      	str	r1, [r7, #0]
 800be2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2204      	movs	r2, #4
 800be30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be32:	4b03      	ldr	r3, [pc, #12]	; (800be40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	20000108 	.word	0x20000108

0800be44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	6039      	str	r1, [r7, #0]
 800be4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be50:	79fb      	ldrb	r3, [r7, #7]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d105      	bne.n	800be62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	4907      	ldr	r1, [pc, #28]	; (800be78 <USBD_FS_ProductStrDescriptor+0x34>)
 800be5a:	4808      	ldr	r0, [pc, #32]	; (800be7c <USBD_FS_ProductStrDescriptor+0x38>)
 800be5c:	f7fd f860 	bl	8008f20 <USBD_GetString>
 800be60:	e004      	b.n	800be6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	4904      	ldr	r1, [pc, #16]	; (800be78 <USBD_FS_ProductStrDescriptor+0x34>)
 800be66:	4805      	ldr	r0, [pc, #20]	; (800be7c <USBD_FS_ProductStrDescriptor+0x38>)
 800be68:	f7fd f85a 	bl	8008f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be6c:	4b02      	ldr	r3, [pc, #8]	; (800be78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20006060 	.word	0x20006060
 800be7c:	0800d204 	.word	0x0800d204

0800be80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	6039      	str	r1, [r7, #0]
 800be8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	4904      	ldr	r1, [pc, #16]	; (800bea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be90:	4804      	ldr	r0, [pc, #16]	; (800bea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be92:	f7fd f845 	bl	8008f20 <USBD_GetString>
  return USBD_StrDesc;
 800be96:	4b02      	ldr	r3, [pc, #8]	; (800bea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20006060 	.word	0x20006060
 800bea4:	0800d21c 	.word	0x0800d21c

0800bea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	6039      	str	r1, [r7, #0]
 800beb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	221a      	movs	r2, #26
 800beb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800beba:	f000 f843 	bl	800bf44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bebe:	4b02      	ldr	r3, [pc, #8]	; (800bec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	2000010c 	.word	0x2000010c

0800becc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	6039      	str	r1, [r7, #0]
 800bed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d105      	bne.n	800beea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	4907      	ldr	r1, [pc, #28]	; (800bf00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bee2:	4808      	ldr	r0, [pc, #32]	; (800bf04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bee4:	f7fd f81c 	bl	8008f20 <USBD_GetString>
 800bee8:	e004      	b.n	800bef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4904      	ldr	r1, [pc, #16]	; (800bf00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800beee:	4805      	ldr	r0, [pc, #20]	; (800bf04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bef0:	f7fd f816 	bl	8008f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef4:	4b02      	ldr	r3, [pc, #8]	; (800bf00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20006060 	.word	0x20006060
 800bf04:	0800d230 	.word	0x0800d230

0800bf08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d105      	bne.n	800bf26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	4907      	ldr	r1, [pc, #28]	; (800bf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf1e:	4808      	ldr	r0, [pc, #32]	; (800bf40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf20:	f7fc fffe 	bl	8008f20 <USBD_GetString>
 800bf24:	e004      	b.n	800bf30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	4904      	ldr	r1, [pc, #16]	; (800bf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf2a:	4805      	ldr	r0, [pc, #20]	; (800bf40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf2c:	f7fc fff8 	bl	8008f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf30:	4b02      	ldr	r3, [pc, #8]	; (800bf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20006060 	.word	0x20006060
 800bf40:	0800d23c 	.word	0x0800d23c

0800bf44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf4a:	4b0f      	ldr	r3, [pc, #60]	; (800bf88 <Get_SerialNum+0x44>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf50:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <Get_SerialNum+0x48>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf56:	4b0e      	ldr	r3, [pc, #56]	; (800bf90 <Get_SerialNum+0x4c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4413      	add	r3, r2
 800bf62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d009      	beq.n	800bf7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	4909      	ldr	r1, [pc, #36]	; (800bf94 <Get_SerialNum+0x50>)
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f000 f814 	bl	800bf9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf74:	2204      	movs	r2, #4
 800bf76:	4908      	ldr	r1, [pc, #32]	; (800bf98 <Get_SerialNum+0x54>)
 800bf78:	68b8      	ldr	r0, [r7, #8]
 800bf7a:	f000 f80f 	bl	800bf9c <IntToUnicode>
  }
}
 800bf7e:	bf00      	nop
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	1fff7a10 	.word	0x1fff7a10
 800bf8c:	1fff7a14 	.word	0x1fff7a14
 800bf90:	1fff7a18 	.word	0x1fff7a18
 800bf94:	2000010e 	.word	0x2000010e
 800bf98:	2000011e 	.word	0x2000011e

0800bf9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b087      	sub	sp, #28
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfae:	2300      	movs	r3, #0
 800bfb0:	75fb      	strb	r3, [r7, #23]
 800bfb2:	e027      	b.n	800c004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	0f1b      	lsrs	r3, r3, #28
 800bfb8:	2b09      	cmp	r3, #9
 800bfba:	d80b      	bhi.n	800bfd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	0f1b      	lsrs	r3, r3, #28
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	7dfb      	ldrb	r3, [r7, #23]
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	440b      	add	r3, r1
 800bfcc:	3230      	adds	r2, #48	; 0x30
 800bfce:	b2d2      	uxtb	r2, r2
 800bfd0:	701a      	strb	r2, [r3, #0]
 800bfd2:	e00a      	b.n	800bfea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	0f1b      	lsrs	r3, r3, #28
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	7dfb      	ldrb	r3, [r7, #23]
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	4619      	mov	r1, r3
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	440b      	add	r3, r1
 800bfe4:	3237      	adds	r2, #55	; 0x37
 800bfe6:	b2d2      	uxtb	r2, r2
 800bfe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	011b      	lsls	r3, r3, #4
 800bfee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bff0:	7dfb      	ldrb	r3, [r7, #23]
 800bff2:	005b      	lsls	r3, r3, #1
 800bff4:	3301      	adds	r3, #1
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	4413      	add	r3, r2
 800bffa:	2200      	movs	r2, #0
 800bffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	3301      	adds	r3, #1
 800c002:	75fb      	strb	r3, [r7, #23]
 800c004:	7dfa      	ldrb	r2, [r7, #23]
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d3d3      	bcc.n	800bfb4 <IntToUnicode+0x18>
  }
}
 800c00c:	bf00      	nop
 800c00e:	bf00      	nop
 800c010:	371c      	adds	r7, #28
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
	...

0800c01c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b08a      	sub	sp, #40	; 0x28
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c024:	f107 0314 	add.w	r3, r7, #20
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	605a      	str	r2, [r3, #4]
 800c02e:	609a      	str	r2, [r3, #8]
 800c030:	60da      	str	r2, [r3, #12]
 800c032:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c03c:	d13a      	bne.n	800c0b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c03e:	2300      	movs	r3, #0
 800c040:	613b      	str	r3, [r7, #16]
 800c042:	4b1e      	ldr	r3, [pc, #120]	; (800c0bc <HAL_PCD_MspInit+0xa0>)
 800c044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c046:	4a1d      	ldr	r2, [pc, #116]	; (800c0bc <HAL_PCD_MspInit+0xa0>)
 800c048:	f043 0301 	orr.w	r3, r3, #1
 800c04c:	6313      	str	r3, [r2, #48]	; 0x30
 800c04e:	4b1b      	ldr	r3, [pc, #108]	; (800c0bc <HAL_PCD_MspInit+0xa0>)
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	f003 0301 	and.w	r3, r3, #1
 800c056:	613b      	str	r3, [r7, #16]
 800c058:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c05a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c05e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c060:	2302      	movs	r3, #2
 800c062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c064:	2300      	movs	r3, #0
 800c066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c068:	2303      	movs	r3, #3
 800c06a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c06c:	230a      	movs	r3, #10
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c070:	f107 0314 	add.w	r3, r7, #20
 800c074:	4619      	mov	r1, r3
 800c076:	4812      	ldr	r0, [pc, #72]	; (800c0c0 <HAL_PCD_MspInit+0xa4>)
 800c078:	f7f6 f9e6 	bl	8002448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c07c:	4b0f      	ldr	r3, [pc, #60]	; (800c0bc <HAL_PCD_MspInit+0xa0>)
 800c07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c080:	4a0e      	ldr	r2, [pc, #56]	; (800c0bc <HAL_PCD_MspInit+0xa0>)
 800c082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c086:	6353      	str	r3, [r2, #52]	; 0x34
 800c088:	2300      	movs	r3, #0
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	4b0b      	ldr	r3, [pc, #44]	; (800c0bc <HAL_PCD_MspInit+0xa0>)
 800c08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c090:	4a0a      	ldr	r2, [pc, #40]	; (800c0bc <HAL_PCD_MspInit+0xa0>)
 800c092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c096:	6453      	str	r3, [r2, #68]	; 0x44
 800c098:	4b08      	ldr	r3, [pc, #32]	; (800c0bc <HAL_PCD_MspInit+0xa0>)
 800c09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0a0:	60fb      	str	r3, [r7, #12]
 800c0a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2105      	movs	r1, #5
 800c0a8:	2043      	movs	r0, #67	; 0x43
 800c0aa:	f7f5 feb9 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c0ae:	2043      	movs	r0, #67	; 0x43
 800c0b0:	f7f5 fed2 	bl	8001e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c0b4:	bf00      	nop
 800c0b6:	3728      	adds	r7, #40	; 0x28
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	40023800 	.word	0x40023800
 800c0c0:	40020000 	.word	0x40020000

0800c0c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c0d8:	4619      	mov	r1, r3
 800c0da:	4610      	mov	r0, r2
 800c0dc:	f7fb fdc1 	bl	8007c62 <USBD_LL_SetupStage>
}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c0fa:	78fa      	ldrb	r2, [r7, #3]
 800c0fc:	6879      	ldr	r1, [r7, #4]
 800c0fe:	4613      	mov	r3, r2
 800c100:	00db      	lsls	r3, r3, #3
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	440b      	add	r3, r1
 800c108:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	78fb      	ldrb	r3, [r7, #3]
 800c110:	4619      	mov	r1, r3
 800c112:	f7fb fdfb 	bl	8007d0c <USBD_LL_DataOutStage>
}
 800c116:	bf00      	nop
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	460b      	mov	r3, r1
 800c128:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c130:	78fa      	ldrb	r2, [r7, #3]
 800c132:	6879      	ldr	r1, [r7, #4]
 800c134:	4613      	mov	r3, r2
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	4413      	add	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	440b      	add	r3, r1
 800c13e:	334c      	adds	r3, #76	; 0x4c
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	78fb      	ldrb	r3, [r7, #3]
 800c144:	4619      	mov	r1, r3
 800c146:	f7fb fe94 	bl	8007e72 <USBD_LL_DataInStage>
}
 800c14a:	bf00      	nop
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b082      	sub	sp, #8
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c160:	4618      	mov	r0, r3
 800c162:	f7fb ffc8 	bl	80080f6 <USBD_LL_SOF>
}
 800c166:	bf00      	nop
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b084      	sub	sp, #16
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c176:	2301      	movs	r3, #1
 800c178:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d001      	beq.n	800c186 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c182:	f7f5 fa75 	bl	8001670 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c18c:	7bfa      	ldrb	r2, [r7, #15]
 800c18e:	4611      	mov	r1, r2
 800c190:	4618      	mov	r0, r3
 800c192:	f7fb ff72 	bl	800807a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fb ff1a 	bl	8007fd6 <USBD_LL_Reset>
}
 800c1a2:	bf00      	nop
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
	...

0800c1ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fb ff6d 	bl	800809a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	6812      	ldr	r2, [r2, #0]
 800c1ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1d2:	f043 0301 	orr.w	r3, r3, #1
 800c1d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a1b      	ldr	r3, [r3, #32]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d005      	beq.n	800c1ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1e0:	4b04      	ldr	r3, [pc, #16]	; (800c1f4 <HAL_PCD_SuspendCallback+0x48>)
 800c1e2:	691b      	ldr	r3, [r3, #16]
 800c1e4:	4a03      	ldr	r2, [pc, #12]	; (800c1f4 <HAL_PCD_SuspendCallback+0x48>)
 800c1e6:	f043 0306 	orr.w	r3, r3, #6
 800c1ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1ec:	bf00      	nop
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	e000ed00 	.word	0xe000ed00

0800c1f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c206:	4618      	mov	r0, r3
 800c208:	f7fb ff5d 	bl	80080c6 <USBD_LL_Resume>
}
 800c20c:	bf00      	nop
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c226:	78fa      	ldrb	r2, [r7, #3]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fb ffb5 	bl	800819a <USBD_LL_IsoOUTIncomplete>
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c24a:	78fa      	ldrb	r2, [r7, #3]
 800c24c:	4611      	mov	r1, r2
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fb ff71 	bl	8008136 <USBD_LL_IsoINIncomplete>
}
 800c254:	bf00      	nop
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fb ffc7 	bl	80081fe <USBD_LL_DevConnected>
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c286:	4618      	mov	r0, r3
 800c288:	f7fb ffc4 	bl	8008214 <USBD_LL_DevDisconnected>
}
 800c28c:	bf00      	nop
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d13c      	bne.n	800c31e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c2a4:	4a20      	ldr	r2, [pc, #128]	; (800c328 <USBD_LL_Init+0x94>)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a1e      	ldr	r2, [pc, #120]	; (800c328 <USBD_LL_Init+0x94>)
 800c2b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2b4:	4b1c      	ldr	r3, [pc, #112]	; (800c328 <USBD_LL_Init+0x94>)
 800c2b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c2ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c2bc:	4b1a      	ldr	r3, [pc, #104]	; (800c328 <USBD_LL_Init+0x94>)
 800c2be:	2204      	movs	r2, #4
 800c2c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c2c2:	4b19      	ldr	r3, [pc, #100]	; (800c328 <USBD_LL_Init+0x94>)
 800c2c4:	2202      	movs	r2, #2
 800c2c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2c8:	4b17      	ldr	r3, [pc, #92]	; (800c328 <USBD_LL_Init+0x94>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c2ce:	4b16      	ldr	r3, [pc, #88]	; (800c328 <USBD_LL_Init+0x94>)
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2d4:	4b14      	ldr	r3, [pc, #80]	; (800c328 <USBD_LL_Init+0x94>)
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c2da:	4b13      	ldr	r3, [pc, #76]	; (800c328 <USBD_LL_Init+0x94>)
 800c2dc:	2200      	movs	r2, #0
 800c2de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c2e0:	4b11      	ldr	r3, [pc, #68]	; (800c328 <USBD_LL_Init+0x94>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c2e6:	4b10      	ldr	r3, [pc, #64]	; (800c328 <USBD_LL_Init+0x94>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c2ec:	4b0e      	ldr	r3, [pc, #56]	; (800c328 <USBD_LL_Init+0x94>)
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c2f2:	480d      	ldr	r0, [pc, #52]	; (800c328 <USBD_LL_Init+0x94>)
 800c2f4:	f7f6 fba2 	bl	8002a3c <HAL_PCD_Init>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c2fe:	f7f5 f9b7 	bl	8001670 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c302:	2180      	movs	r1, #128	; 0x80
 800c304:	4808      	ldr	r0, [pc, #32]	; (800c328 <USBD_LL_Init+0x94>)
 800c306:	f7f7 fdfa 	bl	8003efe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c30a:	2240      	movs	r2, #64	; 0x40
 800c30c:	2100      	movs	r1, #0
 800c30e:	4806      	ldr	r0, [pc, #24]	; (800c328 <USBD_LL_Init+0x94>)
 800c310:	f7f7 fdae 	bl	8003e70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c314:	2280      	movs	r2, #128	; 0x80
 800c316:	2101      	movs	r1, #1
 800c318:	4803      	ldr	r0, [pc, #12]	; (800c328 <USBD_LL_Init+0x94>)
 800c31a:	f7f7 fda9 	bl	8003e70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	20006260 	.word	0x20006260

0800c32c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c342:	4618      	mov	r0, r3
 800c344:	f7f6 fc97 	bl	8002c76 <HAL_PCD_Start>
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 f942 	bl	800c5d8 <USBD_Get_USB_Status>
 800c354:	4603      	mov	r3, r0
 800c356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c358:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b084      	sub	sp, #16
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	4608      	mov	r0, r1
 800c36c:	4611      	mov	r1, r2
 800c36e:	461a      	mov	r2, r3
 800c370:	4603      	mov	r3, r0
 800c372:	70fb      	strb	r3, [r7, #3]
 800c374:	460b      	mov	r3, r1
 800c376:	70bb      	strb	r3, [r7, #2]
 800c378:	4613      	mov	r3, r2
 800c37a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c37c:	2300      	movs	r3, #0
 800c37e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c38a:	78bb      	ldrb	r3, [r7, #2]
 800c38c:	883a      	ldrh	r2, [r7, #0]
 800c38e:	78f9      	ldrb	r1, [r7, #3]
 800c390:	f7f7 f968 	bl	8003664 <HAL_PCD_EP_Open>
 800c394:	4603      	mov	r3, r0
 800c396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c398:	7bfb      	ldrb	r3, [r7, #15]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f91c 	bl	800c5d8 <USBD_Get_USB_Status>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b084      	sub	sp, #16
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3c8:	78fa      	ldrb	r2, [r7, #3]
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7f7 f9b1 	bl	8003734 <HAL_PCD_EP_Close>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 f8fd 	bl	800c5d8 <USBD_Get_USB_Status>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c406:	78fa      	ldrb	r2, [r7, #3]
 800c408:	4611      	mov	r1, r2
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7f7 fa89 	bl	8003922 <HAL_PCD_EP_SetStall>
 800c410:	4603      	mov	r3, r0
 800c412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f8de 	bl	800c5d8 <USBD_Get_USB_Status>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c420:	7bbb      	ldrb	r3, [r7, #14]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	460b      	mov	r3, r1
 800c434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c444:	78fa      	ldrb	r2, [r7, #3]
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f7f7 face 	bl	80039ea <HAL_PCD_EP_ClrStall>
 800c44e:	4603      	mov	r3, r0
 800c450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c452:	7bfb      	ldrb	r3, [r7, #15]
 800c454:	4618      	mov	r0, r3
 800c456:	f000 f8bf 	bl	800c5d8 <USBD_Get_USB_Status>
 800c45a:	4603      	mov	r3, r0
 800c45c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c45e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c47a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c47c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c480:	2b00      	cmp	r3, #0
 800c482:	da0b      	bge.n	800c49c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c48a:	68f9      	ldr	r1, [r7, #12]
 800c48c:	4613      	mov	r3, r2
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	4413      	add	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	440b      	add	r3, r1
 800c496:	333e      	adds	r3, #62	; 0x3e
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	e00b      	b.n	800c4b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c49c:	78fb      	ldrb	r3, [r7, #3]
 800c49e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4a2:	68f9      	ldr	r1, [r7, #12]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	00db      	lsls	r3, r3, #3
 800c4a8:	4413      	add	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	440b      	add	r3, r1
 800c4ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c4b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4da:	78fa      	ldrb	r2, [r7, #3]
 800c4dc:	4611      	mov	r1, r2
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7f7 f89b 	bl	800361a <HAL_PCD_SetAddress>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f874 	bl	800c5d8 <USBD_Get_USB_Status>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b086      	sub	sp, #24
 800c502:	af00      	add	r7, sp, #0
 800c504:	60f8      	str	r0, [r7, #12]
 800c506:	607a      	str	r2, [r7, #4]
 800c508:	603b      	str	r3, [r7, #0]
 800c50a:	460b      	mov	r3, r1
 800c50c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c51c:	7af9      	ldrb	r1, [r7, #11]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	f7f7 f9b4 	bl	800388e <HAL_PCD_EP_Transmit>
 800c526:	4603      	mov	r3, r0
 800c528:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c52a:	7dfb      	ldrb	r3, [r7, #23]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f000 f853 	bl	800c5d8 <USBD_Get_USB_Status>
 800c532:	4603      	mov	r3, r0
 800c534:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c536:	7dbb      	ldrb	r3, [r7, #22]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3718      	adds	r7, #24
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	607a      	str	r2, [r7, #4]
 800c54a:	603b      	str	r3, [r7, #0]
 800c54c:	460b      	mov	r3, r1
 800c54e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c55e:	7af9      	ldrb	r1, [r7, #11]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	f7f7 f930 	bl	80037c8 <HAL_PCD_EP_Receive>
 800c568:	4603      	mov	r3, r0
 800c56a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 f832 	bl	800c5d8 <USBD_Get_USB_Status>
 800c574:	4603      	mov	r3, r0
 800c576:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c578:	7dbb      	ldrb	r3, [r7, #22]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3718      	adds	r7, #24
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b082      	sub	sp, #8
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	460b      	mov	r3, r1
 800c58c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c594:	78fa      	ldrb	r2, [r7, #3]
 800c596:	4611      	mov	r1, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f7f7 f960 	bl	800385e <HAL_PCD_EP_GetRxCount>
 800c59e:	4603      	mov	r3, r0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c5b0:	4b03      	ldr	r3, [pc, #12]	; (800c5c0 <USBD_static_malloc+0x18>)
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	370c      	adds	r7, #12
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	2000676c 	.word	0x2000676c

0800c5c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]

}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5e6:	79fb      	ldrb	r3, [r7, #7]
 800c5e8:	2b03      	cmp	r3, #3
 800c5ea:	d817      	bhi.n	800c61c <USBD_Get_USB_Status+0x44>
 800c5ec:	a201      	add	r2, pc, #4	; (adr r2, 800c5f4 <USBD_Get_USB_Status+0x1c>)
 800c5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f2:	bf00      	nop
 800c5f4:	0800c605 	.word	0x0800c605
 800c5f8:	0800c60b 	.word	0x0800c60b
 800c5fc:	0800c611 	.word	0x0800c611
 800c600:	0800c617 	.word	0x0800c617
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	73fb      	strb	r3, [r7, #15]
    break;
 800c608:	e00b      	b.n	800c622 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c60a:	2303      	movs	r3, #3
 800c60c:	73fb      	strb	r3, [r7, #15]
    break;
 800c60e:	e008      	b.n	800c622 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c610:	2301      	movs	r3, #1
 800c612:	73fb      	strb	r3, [r7, #15]
    break;
 800c614:	e005      	b.n	800c622 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c616:	2303      	movs	r3, #3
 800c618:	73fb      	strb	r3, [r7, #15]
    break;
 800c61a:	e002      	b.n	800c622 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c61c:	2303      	movs	r3, #3
 800c61e:	73fb      	strb	r3, [r7, #15]
    break;
 800c620:	bf00      	nop
  }
  return usb_status;
 800c622:	7bfb      	ldrb	r3, [r7, #15]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <__errno>:
 800c630:	4b01      	ldr	r3, [pc, #4]	; (800c638 <__errno+0x8>)
 800c632:	6818      	ldr	r0, [r3, #0]
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	20000128 	.word	0x20000128

0800c63c <std>:
 800c63c:	2300      	movs	r3, #0
 800c63e:	b510      	push	{r4, lr}
 800c640:	4604      	mov	r4, r0
 800c642:	e9c0 3300 	strd	r3, r3, [r0]
 800c646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c64a:	6083      	str	r3, [r0, #8]
 800c64c:	8181      	strh	r1, [r0, #12]
 800c64e:	6643      	str	r3, [r0, #100]	; 0x64
 800c650:	81c2      	strh	r2, [r0, #14]
 800c652:	6183      	str	r3, [r0, #24]
 800c654:	4619      	mov	r1, r3
 800c656:	2208      	movs	r2, #8
 800c658:	305c      	adds	r0, #92	; 0x5c
 800c65a:	f000 f923 	bl	800c8a4 <memset>
 800c65e:	4b05      	ldr	r3, [pc, #20]	; (800c674 <std+0x38>)
 800c660:	6263      	str	r3, [r4, #36]	; 0x24
 800c662:	4b05      	ldr	r3, [pc, #20]	; (800c678 <std+0x3c>)
 800c664:	62a3      	str	r3, [r4, #40]	; 0x28
 800c666:	4b05      	ldr	r3, [pc, #20]	; (800c67c <std+0x40>)
 800c668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c66a:	4b05      	ldr	r3, [pc, #20]	; (800c680 <std+0x44>)
 800c66c:	6224      	str	r4, [r4, #32]
 800c66e:	6323      	str	r3, [r4, #48]	; 0x30
 800c670:	bd10      	pop	{r4, pc}
 800c672:	bf00      	nop
 800c674:	0800cc55 	.word	0x0800cc55
 800c678:	0800cc77 	.word	0x0800cc77
 800c67c:	0800ccaf 	.word	0x0800ccaf
 800c680:	0800ccd3 	.word	0x0800ccd3

0800c684 <_cleanup_r>:
 800c684:	4901      	ldr	r1, [pc, #4]	; (800c68c <_cleanup_r+0x8>)
 800c686:	f000 b8af 	b.w	800c7e8 <_fwalk_reent>
 800c68a:	bf00      	nop
 800c68c:	0800cfad 	.word	0x0800cfad

0800c690 <__sfmoreglue>:
 800c690:	b570      	push	{r4, r5, r6, lr}
 800c692:	2268      	movs	r2, #104	; 0x68
 800c694:	1e4d      	subs	r5, r1, #1
 800c696:	4355      	muls	r5, r2
 800c698:	460e      	mov	r6, r1
 800c69a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c69e:	f000 f975 	bl	800c98c <_malloc_r>
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	b140      	cbz	r0, 800c6b8 <__sfmoreglue+0x28>
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	e9c0 1600 	strd	r1, r6, [r0]
 800c6ac:	300c      	adds	r0, #12
 800c6ae:	60a0      	str	r0, [r4, #8]
 800c6b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c6b4:	f000 f8f6 	bl	800c8a4 <memset>
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}

0800c6bc <__sfp_lock_acquire>:
 800c6bc:	4801      	ldr	r0, [pc, #4]	; (800c6c4 <__sfp_lock_acquire+0x8>)
 800c6be:	f000 b8d8 	b.w	800c872 <__retarget_lock_acquire_recursive>
 800c6c2:	bf00      	nop
 800c6c4:	2000698d 	.word	0x2000698d

0800c6c8 <__sfp_lock_release>:
 800c6c8:	4801      	ldr	r0, [pc, #4]	; (800c6d0 <__sfp_lock_release+0x8>)
 800c6ca:	f000 b8d3 	b.w	800c874 <__retarget_lock_release_recursive>
 800c6ce:	bf00      	nop
 800c6d0:	2000698d 	.word	0x2000698d

0800c6d4 <__sinit_lock_acquire>:
 800c6d4:	4801      	ldr	r0, [pc, #4]	; (800c6dc <__sinit_lock_acquire+0x8>)
 800c6d6:	f000 b8cc 	b.w	800c872 <__retarget_lock_acquire_recursive>
 800c6da:	bf00      	nop
 800c6dc:	2000698e 	.word	0x2000698e

0800c6e0 <__sinit_lock_release>:
 800c6e0:	4801      	ldr	r0, [pc, #4]	; (800c6e8 <__sinit_lock_release+0x8>)
 800c6e2:	f000 b8c7 	b.w	800c874 <__retarget_lock_release_recursive>
 800c6e6:	bf00      	nop
 800c6e8:	2000698e 	.word	0x2000698e

0800c6ec <__sinit>:
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	f7ff fff0 	bl	800c6d4 <__sinit_lock_acquire>
 800c6f4:	69a3      	ldr	r3, [r4, #24]
 800c6f6:	b11b      	cbz	r3, 800c700 <__sinit+0x14>
 800c6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6fc:	f7ff bff0 	b.w	800c6e0 <__sinit_lock_release>
 800c700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c704:	6523      	str	r3, [r4, #80]	; 0x50
 800c706:	4b13      	ldr	r3, [pc, #76]	; (800c754 <__sinit+0x68>)
 800c708:	4a13      	ldr	r2, [pc, #76]	; (800c758 <__sinit+0x6c>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c70e:	42a3      	cmp	r3, r4
 800c710:	bf04      	itt	eq
 800c712:	2301      	moveq	r3, #1
 800c714:	61a3      	streq	r3, [r4, #24]
 800c716:	4620      	mov	r0, r4
 800c718:	f000 f820 	bl	800c75c <__sfp>
 800c71c:	6060      	str	r0, [r4, #4]
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 f81c 	bl	800c75c <__sfp>
 800c724:	60a0      	str	r0, [r4, #8]
 800c726:	4620      	mov	r0, r4
 800c728:	f000 f818 	bl	800c75c <__sfp>
 800c72c:	2200      	movs	r2, #0
 800c72e:	60e0      	str	r0, [r4, #12]
 800c730:	2104      	movs	r1, #4
 800c732:	6860      	ldr	r0, [r4, #4]
 800c734:	f7ff ff82 	bl	800c63c <std>
 800c738:	68a0      	ldr	r0, [r4, #8]
 800c73a:	2201      	movs	r2, #1
 800c73c:	2109      	movs	r1, #9
 800c73e:	f7ff ff7d 	bl	800c63c <std>
 800c742:	68e0      	ldr	r0, [r4, #12]
 800c744:	2202      	movs	r2, #2
 800c746:	2112      	movs	r1, #18
 800c748:	f7ff ff78 	bl	800c63c <std>
 800c74c:	2301      	movs	r3, #1
 800c74e:	61a3      	str	r3, [r4, #24]
 800c750:	e7d2      	b.n	800c6f8 <__sinit+0xc>
 800c752:	bf00      	nop
 800c754:	0800fc64 	.word	0x0800fc64
 800c758:	0800c685 	.word	0x0800c685

0800c75c <__sfp>:
 800c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75e:	4607      	mov	r7, r0
 800c760:	f7ff ffac 	bl	800c6bc <__sfp_lock_acquire>
 800c764:	4b1e      	ldr	r3, [pc, #120]	; (800c7e0 <__sfp+0x84>)
 800c766:	681e      	ldr	r6, [r3, #0]
 800c768:	69b3      	ldr	r3, [r6, #24]
 800c76a:	b913      	cbnz	r3, 800c772 <__sfp+0x16>
 800c76c:	4630      	mov	r0, r6
 800c76e:	f7ff ffbd 	bl	800c6ec <__sinit>
 800c772:	3648      	adds	r6, #72	; 0x48
 800c774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c778:	3b01      	subs	r3, #1
 800c77a:	d503      	bpl.n	800c784 <__sfp+0x28>
 800c77c:	6833      	ldr	r3, [r6, #0]
 800c77e:	b30b      	cbz	r3, 800c7c4 <__sfp+0x68>
 800c780:	6836      	ldr	r6, [r6, #0]
 800c782:	e7f7      	b.n	800c774 <__sfp+0x18>
 800c784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c788:	b9d5      	cbnz	r5, 800c7c0 <__sfp+0x64>
 800c78a:	4b16      	ldr	r3, [pc, #88]	; (800c7e4 <__sfp+0x88>)
 800c78c:	60e3      	str	r3, [r4, #12]
 800c78e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c792:	6665      	str	r5, [r4, #100]	; 0x64
 800c794:	f000 f86c 	bl	800c870 <__retarget_lock_init_recursive>
 800c798:	f7ff ff96 	bl	800c6c8 <__sfp_lock_release>
 800c79c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c7a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c7a4:	6025      	str	r5, [r4, #0]
 800c7a6:	61a5      	str	r5, [r4, #24]
 800c7a8:	2208      	movs	r2, #8
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c7b0:	f000 f878 	bl	800c8a4 <memset>
 800c7b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c7b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c7bc:	4620      	mov	r0, r4
 800c7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7c0:	3468      	adds	r4, #104	; 0x68
 800c7c2:	e7d9      	b.n	800c778 <__sfp+0x1c>
 800c7c4:	2104      	movs	r1, #4
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	f7ff ff62 	bl	800c690 <__sfmoreglue>
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	6030      	str	r0, [r6, #0]
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d1d5      	bne.n	800c780 <__sfp+0x24>
 800c7d4:	f7ff ff78 	bl	800c6c8 <__sfp_lock_release>
 800c7d8:	230c      	movs	r3, #12
 800c7da:	603b      	str	r3, [r7, #0]
 800c7dc:	e7ee      	b.n	800c7bc <__sfp+0x60>
 800c7de:	bf00      	nop
 800c7e0:	0800fc64 	.word	0x0800fc64
 800c7e4:	ffff0001 	.word	0xffff0001

0800c7e8 <_fwalk_reent>:
 800c7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7ec:	4606      	mov	r6, r0
 800c7ee:	4688      	mov	r8, r1
 800c7f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c7f4:	2700      	movs	r7, #0
 800c7f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7fa:	f1b9 0901 	subs.w	r9, r9, #1
 800c7fe:	d505      	bpl.n	800c80c <_fwalk_reent+0x24>
 800c800:	6824      	ldr	r4, [r4, #0]
 800c802:	2c00      	cmp	r4, #0
 800c804:	d1f7      	bne.n	800c7f6 <_fwalk_reent+0xe>
 800c806:	4638      	mov	r0, r7
 800c808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c80c:	89ab      	ldrh	r3, [r5, #12]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d907      	bls.n	800c822 <_fwalk_reent+0x3a>
 800c812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c816:	3301      	adds	r3, #1
 800c818:	d003      	beq.n	800c822 <_fwalk_reent+0x3a>
 800c81a:	4629      	mov	r1, r5
 800c81c:	4630      	mov	r0, r6
 800c81e:	47c0      	blx	r8
 800c820:	4307      	orrs	r7, r0
 800c822:	3568      	adds	r5, #104	; 0x68
 800c824:	e7e9      	b.n	800c7fa <_fwalk_reent+0x12>
	...

0800c828 <__libc_init_array>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	4d0d      	ldr	r5, [pc, #52]	; (800c860 <__libc_init_array+0x38>)
 800c82c:	4c0d      	ldr	r4, [pc, #52]	; (800c864 <__libc_init_array+0x3c>)
 800c82e:	1b64      	subs	r4, r4, r5
 800c830:	10a4      	asrs	r4, r4, #2
 800c832:	2600      	movs	r6, #0
 800c834:	42a6      	cmp	r6, r4
 800c836:	d109      	bne.n	800c84c <__libc_init_array+0x24>
 800c838:	4d0b      	ldr	r5, [pc, #44]	; (800c868 <__libc_init_array+0x40>)
 800c83a:	4c0c      	ldr	r4, [pc, #48]	; (800c86c <__libc_init_array+0x44>)
 800c83c:	f000 fcaa 	bl	800d194 <_init>
 800c840:	1b64      	subs	r4, r4, r5
 800c842:	10a4      	asrs	r4, r4, #2
 800c844:	2600      	movs	r6, #0
 800c846:	42a6      	cmp	r6, r4
 800c848:	d105      	bne.n	800c856 <__libc_init_array+0x2e>
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c850:	4798      	blx	r3
 800c852:	3601      	adds	r6, #1
 800c854:	e7ee      	b.n	800c834 <__libc_init_array+0xc>
 800c856:	f855 3b04 	ldr.w	r3, [r5], #4
 800c85a:	4798      	blx	r3
 800c85c:	3601      	adds	r6, #1
 800c85e:	e7f2      	b.n	800c846 <__libc_init_array+0x1e>
 800c860:	0800fc70 	.word	0x0800fc70
 800c864:	0800fc70 	.word	0x0800fc70
 800c868:	0800fc70 	.word	0x0800fc70
 800c86c:	0800fc74 	.word	0x0800fc74

0800c870 <__retarget_lock_init_recursive>:
 800c870:	4770      	bx	lr

0800c872 <__retarget_lock_acquire_recursive>:
 800c872:	4770      	bx	lr

0800c874 <__retarget_lock_release_recursive>:
 800c874:	4770      	bx	lr
	...

0800c878 <malloc>:
 800c878:	4b02      	ldr	r3, [pc, #8]	; (800c884 <malloc+0xc>)
 800c87a:	4601      	mov	r1, r0
 800c87c:	6818      	ldr	r0, [r3, #0]
 800c87e:	f000 b885 	b.w	800c98c <_malloc_r>
 800c882:	bf00      	nop
 800c884:	20000128 	.word	0x20000128

0800c888 <memcpy>:
 800c888:	440a      	add	r2, r1
 800c88a:	4291      	cmp	r1, r2
 800c88c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c890:	d100      	bne.n	800c894 <memcpy+0xc>
 800c892:	4770      	bx	lr
 800c894:	b510      	push	{r4, lr}
 800c896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c89a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c89e:	4291      	cmp	r1, r2
 800c8a0:	d1f9      	bne.n	800c896 <memcpy+0xe>
 800c8a2:	bd10      	pop	{r4, pc}

0800c8a4 <memset>:
 800c8a4:	4402      	add	r2, r0
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d100      	bne.n	800c8ae <memset+0xa>
 800c8ac:	4770      	bx	lr
 800c8ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c8b2:	e7f9      	b.n	800c8a8 <memset+0x4>

0800c8b4 <_free_r>:
 800c8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8b6:	2900      	cmp	r1, #0
 800c8b8:	d044      	beq.n	800c944 <_free_r+0x90>
 800c8ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8be:	9001      	str	r0, [sp, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c8c6:	bfb8      	it	lt
 800c8c8:	18e4      	addlt	r4, r4, r3
 800c8ca:	f000 fc23 	bl	800d114 <__malloc_lock>
 800c8ce:	4a1e      	ldr	r2, [pc, #120]	; (800c948 <_free_r+0x94>)
 800c8d0:	9801      	ldr	r0, [sp, #4]
 800c8d2:	6813      	ldr	r3, [r2, #0]
 800c8d4:	b933      	cbnz	r3, 800c8e4 <_free_r+0x30>
 800c8d6:	6063      	str	r3, [r4, #4]
 800c8d8:	6014      	str	r4, [r2, #0]
 800c8da:	b003      	add	sp, #12
 800c8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8e0:	f000 bc1e 	b.w	800d120 <__malloc_unlock>
 800c8e4:	42a3      	cmp	r3, r4
 800c8e6:	d908      	bls.n	800c8fa <_free_r+0x46>
 800c8e8:	6825      	ldr	r5, [r4, #0]
 800c8ea:	1961      	adds	r1, r4, r5
 800c8ec:	428b      	cmp	r3, r1
 800c8ee:	bf01      	itttt	eq
 800c8f0:	6819      	ldreq	r1, [r3, #0]
 800c8f2:	685b      	ldreq	r3, [r3, #4]
 800c8f4:	1949      	addeq	r1, r1, r5
 800c8f6:	6021      	streq	r1, [r4, #0]
 800c8f8:	e7ed      	b.n	800c8d6 <_free_r+0x22>
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	b10b      	cbz	r3, 800c904 <_free_r+0x50>
 800c900:	42a3      	cmp	r3, r4
 800c902:	d9fa      	bls.n	800c8fa <_free_r+0x46>
 800c904:	6811      	ldr	r1, [r2, #0]
 800c906:	1855      	adds	r5, r2, r1
 800c908:	42a5      	cmp	r5, r4
 800c90a:	d10b      	bne.n	800c924 <_free_r+0x70>
 800c90c:	6824      	ldr	r4, [r4, #0]
 800c90e:	4421      	add	r1, r4
 800c910:	1854      	adds	r4, r2, r1
 800c912:	42a3      	cmp	r3, r4
 800c914:	6011      	str	r1, [r2, #0]
 800c916:	d1e0      	bne.n	800c8da <_free_r+0x26>
 800c918:	681c      	ldr	r4, [r3, #0]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	6053      	str	r3, [r2, #4]
 800c91e:	4421      	add	r1, r4
 800c920:	6011      	str	r1, [r2, #0]
 800c922:	e7da      	b.n	800c8da <_free_r+0x26>
 800c924:	d902      	bls.n	800c92c <_free_r+0x78>
 800c926:	230c      	movs	r3, #12
 800c928:	6003      	str	r3, [r0, #0]
 800c92a:	e7d6      	b.n	800c8da <_free_r+0x26>
 800c92c:	6825      	ldr	r5, [r4, #0]
 800c92e:	1961      	adds	r1, r4, r5
 800c930:	428b      	cmp	r3, r1
 800c932:	bf04      	itt	eq
 800c934:	6819      	ldreq	r1, [r3, #0]
 800c936:	685b      	ldreq	r3, [r3, #4]
 800c938:	6063      	str	r3, [r4, #4]
 800c93a:	bf04      	itt	eq
 800c93c:	1949      	addeq	r1, r1, r5
 800c93e:	6021      	streq	r1, [r4, #0]
 800c940:	6054      	str	r4, [r2, #4]
 800c942:	e7ca      	b.n	800c8da <_free_r+0x26>
 800c944:	b003      	add	sp, #12
 800c946:	bd30      	pop	{r4, r5, pc}
 800c948:	20006990 	.word	0x20006990

0800c94c <sbrk_aligned>:
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	4e0e      	ldr	r6, [pc, #56]	; (800c988 <sbrk_aligned+0x3c>)
 800c950:	460c      	mov	r4, r1
 800c952:	6831      	ldr	r1, [r6, #0]
 800c954:	4605      	mov	r5, r0
 800c956:	b911      	cbnz	r1, 800c95e <sbrk_aligned+0x12>
 800c958:	f000 f96c 	bl	800cc34 <_sbrk_r>
 800c95c:	6030      	str	r0, [r6, #0]
 800c95e:	4621      	mov	r1, r4
 800c960:	4628      	mov	r0, r5
 800c962:	f000 f967 	bl	800cc34 <_sbrk_r>
 800c966:	1c43      	adds	r3, r0, #1
 800c968:	d00a      	beq.n	800c980 <sbrk_aligned+0x34>
 800c96a:	1cc4      	adds	r4, r0, #3
 800c96c:	f024 0403 	bic.w	r4, r4, #3
 800c970:	42a0      	cmp	r0, r4
 800c972:	d007      	beq.n	800c984 <sbrk_aligned+0x38>
 800c974:	1a21      	subs	r1, r4, r0
 800c976:	4628      	mov	r0, r5
 800c978:	f000 f95c 	bl	800cc34 <_sbrk_r>
 800c97c:	3001      	adds	r0, #1
 800c97e:	d101      	bne.n	800c984 <sbrk_aligned+0x38>
 800c980:	f04f 34ff 	mov.w	r4, #4294967295
 800c984:	4620      	mov	r0, r4
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	20006994 	.word	0x20006994

0800c98c <_malloc_r>:
 800c98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c990:	1ccd      	adds	r5, r1, #3
 800c992:	f025 0503 	bic.w	r5, r5, #3
 800c996:	3508      	adds	r5, #8
 800c998:	2d0c      	cmp	r5, #12
 800c99a:	bf38      	it	cc
 800c99c:	250c      	movcc	r5, #12
 800c99e:	2d00      	cmp	r5, #0
 800c9a0:	4607      	mov	r7, r0
 800c9a2:	db01      	blt.n	800c9a8 <_malloc_r+0x1c>
 800c9a4:	42a9      	cmp	r1, r5
 800c9a6:	d905      	bls.n	800c9b4 <_malloc_r+0x28>
 800c9a8:	230c      	movs	r3, #12
 800c9aa:	603b      	str	r3, [r7, #0]
 800c9ac:	2600      	movs	r6, #0
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b4:	4e2e      	ldr	r6, [pc, #184]	; (800ca70 <_malloc_r+0xe4>)
 800c9b6:	f000 fbad 	bl	800d114 <__malloc_lock>
 800c9ba:	6833      	ldr	r3, [r6, #0]
 800c9bc:	461c      	mov	r4, r3
 800c9be:	bb34      	cbnz	r4, 800ca0e <_malloc_r+0x82>
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	f7ff ffc2 	bl	800c94c <sbrk_aligned>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	d14d      	bne.n	800ca6a <_malloc_r+0xde>
 800c9ce:	6834      	ldr	r4, [r6, #0]
 800c9d0:	4626      	mov	r6, r4
 800c9d2:	2e00      	cmp	r6, #0
 800c9d4:	d140      	bne.n	800ca58 <_malloc_r+0xcc>
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	4631      	mov	r1, r6
 800c9da:	4638      	mov	r0, r7
 800c9dc:	eb04 0803 	add.w	r8, r4, r3
 800c9e0:	f000 f928 	bl	800cc34 <_sbrk_r>
 800c9e4:	4580      	cmp	r8, r0
 800c9e6:	d13a      	bne.n	800ca5e <_malloc_r+0xd2>
 800c9e8:	6821      	ldr	r1, [r4, #0]
 800c9ea:	3503      	adds	r5, #3
 800c9ec:	1a6d      	subs	r5, r5, r1
 800c9ee:	f025 0503 	bic.w	r5, r5, #3
 800c9f2:	3508      	adds	r5, #8
 800c9f4:	2d0c      	cmp	r5, #12
 800c9f6:	bf38      	it	cc
 800c9f8:	250c      	movcc	r5, #12
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	f7ff ffa5 	bl	800c94c <sbrk_aligned>
 800ca02:	3001      	adds	r0, #1
 800ca04:	d02b      	beq.n	800ca5e <_malloc_r+0xd2>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	442b      	add	r3, r5
 800ca0a:	6023      	str	r3, [r4, #0]
 800ca0c:	e00e      	b.n	800ca2c <_malloc_r+0xa0>
 800ca0e:	6822      	ldr	r2, [r4, #0]
 800ca10:	1b52      	subs	r2, r2, r5
 800ca12:	d41e      	bmi.n	800ca52 <_malloc_r+0xc6>
 800ca14:	2a0b      	cmp	r2, #11
 800ca16:	d916      	bls.n	800ca46 <_malloc_r+0xba>
 800ca18:	1961      	adds	r1, r4, r5
 800ca1a:	42a3      	cmp	r3, r4
 800ca1c:	6025      	str	r5, [r4, #0]
 800ca1e:	bf18      	it	ne
 800ca20:	6059      	strne	r1, [r3, #4]
 800ca22:	6863      	ldr	r3, [r4, #4]
 800ca24:	bf08      	it	eq
 800ca26:	6031      	streq	r1, [r6, #0]
 800ca28:	5162      	str	r2, [r4, r5]
 800ca2a:	604b      	str	r3, [r1, #4]
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f104 060b 	add.w	r6, r4, #11
 800ca32:	f000 fb75 	bl	800d120 <__malloc_unlock>
 800ca36:	f026 0607 	bic.w	r6, r6, #7
 800ca3a:	1d23      	adds	r3, r4, #4
 800ca3c:	1af2      	subs	r2, r6, r3
 800ca3e:	d0b6      	beq.n	800c9ae <_malloc_r+0x22>
 800ca40:	1b9b      	subs	r3, r3, r6
 800ca42:	50a3      	str	r3, [r4, r2]
 800ca44:	e7b3      	b.n	800c9ae <_malloc_r+0x22>
 800ca46:	6862      	ldr	r2, [r4, #4]
 800ca48:	42a3      	cmp	r3, r4
 800ca4a:	bf0c      	ite	eq
 800ca4c:	6032      	streq	r2, [r6, #0]
 800ca4e:	605a      	strne	r2, [r3, #4]
 800ca50:	e7ec      	b.n	800ca2c <_malloc_r+0xa0>
 800ca52:	4623      	mov	r3, r4
 800ca54:	6864      	ldr	r4, [r4, #4]
 800ca56:	e7b2      	b.n	800c9be <_malloc_r+0x32>
 800ca58:	4634      	mov	r4, r6
 800ca5a:	6876      	ldr	r6, [r6, #4]
 800ca5c:	e7b9      	b.n	800c9d2 <_malloc_r+0x46>
 800ca5e:	230c      	movs	r3, #12
 800ca60:	603b      	str	r3, [r7, #0]
 800ca62:	4638      	mov	r0, r7
 800ca64:	f000 fb5c 	bl	800d120 <__malloc_unlock>
 800ca68:	e7a1      	b.n	800c9ae <_malloc_r+0x22>
 800ca6a:	6025      	str	r5, [r4, #0]
 800ca6c:	e7de      	b.n	800ca2c <_malloc_r+0xa0>
 800ca6e:	bf00      	nop
 800ca70:	20006990 	.word	0x20006990

0800ca74 <_puts_r>:
 800ca74:	b570      	push	{r4, r5, r6, lr}
 800ca76:	460e      	mov	r6, r1
 800ca78:	4605      	mov	r5, r0
 800ca7a:	b118      	cbz	r0, 800ca84 <_puts_r+0x10>
 800ca7c:	6983      	ldr	r3, [r0, #24]
 800ca7e:	b90b      	cbnz	r3, 800ca84 <_puts_r+0x10>
 800ca80:	f7ff fe34 	bl	800c6ec <__sinit>
 800ca84:	69ab      	ldr	r3, [r5, #24]
 800ca86:	68ac      	ldr	r4, [r5, #8]
 800ca88:	b913      	cbnz	r3, 800ca90 <_puts_r+0x1c>
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f7ff fe2e 	bl	800c6ec <__sinit>
 800ca90:	4b2c      	ldr	r3, [pc, #176]	; (800cb44 <_puts_r+0xd0>)
 800ca92:	429c      	cmp	r4, r3
 800ca94:	d120      	bne.n	800cad8 <_puts_r+0x64>
 800ca96:	686c      	ldr	r4, [r5, #4]
 800ca98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca9a:	07db      	lsls	r3, r3, #31
 800ca9c:	d405      	bmi.n	800caaa <_puts_r+0x36>
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	0598      	lsls	r0, r3, #22
 800caa2:	d402      	bmi.n	800caaa <_puts_r+0x36>
 800caa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caa6:	f7ff fee4 	bl	800c872 <__retarget_lock_acquire_recursive>
 800caaa:	89a3      	ldrh	r3, [r4, #12]
 800caac:	0719      	lsls	r1, r3, #28
 800caae:	d51d      	bpl.n	800caec <_puts_r+0x78>
 800cab0:	6923      	ldr	r3, [r4, #16]
 800cab2:	b1db      	cbz	r3, 800caec <_puts_r+0x78>
 800cab4:	3e01      	subs	r6, #1
 800cab6:	68a3      	ldr	r3, [r4, #8]
 800cab8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cabc:	3b01      	subs	r3, #1
 800cabe:	60a3      	str	r3, [r4, #8]
 800cac0:	bb39      	cbnz	r1, 800cb12 <_puts_r+0x9e>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	da38      	bge.n	800cb38 <_puts_r+0xc4>
 800cac6:	4622      	mov	r2, r4
 800cac8:	210a      	movs	r1, #10
 800caca:	4628      	mov	r0, r5
 800cacc:	f000 f906 	bl	800ccdc <__swbuf_r>
 800cad0:	3001      	adds	r0, #1
 800cad2:	d011      	beq.n	800caf8 <_puts_r+0x84>
 800cad4:	250a      	movs	r5, #10
 800cad6:	e011      	b.n	800cafc <_puts_r+0x88>
 800cad8:	4b1b      	ldr	r3, [pc, #108]	; (800cb48 <_puts_r+0xd4>)
 800cada:	429c      	cmp	r4, r3
 800cadc:	d101      	bne.n	800cae2 <_puts_r+0x6e>
 800cade:	68ac      	ldr	r4, [r5, #8]
 800cae0:	e7da      	b.n	800ca98 <_puts_r+0x24>
 800cae2:	4b1a      	ldr	r3, [pc, #104]	; (800cb4c <_puts_r+0xd8>)
 800cae4:	429c      	cmp	r4, r3
 800cae6:	bf08      	it	eq
 800cae8:	68ec      	ldreq	r4, [r5, #12]
 800caea:	e7d5      	b.n	800ca98 <_puts_r+0x24>
 800caec:	4621      	mov	r1, r4
 800caee:	4628      	mov	r0, r5
 800caf0:	f000 f958 	bl	800cda4 <__swsetup_r>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d0dd      	beq.n	800cab4 <_puts_r+0x40>
 800caf8:	f04f 35ff 	mov.w	r5, #4294967295
 800cafc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cafe:	07da      	lsls	r2, r3, #31
 800cb00:	d405      	bmi.n	800cb0e <_puts_r+0x9a>
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	059b      	lsls	r3, r3, #22
 800cb06:	d402      	bmi.n	800cb0e <_puts_r+0x9a>
 800cb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb0a:	f7ff feb3 	bl	800c874 <__retarget_lock_release_recursive>
 800cb0e:	4628      	mov	r0, r5
 800cb10:	bd70      	pop	{r4, r5, r6, pc}
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	da04      	bge.n	800cb20 <_puts_r+0xac>
 800cb16:	69a2      	ldr	r2, [r4, #24]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	dc06      	bgt.n	800cb2a <_puts_r+0xb6>
 800cb1c:	290a      	cmp	r1, #10
 800cb1e:	d004      	beq.n	800cb2a <_puts_r+0xb6>
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	1c5a      	adds	r2, r3, #1
 800cb24:	6022      	str	r2, [r4, #0]
 800cb26:	7019      	strb	r1, [r3, #0]
 800cb28:	e7c5      	b.n	800cab6 <_puts_r+0x42>
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f000 f8d5 	bl	800ccdc <__swbuf_r>
 800cb32:	3001      	adds	r0, #1
 800cb34:	d1bf      	bne.n	800cab6 <_puts_r+0x42>
 800cb36:	e7df      	b.n	800caf8 <_puts_r+0x84>
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	250a      	movs	r5, #10
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	6022      	str	r2, [r4, #0]
 800cb40:	701d      	strb	r5, [r3, #0]
 800cb42:	e7db      	b.n	800cafc <_puts_r+0x88>
 800cb44:	0800fc24 	.word	0x0800fc24
 800cb48:	0800fc44 	.word	0x0800fc44
 800cb4c:	0800fc04 	.word	0x0800fc04

0800cb50 <puts>:
 800cb50:	4b02      	ldr	r3, [pc, #8]	; (800cb5c <puts+0xc>)
 800cb52:	4601      	mov	r1, r0
 800cb54:	6818      	ldr	r0, [r3, #0]
 800cb56:	f7ff bf8d 	b.w	800ca74 <_puts_r>
 800cb5a:	bf00      	nop
 800cb5c:	20000128 	.word	0x20000128

0800cb60 <cleanup_glue>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	460c      	mov	r4, r1
 800cb64:	6809      	ldr	r1, [r1, #0]
 800cb66:	4605      	mov	r5, r0
 800cb68:	b109      	cbz	r1, 800cb6e <cleanup_glue+0xe>
 800cb6a:	f7ff fff9 	bl	800cb60 <cleanup_glue>
 800cb6e:	4621      	mov	r1, r4
 800cb70:	4628      	mov	r0, r5
 800cb72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb76:	f7ff be9d 	b.w	800c8b4 <_free_r>
	...

0800cb7c <_reclaim_reent>:
 800cb7c:	4b2c      	ldr	r3, [pc, #176]	; (800cc30 <_reclaim_reent+0xb4>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4283      	cmp	r3, r0
 800cb82:	b570      	push	{r4, r5, r6, lr}
 800cb84:	4604      	mov	r4, r0
 800cb86:	d051      	beq.n	800cc2c <_reclaim_reent+0xb0>
 800cb88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cb8a:	b143      	cbz	r3, 800cb9e <_reclaim_reent+0x22>
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d14a      	bne.n	800cc28 <_reclaim_reent+0xac>
 800cb92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb94:	6819      	ldr	r1, [r3, #0]
 800cb96:	b111      	cbz	r1, 800cb9e <_reclaim_reent+0x22>
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f7ff fe8b 	bl	800c8b4 <_free_r>
 800cb9e:	6961      	ldr	r1, [r4, #20]
 800cba0:	b111      	cbz	r1, 800cba8 <_reclaim_reent+0x2c>
 800cba2:	4620      	mov	r0, r4
 800cba4:	f7ff fe86 	bl	800c8b4 <_free_r>
 800cba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cbaa:	b111      	cbz	r1, 800cbb2 <_reclaim_reent+0x36>
 800cbac:	4620      	mov	r0, r4
 800cbae:	f7ff fe81 	bl	800c8b4 <_free_r>
 800cbb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cbb4:	b111      	cbz	r1, 800cbbc <_reclaim_reent+0x40>
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f7ff fe7c 	bl	800c8b4 <_free_r>
 800cbbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cbbe:	b111      	cbz	r1, 800cbc6 <_reclaim_reent+0x4a>
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f7ff fe77 	bl	800c8b4 <_free_r>
 800cbc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cbc8:	b111      	cbz	r1, 800cbd0 <_reclaim_reent+0x54>
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7ff fe72 	bl	800c8b4 <_free_r>
 800cbd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cbd2:	b111      	cbz	r1, 800cbda <_reclaim_reent+0x5e>
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f7ff fe6d 	bl	800c8b4 <_free_r>
 800cbda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cbdc:	b111      	cbz	r1, 800cbe4 <_reclaim_reent+0x68>
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f7ff fe68 	bl	800c8b4 <_free_r>
 800cbe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbe6:	b111      	cbz	r1, 800cbee <_reclaim_reent+0x72>
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f7ff fe63 	bl	800c8b4 <_free_r>
 800cbee:	69a3      	ldr	r3, [r4, #24]
 800cbf0:	b1e3      	cbz	r3, 800cc2c <_reclaim_reent+0xb0>
 800cbf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	4798      	blx	r3
 800cbf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cbfa:	b1b9      	cbz	r1, 800cc2c <_reclaim_reent+0xb0>
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc02:	f7ff bfad 	b.w	800cb60 <cleanup_glue>
 800cc06:	5949      	ldr	r1, [r1, r5]
 800cc08:	b941      	cbnz	r1, 800cc1c <_reclaim_reent+0xa0>
 800cc0a:	3504      	adds	r5, #4
 800cc0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc0e:	2d80      	cmp	r5, #128	; 0x80
 800cc10:	68d9      	ldr	r1, [r3, #12]
 800cc12:	d1f8      	bne.n	800cc06 <_reclaim_reent+0x8a>
 800cc14:	4620      	mov	r0, r4
 800cc16:	f7ff fe4d 	bl	800c8b4 <_free_r>
 800cc1a:	e7ba      	b.n	800cb92 <_reclaim_reent+0x16>
 800cc1c:	680e      	ldr	r6, [r1, #0]
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f7ff fe48 	bl	800c8b4 <_free_r>
 800cc24:	4631      	mov	r1, r6
 800cc26:	e7ef      	b.n	800cc08 <_reclaim_reent+0x8c>
 800cc28:	2500      	movs	r5, #0
 800cc2a:	e7ef      	b.n	800cc0c <_reclaim_reent+0x90>
 800cc2c:	bd70      	pop	{r4, r5, r6, pc}
 800cc2e:	bf00      	nop
 800cc30:	20000128 	.word	0x20000128

0800cc34 <_sbrk_r>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	4d06      	ldr	r5, [pc, #24]	; (800cc50 <_sbrk_r+0x1c>)
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	4608      	mov	r0, r1
 800cc3e:	602b      	str	r3, [r5, #0]
 800cc40:	f7f4 ff72 	bl	8001b28 <_sbrk>
 800cc44:	1c43      	adds	r3, r0, #1
 800cc46:	d102      	bne.n	800cc4e <_sbrk_r+0x1a>
 800cc48:	682b      	ldr	r3, [r5, #0]
 800cc4a:	b103      	cbz	r3, 800cc4e <_sbrk_r+0x1a>
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	bd38      	pop	{r3, r4, r5, pc}
 800cc50:	20006998 	.word	0x20006998

0800cc54 <__sread>:
 800cc54:	b510      	push	{r4, lr}
 800cc56:	460c      	mov	r4, r1
 800cc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc5c:	f000 fa66 	bl	800d12c <_read_r>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	bfab      	itete	ge
 800cc64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc66:	89a3      	ldrhlt	r3, [r4, #12]
 800cc68:	181b      	addge	r3, r3, r0
 800cc6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc6e:	bfac      	ite	ge
 800cc70:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc72:	81a3      	strhlt	r3, [r4, #12]
 800cc74:	bd10      	pop	{r4, pc}

0800cc76 <__swrite>:
 800cc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7a:	461f      	mov	r7, r3
 800cc7c:	898b      	ldrh	r3, [r1, #12]
 800cc7e:	05db      	lsls	r3, r3, #23
 800cc80:	4605      	mov	r5, r0
 800cc82:	460c      	mov	r4, r1
 800cc84:	4616      	mov	r6, r2
 800cc86:	d505      	bpl.n	800cc94 <__swrite+0x1e>
 800cc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f000 f9c8 	bl	800d024 <_lseek_r>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc9e:	81a3      	strh	r3, [r4, #12]
 800cca0:	4632      	mov	r2, r6
 800cca2:	463b      	mov	r3, r7
 800cca4:	4628      	mov	r0, r5
 800cca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccaa:	f000 b869 	b.w	800cd80 <_write_r>

0800ccae <__sseek>:
 800ccae:	b510      	push	{r4, lr}
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb6:	f000 f9b5 	bl	800d024 <_lseek_r>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	bf15      	itete	ne
 800ccc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccca:	81a3      	strheq	r3, [r4, #12]
 800cccc:	bf18      	it	ne
 800ccce:	81a3      	strhne	r3, [r4, #12]
 800ccd0:	bd10      	pop	{r4, pc}

0800ccd2 <__sclose>:
 800ccd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd6:	f000 b8d3 	b.w	800ce80 <_close_r>
	...

0800ccdc <__swbuf_r>:
 800ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccde:	460e      	mov	r6, r1
 800cce0:	4614      	mov	r4, r2
 800cce2:	4605      	mov	r5, r0
 800cce4:	b118      	cbz	r0, 800ccee <__swbuf_r+0x12>
 800cce6:	6983      	ldr	r3, [r0, #24]
 800cce8:	b90b      	cbnz	r3, 800ccee <__swbuf_r+0x12>
 800ccea:	f7ff fcff 	bl	800c6ec <__sinit>
 800ccee:	4b21      	ldr	r3, [pc, #132]	; (800cd74 <__swbuf_r+0x98>)
 800ccf0:	429c      	cmp	r4, r3
 800ccf2:	d12b      	bne.n	800cd4c <__swbuf_r+0x70>
 800ccf4:	686c      	ldr	r4, [r5, #4]
 800ccf6:	69a3      	ldr	r3, [r4, #24]
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	071a      	lsls	r2, r3, #28
 800ccfe:	d52f      	bpl.n	800cd60 <__swbuf_r+0x84>
 800cd00:	6923      	ldr	r3, [r4, #16]
 800cd02:	b36b      	cbz	r3, 800cd60 <__swbuf_r+0x84>
 800cd04:	6923      	ldr	r3, [r4, #16]
 800cd06:	6820      	ldr	r0, [r4, #0]
 800cd08:	1ac0      	subs	r0, r0, r3
 800cd0a:	6963      	ldr	r3, [r4, #20]
 800cd0c:	b2f6      	uxtb	r6, r6
 800cd0e:	4283      	cmp	r3, r0
 800cd10:	4637      	mov	r7, r6
 800cd12:	dc04      	bgt.n	800cd1e <__swbuf_r+0x42>
 800cd14:	4621      	mov	r1, r4
 800cd16:	4628      	mov	r0, r5
 800cd18:	f000 f948 	bl	800cfac <_fflush_r>
 800cd1c:	bb30      	cbnz	r0, 800cd6c <__swbuf_r+0x90>
 800cd1e:	68a3      	ldr	r3, [r4, #8]
 800cd20:	3b01      	subs	r3, #1
 800cd22:	60a3      	str	r3, [r4, #8]
 800cd24:	6823      	ldr	r3, [r4, #0]
 800cd26:	1c5a      	adds	r2, r3, #1
 800cd28:	6022      	str	r2, [r4, #0]
 800cd2a:	701e      	strb	r6, [r3, #0]
 800cd2c:	6963      	ldr	r3, [r4, #20]
 800cd2e:	3001      	adds	r0, #1
 800cd30:	4283      	cmp	r3, r0
 800cd32:	d004      	beq.n	800cd3e <__swbuf_r+0x62>
 800cd34:	89a3      	ldrh	r3, [r4, #12]
 800cd36:	07db      	lsls	r3, r3, #31
 800cd38:	d506      	bpl.n	800cd48 <__swbuf_r+0x6c>
 800cd3a:	2e0a      	cmp	r6, #10
 800cd3c:	d104      	bne.n	800cd48 <__swbuf_r+0x6c>
 800cd3e:	4621      	mov	r1, r4
 800cd40:	4628      	mov	r0, r5
 800cd42:	f000 f933 	bl	800cfac <_fflush_r>
 800cd46:	b988      	cbnz	r0, 800cd6c <__swbuf_r+0x90>
 800cd48:	4638      	mov	r0, r7
 800cd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd4c:	4b0a      	ldr	r3, [pc, #40]	; (800cd78 <__swbuf_r+0x9c>)
 800cd4e:	429c      	cmp	r4, r3
 800cd50:	d101      	bne.n	800cd56 <__swbuf_r+0x7a>
 800cd52:	68ac      	ldr	r4, [r5, #8]
 800cd54:	e7cf      	b.n	800ccf6 <__swbuf_r+0x1a>
 800cd56:	4b09      	ldr	r3, [pc, #36]	; (800cd7c <__swbuf_r+0xa0>)
 800cd58:	429c      	cmp	r4, r3
 800cd5a:	bf08      	it	eq
 800cd5c:	68ec      	ldreq	r4, [r5, #12]
 800cd5e:	e7ca      	b.n	800ccf6 <__swbuf_r+0x1a>
 800cd60:	4621      	mov	r1, r4
 800cd62:	4628      	mov	r0, r5
 800cd64:	f000 f81e 	bl	800cda4 <__swsetup_r>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d0cb      	beq.n	800cd04 <__swbuf_r+0x28>
 800cd6c:	f04f 37ff 	mov.w	r7, #4294967295
 800cd70:	e7ea      	b.n	800cd48 <__swbuf_r+0x6c>
 800cd72:	bf00      	nop
 800cd74:	0800fc24 	.word	0x0800fc24
 800cd78:	0800fc44 	.word	0x0800fc44
 800cd7c:	0800fc04 	.word	0x0800fc04

0800cd80 <_write_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4d07      	ldr	r5, [pc, #28]	; (800cda0 <_write_r+0x20>)
 800cd84:	4604      	mov	r4, r0
 800cd86:	4608      	mov	r0, r1
 800cd88:	4611      	mov	r1, r2
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	602a      	str	r2, [r5, #0]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	f7f4 fe79 	bl	8001a86 <_write>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	d102      	bne.n	800cd9e <_write_r+0x1e>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	b103      	cbz	r3, 800cd9e <_write_r+0x1e>
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	20006998 	.word	0x20006998

0800cda4 <__swsetup_r>:
 800cda4:	4b32      	ldr	r3, [pc, #200]	; (800ce70 <__swsetup_r+0xcc>)
 800cda6:	b570      	push	{r4, r5, r6, lr}
 800cda8:	681d      	ldr	r5, [r3, #0]
 800cdaa:	4606      	mov	r6, r0
 800cdac:	460c      	mov	r4, r1
 800cdae:	b125      	cbz	r5, 800cdba <__swsetup_r+0x16>
 800cdb0:	69ab      	ldr	r3, [r5, #24]
 800cdb2:	b913      	cbnz	r3, 800cdba <__swsetup_r+0x16>
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	f7ff fc99 	bl	800c6ec <__sinit>
 800cdba:	4b2e      	ldr	r3, [pc, #184]	; (800ce74 <__swsetup_r+0xd0>)
 800cdbc:	429c      	cmp	r4, r3
 800cdbe:	d10f      	bne.n	800cde0 <__swsetup_r+0x3c>
 800cdc0:	686c      	ldr	r4, [r5, #4]
 800cdc2:	89a3      	ldrh	r3, [r4, #12]
 800cdc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdc8:	0719      	lsls	r1, r3, #28
 800cdca:	d42c      	bmi.n	800ce26 <__swsetup_r+0x82>
 800cdcc:	06dd      	lsls	r5, r3, #27
 800cdce:	d411      	bmi.n	800cdf4 <__swsetup_r+0x50>
 800cdd0:	2309      	movs	r3, #9
 800cdd2:	6033      	str	r3, [r6, #0]
 800cdd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cdd8:	81a3      	strh	r3, [r4, #12]
 800cdda:	f04f 30ff 	mov.w	r0, #4294967295
 800cdde:	e03e      	b.n	800ce5e <__swsetup_r+0xba>
 800cde0:	4b25      	ldr	r3, [pc, #148]	; (800ce78 <__swsetup_r+0xd4>)
 800cde2:	429c      	cmp	r4, r3
 800cde4:	d101      	bne.n	800cdea <__swsetup_r+0x46>
 800cde6:	68ac      	ldr	r4, [r5, #8]
 800cde8:	e7eb      	b.n	800cdc2 <__swsetup_r+0x1e>
 800cdea:	4b24      	ldr	r3, [pc, #144]	; (800ce7c <__swsetup_r+0xd8>)
 800cdec:	429c      	cmp	r4, r3
 800cdee:	bf08      	it	eq
 800cdf0:	68ec      	ldreq	r4, [r5, #12]
 800cdf2:	e7e6      	b.n	800cdc2 <__swsetup_r+0x1e>
 800cdf4:	0758      	lsls	r0, r3, #29
 800cdf6:	d512      	bpl.n	800ce1e <__swsetup_r+0x7a>
 800cdf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdfa:	b141      	cbz	r1, 800ce0e <__swsetup_r+0x6a>
 800cdfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce00:	4299      	cmp	r1, r3
 800ce02:	d002      	beq.n	800ce0a <__swsetup_r+0x66>
 800ce04:	4630      	mov	r0, r6
 800ce06:	f7ff fd55 	bl	800c8b4 <_free_r>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	6363      	str	r3, [r4, #52]	; 0x34
 800ce0e:	89a3      	ldrh	r3, [r4, #12]
 800ce10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce14:	81a3      	strh	r3, [r4, #12]
 800ce16:	2300      	movs	r3, #0
 800ce18:	6063      	str	r3, [r4, #4]
 800ce1a:	6923      	ldr	r3, [r4, #16]
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	89a3      	ldrh	r3, [r4, #12]
 800ce20:	f043 0308 	orr.w	r3, r3, #8
 800ce24:	81a3      	strh	r3, [r4, #12]
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	b94b      	cbnz	r3, 800ce3e <__swsetup_r+0x9a>
 800ce2a:	89a3      	ldrh	r3, [r4, #12]
 800ce2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce34:	d003      	beq.n	800ce3e <__swsetup_r+0x9a>
 800ce36:	4621      	mov	r1, r4
 800ce38:	4630      	mov	r0, r6
 800ce3a:	f000 f92b 	bl	800d094 <__smakebuf_r>
 800ce3e:	89a0      	ldrh	r0, [r4, #12]
 800ce40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce44:	f010 0301 	ands.w	r3, r0, #1
 800ce48:	d00a      	beq.n	800ce60 <__swsetup_r+0xbc>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60a3      	str	r3, [r4, #8]
 800ce4e:	6963      	ldr	r3, [r4, #20]
 800ce50:	425b      	negs	r3, r3
 800ce52:	61a3      	str	r3, [r4, #24]
 800ce54:	6923      	ldr	r3, [r4, #16]
 800ce56:	b943      	cbnz	r3, 800ce6a <__swsetup_r+0xc6>
 800ce58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce5c:	d1ba      	bne.n	800cdd4 <__swsetup_r+0x30>
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	0781      	lsls	r1, r0, #30
 800ce62:	bf58      	it	pl
 800ce64:	6963      	ldrpl	r3, [r4, #20]
 800ce66:	60a3      	str	r3, [r4, #8]
 800ce68:	e7f4      	b.n	800ce54 <__swsetup_r+0xb0>
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	e7f7      	b.n	800ce5e <__swsetup_r+0xba>
 800ce6e:	bf00      	nop
 800ce70:	20000128 	.word	0x20000128
 800ce74:	0800fc24 	.word	0x0800fc24
 800ce78:	0800fc44 	.word	0x0800fc44
 800ce7c:	0800fc04 	.word	0x0800fc04

0800ce80 <_close_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4d06      	ldr	r5, [pc, #24]	; (800ce9c <_close_r+0x1c>)
 800ce84:	2300      	movs	r3, #0
 800ce86:	4604      	mov	r4, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	602b      	str	r3, [r5, #0]
 800ce8c:	f7f4 fe17 	bl	8001abe <_close>
 800ce90:	1c43      	adds	r3, r0, #1
 800ce92:	d102      	bne.n	800ce9a <_close_r+0x1a>
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	b103      	cbz	r3, 800ce9a <_close_r+0x1a>
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	20006998 	.word	0x20006998

0800cea0 <__sflush_r>:
 800cea0:	898a      	ldrh	r2, [r1, #12]
 800cea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea6:	4605      	mov	r5, r0
 800cea8:	0710      	lsls	r0, r2, #28
 800ceaa:	460c      	mov	r4, r1
 800ceac:	d458      	bmi.n	800cf60 <__sflush_r+0xc0>
 800ceae:	684b      	ldr	r3, [r1, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	dc05      	bgt.n	800cec0 <__sflush_r+0x20>
 800ceb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	dc02      	bgt.n	800cec0 <__sflush_r+0x20>
 800ceba:	2000      	movs	r0, #0
 800cebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cec2:	2e00      	cmp	r6, #0
 800cec4:	d0f9      	beq.n	800ceba <__sflush_r+0x1a>
 800cec6:	2300      	movs	r3, #0
 800cec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cecc:	682f      	ldr	r7, [r5, #0]
 800cece:	602b      	str	r3, [r5, #0]
 800ced0:	d032      	beq.n	800cf38 <__sflush_r+0x98>
 800ced2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	075a      	lsls	r2, r3, #29
 800ced8:	d505      	bpl.n	800cee6 <__sflush_r+0x46>
 800ceda:	6863      	ldr	r3, [r4, #4]
 800cedc:	1ac0      	subs	r0, r0, r3
 800cede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cee0:	b10b      	cbz	r3, 800cee6 <__sflush_r+0x46>
 800cee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cee4:	1ac0      	subs	r0, r0, r3
 800cee6:	2300      	movs	r3, #0
 800cee8:	4602      	mov	r2, r0
 800ceea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ceec:	6a21      	ldr	r1, [r4, #32]
 800ceee:	4628      	mov	r0, r5
 800cef0:	47b0      	blx	r6
 800cef2:	1c43      	adds	r3, r0, #1
 800cef4:	89a3      	ldrh	r3, [r4, #12]
 800cef6:	d106      	bne.n	800cf06 <__sflush_r+0x66>
 800cef8:	6829      	ldr	r1, [r5, #0]
 800cefa:	291d      	cmp	r1, #29
 800cefc:	d82c      	bhi.n	800cf58 <__sflush_r+0xb8>
 800cefe:	4a2a      	ldr	r2, [pc, #168]	; (800cfa8 <__sflush_r+0x108>)
 800cf00:	40ca      	lsrs	r2, r1
 800cf02:	07d6      	lsls	r6, r2, #31
 800cf04:	d528      	bpl.n	800cf58 <__sflush_r+0xb8>
 800cf06:	2200      	movs	r2, #0
 800cf08:	6062      	str	r2, [r4, #4]
 800cf0a:	04d9      	lsls	r1, r3, #19
 800cf0c:	6922      	ldr	r2, [r4, #16]
 800cf0e:	6022      	str	r2, [r4, #0]
 800cf10:	d504      	bpl.n	800cf1c <__sflush_r+0x7c>
 800cf12:	1c42      	adds	r2, r0, #1
 800cf14:	d101      	bne.n	800cf1a <__sflush_r+0x7a>
 800cf16:	682b      	ldr	r3, [r5, #0]
 800cf18:	b903      	cbnz	r3, 800cf1c <__sflush_r+0x7c>
 800cf1a:	6560      	str	r0, [r4, #84]	; 0x54
 800cf1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf1e:	602f      	str	r7, [r5, #0]
 800cf20:	2900      	cmp	r1, #0
 800cf22:	d0ca      	beq.n	800ceba <__sflush_r+0x1a>
 800cf24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf28:	4299      	cmp	r1, r3
 800cf2a:	d002      	beq.n	800cf32 <__sflush_r+0x92>
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f7ff fcc1 	bl	800c8b4 <_free_r>
 800cf32:	2000      	movs	r0, #0
 800cf34:	6360      	str	r0, [r4, #52]	; 0x34
 800cf36:	e7c1      	b.n	800cebc <__sflush_r+0x1c>
 800cf38:	6a21      	ldr	r1, [r4, #32]
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	47b0      	blx	r6
 800cf40:	1c41      	adds	r1, r0, #1
 800cf42:	d1c7      	bne.n	800ced4 <__sflush_r+0x34>
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d0c4      	beq.n	800ced4 <__sflush_r+0x34>
 800cf4a:	2b1d      	cmp	r3, #29
 800cf4c:	d001      	beq.n	800cf52 <__sflush_r+0xb2>
 800cf4e:	2b16      	cmp	r3, #22
 800cf50:	d101      	bne.n	800cf56 <__sflush_r+0xb6>
 800cf52:	602f      	str	r7, [r5, #0]
 800cf54:	e7b1      	b.n	800ceba <__sflush_r+0x1a>
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf5c:	81a3      	strh	r3, [r4, #12]
 800cf5e:	e7ad      	b.n	800cebc <__sflush_r+0x1c>
 800cf60:	690f      	ldr	r7, [r1, #16]
 800cf62:	2f00      	cmp	r7, #0
 800cf64:	d0a9      	beq.n	800ceba <__sflush_r+0x1a>
 800cf66:	0793      	lsls	r3, r2, #30
 800cf68:	680e      	ldr	r6, [r1, #0]
 800cf6a:	bf08      	it	eq
 800cf6c:	694b      	ldreq	r3, [r1, #20]
 800cf6e:	600f      	str	r7, [r1, #0]
 800cf70:	bf18      	it	ne
 800cf72:	2300      	movne	r3, #0
 800cf74:	eba6 0807 	sub.w	r8, r6, r7
 800cf78:	608b      	str	r3, [r1, #8]
 800cf7a:	f1b8 0f00 	cmp.w	r8, #0
 800cf7e:	dd9c      	ble.n	800ceba <__sflush_r+0x1a>
 800cf80:	6a21      	ldr	r1, [r4, #32]
 800cf82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf84:	4643      	mov	r3, r8
 800cf86:	463a      	mov	r2, r7
 800cf88:	4628      	mov	r0, r5
 800cf8a:	47b0      	blx	r6
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	dc06      	bgt.n	800cf9e <__sflush_r+0xfe>
 800cf90:	89a3      	ldrh	r3, [r4, #12]
 800cf92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf96:	81a3      	strh	r3, [r4, #12]
 800cf98:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9c:	e78e      	b.n	800cebc <__sflush_r+0x1c>
 800cf9e:	4407      	add	r7, r0
 800cfa0:	eba8 0800 	sub.w	r8, r8, r0
 800cfa4:	e7e9      	b.n	800cf7a <__sflush_r+0xda>
 800cfa6:	bf00      	nop
 800cfa8:	20400001 	.word	0x20400001

0800cfac <_fflush_r>:
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	690b      	ldr	r3, [r1, #16]
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	b913      	cbnz	r3, 800cfbc <_fflush_r+0x10>
 800cfb6:	2500      	movs	r5, #0
 800cfb8:	4628      	mov	r0, r5
 800cfba:	bd38      	pop	{r3, r4, r5, pc}
 800cfbc:	b118      	cbz	r0, 800cfc6 <_fflush_r+0x1a>
 800cfbe:	6983      	ldr	r3, [r0, #24]
 800cfc0:	b90b      	cbnz	r3, 800cfc6 <_fflush_r+0x1a>
 800cfc2:	f7ff fb93 	bl	800c6ec <__sinit>
 800cfc6:	4b14      	ldr	r3, [pc, #80]	; (800d018 <_fflush_r+0x6c>)
 800cfc8:	429c      	cmp	r4, r3
 800cfca:	d11b      	bne.n	800d004 <_fflush_r+0x58>
 800cfcc:	686c      	ldr	r4, [r5, #4]
 800cfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0ef      	beq.n	800cfb6 <_fflush_r+0xa>
 800cfd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfd8:	07d0      	lsls	r0, r2, #31
 800cfda:	d404      	bmi.n	800cfe6 <_fflush_r+0x3a>
 800cfdc:	0599      	lsls	r1, r3, #22
 800cfde:	d402      	bmi.n	800cfe6 <_fflush_r+0x3a>
 800cfe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfe2:	f7ff fc46 	bl	800c872 <__retarget_lock_acquire_recursive>
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	4621      	mov	r1, r4
 800cfea:	f7ff ff59 	bl	800cea0 <__sflush_r>
 800cfee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cff0:	07da      	lsls	r2, r3, #31
 800cff2:	4605      	mov	r5, r0
 800cff4:	d4e0      	bmi.n	800cfb8 <_fflush_r+0xc>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	059b      	lsls	r3, r3, #22
 800cffa:	d4dd      	bmi.n	800cfb8 <_fflush_r+0xc>
 800cffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cffe:	f7ff fc39 	bl	800c874 <__retarget_lock_release_recursive>
 800d002:	e7d9      	b.n	800cfb8 <_fflush_r+0xc>
 800d004:	4b05      	ldr	r3, [pc, #20]	; (800d01c <_fflush_r+0x70>)
 800d006:	429c      	cmp	r4, r3
 800d008:	d101      	bne.n	800d00e <_fflush_r+0x62>
 800d00a:	68ac      	ldr	r4, [r5, #8]
 800d00c:	e7df      	b.n	800cfce <_fflush_r+0x22>
 800d00e:	4b04      	ldr	r3, [pc, #16]	; (800d020 <_fflush_r+0x74>)
 800d010:	429c      	cmp	r4, r3
 800d012:	bf08      	it	eq
 800d014:	68ec      	ldreq	r4, [r5, #12]
 800d016:	e7da      	b.n	800cfce <_fflush_r+0x22>
 800d018:	0800fc24 	.word	0x0800fc24
 800d01c:	0800fc44 	.word	0x0800fc44
 800d020:	0800fc04 	.word	0x0800fc04

0800d024 <_lseek_r>:
 800d024:	b538      	push	{r3, r4, r5, lr}
 800d026:	4d07      	ldr	r5, [pc, #28]	; (800d044 <_lseek_r+0x20>)
 800d028:	4604      	mov	r4, r0
 800d02a:	4608      	mov	r0, r1
 800d02c:	4611      	mov	r1, r2
 800d02e:	2200      	movs	r2, #0
 800d030:	602a      	str	r2, [r5, #0]
 800d032:	461a      	mov	r2, r3
 800d034:	f7f4 fd6a 	bl	8001b0c <_lseek>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d102      	bne.n	800d042 <_lseek_r+0x1e>
 800d03c:	682b      	ldr	r3, [r5, #0]
 800d03e:	b103      	cbz	r3, 800d042 <_lseek_r+0x1e>
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	20006998 	.word	0x20006998

0800d048 <__swhatbuf_r>:
 800d048:	b570      	push	{r4, r5, r6, lr}
 800d04a:	460e      	mov	r6, r1
 800d04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d050:	2900      	cmp	r1, #0
 800d052:	b096      	sub	sp, #88	; 0x58
 800d054:	4614      	mov	r4, r2
 800d056:	461d      	mov	r5, r3
 800d058:	da08      	bge.n	800d06c <__swhatbuf_r+0x24>
 800d05a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	602a      	str	r2, [r5, #0]
 800d062:	061a      	lsls	r2, r3, #24
 800d064:	d410      	bmi.n	800d088 <__swhatbuf_r+0x40>
 800d066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d06a:	e00e      	b.n	800d08a <__swhatbuf_r+0x42>
 800d06c:	466a      	mov	r2, sp
 800d06e:	f000 f86f 	bl	800d150 <_fstat_r>
 800d072:	2800      	cmp	r0, #0
 800d074:	dbf1      	blt.n	800d05a <__swhatbuf_r+0x12>
 800d076:	9a01      	ldr	r2, [sp, #4]
 800d078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d07c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d080:	425a      	negs	r2, r3
 800d082:	415a      	adcs	r2, r3
 800d084:	602a      	str	r2, [r5, #0]
 800d086:	e7ee      	b.n	800d066 <__swhatbuf_r+0x1e>
 800d088:	2340      	movs	r3, #64	; 0x40
 800d08a:	2000      	movs	r0, #0
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	b016      	add	sp, #88	; 0x58
 800d090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d094 <__smakebuf_r>:
 800d094:	898b      	ldrh	r3, [r1, #12]
 800d096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d098:	079d      	lsls	r5, r3, #30
 800d09a:	4606      	mov	r6, r0
 800d09c:	460c      	mov	r4, r1
 800d09e:	d507      	bpl.n	800d0b0 <__smakebuf_r+0x1c>
 800d0a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0a4:	6023      	str	r3, [r4, #0]
 800d0a6:	6123      	str	r3, [r4, #16]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	6163      	str	r3, [r4, #20]
 800d0ac:	b002      	add	sp, #8
 800d0ae:	bd70      	pop	{r4, r5, r6, pc}
 800d0b0:	ab01      	add	r3, sp, #4
 800d0b2:	466a      	mov	r2, sp
 800d0b4:	f7ff ffc8 	bl	800d048 <__swhatbuf_r>
 800d0b8:	9900      	ldr	r1, [sp, #0]
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	4630      	mov	r0, r6
 800d0be:	f7ff fc65 	bl	800c98c <_malloc_r>
 800d0c2:	b948      	cbnz	r0, 800d0d8 <__smakebuf_r+0x44>
 800d0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0c8:	059a      	lsls	r2, r3, #22
 800d0ca:	d4ef      	bmi.n	800d0ac <__smakebuf_r+0x18>
 800d0cc:	f023 0303 	bic.w	r3, r3, #3
 800d0d0:	f043 0302 	orr.w	r3, r3, #2
 800d0d4:	81a3      	strh	r3, [r4, #12]
 800d0d6:	e7e3      	b.n	800d0a0 <__smakebuf_r+0xc>
 800d0d8:	4b0d      	ldr	r3, [pc, #52]	; (800d110 <__smakebuf_r+0x7c>)
 800d0da:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	6020      	str	r0, [r4, #0]
 800d0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0e4:	81a3      	strh	r3, [r4, #12]
 800d0e6:	9b00      	ldr	r3, [sp, #0]
 800d0e8:	6163      	str	r3, [r4, #20]
 800d0ea:	9b01      	ldr	r3, [sp, #4]
 800d0ec:	6120      	str	r0, [r4, #16]
 800d0ee:	b15b      	cbz	r3, 800d108 <__smakebuf_r+0x74>
 800d0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f000 f83d 	bl	800d174 <_isatty_r>
 800d0fa:	b128      	cbz	r0, 800d108 <__smakebuf_r+0x74>
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	f023 0303 	bic.w	r3, r3, #3
 800d102:	f043 0301 	orr.w	r3, r3, #1
 800d106:	81a3      	strh	r3, [r4, #12]
 800d108:	89a0      	ldrh	r0, [r4, #12]
 800d10a:	4305      	orrs	r5, r0
 800d10c:	81a5      	strh	r5, [r4, #12]
 800d10e:	e7cd      	b.n	800d0ac <__smakebuf_r+0x18>
 800d110:	0800c685 	.word	0x0800c685

0800d114 <__malloc_lock>:
 800d114:	4801      	ldr	r0, [pc, #4]	; (800d11c <__malloc_lock+0x8>)
 800d116:	f7ff bbac 	b.w	800c872 <__retarget_lock_acquire_recursive>
 800d11a:	bf00      	nop
 800d11c:	2000698c 	.word	0x2000698c

0800d120 <__malloc_unlock>:
 800d120:	4801      	ldr	r0, [pc, #4]	; (800d128 <__malloc_unlock+0x8>)
 800d122:	f7ff bba7 	b.w	800c874 <__retarget_lock_release_recursive>
 800d126:	bf00      	nop
 800d128:	2000698c 	.word	0x2000698c

0800d12c <_read_r>:
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	4d07      	ldr	r5, [pc, #28]	; (800d14c <_read_r+0x20>)
 800d130:	4604      	mov	r4, r0
 800d132:	4608      	mov	r0, r1
 800d134:	4611      	mov	r1, r2
 800d136:	2200      	movs	r2, #0
 800d138:	602a      	str	r2, [r5, #0]
 800d13a:	461a      	mov	r2, r3
 800d13c:	f7f4 fc86 	bl	8001a4c <_read>
 800d140:	1c43      	adds	r3, r0, #1
 800d142:	d102      	bne.n	800d14a <_read_r+0x1e>
 800d144:	682b      	ldr	r3, [r5, #0]
 800d146:	b103      	cbz	r3, 800d14a <_read_r+0x1e>
 800d148:	6023      	str	r3, [r4, #0]
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
 800d14c:	20006998 	.word	0x20006998

0800d150 <_fstat_r>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4d07      	ldr	r5, [pc, #28]	; (800d170 <_fstat_r+0x20>)
 800d154:	2300      	movs	r3, #0
 800d156:	4604      	mov	r4, r0
 800d158:	4608      	mov	r0, r1
 800d15a:	4611      	mov	r1, r2
 800d15c:	602b      	str	r3, [r5, #0]
 800d15e:	f7f4 fcba 	bl	8001ad6 <_fstat>
 800d162:	1c43      	adds	r3, r0, #1
 800d164:	d102      	bne.n	800d16c <_fstat_r+0x1c>
 800d166:	682b      	ldr	r3, [r5, #0]
 800d168:	b103      	cbz	r3, 800d16c <_fstat_r+0x1c>
 800d16a:	6023      	str	r3, [r4, #0]
 800d16c:	bd38      	pop	{r3, r4, r5, pc}
 800d16e:	bf00      	nop
 800d170:	20006998 	.word	0x20006998

0800d174 <_isatty_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	4d06      	ldr	r5, [pc, #24]	; (800d190 <_isatty_r+0x1c>)
 800d178:	2300      	movs	r3, #0
 800d17a:	4604      	mov	r4, r0
 800d17c:	4608      	mov	r0, r1
 800d17e:	602b      	str	r3, [r5, #0]
 800d180:	f7f4 fcb9 	bl	8001af6 <_isatty>
 800d184:	1c43      	adds	r3, r0, #1
 800d186:	d102      	bne.n	800d18e <_isatty_r+0x1a>
 800d188:	682b      	ldr	r3, [r5, #0]
 800d18a:	b103      	cbz	r3, 800d18e <_isatty_r+0x1a>
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	bd38      	pop	{r3, r4, r5, pc}
 800d190:	20006998 	.word	0x20006998

0800d194 <_init>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	bf00      	nop
 800d198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19a:	bc08      	pop	{r3}
 800d19c:	469e      	mov	lr, r3
 800d19e:	4770      	bx	lr

0800d1a0 <_fini>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	bf00      	nop
 800d1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a6:	bc08      	pop	{r3}
 800d1a8:	469e      	mov	lr, r3
 800d1aa:	4770      	bx	lr
