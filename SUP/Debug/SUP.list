
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cf4  0800acac  0800acac  0001acac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9a0  0800c9a0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9a0  0800c9a0  0001c9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9a8  0800c9a8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9a8  0800c9a8  0001c9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9ac  0800c9ac  0001c9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800c9b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005118  200000ac  0800ca5c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200051c4  0800ca5c  000251c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ff5  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bdc  00000000  00000000  000410d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  00045cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  00047850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c52a  00000000  00000000  000491e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f7e  00000000  00000000  00065712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d49e  00000000  00000000  00087690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124b2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077d8  00000000  00000000  00124b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac94 	.word	0x0800ac94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	0800ac94 	.word	0x0800ac94

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

//static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4639      	mov	r1, r7
 8000ccc:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f009 fe17 	bl	800a908 <malloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	897a      	ldrh	r2, [r7, #10]
 8000ce8:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	1d9a      	adds	r2, r3, #6
 8000cee:	463b      	mov	r3, r7
 8000cf0:	cb03      	ldmia	r3!, {r0, r1}
 8000cf2:	6010      	str	r0, [r2, #0]
 8000cf4:	6051      	str	r1, [r2, #4]
	return pConfig;
 8000cf6:	697b      	ldr	r3, [r7, #20]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1d9a      	adds	r2, r3, #6
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	cb03      	ldmia	r3!, {r0, r1}
 8000d16:	6010      	str	r0, [r2, #0]
 8000d18:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ADS1115_updateConfig+0x60>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	82bb      	strh	r3, [r7, #20]
 8000d20:	2300      	movs	r3, #0
 8000d22:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000d34:	460b      	mov	r3, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f000 f841 	bl	8000dc0 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2303      	movs	r3, #3
 8000d54:	f003 fb0c 	bl	8004370 <HAL_I2C_Master_Transmit>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800acac 	.word	0x0800acac

08000d64 <ADS1115_startContinousMode>:

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
}

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <ADS1115_startContinousMode+0x58>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	82bb      	strh	r3, [r7, #20]
 8000d72:	2300      	movs	r3, #0
 8000d74:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	3206      	adds	r2, #6
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	6851      	ldr	r1, [r2, #4]
 8000d82:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000d88:	f107 0014 	add.w	r0, r7, #20
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000d94:	f000 f814 	bl	8000dc0 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	889b      	ldrh	r3, [r3, #4]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	b299      	uxth	r1, r3
 8000da4:	f107 0214 	add.w	r2, r7, #20
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2303      	movs	r3, #3
 8000dae:	f003 fadf 	bl	8004370 <HAL_I2C_Master_Transmit>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	0800acac 	.word	0x0800acac

08000dc0 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t temp[3] = {0};
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <prepareConfigFrame+0xac>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	82bb      	strh	r3, [r7, #20]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	75bb      	strb	r3, [r7, #22]
	pOutFrame[0] = 0x01;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	793b      	ldrb	r3, [r7, #4]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	b259      	sxtb	r1, r3
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	430b      	orrs	r3, r1
 8000df4:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	b259      	sxtb	r1, r3
 8000e18:	7a3b      	ldrb	r3, [r7, #8]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	b259      	sxtb	r1, r3
 8000e22:	7a7b      	ldrb	r3, [r7, #9]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 8000e2c:	7abb      	ldrb	r3, [r7, #10]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	430b      	orrs	r3, r1
 8000e34:	b259      	sxtb	r1, r3
 8000e36:	7afb      	ldrb	r3, [r7, #11]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3302      	adds	r3, #2
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	701a      	strb	r2, [r3, #0]
	temp[0] = pOutFrame[0];
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	753b      	strb	r3, [r7, #20]
	temp[1] = pOutFrame[1];
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	785b      	ldrb	r3, [r3, #1]
 8000e56:	757b      	strb	r3, [r7, #21]
	temp[2] = pOutFrame[2];
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	75bb      	strb	r3, [r7, #22]
}
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	0800acac 	.word	0x0800acac

08000e70 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	ed87 0a00 	vstr	s0, [r7]
 8000e80:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	ed97 0a00 	vldr	s0, [r7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f822 	bl	8000ee0 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}

08000eb2 <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	791b      	ldrb	r3, [r3, #4]
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f004 f896 	bl	8004ff8 <HAL_I2C_IsDeviceReady>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000eec:	edd7 7a00 	vldr	s15, [r7]
 8000ef0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	d103      	bne.n	8000f02 <MCP4725_setReferenceVoltage+0x22>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <MCP4725_setReferenceVoltage+0x50>)
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	e002      	b.n	8000f08 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f0e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f34 <MCP4725_setReferenceVoltage+0x54>
 8000f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1a:	ee17 3a90 	vmov	r3, s15
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	819a      	strh	r2, [r3, #12]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40533333 	.word	0x40533333
 8000f34:	45800000 	.word	0x45800000

08000f38 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	707b      	strb	r3, [r7, #1]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000f52:	783b      	ldrb	r3, [r7, #0]
 8000f54:	787a      	ldrb	r2, [r7, #1]
 8000f56:	8879      	ldrh	r1, [r7, #2]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f822 	bl	8000fa2 <MCP4725_writeComand>
 8000f5e:	4603      	mov	r3, r0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000f70:	2101      	movs	r1, #1
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f895 	bl	80010a2 <MCP4725_readRegister>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d008      	beq.n	8000f98 <MCP4725_getEepromBusyFlag+0x30>
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	e000      	b.n	8000f9a <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	4608      	mov	r0, r1
 8000fac:	4611      	mov	r1, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	707b      	strb	r3, [r7, #1]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b60      	cmp	r3, #96	; 0x60
 8000fc0:	d028      	beq.n	8001014 <MCP4725_writeComand+0x72>
 8000fc2:	2b60      	cmp	r3, #96	; 0x60
 8000fc4:	dc4a      	bgt.n	800105c <MCP4725_writeComand+0xba>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <MCP4725_writeComand+0x2e>
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d022      	beq.n	8001014 <MCP4725_writeComand+0x72>
 8000fce:	e045      	b.n	800105c <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8000fd0:	783b      	ldrb	r3, [r7, #0]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	b25a      	sxtb	r2, r3
 8000fd6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b25a      	sxtb	r2, r3
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	f003 f9b1 	bl	8004370 <HAL_I2C_Master_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
		
      break;
 8001012:	e023      	b.n	800105c <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 800101a:	783b      	ldrb	r3, [r7, #0]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b25a      	sxtb	r2, r3
 8001020:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001024:	4313      	orrs	r3, r2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	b299      	uxth	r1, r3
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2303      	movs	r3, #3
 8001052:	f003 f98d 	bl	8004370 <HAL_I2C_Master_Transmit>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
		
			break;
 800105a:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MCP4725_writeComand+0xc4>
 8001062:	2300      	movs	r3, #0
 8001064:	e019      	b.n	800109a <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 8001066:	787b      	ldrb	r3, [r7, #1]
 8001068:	2b60      	cmp	r3, #96	; 0x60
 800106a:	d115      	bne.n	8001098 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff7b 	bl	8000f68 <MCP4725_getEepromBusyFlag>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <MCP4725_writeComand+0xda>
 8001078:	2301      	movs	r3, #1
 800107a:	e00e      	b.n	800109a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 800107c:	2019      	movs	r0, #25
 800107e:	f002 f9e5 	bl	800344c <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff70 	bl	8000f68 <MCP4725_getEepromBusyFlag>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <MCP4725_writeComand+0xf0>
 800108e:	2301      	movs	r3, #1
 8001090:	e003      	b.n	800109a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 8001092:	2019      	movs	r0, #25
 8001094:	f002 f9da 	bl	800344c <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 80010a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
 80010b0:	466b      	mov	r3, sp
 80010b2:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 80010b8:	2300      	movs	r3, #0
 80010ba:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 80010bc:	78f9      	ldrb	r1, [r7, #3]
 80010be:	460b      	mov	r3, r1
 80010c0:	3b01      	subs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	b2cb      	uxtb	r3, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	4698      	mov	r8, r3
 80010ca:	4691      	mov	r9, r2
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010e0:	b2cb      	uxtb	r3, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	461c      	mov	r4, r3
 80010e6:	4615      	mov	r5, r2
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	00eb      	lsls	r3, r5, #3
 80010f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010f6:	00e2      	lsls	r2, r4, #3
 80010f8:	460b      	mov	r3, r1
 80010fa:	3307      	adds	r3, #7
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	ebad 0d03 	sub.w	sp, sp, r3
 8001104:	ab02      	add	r3, sp, #8
 8001106:	3300      	adds	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	b299      	uxth	r1, r3
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	b29b      	uxth	r3, r3
 8001118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111c:	9200      	str	r2, [sp, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	f003 fa24 	bl	800456c <HAL_I2C_Master_Receive>
 8001124:	4603      	mov	r3, r0
 8001126:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <MCP4725_readRegister+0x92>
 800112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001132:	e01f      	b.n	8001174 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d00a      	beq.n	8001150 <MCP4725_readRegister+0xae>
 800113a:	2b05      	cmp	r3, #5
 800113c:	dc19      	bgt.n	8001172 <MCP4725_readRegister+0xd0>
 800113e:	2b01      	cmp	r3, #1
 8001140:	d002      	beq.n	8001148 <MCP4725_readRegister+0xa6>
 8001142:	2b03      	cmp	r3, #3
 8001144:	d004      	beq.n	8001150 <MCP4725_readRegister+0xae>
 8001146:	e014      	b.n	8001172 <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	82fb      	strh	r3, [r7, #22]

      break;
 800114e:	e010      	b.n	8001172 <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8001150:	8abb      	ldrh	r3, [r7, #20]
 8001152:	3b02      	subs	r3, #2
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 800115a:	8afb      	ldrh	r3, [r7, #22]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	8abb      	ldrh	r3, [r7, #20]
 8001162:	3b01      	subs	r3, #1
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	5ccb      	ldrb	r3, [r1, r3]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21b      	sxth	r3, r3
 800116e:	82fb      	strh	r3, [r7, #22]
      break;
 8001170:	bf00      	nop
  }

  return ret_val;
 8001172:	8afb      	ldrh	r3, [r7, #22]
 8001174:	46b5      	mov	sp, r6
}
 8001176:	4618      	mov	r0, r3
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001180 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af04      	add	r7, sp, #16
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	2178      	movs	r1, #120	; 0x78
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <ssd1306_WriteCommand+0x2c>)
 80011b0:	f003 fc02 	bl	80049b8 <HAL_I2C_Mem_Write>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200005b8 	.word	0x200005b8

080011c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295
 80011d2:	9202      	str	r2, [sp, #8]
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2240      	movs	r2, #64	; 0x40
 80011de:	2178      	movs	r1, #120	; 0x78
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <ssd1306_WriteData+0x30>)
 80011e2:	f003 fbe9 	bl	80049b8 <HAL_I2C_Mem_Write>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200005b8 	.word	0x200005b8

080011f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80011f8:	f7ff ffc2 	bl	8001180 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f002 f925 	bl	800344c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001202:	2000      	movs	r0, #0
 8001204:	f000 fa7c 	bl	8001700 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001208:	2020      	movs	r0, #32
 800120a:	f7ff ffc1 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ffbe 	bl	8001190 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001214:	20b0      	movs	r0, #176	; 0xb0
 8001216:	f7ff ffbb 	bl	8001190 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800121a:	20c8      	movs	r0, #200	; 0xc8
 800121c:	f7ff ffb8 	bl	8001190 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ffb5 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001226:	2010      	movs	r0, #16
 8001228:	f7ff ffb2 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800122c:	2040      	movs	r0, #64	; 0x40
 800122e:	f7ff ffaf 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001232:	20ff      	movs	r0, #255	; 0xff
 8001234:	f000 fa51 	bl	80016da <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001238:	20a1      	movs	r0, #161	; 0xa1
 800123a:	f7ff ffa9 	bl	8001190 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800123e:	20a6      	movs	r0, #166	; 0xa6
 8001240:	f7ff ffa6 	bl	8001190 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001244:	20a8      	movs	r0, #168	; 0xa8
 8001246:	f7ff ffa3 	bl	8001190 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800124a:	203f      	movs	r0, #63	; 0x3f
 800124c:	f7ff ffa0 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001250:	20a4      	movs	r0, #164	; 0xa4
 8001252:	f7ff ff9d 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001256:	20d3      	movs	r0, #211	; 0xd3
 8001258:	f7ff ff9a 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff ff97 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001262:	20d5      	movs	r0, #213	; 0xd5
 8001264:	f7ff ff94 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001268:	20f0      	movs	r0, #240	; 0xf0
 800126a:	f7ff ff91 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800126e:	20d9      	movs	r0, #217	; 0xd9
 8001270:	f7ff ff8e 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001274:	2022      	movs	r0, #34	; 0x22
 8001276:	f7ff ff8b 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800127a:	20da      	movs	r0, #218	; 0xda
 800127c:	f7ff ff88 	bl	8001190 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001280:	2012      	movs	r0, #18
 8001282:	f7ff ff85 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001286:	20db      	movs	r0, #219	; 0xdb
 8001288:	f7ff ff82 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800128c:	2020      	movs	r0, #32
 800128e:	f7ff ff7f 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001292:	208d      	movs	r0, #141	; 0x8d
 8001294:	f7ff ff7c 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001298:	2014      	movs	r0, #20
 800129a:	f7ff ff79 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fa2e 	bl	8001700 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f80f 	bl	80012c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012aa:	f000 f831 	bl	8001310 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <ssd1306_Init+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <ssd1306_Init+0xd0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012ba:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <ssd1306_Init+0xd0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	711a      	strb	r2, [r3, #4]
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200004c8 	.word	0x200004c8

080012c8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e00d      	b.n	80012f4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <ssd1306_Fill+0x1a>
 80012de:	2100      	movs	r1, #0
 80012e0:	e000      	b.n	80012e4 <ssd1306_Fill+0x1c>
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4a09      	ldr	r2, [pc, #36]	; (800130c <ssd1306_Fill+0x44>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	460a      	mov	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fa:	d3ed      	bcc.n	80012d8 <ssd1306_Fill+0x10>
    }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200000c8 	.word	0x200000c8

08001310 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e016      	b.n	800134a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	3b50      	subs	r3, #80	; 0x50
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff34 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ff31 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800132e:	2010      	movs	r0, #16
 8001330:	f7ff ff2e 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	01db      	lsls	r3, r3, #7
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <ssd1306_UpdateScreen+0x4c>)
 800133a:	4413      	add	r3, r2
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff3e 	bl	80011c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3301      	adds	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b07      	cmp	r3, #7
 800134e:	d9e5      	bls.n	800131c <ssd1306_UpdateScreen+0xc>
    }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000c8 	.word	0x200000c8

08001360 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	460b      	mov	r3, r1
 800136c:	71bb      	strb	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db3d      	blt.n	80013f6 <ssd1306_DrawPixel+0x96>
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	2b3f      	cmp	r3, #63	; 0x3f
 800137e:	d83a      	bhi.n	80013f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d11a      	bne.n	80013bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	4603      	mov	r3, r0
 8001390:	01db      	lsls	r3, r3, #7
 8001392:	4413      	add	r3, r2
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b259      	sxtb	r1, r3
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	4603      	mov	r3, r0
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	4413      	add	r3, r2
 80013b4:	b2c9      	uxtb	r1, r1
 80013b6:	4a13      	ldr	r2, [pc, #76]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 80013b8:	54d1      	strb	r1, [r2, r3]
 80013ba:	e01d      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2d8      	uxtb	r0, r3
 80013c4:	4603      	mov	r3, r0
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	4413      	add	r3, r2
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4013      	ands	r3, r2
 80013e4:	b259      	sxtb	r1, r3
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	4603      	mov	r3, r0
 80013ea:	01db      	lsls	r3, r3, #7
 80013ec:	4413      	add	r3, r2
 80013ee:	b2c9      	uxtb	r1, r1
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 80013f2:	54d1      	strb	r1, [r2, r3]
 80013f4:	e000      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
        return;
 80013f6:	bf00      	nop
    }
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200000c8 	.word	0x200000c8

08001408 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	1d38      	adds	r0, r7, #4
 8001412:	e880 0006 	stmia.w	r0, {r1, r2}
 8001416:	461a      	mov	r2, r3
 8001418:	4623      	mov	r3, r4
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	4613      	mov	r3, r2
 800141e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b1f      	cmp	r3, #31
 8001424:	d902      	bls.n	800142c <ssd1306_WriteChar+0x24>
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b7e      	cmp	r3, #126	; 0x7e
 800142a:	d901      	bls.n	8001430 <ssd1306_WriteChar+0x28>
        return 0;
 800142c:	2300      	movs	r3, #0
 800142e:	e06d      	b.n	800150c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001430:	4b38      	ldr	r3, [pc, #224]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	793b      	ldrb	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	2b80      	cmp	r3, #128	; 0x80
 800143c:	dc06      	bgt.n	800144c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800143e:	4b35      	ldr	r3, [pc, #212]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001440:	885b      	ldrh	r3, [r3, #2]
 8001442:	461a      	mov	r2, r3
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	dd01      	ble.n	8001450 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800144c:	2300      	movs	r3, #0
 800144e:	e05d      	b.n	800150c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	e04c      	b.n	80014f0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3b20      	subs	r3, #32
 800145c:	7979      	ldrb	r1, [r7, #5]
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	4619      	mov	r1, r3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	440b      	add	r3, r1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	e034      	b.n	80014e0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d012      	beq.n	80014ac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b2d8      	uxtb	r0, r3
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001496:	885b      	ldrh	r3, [r3, #2]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	7bba      	ldrb	r2, [r7, #14]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff ff5b 	bl	8001360 <ssd1306_DrawPixel>
 80014aa:	e016      	b.n	80014da <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	b2d8      	uxtb	r0, r3
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014bc:	885b      	ldrh	r3, [r3, #2]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	b2d9      	uxtb	r1, r3
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	f7ff ff43 	bl	8001360 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3301      	adds	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	793b      	ldrb	r3, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d3c5      	bcc.n	8001476 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	797b      	ldrb	r3, [r7, #5]
 80014f2:	461a      	mov	r2, r3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d3ad      	bcc.n	8001456 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	793b      	ldrb	r3, [r7, #4]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4413      	add	r3, r2
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b03      	ldr	r3, [pc, #12]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001508:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3724      	adds	r7, #36	; 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	200004c8 	.word	0x200004c8

08001518 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	1d38      	adds	r0, r7, #4
 8001522:	e880 0006 	stmia.w	r0, {r1, r2}
 8001526:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001528:	e012      	b.n	8001550 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	7818      	ldrb	r0, [r3, #0]
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	1d3a      	adds	r2, r7, #4
 8001532:	ca06      	ldmia	r2, {r1, r2}
 8001534:	f7ff ff68 	bl	8001408 <ssd1306_WriteChar>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d002      	beq.n	800154a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	e008      	b.n	800155c <ssd1306_WriteString+0x44>
        }
        str++;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e8      	bne.n	800152a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <ssd1306_SetCursor+0x2c>)
 800157a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <ssd1306_SetCursor+0x2c>)
 8001582:	805a      	strh	r2, [r3, #2]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	200004c8 	.word	0x200004c8

08001594 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	4603      	mov	r3, r0
 80015a8:	71bb      	strb	r3, [r7, #6]
 80015aa:	460b      	mov	r3, r1
 80015ac:	717b      	strb	r3, [r7, #5]
 80015ae:	4613      	mov	r3, r2
 80015b0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80015b2:	797a      	ldrb	r2, [r7, #5]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bfb8      	it	lt
 80015bc:	425b      	neglt	r3, r3
 80015be:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80015c0:	793a      	ldrb	r2, [r7, #4]
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bfb8      	it	lt
 80015ca:	425b      	neglt	r3, r3
 80015cc:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	797b      	ldrb	r3, [r7, #5]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d201      	bcs.n	80015da <ssd1306_Line+0x46>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e001      	b.n	80015de <ssd1306_Line+0x4a>
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80015e0:	79ba      	ldrb	r2, [r7, #6]
 80015e2:	793b      	ldrb	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d201      	bcs.n	80015ec <ssd1306_Line+0x58>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e001      	b.n	80015f0 <ssd1306_Line+0x5c>
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80015fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80015fe:	7939      	ldrb	r1, [r7, #4]
 8001600:	797b      	ldrb	r3, [r7, #5]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff feac 	bl	8001360 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001608:	e024      	b.n	8001654 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800160a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800160e:	79b9      	ldrb	r1, [r7, #6]
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fea4 	bl	8001360 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	425b      	negs	r3, r3
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	429a      	cmp	r2, r3
 8001626:	dd08      	ble.n	800163a <ssd1306_Line+0xa6>
            error -= deltaY;
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	4413      	add	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	429a      	cmp	r2, r3
 8001640:	da08      	bge.n	8001654 <ssd1306_Line+0xc0>
            error += deltaX;
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	4413      	add	r3, r2
 8001648:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	4413      	add	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	797b      	ldrb	r3, [r7, #5]
 8001658:	429a      	cmp	r2, r3
 800165a:	d1d6      	bne.n	800160a <ssd1306_Line+0x76>
 800165c:	79ba      	ldrb	r2, [r7, #6]
 800165e:	793b      	ldrb	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d1d2      	bne.n	800160a <ssd1306_Line+0x76>
        }
    }
    return;
 8001664:	bf00      	nop
}
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af02      	add	r7, sp, #8
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	4603      	mov	r3, r0
 8001680:	71bb      	strb	r3, [r7, #6]
 8001682:	460b      	mov	r3, r1
 8001684:	717b      	strb	r3, [r7, #5]
 8001686:	4613      	mov	r3, r2
 8001688:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800168a:	79bc      	ldrb	r4, [r7, #6]
 800168c:	797a      	ldrb	r2, [r7, #5]
 800168e:	79b9      	ldrb	r1, [r7, #6]
 8001690:	79f8      	ldrb	r0, [r7, #7]
 8001692:	7e3b      	ldrb	r3, [r7, #24]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4623      	mov	r3, r4
 8001698:	f7ff ff7c 	bl	8001594 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800169c:	793c      	ldrb	r4, [r7, #4]
 800169e:	797a      	ldrb	r2, [r7, #5]
 80016a0:	79b9      	ldrb	r1, [r7, #6]
 80016a2:	7978      	ldrb	r0, [r7, #5]
 80016a4:	7e3b      	ldrb	r3, [r7, #24]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4623      	mov	r3, r4
 80016aa:	f7ff ff73 	bl	8001594 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80016ae:	793c      	ldrb	r4, [r7, #4]
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	7939      	ldrb	r1, [r7, #4]
 80016b4:	7978      	ldrb	r0, [r7, #5]
 80016b6:	7e3b      	ldrb	r3, [r7, #24]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7ff ff6a 	bl	8001594 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80016c0:	79bc      	ldrb	r4, [r7, #6]
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	7939      	ldrb	r1, [r7, #4]
 80016c6:	79f8      	ldrb	r0, [r7, #7]
 80016c8:	7e3b      	ldrb	r3, [r7, #24]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4623      	mov	r3, r4
 80016ce:	f7ff ff61 	bl	8001594 <ssd1306_Line>

    return;
 80016d2:	bf00      	nop
}
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}

080016da <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80016e4:	2381      	movs	r3, #129	; 0x81
 80016e6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fd50 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd4c 	bl	8001190 <ssd1306_WriteCommand>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001710:	23af      	movs	r3, #175	; 0xaf
 8001712:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <ssd1306_SetDisplayOn+0x38>)
 8001716:	2201      	movs	r2, #1
 8001718:	715a      	strb	r2, [r3, #5]
 800171a:	e004      	b.n	8001726 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800171c:	23ae      	movs	r3, #174	; 0xae
 800171e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <ssd1306_SetDisplayOn+0x38>)
 8001722:	2200      	movs	r2, #0
 8001724:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fd31 	bl	8001190 <ssd1306_WriteCommand>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200004c8 	.word	0x200004c8
 800173c:	00000000 	.word	0x00000000

08001740 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8001746:	f004 fe75 	bl	8006434 <HAL_RCC_GetPCLK2Freq>
 800174a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <ARGB_Init+0xd8>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <ARGB_Init+0x1c>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <ARGB_Init+0x1e>
 800175c:	2302      	movs	r3, #2
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	4a2b      	ldr	r2, [pc, #172]	; (800181c <ARGB_Init+0xdc>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <ARGB_Init+0xe0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	b29b      	uxth	r3, r3
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <ARGB_Init+0xe0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <ARGB_Init+0xe0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe fe65 	bl	8000464 <__aeabi_ui2d>
 800179a:	a31b      	add	r3, pc, #108	; (adr r3, 8001808 <ARGB_Init+0xc8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe feda 	bl	8000558 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f8e6 	bl	800097c <__aeabi_d2uiz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <ARGB_Init+0xe4>)
 80017ba:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fe51 	bl	8000464 <__aeabi_ui2d>
 80017c2:	a313      	add	r3, pc, #76	; (adr r3, 8001810 <ARGB_Init+0xd0>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe fec6 	bl	8000558 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f8d2 	bl	800097c <__aeabi_d2uiz>
 80017d8:	4603      	mov	r3, r0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <ARGB_Init+0xe8>)
 80017e2:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <ARGB_Init+0xec>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <ARGB_Init+0xe0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	2104      	movs	r1, #4
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 fdaa 	bl	800734c <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 80017f8:	2001      	movs	r0, #1
 80017fa:	f001 fe27 	bl	800344c <HAL_Delay>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	1eb851ec 	.word	0x1eb851ec
 800180c:	3fe1eb85 	.word	0x3fe1eb85
 8001810:	1eb851ec 	.word	0x1eb851ec
 8001814:	3fd1eb85 	.word	0x3fd1eb85
 8001818:	40023800 	.word	0x40023800
 800181c:	014f8b59 	.word	0x014f8b59
 8001820:	20000664 	.word	0x20000664
 8001824:	200004ce 	.word	0x200004ce
 8001828:	200004cf 	.word	0x200004cf
 800182c:	200005aa 	.word	0x200005aa

08001830 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f000 f885 	bl	8001948 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <ARGB_SetBrightness+0x1c>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	7013      	strb	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	20000018 	.word	0x20000018

08001864 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	4604      	mov	r4, r0
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4623      	mov	r3, r4
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	4603      	mov	r3, r0
 8001878:	717b      	strb	r3, [r7, #5]
 800187a:	460b      	mov	r3, r1
 800187c:	713b      	strb	r3, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b07      	cmp	r3, #7
 8001886:	d908      	bls.n	800189a <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	b29b      	uxth	r3, r3
 8001894:	88fa      	ldrh	r2, [r7, #6]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <ARGB_SetRGB+0xdc>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018aa:	797a      	ldrb	r2, [r7, #5]
 80018ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b0:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <ARGB_SetRGB+0xdc>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018be:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c2:	793a      	ldrb	r2, [r7, #4]
 80018c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c8:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <ARGB_SetRGB+0xdc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018e0:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 80018e2:	793b      	ldrb	r3, [r7, #4]
 80018e4:	21b0      	movs	r1, #176	; 0xb0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f9ca 	bl	8001c80 <scale8>
 80018ec:	4603      	mov	r3, r0
 80018ee:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	21f0      	movs	r1, #240	; 0xf0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f9c3 	bl	8001c80 <scale8>
 80018fa:	4603      	mov	r3, r0
 80018fc:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 80018fe:	793b      	ldrb	r3, [r7, #4]
 8001900:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8001902:	797b      	ldrb	r3, [r7, #5]
 8001904:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	490c      	ldr	r1, [pc, #48]	; (8001944 <ARGB_SetRGB+0xe0>)
 8001914:	7b7a      	ldrb	r2, [r7, #13]
 8001916:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	3301      	adds	r3, #1
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <ARGB_SetRGB+0xe0>)
 8001924:	7b3a      	ldrb	r2, [r7, #12]
 8001926:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8001928:	88fa      	ldrh	r2, [r7, #6]
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	3302      	adds	r3, #2
 8001932:	4904      	ldr	r1, [pc, #16]	; (8001944 <ARGB_SetRGB+0xe0>)
 8001934:	7afa      	ldrb	r2, [r7, #11]
 8001936:	54ca      	strb	r2, [r1, r3]
#endif
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	20000018 	.word	0x20000018
 8001944:	200004d0 	.word	0x200004d0

08001948 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	460b      	mov	r3, r1
 8001954:	71bb      	strb	r3, [r7, #6]
 8001956:	4613      	mov	r3, r2
 8001958:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	81fb      	strh	r3, [r7, #14]
 800195e:	e00b      	b.n	8001978 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8001960:	89fb      	ldrh	r3, [r7, #14]
 8001962:	b298      	uxth	r0, r3
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	79ba      	ldrb	r2, [r7, #6]
 8001968:	79f9      	ldrb	r1, [r7, #7]
 800196a:	f7ff ff7b 	bl	8001864 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	b29b      	uxth	r3, r3
 8001972:	3301      	adds	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	81fb      	strh	r3, [r7, #14]
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b07      	cmp	r3, #7
 800197e:	d9ef      	bls.n	8001960 <ARGB_FillRGB+0x18>
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8001992:	4b9d      	ldr	r3, [pc, #628]	; (8001c08 <ARGB_Show+0x27c>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8001998:	4b9c      	ldr	r3, [pc, #624]	; (8001c0c <ARGB_Show+0x280>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <ARGB_Show+0x22>
 80019a2:	4b9b      	ldr	r3, [pc, #620]	; (8001c10 <ARGB_Show+0x284>)
 80019a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <ARGB_Show+0x26>
        return ARGB_BUSY;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e15e      	b.n	8001c70 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	71fb      	strb	r3, [r7, #7]
 80019b6:	e0a6      	b.n	8001b06 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019b8:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <ARGB_Show+0x288>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dd04      	ble.n	80019da <ARGB_Show+0x4e>
 80019d0:	4b91      	ldr	r3, [pc, #580]	; (8001c18 <ARGB_Show+0x28c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	e003      	b.n	80019e2 <ARGB_Show+0x56>
 80019da:	4b90      	ldr	r3, [pc, #576]	; (8001c1c <ARGB_Show+0x290>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	4b8d      	ldr	r3, [pc, #564]	; (8001c20 <ARGB_Show+0x294>)
 80019ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019ee:	4b89      	ldr	r3, [pc, #548]	; (8001c14 <ARGB_Show+0x288>)
 80019f0:	785b      	ldrb	r3, [r3, #1]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd04      	ble.n	8001a10 <ARGB_Show+0x84>
 8001a06:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <ARGB_Show+0x28c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	e003      	b.n	8001a18 <ARGB_Show+0x8c>
 8001a10:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <ARGB_Show+0x290>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4619      	mov	r1, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3308      	adds	r3, #8
 8001a1e:	4a80      	ldr	r2, [pc, #512]	; (8001c20 <ARGB_Show+0x294>)
 8001a20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a24:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <ARGB_Show+0x288>)
 8001a26:	789b      	ldrb	r3, [r3, #2]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	dd04      	ble.n	8001a46 <ARGB_Show+0xba>
 8001a3c:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <ARGB_Show+0x28c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4619      	mov	r1, r3
 8001a44:	e003      	b.n	8001a4e <ARGB_Show+0xc2>
 8001a46:	4b75      	ldr	r3, [pc, #468]	; (8001c1c <ARGB_Show+0x290>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3310      	adds	r3, #16
 8001a54:	4a72      	ldr	r2, [pc, #456]	; (8001c20 <ARGB_Show+0x294>)
 8001a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a5a:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <ARGB_Show+0x288>)
 8001a5c:	78db      	ldrb	r3, [r3, #3]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	dd04      	ble.n	8001a7c <ARGB_Show+0xf0>
 8001a72:	4b69      	ldr	r3, [pc, #420]	; (8001c18 <ARGB_Show+0x28c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	e003      	b.n	8001a84 <ARGB_Show+0xf8>
 8001a7c:	4b67      	ldr	r3, [pc, #412]	; (8001c1c <ARGB_Show+0x290>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3318      	adds	r3, #24
 8001a8a:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <ARGB_Show+0x294>)
 8001a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a90:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <ARGB_Show+0x288>)
 8001a92:	791b      	ldrb	r3, [r3, #4]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dd04      	ble.n	8001ab2 <ARGB_Show+0x126>
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <ARGB_Show+0x28c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4619      	mov	r1, r3
 8001ab0:	e003      	b.n	8001aba <ARGB_Show+0x12e>
 8001ab2:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <ARGB_Show+0x290>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3320      	adds	r3, #32
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <ARGB_Show+0x294>)
 8001ac2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ac6:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <ARGB_Show+0x288>)
 8001ac8:	795b      	ldrb	r3, [r3, #5]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	dd04      	ble.n	8001ae8 <ARGB_Show+0x15c>
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <ARGB_Show+0x28c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	e003      	b.n	8001af0 <ARGB_Show+0x164>
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <ARGB_Show+0x290>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	3328      	adds	r3, #40	; 0x28
 8001af6:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <ARGB_Show+0x294>)
 8001af8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	3301      	adds	r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	f67f af54 	bls.w	80019b8 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b14:	e0a4      	b.n	8001c60 <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <ARGB_Show+0x298>)
 8001b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d102      	bne.n	8001b28 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
 8001b24:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b26:	e09b      	b.n	8001c60 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8001b28:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <ARGB_Show+0x298>)
 8001b2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d11d      	bne.n	8001b70 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b34:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <ARGB_Show+0x298>)
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <ARGB_Show+0x298>)
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <ARGB_Show+0x29c>)
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8001b44:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <ARGB_Show+0x298>)
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <ARGB_Show+0x2a0>)
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <ARGB_Show+0x298>)
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	4a37      	ldr	r2, [pc, #220]	; (8001c30 <ARGB_Show+0x2a4>)
 8001b52:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b54:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <ARGB_Show+0x298>)
 8001b56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001b58:	4931      	ldr	r1, [pc, #196]	; (8001c20 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <ARGB_Show+0x298>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b60:	461a      	mov	r2, r3
 8001b62:	2330      	movs	r3, #48	; 0x30
 8001b64:	f001 fe26 	bl	80037b4 <HAL_DMA_Start_IT>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <ARGB_Show+0x1f0>
 8001b6e:	e002      	b.n	8001b76 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b74:	e074      	b.n	8001c60 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b7a:	e071      	b.n	8001c60 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001b7c:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <ARGB_Show+0x298>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <ARGB_Show+0x298>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b8a:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <ARGB_Show+0x298>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <ARGB_Show+0x2a8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d107      	bne.n	8001ba6 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <ARGB_Show+0x298>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <ARGB_Show+0x298>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <ARGB_Show+0x298>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <ARGB_Show+0x2a8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d018      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <ARGB_Show+0x298>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb8:	d013      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <ARGB_Show+0x298>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <ARGB_Show+0x2ac>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <ARGB_Show+0x298>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <ARGB_Show+0x2b0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <ARGB_Show+0x298>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <ARGB_Show+0x2b4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <ARGB_Show+0x298>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <ARGB_Show+0x2b8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d132      	bne.n	8001c48 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <ARGB_Show+0x298>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	d032      	beq.n	8001c5a <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <ARGB_Show+0x298>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <ARGB_Show+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c04:	e029      	b.n	8001c5a <ARGB_Show+0x2ce>
 8001c06:	bf00      	nop
 8001c08:	200005aa 	.word	0x200005aa
 8001c0c:	200005a8 	.word	0x200005a8
 8001c10:	200006ac 	.word	0x200006ac
 8001c14:	200004d0 	.word	0x200004d0
 8001c18:	200004ce 	.word	0x200004ce
 8001c1c:	200004cf 	.word	0x200004cf
 8001c20:	200004e8 	.word	0x200004e8
 8001c24:	20000664 	.word	0x20000664
 8001c28:	08001ca9 	.word	0x08001ca9
 8001c2c:	08001f59 	.word	0x08001f59
 8001c30:	08006d6f 	.word	0x08006d6f
 8001c34:	40010000 	.word	0x40010000
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40000c00 	.word	0x40000c00
 8001c44:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <ARGB_Show+0x2ec>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <ARGB_Show+0x2ec>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e000      	b.n	8001c5c <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c5a:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f47f af57 	bne.w	8001b16 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <ARGB_Show+0x2f0>)
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001c6e:	2302      	movs	r3, #2
    }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000664 	.word	0x20000664
 8001c7c:	200005a8 	.word	0x200005a8

08001c80 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	460a      	mov	r2, r1
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	79ba      	ldrb	r2, [r7, #6]
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	121b      	asrs	r3, r3, #8
 8001c9a:	b2db      	uxtb	r3, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a9d      	ldr	r2, [pc, #628]	; (8001f30 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	f040 8131 	bne.w	8001f22 <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a9c      	ldr	r2, [pc, #624]	; (8001f34 <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	f040 812c 	bne.w	8001f22 <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001cca:	4b9b      	ldr	r3, [pc, #620]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8128 	beq.w	8001f26 <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d10b      	bne.n	8001cf8 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d136      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf6:	e031      	b.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d10b      	bne.n	8001d1a <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2202      	movs	r2, #2
 8001d06:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d125      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d18:	e020      	b.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d10b      	bne.n	8001d3c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2204      	movs	r2, #4
 8001d28:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d114      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d3a:	e00f      	b.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d10a      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001d5c:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b07      	cmp	r3, #7
 8001d64:	d87b      	bhi.n	8001e5e <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	72fb      	strb	r3, [r7, #11]
 8001d6a:	e06c      	b.n	8001e46 <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d6c:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a70      	ldr	r2, [pc, #448]	; (8001f3c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	7afb      	ldrb	r3, [r7, #11]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dd04      	ble.n	8001d9c <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001d92:	4b6b      	ldr	r3, [pc, #428]	; (8001f40 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	e003      	b.n	8001da4 <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8001d9c:	4b69      	ldr	r3, [pc, #420]	; (8001f44 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3318      	adds	r3, #24
 8001daa:	4a67      	ldr	r2, [pc, #412]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001db0:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a5e      	ldr	r2, [pc, #376]	; (8001f3c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dd04      	ble.n	8001de2 <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	e003      	b.n	8001dea <ARGB_TIM_DMADelayPulseCplt+0x142>
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3320      	adds	r3, #32
 8001df0:	4a55      	ldr	r2, [pc, #340]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001df2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001df6:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3302      	adds	r3, #2
 8001e06:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	dd04      	ble.n	8001e28 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8001e1e:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4619      	mov	r1, r3
 8001e26:	e003      	b.n	8001e30 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4619      	mov	r1, r3
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3328      	adds	r3, #40	; 0x28
 8001e36:	4a44      	ldr	r2, [pc, #272]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001e38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	72fb      	strb	r3, [r7, #11]
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b07      	cmp	r3, #7
 8001e4c:	d98e      	bls.n	8001d6c <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	e05d      	b.n	8001f1a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d80c      	bhi.n	8001e82 <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001e68:	2260      	movs	r2, #96	; 0x60
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4837      	ldr	r0, [pc, #220]	; (8001f4c <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8001e6e:	f008 fd61 	bl	800a934 <memset>
        BUF_COUNTER++;
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	e04b      	b.n	8001f1a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e96:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fce1 	bl	8003864 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d117      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10f      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	f240 4344 	movw	r3, #1092	; 0x444
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eda:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	f240 4344 	movw	r3, #1092	; 0x444
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
 8001f20:	e002      	b.n	8001f28 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f22:	bf00      	nop
 8001f24:	e000      	b.n	8001f28 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f26:	bf00      	nop
}
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200006ac 	.word	0x200006ac
 8001f34:	20000664 	.word	0x20000664
 8001f38:	200005a8 	.word	0x200005a8
 8001f3c:	200004d0 	.word	0x200004d0
 8001f40:	200004ce 	.word	0x200004ce
 8001f44:	200004cf 	.word	0x200004cf
 8001f48:	200004e8 	.word	0x200004e8
 8001f4c:	20000548 	.word	0x20000548
 8001f50:	40010000 	.word	0x40010000
 8001f54:	200005aa 	.word	0x200005aa

08001f58 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	f040 809e 	bne.w	80020ac <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a52      	ldr	r2, [pc, #328]	; (80020bc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	f040 8099 	bne.w	80020ac <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f7a:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8095 	beq.w	80020b0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001f86:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b07      	cmp	r3, #7
 8001f8e:	d87b      	bhi.n	8002088 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	72fb      	strb	r3, [r7, #11]
 8001f94:	e06c      	b.n	8002070 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f96:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dd04      	ble.n	8001fc6 <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	e003      	b.n	8001fce <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001fd6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dd04      	ble.n	800200c <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	e003      	b.n	8002014 <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3308      	adds	r3, #8
 800201a:	4a2d      	ldr	r2, [pc, #180]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 800201c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	3302      	adds	r3, #2
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	2b00      	cmp	r3, #0
 8002046:	dd04      	ble.n	8002052 <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	e003      	b.n	800205a <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4619      	mov	r1, r3
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3310      	adds	r3, #16
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002062:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	72fb      	strb	r3, [r7, #11]
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b07      	cmp	r3, #7
 8002076:	d98e      	bls.n	8001f96 <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	3301      	adds	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e014      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b09      	cmp	r3, #9
 8002090:	d80f      	bhi.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8002092:	2260      	movs	r2, #96	; 0x60
 8002094:	2100      	movs	r1, #0
 8002096:	480e      	ldr	r0, [pc, #56]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002098:	f008 fc4c 	bl	800a934 <memset>
        BUF_COUNTER++;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	e002      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80020ac:	bf00      	nop
 80020ae:	e000      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80020b0:	bf00      	nop
    }
}
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200006ac 	.word	0x200006ac
 80020bc:	20000664 	.word	0x20000664
 80020c0:	200005a8 	.word	0x200005a8
 80020c4:	200004d0 	.word	0x200004d0
 80020c8:	200004ce 	.word	0x200004ce
 80020cc:	200004cf 	.word	0x200004cf
 80020d0:	200004e8 	.word	0x200004e8

080020d4 <AS5600_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1,AS5600_ADDR,&Data,1,10);	
	HAL_I2C_Mem_Write(&hi2c1,(AS5600_ADDR << 1),Reg,1,&Data,1,100);
}

uint8_t AS5600_ReadReg(uint8_t Reg)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af04      	add	r7, sp, #16
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead=0;	
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1,(AS5600_ADDR << 1),Reg,1,&DataRead,1,100);
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	2364      	movs	r3, #100	; 0x64
 80020e8:	9302      	str	r3, [sp, #8]
 80020ea:	2301      	movs	r3, #1
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	f107 030f 	add.w	r3, r7, #15
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	216c      	movs	r1, #108	; 0x6c
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <AS5600_ReadReg+0x34>)
 80020fa:	f002 fd57 	bl	8004bac <HAL_I2C_Mem_Read>
	
	
	return DataRead;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200005b8 	.word	0x200005b8

0800210c <AS5600_GetRawAngle>:
	return (int)((float)(AS5600_ReadReg(ANGLE_L) + (AS5600_ReadReg(ANGLE_H) << 8))/4096*360);	
}


uint16_t AS5600_GetRawAngle()
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
	uint16_t AngleVal=AS5600_ReadReg(RAWANG_L) + (AS5600_ReadReg(RAWANG_H) << 8);
 8002112:	200d      	movs	r0, #13
 8002114:	f7ff ffde 	bl	80020d4 <AS5600_ReadReg>
 8002118:	4603      	mov	r3, r0
 800211a:	b29c      	uxth	r4, r3
 800211c:	200c      	movs	r0, #12
 800211e:	f7ff ffd9 	bl	80020d4 <AS5600_ReadReg>
 8002122:	4603      	mov	r3, r0
 8002124:	b29b      	uxth	r3, r3
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b29b      	uxth	r3, r3
 800212a:	4423      	add	r3, r4
 800212c:	80fb      	strh	r3, [r7, #6]
	return AngleVal;	
 800212e:	88fb      	ldrh	r3, [r7, #6]
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bd90      	pop	{r4, r7, pc}

08002138 <AS5600_GetStatus>:

uint8_t AS5600_GetStatus()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	return AS5600_ReadReg(STATUS) & 0x38;	
 800213c:	200b      	movs	r0, #11
 800213e:	f7ff ffc9 	bl	80020d4 <AS5600_ReadReg>
 8002142:	4603      	mov	r3, r0
 8002144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002148:	b2db      	uxtb	r3, r3
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <drawMainMenu>:
	"5:Encod.  ",
	"6:DAC     ",
	"0:Exit    "
};

void drawMainMenu() {
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff f8b6 	bl	80012c8 <ssd1306_Fill>
    uint8_t exit = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	713b      	strb	r3, [r7, #4]
    uint8_t current_item_menu = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	71fb      	strb	r3, [r7, #7]
    uint8_t next_item_menu = current_item_menu + 1;
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	3301      	adds	r3, #1
 8002168:	71bb      	strb	r3, [r7, #6]
    uint8_t prev_item_menu = MENU_ITEMS_COUNT - 1;
 800216a:	2306      	movs	r3, #6
 800216c:	717b      	strb	r3, [r7, #5]
    ssd1306_DrawRectangle(1, 1, 127, 63, White);
 800216e:	2301      	movs	r3, #1
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	233f      	movs	r3, #63	; 0x3f
 8002174:	227f      	movs	r2, #127	; 0x7f
 8002176:	2101      	movs	r1, #1
 8002178:	2001      	movs	r0, #1
 800217a:	f7ff fa77 	bl	800166c <ssd1306_DrawRectangle>
#define SIZE_FONT_X 7
#define SIZE_FONT_Y 10

#define SIZE_MAIN_FONT_X 11
#define SIZE_MAIN_FONT_Y 18
    udpateDisplay();
 800217e:	f000 f8b5 	bl	80022ec <udpateDisplay>
    while( exit ){
 8002182:	e0a2      	b.n	80022ca <drawMainMenu+0x17a>
         next_item_menu = current_item_menu + 1;
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	3301      	adds	r3, #1
 8002188:	71bb      	strb	r3, [r7, #6]
         prev_item_menu = current_item_menu - 1;
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	3b01      	subs	r3, #1
 800218e:	717b      	strb	r3, [r7, #5]
    	if(current_item_menu == (MENU_ITEMS_COUNT-1))
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d101      	bne.n	800219a <drawMainMenu+0x4a>
    		next_item_menu = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	71bb      	strb	r3, [r7, #6]
    	if(current_item_menu == 0) // Для нулевого элемента предыдущий символ будет последним
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <drawMainMenu+0x54>
    		prev_item_menu = MENU_ITEMS_COUNT - 1;
 80021a0:	2306      	movs	r3, #6
 80021a2:	717b      	strb	r3, [r7, #5]

    	ssd1306_SetCursor(START_POS_X, SIZE_FONT_Y + START_POS_Y+8);// Магический номер что бы сделать по центру
 80021a4:	2117      	movs	r1, #23
 80021a6:	2005      	movs	r0, #5
 80021a8:	f7ff f9dc 	bl	8001564 <ssd1306_SetCursor>
    		ssd1306_WriteString(">", Font_11x18, White);
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <drawMainMenu+0x18c>)
 80021ae:	2301      	movs	r3, #1
 80021b0:	ca06      	ldmia	r2, {r1, r2}
 80021b2:	484b      	ldr	r0, [pc, #300]	; (80022e0 <drawMainMenu+0x190>)
 80021b4:	f7ff f9b0 	bl	8001518 <ssd1306_WriteString>
    	ssd1306_SetCursor(START_POS_X+SIZE_MAIN_FONT_X+5, SIZE_FONT_Y + START_POS_Y+8);
 80021b8:	2117      	movs	r1, #23
 80021ba:	2015      	movs	r0, #21
 80021bc:	f7ff f9d2 	bl	8001564 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[current_item_menu], Font_11x18, White);
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	4a48      	ldr	r2, [pc, #288]	; (80022e4 <drawMainMenu+0x194>)
 80021c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021c8:	4a44      	ldr	r2, [pc, #272]	; (80022dc <drawMainMenu+0x18c>)
 80021ca:	2301      	movs	r3, #1
 80021cc:	ca06      	ldmia	r2, {r1, r2}
 80021ce:	f7ff f9a3 	bl	8001518 <ssd1306_WriteString>

    	udpateDisplay();
 80021d2:	f000 f88b 	bl	80022ec <udpateDisplay>
    	HAL_Delay(50);
 80021d6:	2032      	movs	r0, #50	; 0x32
 80021d8:	f001 f938 	bl	800344c <HAL_Delay>

    	ssd1306_SetCursor(START_POS_X, START_POS_Y); // В первой строке пишем предыдущий пункт
 80021dc:	2105      	movs	r1, #5
 80021de:	2005      	movs	r0, #5
 80021e0:	f7ff f9c0 	bl	8001564 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[prev_item_menu], Font_7x10, White);
 80021e4:	797b      	ldrb	r3, [r7, #5]
 80021e6:	4a3f      	ldr	r2, [pc, #252]	; (80022e4 <drawMainMenu+0x194>)
 80021e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021ec:	4a3e      	ldr	r2, [pc, #248]	; (80022e8 <drawMainMenu+0x198>)
 80021ee:	2301      	movs	r3, #1
 80021f0:	ca06      	ldmia	r2, {r1, r2}
 80021f2:	f7ff f991 	bl	8001518 <ssd1306_WriteString>
    	udpateDisplay();
 80021f6:	f000 f879 	bl	80022ec <udpateDisplay>

        	ssd1306_SetCursor(START_POS_X, LAST_POS_Y - SIZE_FONT_Y);
 80021fa:	2130      	movs	r1, #48	; 0x30
 80021fc:	2005      	movs	r0, #5
 80021fe:	f7ff f9b1 	bl	8001564 <ssd1306_SetCursor>
        		ssd1306_WriteString(menuItems[next_item_menu], Font_7x10, White);
 8002202:	79bb      	ldrb	r3, [r7, #6]
 8002204:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <drawMainMenu+0x194>)
 8002206:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800220a:	4a37      	ldr	r2, [pc, #220]	; (80022e8 <drawMainMenu+0x198>)
 800220c:	2301      	movs	r3, #1
 800220e:	ca06      	ldmia	r2, {r1, r2}
 8002210:	f7ff f982 	bl	8001518 <ssd1306_WriteString>
        udpateDisplay();
 8002214:	f000 f86a 	bl	80022ec <udpateDisplay>
        HAL_Delay(500);
 8002218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800221c:	f001 f916 	bl	800344c <HAL_Delay>
        buttonEnReset();
 8002220:	f000 f8d8 	bl	80023d4 <buttonEnReset>
        buttonLongReset();
 8002224:	f000 f922 	bl	800246c <buttonLongReset>
        encoderReset();
 8002228:	f000 f950 	bl	80024cc <encoderReset>
    	while(1){
    		if(encoderData() > 0){
 800222c:	f000 f92a 	bl	8002484 <encoderData>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	dd05      	ble.n	8002242 <drawMainMenu+0xf2>
    			current_item_menu++;
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	3301      	adds	r3, #1
 800223a:	71fb      	strb	r3, [r7, #7]
    			encoderReset();
 800223c:	f000 f946 	bl	80024cc <encoderReset>
    			break;
 8002240:	e043      	b.n	80022ca <drawMainMenu+0x17a>
    		}
    		if(encoderData() < 0){
 8002242:	f000 f91f 	bl	8002484 <encoderData>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	da05      	bge.n	8002258 <drawMainMenu+0x108>
    			current_item_menu--;
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	3b01      	subs	r3, #1
 8002250:	71fb      	strb	r3, [r7, #7]
    			encoderReset();
 8002252:	f000 f93b 	bl	80024cc <encoderReset>
    			break;
 8002256:	e038      	b.n	80022ca <drawMainMenu+0x17a>
    		}
    		if(buttonLong()){
 8002258:	f000 f8f0 	bl	800243c <buttonLong>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <drawMainMenu+0x118>
    			// Вернуться на стартовый дисплей
    			current_item_menu = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	71fb      	strb	r3, [r7, #7]
    			break;
 8002266:	e030      	b.n	80022ca <drawMainMenu+0x17a>
    		}
    		if(buttonEn()){
 8002268:	f000 f89c 	bl	80023a4 <buttonEn>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d024      	beq.n	80022bc <drawMainMenu+0x16c>
    			switch(current_item_menu){
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d822      	bhi.n	80022be <drawMainMenu+0x16e>
 8002278:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <drawMainMenu+0x130>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	08002299 	.word	0x08002299
 8002284:	0800229f 	.word	0x0800229f
 8002288:	080022a5 	.word	0x080022a5
 800228c:	080022ab 	.word	0x080022ab
 8002290:	080022b1 	.word	0x080022b1
 8002294:	080022b7 	.word	0x080022b7
    				case 0: drawItemNum01(); break;
 8002298:	f000 f924 	bl	80024e4 <drawItemNum01>
 800229c:	e00f      	b.n	80022be <drawMainMenu+0x16e>
    				case 1: drawItemNum02(); break;
 800229e:	f000 f9b9 	bl	8002614 <drawItemNum02>
 80022a2:	e00c      	b.n	80022be <drawMainMenu+0x16e>
    				case 2: drawItemNum03(); break;
 80022a4:	f000 f9cc 	bl	8002640 <drawItemNum03>
 80022a8:	e009      	b.n	80022be <drawMainMenu+0x16e>
    				case 3: drawItemNum04(); break;
 80022aa:	f000 f9df 	bl	800266c <drawItemNum04>
 80022ae:	e006      	b.n	80022be <drawMainMenu+0x16e>
    				case 4: drawItemNum05(); break;
 80022b0:	f000 f9f2 	bl	8002698 <drawItemNum05>
 80022b4:	e003      	b.n	80022be <drawMainMenu+0x16e>
    				case 5: drawItemNum06(); break;
 80022b6:	f000 fa05 	bl	80026c4 <drawItemNum06>
 80022ba:	e000      	b.n	80022be <drawMainMenu+0x16e>
    			}
    		}
 80022bc:	bf00      	nop
    		if(current_item_menu >= MENU_ITEMS_COUNT )
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d9b3      	bls.n	800222c <drawMainMenu+0xdc>
    			current_item_menu = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	71fb      	strb	r3, [r7, #7]
    		if(encoderData() > 0){
 80022c8:	e7b0      	b.n	800222c <drawMainMenu+0xdc>
    while( exit ){
 80022ca:	793b      	ldrb	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f af59 	bne.w	8002184 <drawMainMenu+0x34>
    	}
    }

}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000010 	.word	0x20000010
 80022e0:	0800ad04 	.word	0x0800ad04
 80022e4:	2000001c 	.word	0x2000001c
 80022e8:	20000008 	.word	0x20000008

080022ec <udpateDisplay>:

extern osMutexId_t BlockI2CHandle;
void udpateDisplay(){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	statusMutex = osMutexAcquire(BlockI2CHandle, 1000);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <udpateDisplay+0x34>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022f8:	4618      	mov	r0, r3
 80022fa:	f005 fa90 	bl	800781e <osMutexAcquire>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a08      	ldr	r2, [pc, #32]	; (8002324 <udpateDisplay+0x38>)
 8002302:	6013      	str	r3, [r2, #0]
	if(statusMutex == osOK)
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <udpateDisplay+0x38>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <udpateDisplay+0x24>
		ssd1306_UpdateScreen();
 800230c:	f7ff f800 	bl	8001310 <ssd1306_UpdateScreen>
	osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <udpateDisplay+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f005 facd 	bl	80078b4 <osMutexRelease>
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000710 	.word	0x20000710
 8002324:	200005ac 	.word	0x200005ac

08002328 <drawSubMenu>:

void drawSubMenu(uint8_t i){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
	ssd1306_SetCursor(10, 10);
 8002332:	210a      	movs	r1, #10
 8002334:	200a      	movs	r0, #10
 8002336:	f7ff f915 	bl	8001564 <ssd1306_SetCursor>
	ssd1306_WriteString(menuItems[i], Font_7x10, White);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a05      	ldr	r2, [pc, #20]	; (8002354 <drawSubMenu+0x2c>)
 800233e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <drawSubMenu+0x30>)
 8002344:	2301      	movs	r3, #1
 8002346:	ca06      	ldmia	r2, {r1, r2}
 8002348:	f7ff f8e6 	bl	8001518 <ssd1306_WriteString>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2000001c 	.word	0x2000001c
 8002358:	20000008 	.word	0x20000008

0800235c <buttonUp>:

uint8_t buttonUp(){
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	return buttonUpper;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <buttonUp+0x14>)
 8002362:	781b      	ldrb	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	200005b0 	.word	0x200005b0

08002374 <buttonUpSet>:
void buttonUpSet(){
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
	buttonUpper = 1;
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <buttonUpSet+0x14>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	200005b0 	.word	0x200005b0

0800238c <buttonUpReset>:
void buttonUpReset(){
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
	buttonUpper = 0;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <buttonUpReset+0x14>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	200005b0 	.word	0x200005b0

080023a4 <buttonEn>:

uint8_t buttonEn(){
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
	return buttonEnable;
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <buttonEn+0x14>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	200005b1 	.word	0x200005b1

080023bc <buttonEnSet>:
void buttonEnSet(){
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
	buttonEnable = 1;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <buttonEnSet+0x14>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	200005b1 	.word	0x200005b1

080023d4 <buttonEnReset>:
void buttonEnReset(){
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
	buttonEnable = 0;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <buttonEnReset+0x14>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	200005b1 	.word	0x200005b1

080023ec <buttonCounter>:

uint8_t buttonCounter(){
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	return button_counter;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <buttonCounter+0x14>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	200005b2 	.word	0x200005b2

08002404 <buttonCounterSet>:
void buttonCounterSet(){
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
	button_counter++;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <buttonCounterSet+0x1c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <buttonCounterSet+0x1c>)
 8002412:	701a      	strb	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200005b2 	.word	0x200005b2

08002424 <buttonCounterReset>:

void buttonCounterReset(){
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	button_counter = 0;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <buttonCounterReset+0x14>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	200005b2 	.word	0x200005b2

0800243c <buttonLong>:

uint8_t buttonLong(){
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
	return button_long;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <buttonLong+0x14>)
 8002442:	781b      	ldrb	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	200005b3 	.word	0x200005b3

08002454 <buttonLongSet>:
void buttonLongSet(){
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
	button_long = 1;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <buttonLongSet+0x14>)
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	200005b3 	.word	0x200005b3

0800246c <buttonLongReset>:
void buttonLongReset(){
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	button_long = 0;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <buttonLongReset+0x14>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	200005b3 	.word	0x200005b3

08002484 <encoderData>:

int8_t encoderData(){
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
	return encoderAS56;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <encoderData+0x14>)
 800248a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	200005b4 	.word	0x200005b4

0800249c <encoderSetUp>:
void encoderSetUp(){
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
	encoderAS56 = 1;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <encoderSetUp+0x14>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	200005b4 	.word	0x200005b4

080024b4 <encoderSetDown>:

void encoderSetDown(){
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	encoderAS56 = -1;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <encoderSetDown+0x14>)
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	701a      	strb	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	200005b4 	.word	0x200005b4

080024cc <encoderReset>:

void encoderReset(){
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
	encoderAS56 = 0;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <encoderReset+0x14>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	200005b4 	.word	0x200005b4

080024e4 <drawItemNum01>:
	        HAL_Delay(100);
	    }

}
*/
void drawItemNum01(){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
	uint8_t butEn = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
	uint8_t butLo = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73bb      	strb	r3, [r7, #14]
	 int8_t encod = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	737b      	strb	r3, [r7, #13]
	char sym_butLo[3];
	char sym_encod[3];



	ssd1306_Fill(Black);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7fe fee6 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 80024fc:	2301      	movs	r3, #1
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	233f      	movs	r3, #63	; 0x3f
 8002502:	227f      	movs	r2, #127	; 0x7f
 8002504:	2101      	movs	r1, #1
 8002506:	2001      	movs	r0, #1
 8002508:	f7ff f8b0 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(0);
 800250c:	2000      	movs	r0, #0
 800250e:	f7ff ff0b 	bl	8002328 <drawSubMenu>
	ssd1306_SetCursor(10, 29);
 8002512:	211d      	movs	r1, #29
 8002514:	200a      	movs	r0, #10
 8002516:	f7ff f825 	bl	8001564 <ssd1306_SetCursor>
	ssd1306_WriteString("ButEn:", Font_7x10, White);
 800251a:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <drawItemNum01+0x120>)
 800251c:	2301      	movs	r3, #1
 800251e:	ca06      	ldmia	r2, {r1, r2}
 8002520:	4839      	ldr	r0, [pc, #228]	; (8002608 <drawItemNum01+0x124>)
 8002522:	f7fe fff9 	bl	8001518 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 40);
 8002526:	2128      	movs	r1, #40	; 0x28
 8002528:	200a      	movs	r0, #10
 800252a:	f7ff f81b 	bl	8001564 <ssd1306_SetCursor>
	ssd1306_WriteString("ButLo:", Font_7x10, White);
 800252e:	4a35      	ldr	r2, [pc, #212]	; (8002604 <drawItemNum01+0x120>)
 8002530:	2301      	movs	r3, #1
 8002532:	ca06      	ldmia	r2, {r1, r2}
 8002534:	4835      	ldr	r0, [pc, #212]	; (800260c <drawItemNum01+0x128>)
 8002536:	f7fe ffef 	bl	8001518 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 51);
 800253a:	2133      	movs	r1, #51	; 0x33
 800253c:	200a      	movs	r0, #10
 800253e:	f7ff f811 	bl	8001564 <ssd1306_SetCursor>
	ssd1306_WriteString("Encod:", Font_7x10, White);
 8002542:	4a30      	ldr	r2, [pc, #192]	; (8002604 <drawItemNum01+0x120>)
 8002544:	2301      	movs	r3, #1
 8002546:	ca06      	ldmia	r2, {r1, r2}
 8002548:	4831      	ldr	r0, [pc, #196]	; (8002610 <drawItemNum01+0x12c>)
 800254a:	f7fe ffe5 	bl	8001518 <ssd1306_WriteString>
	while(1){
		if(buttonEn() == ON){
 800254e:	f7ff ff29 	bl	80023a4 <buttonEn>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d104      	bne.n	8002562 <drawItemNum01+0x7e>
			buttonEnReset();
 8002558:	f7ff ff3c 	bl	80023d4 <buttonEnReset>
			butEn++;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	3301      	adds	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
		}
		if(buttonLong() == ON){
 8002562:	f7ff ff6b 	bl	800243c <buttonLong>
 8002566:	4603      	mov	r3, r0
 8002568:	2b01      	cmp	r3, #1
 800256a:	d104      	bne.n	8002576 <drawItemNum01+0x92>
			buttonLongReset();
 800256c:	f7ff ff7e 	bl	800246c <buttonLongReset>
			butLo++;
 8002570:	7bbb      	ldrb	r3, [r7, #14]
 8002572:	3301      	adds	r3, #1
 8002574:	73bb      	strb	r3, [r7, #14]
		}
		if(encoderData() > 0){
 8002576:	f7ff ff85 	bl	8002484 <encoderData>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	dd07      	ble.n	8002590 <drawItemNum01+0xac>
			encoderReset();
 8002580:	f7ff ffa4 	bl	80024cc <encoderReset>
			encod++;
 8002584:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3301      	adds	r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	737b      	strb	r3, [r7, #13]
		}
		if(encoderData() < 0){
 8002590:	f7ff ff78 	bl	8002484 <encoderData>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	da07      	bge.n	80025aa <drawItemNum01+0xc6>
			encoderReset();
 800259a:	f7ff ff97 	bl	80024cc <encoderReset>
			encod--;
 800259e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	737b      	strb	r3, [r7, #13]
		}
		itoa(butEn, sym_butEn, 10);
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	f107 0108 	add.w	r1, r7, #8
 80025b0:	220a      	movs	r2, #10
 80025b2:	4618      	mov	r0, r3
 80025b4:	f008 f9a4 	bl	800a900 <itoa>
		itoa(butLo, sym_butLo, 10);
 80025b8:	7bbb      	ldrb	r3, [r7, #14]
 80025ba:	1d39      	adds	r1, r7, #4
 80025bc:	220a      	movs	r2, #10
 80025be:	4618      	mov	r0, r3
 80025c0:	f008 f99e 	bl	800a900 <itoa>
		itoa(encod, sym_encod, 10);
 80025c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80025c8:	4639      	mov	r1, r7
 80025ca:	220a      	movs	r2, #10
 80025cc:	4618      	mov	r0, r3
 80025ce:	f008 f997 	bl	800a900 <itoa>
		ssd1306_SetCursor(10, 29);
 80025d2:	211d      	movs	r1, #29
 80025d4:	200a      	movs	r0, #10
 80025d6:	f7fe ffc5 	bl	8001564 <ssd1306_SetCursor>
		ssd1306_WriteString("ButEn:", Font_7x10, White);
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <drawItemNum01+0x120>)
 80025dc:	2301      	movs	r3, #1
 80025de:	ca06      	ldmia	r2, {r1, r2}
 80025e0:	4809      	ldr	r0, [pc, #36]	; (8002608 <drawItemNum01+0x124>)
 80025e2:	f7fe ff99 	bl	8001518 <ssd1306_WriteString>
		ssd1306_SetCursor(10, 40);
 80025e6:	2128      	movs	r1, #40	; 0x28
 80025e8:	200a      	movs	r0, #10
 80025ea:	f7fe ffbb 	bl	8001564 <ssd1306_SetCursor>
		ssd1306_SetCursor(10, 40);
 80025ee:	2128      	movs	r1, #40	; 0x28
 80025f0:	200a      	movs	r0, #10
 80025f2:	f7fe ffb7 	bl	8001564 <ssd1306_SetCursor>
		udpateDisplay();
 80025f6:	f7ff fe79 	bl	80022ec <udpateDisplay>
		HAL_Delay(80);
 80025fa:	2050      	movs	r0, #80	; 0x50
 80025fc:	f000 ff26 	bl	800344c <HAL_Delay>
		if(buttonEn() == ON){
 8002600:	e7a5      	b.n	800254e <drawItemNum01+0x6a>
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008
 8002608:	0800ad08 	.word	0x0800ad08
 800260c:	0800ad10 	.word	0x0800ad10
 8002610:	0800ad18 	.word	0x0800ad18

08002614 <drawItemNum02>:
	}
}

void drawItemNum02(){
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fe54 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8002620:	2301      	movs	r3, #1
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	233f      	movs	r3, #63	; 0x3f
 8002626:	227f      	movs	r2, #127	; 0x7f
 8002628:	2101      	movs	r1, #1
 800262a:	2001      	movs	r0, #1
 800262c:	f7ff f81e 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(1);
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fe79 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 8002636:	f7ff fe59 	bl	80022ec <udpateDisplay>
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <drawItemNum03>:

void drawItemNum03(){
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe fe3e 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 800264c:	2301      	movs	r3, #1
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	233f      	movs	r3, #63	; 0x3f
 8002652:	227f      	movs	r2, #127	; 0x7f
 8002654:	2101      	movs	r1, #1
 8002656:	2001      	movs	r0, #1
 8002658:	f7ff f808 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(2);
 800265c:	2002      	movs	r0, #2
 800265e:	f7ff fe63 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 8002662:	f7ff fe43 	bl	80022ec <udpateDisplay>
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <drawItemNum04>:

void drawItemNum04(){
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe fe28 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8002678:	2301      	movs	r3, #1
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	233f      	movs	r3, #63	; 0x3f
 800267e:	227f      	movs	r2, #127	; 0x7f
 8002680:	2101      	movs	r1, #1
 8002682:	2001      	movs	r0, #1
 8002684:	f7fe fff2 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(3);
 8002688:	2003      	movs	r0, #3
 800268a:	f7ff fe4d 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 800268e:	f7ff fe2d 	bl	80022ec <udpateDisplay>
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <drawItemNum05>:

void drawItemNum05(){
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800269e:	2000      	movs	r0, #0
 80026a0:	f7fe fe12 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 80026a4:	2301      	movs	r3, #1
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	233f      	movs	r3, #63	; 0x3f
 80026aa:	227f      	movs	r2, #127	; 0x7f
 80026ac:	2101      	movs	r1, #1
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7fe ffdc 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(4);
 80026b4:	2004      	movs	r0, #4
 80026b6:	f7ff fe37 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 80026ba:	f7ff fe17 	bl	80022ec <udpateDisplay>
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <drawItemNum06>:

void drawItemNum06(){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7fe fdfc 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 80026d0:	2301      	movs	r3, #1
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	233f      	movs	r3, #63	; 0x3f
 80026d6:	227f      	movs	r2, #127	; 0x7f
 80026d8:	2101      	movs	r1, #1
 80026da:	2001      	movs	r0, #1
 80026dc:	f7fe ffc6 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(5);
 80026e0:	2005      	movs	r0, #5
 80026e2:	f7ff fe21 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 80026e6:	f7ff fe01 	bl	80022ec <udpateDisplay>
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026f6:	f000 fe67 	bl	80033c8 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fa:	f000 f86b 	bl	80027d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026fe:	f000 f9c9 	bl	8002a94 <MX_GPIO_Init>
  MX_DMA_Init();
 8002702:	f000 f9a7 	bl	8002a54 <MX_DMA_Init>
  MX_I2C1_Init();
 8002706:	f000 f8cd 	bl	80028a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800270a:	f000 f8f9 	bl	8002900 <MX_SPI1_Init>
  MX_TIM2_Init();
 800270e:	f000 f92d 	bl	800296c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t test_i2c_dev(); // Определяем что все устройства на линии i2c подключены
  ssd1306_Init();
 8002712:	f7fe fd6f 	bl	80011f4 <ssd1306_Init>
  startDisplay();
 8002716:	f000 fa43 	bl	8002ba0 <startDisplay>

  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 800271a:	4827      	ldr	r0, [pc, #156]	; (80027b8 <main+0xc8>)
 800271c:	f004 fff9 	bl	8007712 <osMutexNew>
 8002720:	4603      	mov	r3, r0
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <main+0xcc>)
 8002724:	6013      	str	r3, [r2, #0]
  //osStatus_t status = osMutexAcquire(BlockI2CHandle, 1000);
  //osMutexRelease (BlockI2CHandle);

  HAL_Delay(1000);
 8002726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800272a:	f000 fe8f 	bl	800344c <HAL_Delay>
  //EPD_WhiteScreen_ALL(gqImage_R,gqImage_R); //Refresh the picture in full screen
  //EPD_WhiteScreen_ALL(default_dis,gqImage_R);
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!

  //ADS1115_setConversionReadyPin(pADS);
  float data_from_adc_0 = 0;
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
  MCP4725 myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80027c0 <main+0xd0>
 800273a:	2260      	movs	r2, #96	; 0x60
 800273c:	4921      	ldr	r1, [pc, #132]	; (80027c4 <main+0xd4>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fb96 	bl	8000e70 <MCP4725_init>
	// Check the connection:
	uint8_t state_dac = MCP4725_isConnected(&myMCP4725);
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fbb3 	bl	8000eb2 <MCP4725_isConnected>
 800274c:	4603      	mov	r3, r0
 800274e:	75fb      	strb	r3, [r7, #23]
	uint16_t v_out = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	83fb      	strh	r3, [r7, #30]
  for(uint8_t temp = 0; temp < 80; temp++){
 8002754:	2300      	movs	r3, #0
 8002756:	777b      	strb	r3, [r7, #29]
 8002758:	e015      	b.n	8002786 <main+0x96>
	  MCP4725_setValue(&myMCP4725, v_out, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 800275a:	8bf9      	ldrh	r1, [r7, #30]
 800275c:	1d38      	adds	r0, r7, #4
 800275e:	2300      	movs	r3, #0
 8002760:	2200      	movs	r2, #0
 8002762:	f7fe fbe9 	bl	8000f38 <MCP4725_setValue>
	  HAL_Delay(50);
 8002766:	2032      	movs	r0, #50	; 0x32
 8002768:	f000 fe70 	bl	800344c <HAL_Delay>
	  //data_from_adc_0 = (ADS1115_getData(pADS));
	  v_out+= 150;
 800276c:	8bfb      	ldrh	r3, [r7, #30]
 800276e:	3396      	adds	r3, #150	; 0x96
 8002770:	83fb      	strh	r3, [r7, #30]
	  if(v_out > 4060)
 8002772:	8bfb      	ldrh	r3, [r7, #30]
 8002774:	f640 72dc 	movw	r2, #4060	; 0xfdc
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <main+0x90>
		  v_out = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	83fb      	strh	r3, [r7, #30]
  for(uint8_t temp = 0; temp < 80; temp++){
 8002780:	7f7b      	ldrb	r3, [r7, #29]
 8002782:	3301      	adds	r3, #1
 8002784:	777b      	strb	r3, [r7, #29]
 8002786:	7f7b      	ldrb	r3, [r7, #29]
 8002788:	2b4f      	cmp	r3, #79	; 0x4f
 800278a:	d9e6      	bls.n	800275a <main+0x6a>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800278c:	f004 feca 	bl	8007524 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of BlockI2C */
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <main+0xc8>)
 8002792:	f004 ffbe 	bl	8007712 <osMutexNew>
 8002796:	4603      	mov	r3, r0
 8002798:	4a08      	ldr	r2, [pc, #32]	; (80027bc <main+0xcc>)
 800279a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <main+0xd8>)
 800279e:	2100      	movs	r1, #0
 80027a0:	480a      	ldr	r0, [pc, #40]	; (80027cc <main+0xdc>)
 80027a2:	f004 ff09 	bl	80075b8 <osThreadNew>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <main+0xe0>)
 80027aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 80027ac:	f000 fdb4 	bl	8003318 <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80027b0:	f004 fedc 	bl	800756c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <main+0xc4>
 80027b6:	bf00      	nop
 80027b8:	0800c87c 	.word	0x0800c87c
 80027bc:	20000710 	.word	0x20000710
 80027c0:	40533333 	.word	0x40533333
 80027c4:	200005b8 	.word	0x200005b8
 80027c8:	0800c858 	.word	0x0800c858
 80027cc:	08002bed 	.word	0x08002bed
 80027d0:	2000070c 	.word	0x2000070c

080027d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b094      	sub	sp, #80	; 0x50
 80027d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027da:	f107 0320 	add.w	r3, r7, #32
 80027de:	2230      	movs	r2, #48	; 0x30
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f008 f8a6 	bl	800a934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <SystemClock_Config+0xc8>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	4a26      	ldr	r2, [pc, #152]	; (800289c <SystemClock_Config+0xc8>)
 8002802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002806:	6413      	str	r3, [r2, #64]	; 0x40
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <SystemClock_Config+0xc8>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <SystemClock_Config+0xcc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <SystemClock_Config+0xcc>)
 800281e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <SystemClock_Config+0xcc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002830:	2301      	movs	r3, #1
 8002832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800283a:	2302      	movs	r3, #2
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800283e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002844:	2319      	movs	r3, #25
 8002846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002848:	2390      	movs	r3, #144	; 0x90
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800284c:	2302      	movs	r3, #2
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002850:	2304      	movs	r3, #4
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002854:	f107 0320 	add.w	r3, r7, #32
 8002858:	4618      	mov	r0, r3
 800285a:	f003 f9a7 	bl	8005bac <HAL_RCC_OscConfig>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002864:	f000 f9dc 	bl	8002c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002868:	230f      	movs	r3, #15
 800286a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800286c:	2302      	movs	r3, #2
 800286e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fc09 	bl	800609c <HAL_RCC_ClockConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002890:	f000 f9c6 	bl	8002c20 <Error_Handler>
  }
}
 8002894:	bf00      	nop
 8002896:	3750      	adds	r7, #80	; 0x50
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000

080028a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028aa:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <MX_I2C1_Init+0x54>)
 80028ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <MX_I2C1_Init+0x58>)
 80028b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028bc:	2200      	movs	r2, #0
 80028be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028e0:	4804      	ldr	r0, [pc, #16]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028e2:	f001 fc01 	bl	80040e8 <HAL_I2C_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028ec:	f000 f998 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200005b8 	.word	0x200005b8
 80028f8:	40005400 	.word	0x40005400
 80028fc:	00061a80 	.word	0x00061a80

08002900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <MX_SPI1_Init+0x64>)
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <MX_SPI1_Init+0x68>)
 8002908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <MX_SPI1_Init+0x64>)
 800290c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <MX_SPI1_Init+0x64>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <MX_SPI1_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <MX_SPI1_Init+0x64>)
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <MX_SPI1_Init+0x64>)
 8002926:	2200      	movs	r2, #0
 8002928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <MX_SPI1_Init+0x64>)
 800292c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <MX_SPI1_Init+0x64>)
 8002934:	2230      	movs	r2, #48	; 0x30
 8002936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <MX_SPI1_Init+0x64>)
 800293a:	2200      	movs	r2, #0
 800293c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <MX_SPI1_Init+0x64>)
 8002940:	2200      	movs	r2, #0
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <MX_SPI1_Init+0x64>)
 8002946:	2200      	movs	r2, #0
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <MX_SPI1_Init+0x64>)
 800294c:	220a      	movs	r2, #10
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002950:	4804      	ldr	r0, [pc, #16]	; (8002964 <MX_SPI1_Init+0x64>)
 8002952:	f003 fdb5 	bl	80064c0 <HAL_SPI_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800295c:	f000 f960 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2000060c 	.word	0x2000060c
 8002968:	40013000 	.word	0x40013000

0800296c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002980:	f107 0320 	add.w	r3, r7, #32
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
 8002998:	615a      	str	r2, [r3, #20]
 800299a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800299c:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <MX_TIM2_Init+0xe4>)
 800299e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <MX_TIM2_Init+0xe4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <MX_TIM2_Init+0xe4>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <MX_TIM2_Init+0xe4>)
 80029b2:	2259      	movs	r2, #89	; 0x59
 80029b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <MX_TIM2_Init+0xe4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <MX_TIM2_Init+0xe4>)
 80029be:	2200      	movs	r2, #0
 80029c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029c2:	4823      	ldr	r0, [pc, #140]	; (8002a50 <MX_TIM2_Init+0xe4>)
 80029c4:	f003 fe05 	bl	80065d2 <HAL_TIM_Base_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80029ce:	f000 f927 	bl	8002c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029dc:	4619      	mov	r1, r3
 80029de:	481c      	ldr	r0, [pc, #112]	; (8002a50 <MX_TIM2_Init+0xe4>)
 80029e0:	f004 f8cc 	bl	8006b7c <HAL_TIM_ConfigClockSource>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80029ea:	f000 f919 	bl	8002c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029ee:	4818      	ldr	r0, [pc, #96]	; (8002a50 <MX_TIM2_Init+0xe4>)
 80029f0:	f003 fea0 	bl	8006734 <HAL_TIM_PWM_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80029fa:	f000 f911 	bl	8002c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a06:	f107 0320 	add.w	r3, r7, #32
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4810      	ldr	r0, [pc, #64]	; (8002a50 <MX_TIM2_Init+0xe4>)
 8002a0e:	f004 fcc3 	bl	8007398 <HAL_TIMEx_MasterConfigSynchronization>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002a18:	f000 f902 	bl	8002c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a1c:	2360      	movs	r3, #96	; 0x60
 8002a1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	2204      	movs	r2, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4807      	ldr	r0, [pc, #28]	; (8002a50 <MX_TIM2_Init+0xe4>)
 8002a34:	f003 ffe0 	bl	80069f8 <HAL_TIM_PWM_ConfigChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002a3e:	f000 f8ef 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a42:	4803      	ldr	r0, [pc, #12]	; (8002a50 <MX_TIM2_Init+0xe4>)
 8002a44:	f000 fa0e 	bl	8002e64 <HAL_TIM_MspPostInit>

}
 8002a48:	bf00      	nop
 8002a4a:	3738      	adds	r7, #56	; 0x38
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000664 	.word	0x20000664

08002a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <MX_DMA_Init+0x3c>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <MX_DMA_Init+0x3c>)
 8002a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <MX_DMA_Init+0x3c>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2105      	movs	r1, #5
 8002a7a:	2011      	movs	r0, #17
 8002a7c:	f000 fdc2 	bl	8003604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a80:	2011      	movs	r0, #17
 8002a82:	f000 fddb 	bl	800363c <HAL_NVIC_EnableIRQ>

}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <MX_GPIO_Init+0xe0>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <MX_GPIO_Init+0xe0>)
 8002ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <MX_GPIO_Init+0xe0>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <MX_GPIO_Init+0xe0>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a29      	ldr	r2, [pc, #164]	; (8002b74 <MX_GPIO_Init+0xe0>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <MX_GPIO_Init+0xe0>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <MX_GPIO_Init+0xe0>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a22      	ldr	r2, [pc, #136]	; (8002b74 <MX_GPIO_Init+0xe0>)
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <MX_GPIO_Init+0xe0>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2107      	movs	r1, #7
 8002b02:	481d      	ldr	r0, [pc, #116]	; (8002b78 <MX_GPIO_Init+0xe4>)
 8002b04:	f001 fabe 	bl	8004084 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8002b08:	2307      	movs	r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4816      	ldr	r0, [pc, #88]	; (8002b78 <MX_GPIO_Init+0xe4>)
 8002b20:	f001 f92c 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	4619      	mov	r1, r3
 8002b38:	480f      	ldr	r0, [pc, #60]	; (8002b78 <MX_GPIO_Init+0xe4>)
 8002b3a:	f001 f91f 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 8002b3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 030c 	add.w	r3, r7, #12
 8002b52:	4619      	mov	r1, r3
 8002b54:	4808      	ldr	r0, [pc, #32]	; (8002b78 <MX_GPIO_Init+0xe4>)
 8002b56:	f001 f911 	bl	8003d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2105      	movs	r1, #5
 8002b5e:	2028      	movs	r0, #40	; 0x28
 8002b60:	f000 fd50 	bl	8003604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b64:	2028      	movs	r0, #40	; 0x28
 8002b66:	f000 fd69 	bl	800363c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b6a:	bf00      	nop
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020400 	.word	0x40020400

08002b7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_button_on_Pin){
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b8c:	d104      	bne.n	8002b98 <HAL_GPIO_EXTI_Callback+0x1c>
		buttonEnSet(ON);
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f7ff fc14 	bl	80023bc <buttonEnSet>
		buttonUpSet();
 8002b94:	f7ff fbee 	bl	8002374 <buttonUpSet>
	}
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <startDisplay>:
void startDisplay(){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	    ssd1306_Fill(Black);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fe fb8f 	bl	80012c8 <ssd1306_Fill>
	    ssd1306_SetCursor(5, 10);
 8002baa:	210a      	movs	r1, #10
 8002bac:	2005      	movs	r0, #5
 8002bae:	f7fe fcd9 	bl	8001564 <ssd1306_SetCursor>
	    ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <startDisplay+0x3c>)
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	ca06      	ldmia	r2, {r1, r2}
 8002bb8:	4809      	ldr	r0, [pc, #36]	; (8002be0 <startDisplay+0x40>)
 8002bba:	f7fe fcad 	bl	8001518 <ssd1306_WriteString>
	    ssd1306_SetCursor(3, 40);
 8002bbe:	2128      	movs	r1, #40	; 0x28
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f7fe fccf 	bl	8001564 <ssd1306_SetCursor>
	    ssd1306_WriteString("Tap Start for continue", Font_6x8, White);
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <startDisplay+0x44>)
 8002bc8:	2301      	movs	r3, #1
 8002bca:	ca06      	ldmia	r2, {r1, r2}
 8002bcc:	4806      	ldr	r0, [pc, #24]	; (8002be8 <startDisplay+0x48>)
 8002bce:	f7fe fca3 	bl	8001518 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8002bd2:	f7fe fb9d 	bl	8001310 <ssd1306_UpdateScreen>
  }
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000010 	.word	0x20000010
 8002be0:	0800ad38 	.word	0x0800ad38
 8002be4:	20000000 	.word	0x20000000
 8002be8:	0800ad44 	.word	0x0800ad44

08002bec <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f004 fd71 	bl	80076dc <osDelay>
 8002bfa:	e7fb      	b.n	8002bf4 <StartEmptyTask+0x8>

08002bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c0e:	f000 fbfd 	bl	800340c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40014000 	.word	0x40014000

08002c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c24:	b672      	cpsid	i
}
 8002c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <Error_Handler+0x8>
	...

08002c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_MspInit+0x54>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_MspInit+0x54>)
 8002c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c40:	6453      	str	r3, [r2, #68]	; 0x44
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <HAL_MspInit+0x54>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_MspInit+0x54>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_MspInit+0x54>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_MspInit+0x54>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	210f      	movs	r1, #15
 8002c6e:	f06f 0001 	mvn.w	r0, #1
 8002c72:	f000 fcc7 	bl	8003604 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_I2C_MspInit+0x84>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d12b      	bne.n	8002cfe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_I2C_MspInit+0x88>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_I2C_MspInit+0x88>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_I2C_MspInit+0x88>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cc2:	23c0      	movs	r3, #192	; 0xc0
 8002cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc6:	2312      	movs	r3, #18
 8002cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 0314 	add.w	r3, r7, #20
 8002cda:	4619      	mov	r1, r3
 8002cdc:	480c      	ldr	r0, [pc, #48]	; (8002d10 <HAL_I2C_MspInit+0x8c>)
 8002cde:	f001 f84d 	bl	8003d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_I2C_MspInit+0x88>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_I2C_MspInit+0x88>)
 8002cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_I2C_MspInit+0x88>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cfe:	bf00      	nop
 8002d00:	3728      	adds	r7, #40	; 0x28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40005400 	.word	0x40005400
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40020400 	.word	0x40020400

08002d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_SPI_MspInit+0x84>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d12b      	bne.n	8002d8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d6e:	23a0      	movs	r3, #160	; 0xa0
 8002d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d7e:	2305      	movs	r3, #5
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	4805      	ldr	r0, [pc, #20]	; (8002da0 <HAL_SPI_MspInit+0x8c>)
 8002d8a:	f000 fff7 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d8e:	bf00      	nop
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40013000 	.word	0x40013000
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020000 	.word	0x40020000

08002da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db4:	d14c      	bne.n	8002e50 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_TIM_Base_MspInit+0xb4>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <HAL_TIM_Base_MspInit+0xb4>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_TIM_Base_MspInit+0xb4>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002dd2:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002dd6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8002dd8:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002dda:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002dde:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002de2:	2240      	movs	r2, #64	; 0x40
 8002de4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002dec:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dfa:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dfc:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e08:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002e0a:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e12:	2204      	movs	r2, #4
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e18:	2203      	movs	r2, #3
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002e28:	480c      	ldr	r0, [pc, #48]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e2a:	f000 fc15 	bl	8003658 <HAL_DMA_Init>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8002e34:	f7ff fef4 	bl	8002c20 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e3c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e3e:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
 8002e4a:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	200006ac 	.word	0x200006ac
 8002e60:	400260a0 	.word	0x400260a0

08002e64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d11d      	bne.n	8002ec2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_TIM_MspPostInit+0x68>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_TIM_MspPostInit+0x68>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_TIM_MspPostInit+0x68>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <HAL_TIM_MspPostInit+0x6c>)
 8002ebe:	f000 ff5d 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ec2:	bf00      	nop
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08c      	sub	sp, #48	; 0x30
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <HAL_InitTick+0xd0>)
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_InitTick+0xd0>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_InitTick+0xd0>)
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f00:	f107 020c 	add.w	r2, r7, #12
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 faa6 	bl	800645c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002f10:	f003 fa90 	bl	8006434 <HAL_RCC_GetPCLK2Freq>
 8002f14:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	4a23      	ldr	r2, [pc, #140]	; (8002fa8 <HAL_InitTick+0xd4>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	3b01      	subs	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_InitTick+0xd8>)
 8002f26:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <HAL_InitTick+0xdc>)
 8002f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8002f2a:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_InitTick+0xd8>)
 8002f2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f30:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002f32:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <HAL_InitTick+0xd8>)
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_InitTick+0xd8>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_InitTick+0xd8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_InitTick+0xd8>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8002f4a:	4818      	ldr	r0, [pc, #96]	; (8002fac <HAL_InitTick+0xd8>)
 8002f4c:	f003 fb41 	bl	80065d2 <HAL_TIM_Base_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d11b      	bne.n	8002f96 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8002f5e:	4813      	ldr	r0, [pc, #76]	; (8002fac <HAL_InitTick+0xd8>)
 8002f60:	f003 fb86 	bl	8006670 <HAL_TIM_Base_Start_IT>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d111      	bne.n	8002f96 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002f72:	2018      	movs	r0, #24
 8002f74:	f000 fb62 	bl	800363c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d808      	bhi.n	8002f90 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	2018      	movs	r0, #24
 8002f84:	f000 fb3e 	bl	8003604 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_InitTick+0xe0>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e002      	b.n	8002f96 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3730      	adds	r7, #48	; 0x30
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	431bde83 	.word	0x431bde83
 8002fac:	20000714 	.word	0x20000714
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	2000003c 	.word	0x2000003c

08002fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <NMI_Handler+0x4>

08002fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fc2:	e7fe      	b.n	8002fc2 <HardFault_Handler+0x4>

08002fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fc8:	e7fe      	b.n	8002fc8 <MemManage_Handler+0x4>

08002fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fce:	e7fe      	b.n	8002fce <BusFault_Handler+0x4>

08002fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <UsageFault_Handler+0x4>

08002fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002fe8:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <DMA1_Stream6_IRQHandler+0x10>)
 8002fea:	f000 fc5d 	bl	80038a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200006ac 	.word	0x200006ac

08002ff8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002ffc:	4802      	ldr	r0, [pc, #8]	; (8003008 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002ffe:	f003 fbf2 	bl	80067e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000714 	.word	0x20000714

0800300c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 8003010:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003014:	f001 f850 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <_sbrk+0x5c>)
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <_sbrk+0x60>)
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <_sbrk+0x64>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <_sbrk+0x64>)
 800303a:	4a12      	ldr	r2, [pc, #72]	; (8003084 <_sbrk+0x68>)
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	429a      	cmp	r2, r3
 800304a:	d207      	bcs.n	800305c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800304c:	f007 fc16 	bl	800a87c <__errno>
 8003050:	4603      	mov	r3, r0
 8003052:	220c      	movs	r2, #12
 8003054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e009      	b.n	8003070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <_sbrk+0x64>)
 800306c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20020000 	.word	0x20020000
 800307c:	00004000 	.word	0x00004000
 8003080:	2000075c 	.word	0x2000075c
 8003084:	200051c8 	.word	0x200051c8

08003088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <SystemInit+0x20>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <SystemInit+0x20>)
 8003094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <StartLedControlTask>:

#include "tasks/LedControl.h"

void StartLedControlTask(void *argument){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	  ARGB_Init();  // Initialization
 80030b4:	f7fe fb44 	bl	8001740 <ARGB_Init>
	  ARGB_Clear();
 80030b8:	f7fe fbba 	bl	8001830 <ARGB_Clear>
	  while (ARGB_Show() != ARGB_OK);
 80030bc:	bf00      	nop
 80030be:	f7fe fc65 	bl	800198c <ARGB_Show>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d1fa      	bne.n	80030be <StartLedControlTask+0x12>
	  ARGB_SetBrightness(80);
 80030c8:	2050      	movs	r0, #80	; 0x50
 80030ca:	f7fe fbbb 	bl	8001844 <ARGB_SetBrightness>
	for(;;){
		osDelay(100);
 80030ce:	2064      	movs	r0, #100	; 0x64
 80030d0:	f004 fb04 	bl	80076dc <osDelay>
 80030d4:	e7fb      	b.n	80030ce <StartLedControlTask+0x22>

080030d6 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
	for(;;){
		if(buttonEn() == ON){
 80030de:	f7ff f961 	bl	80023a4 <buttonEn>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <StartOledMenuTask+0x16>
			drawMainMenu();
 80030e8:	f7ff f832 	bl	8002150 <drawMainMenu>
		}
	osDelay(100);
 80030ec:	2064      	movs	r0, #100	; 0x64
 80030ee:	f004 faf5 	bl	80076dc <osDelay>
		if(buttonEn() == ON){
 80030f2:	e7f4      	b.n	80030de <StartOledMenuTask+0x8>

080030f4 <StartSensOutTask>:
ADS1115_Handle_t *pADS;

osStatus_t statusMutexI2C;

// Задача для опросо кнопок ADC и энкодера
void StartSensOutTask(void *argument){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	initAllChanelADC();
 80030fc:	f000 f8b6 	bl	800326c <initAllChanelADC>
    pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configChanel1);
 8003100:	4b1a      	ldr	r3, [pc, #104]	; (800316c <StartSensOutTask+0x78>)
 8003102:	cb0c      	ldmia	r3, {r2, r3}
 8003104:	2148      	movs	r1, #72	; 0x48
 8003106:	481a      	ldr	r0, [pc, #104]	; (8003170 <StartSensOutTask+0x7c>)
 8003108:	f7fd fdda 	bl	8000cc0 <ADS1115_init>
 800310c:	4603      	mov	r3, r0
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <StartSensOutTask+0x80>)
 8003110:	6013      	str	r3, [r2, #0]
    ADS1115_updateConfig(pADS, configChanel1);
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <StartSensOutTask+0x80>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <StartSensOutTask+0x78>)
 8003118:	ca06      	ldmia	r2, {r1, r2}
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fdf0 	bl	8000d00 <ADS1115_updateConfig>
    ADS1115_startContinousMode(pADS);
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <StartSensOutTask+0x80>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd fe1d 	bl	8000d64 <ADS1115_startContinousMode>
	for(;;){
		// Попытка захвата мьютекса с таймаутом 1000 мс
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <StartSensOutTask+0x84>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003132:	4618      	mov	r0, r3
 8003134:	f004 fb73 	bl	800781e <osMutexAcquire>
 8003138:	4603      	mov	r3, r0
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <StartSensOutTask+0x88>)
 800313c:	6013      	str	r3, [r2, #0]
		if(statusMutexI2C == osOK){
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <StartSensOutTask+0x88>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <StartSensOutTask+0x6a>
			calcDeltaAngle((int16_t)getEncoderData()); // Расчитываем смещение энкодера
 8003146:	f000 f873 	bl	8003230 <getEncoderData>
 800314a:	4603      	mov	r3, r0
 800314c:	b21b      	sxth	r3, r3
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f816 	bl	8003180 <calcDeltaAngle>
			osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <StartSensOutTask+0x84>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f004 fbab 	bl	80078b4 <osMutexRelease>
		}
		longButton();
 800315e:	f000 f847 	bl	80031f0 <longButton>
		osDelay(50);
 8003162:	2032      	movs	r0, #50	; 0x32
 8003164:	f004 faba 	bl	80076dc <osDelay>
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 8003168:	e7df      	b.n	800312a <StartSensOutTask+0x36>
 800316a:	bf00      	nop
 800316c:	20000768 	.word	0x20000768
 8003170:	200005b8 	.word	0x200005b8
 8003174:	20000788 	.word	0x20000788
 8003178:	20000710 	.word	0x20000710
 800317c:	2000078c 	.word	0x2000078c

08003180 <calcDeltaAngle>:
	}
}

void calcDeltaAngle(int16_t current_encoder_data){
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
	delta_encoder = current_encoder_data - old_encoder_data;
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <calcDeltaAngle+0x68>)
 800318e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003192:	b29b      	uxth	r3, r3
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	b29b      	uxth	r3, r3
 8003198:	b21a      	sxth	r2, r3
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <calcDeltaAngle+0x6c>)
 800319c:	801a      	strh	r2, [r3, #0]
	old_encoder_data = current_encoder_data;
 800319e:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <calcDeltaAngle+0x68>)
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	8013      	strh	r3, [r2, #0]
	if(delta_encoder > MAX_ANGLE || delta_encoder < (-1)*MAX_ANGLE){
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <calcDeltaAngle+0x6c>)
 80031a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031aa:	2bb4      	cmp	r3, #180	; 0xb4
 80031ac:	dc05      	bgt.n	80031ba <calcDeltaAngle+0x3a>
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <calcDeltaAngle+0x6c>)
 80031b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b4:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80031b8:	da02      	bge.n	80031c0 <calcDeltaAngle+0x40>
		delta_encoder = 0;
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <calcDeltaAngle+0x6c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	801a      	strh	r2, [r3, #0]
	}
	if(delta_encoder > MIN_ANGLE )
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <calcDeltaAngle+0x6c>)
 80031c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	dd01      	ble.n	80031ce <calcDeltaAngle+0x4e>
		encoderSetUp();
 80031ca:	f7ff f967 	bl	800249c <encoderSetUp>
	if(delta_encoder < (-1)*MIN_ANGLE)
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <calcDeltaAngle+0x6c>)
 80031d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d4:	f113 0f05 	cmn.w	r3, #5
 80031d8:	da01      	bge.n	80031de <calcDeltaAngle+0x5e>
		encoderSetDown();
 80031da:	f7ff f96b 	bl	80024b4 <encoderSetDown>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000762 	.word	0x20000762
 80031ec:	20000764 	.word	0x20000764

080031f0 <longButton>:
void longButton(){
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
	if(buttonUp() == OFF){
 80031f4:	f7ff f8b2 	bl	800235c <buttonUp>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <longButton+0x12>
		buttonCounterReset();
 80031fe:	f7ff f911 	bl	8002424 <buttonCounterReset>
	}
	if(buttonUp() == ON){
 8003202:	f7ff f8ab 	bl	800235c <buttonUp>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	d103      	bne.n	8003214 <longButton+0x24>
		buttonCounterSet();
 800320c:	f7ff f8fa 	bl	8002404 <buttonCounterSet>
		buttonUpReset();
 8003210:	f7ff f8bc 	bl	800238c <buttonUpReset>
	}
	if(buttonCounter() > 10){
 8003214:	f7ff f8ea 	bl	80023ec <buttonCounter>
 8003218:	4603      	mov	r3, r0
 800321a:	2b0a      	cmp	r3, #10
 800321c:	d905      	bls.n	800322a <longButton+0x3a>
		buttonLongSet();
 800321e:	f7ff f919 	bl	8002454 <buttonLongSet>
		buttonCounterReset();
 8003222:	f7ff f8ff 	bl	8002424 <buttonCounterReset>
		buttonUpReset();
 8003226:	f7ff f8b1 	bl	800238c <buttonUpReset>
	}
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <getEncoderData>:

u_magnituda magnituda;
uint16_t getEncoderData(){
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
	magnituda.data = AS5600_GetStatus();
 8003234:	f7fe ff80 	bl	8002138 <AS5600_GetStatus>
 8003238:	4603      	mov	r3, r0
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <getEncoderData+0x34>)
 800323e:	701a      	strb	r2, [r3, #0]
	if(magnituda.state_magnit.MD == ON)
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <getEncoderData+0x34>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <getEncoderData+0x2a>
		raw_angle = AS5600_GetRawAngle();
 800324e:	f7fe ff5d 	bl	800210c <AS5600_GetRawAngle>
 8003252:	4603      	mov	r3, r0
 8003254:	b29a      	uxth	r2, r3
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <getEncoderData+0x38>)
 8003258:	801a      	strh	r2, [r3, #0]
	return 	raw_angle;
 800325a:	4b03      	ldr	r3, [pc, #12]	; (8003268 <getEncoderData+0x38>)
 800325c:	881b      	ldrh	r3, [r3, #0]
}
 800325e:	4618      	mov	r0, r3
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000790 	.word	0x20000790
 8003268:	20000760 	.word	0x20000760

0800326c <initAllChanelADC>:

void initAllChanelADC(){
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	initADC(&configChanel1);
 8003270:	480e      	ldr	r0, [pc, #56]	; (80032ac <initAllChanelADC+0x40>)
 8003272:	f000 f823 	bl	80032bc <initADC>
	initADC(&configChanel2);
 8003276:	480e      	ldr	r0, [pc, #56]	; (80032b0 <initAllChanelADC+0x44>)
 8003278:	f000 f820 	bl	80032bc <initADC>
	initADC(&configChanel3);
 800327c:	480d      	ldr	r0, [pc, #52]	; (80032b4 <initAllChanelADC+0x48>)
 800327e:	f000 f81d 	bl	80032bc <initADC>
	initADC(&configChanel4);
 8003282:	480d      	ldr	r0, [pc, #52]	; (80032b8 <initAllChanelADC+0x4c>)
 8003284:	f000 f81a 	bl	80032bc <initADC>

	initChanelADC(&configChanel1, CHANNEL_AIN0_GND);
 8003288:	2104      	movs	r1, #4
 800328a:	4808      	ldr	r0, [pc, #32]	; (80032ac <initAllChanelADC+0x40>)
 800328c:	f000 f835 	bl	80032fa <initChanelADC>
	initChanelADC(&configChanel2, CHANNEL_AIN1_GND);
 8003290:	2105      	movs	r1, #5
 8003292:	4807      	ldr	r0, [pc, #28]	; (80032b0 <initAllChanelADC+0x44>)
 8003294:	f000 f831 	bl	80032fa <initChanelADC>
	initChanelADC(&configChanel3, CHANNEL_AIN2_GND);
 8003298:	2106      	movs	r1, #6
 800329a:	4806      	ldr	r0, [pc, #24]	; (80032b4 <initAllChanelADC+0x48>)
 800329c:	f000 f82d 	bl	80032fa <initChanelADC>
	initChanelADC(&configChanel4, CHANNEL_AIN3_GND);
 80032a0:	2107      	movs	r1, #7
 80032a2:	4805      	ldr	r0, [pc, #20]	; (80032b8 <initAllChanelADC+0x4c>)
 80032a4:	f000 f829 	bl	80032fa <initChanelADC>
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000768 	.word	0x20000768
 80032b0:	20000770 	.word	0x20000770
 80032b4:	20000778 	.word	0x20000778
 80032b8:	20000780 	.word	0x20000780

080032bc <initADC>:

void initADC(ADS1115_Config_t* configReg){
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
	configReg->pgaConfig 		= PGA_4_096;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	705a      	strb	r2, [r3, #1]
	configReg->operatingMode 	= MODE_CONTINOUS;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	709a      	strb	r2, [r3, #2]
	configReg->dataRate 		= DRATE_250;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2205      	movs	r2, #5
 80032d4:	70da      	strb	r2, [r3, #3]
	configReg->compareMode 		= COMP_HYSTERESIS;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	711a      	strb	r2, [r3, #4]
	configReg->polarityMode 	= POLARITY_ACTIVE_LOW;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	715a      	strb	r2, [r3, #5]
	configReg->latchingMode  	= LATCHING_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	719a      	strb	r2, [r3, #6]
	configReg->queueComparator 	= QUEUE_ONE; 			// ПОднять флаг через сколько измерений
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	71da      	strb	r2, [r3, #7]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <initChanelADC>:

void initChanelADC(ADS1115_Config_t* configReg, MultiplexerConfig_t chanel){
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	70fb      	strb	r3, [r7, #3]
	configReg->channel = chanel;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	701a      	strb	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void initUserTasks(){
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
	OledMenuTaskHandle   = osThreadNew(StartOledMenuTask,   NULL, &OledMenuTask_attributes);
 800331c:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <initUserTasks+0x38>)
 800331e:	2100      	movs	r1, #0
 8003320:	480c      	ldr	r0, [pc, #48]	; (8003354 <initUserTasks+0x3c>)
 8003322:	f004 f949 	bl	80075b8 <osThreadNew>
 8003326:	4603      	mov	r3, r0
 8003328:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <initUserTasks+0x40>)
 800332a:	6013      	str	r3, [r2, #0]
	LedControlTaskHandle = osThreadNew(StartLedControlTask, NULL, &LedControlTask_attributes);
 800332c:	4a0b      	ldr	r2, [pc, #44]	; (800335c <initUserTasks+0x44>)
 800332e:	2100      	movs	r1, #0
 8003330:	480b      	ldr	r0, [pc, #44]	; (8003360 <initUserTasks+0x48>)
 8003332:	f004 f941 	bl	80075b8 <osThreadNew>
 8003336:	4603      	mov	r3, r0
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <initUserTasks+0x4c>)
 800333a:	6013      	str	r3, [r2, #0]
	SensOutTaskHandle    = osThreadNew(StartSensOutTask,    NULL, &SensOutTask_attributes);
 800333c:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <initUserTasks+0x50>)
 800333e:	2100      	movs	r1, #0
 8003340:	480a      	ldr	r0, [pc, #40]	; (800336c <initUserTasks+0x54>)
 8003342:	f004 f939 	bl	80075b8 <osThreadNew>
 8003346:	4603      	mov	r3, r0
 8003348:	4a09      	ldr	r2, [pc, #36]	; (8003370 <initUserTasks+0x58>)
 800334a:	6013      	str	r3, [r2, #0]
};
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}
 8003350:	0800c8a4 	.word	0x0800c8a4
 8003354:	080030d7 	.word	0x080030d7
 8003358:	20000794 	.word	0x20000794
 800335c:	0800c8c8 	.word	0x0800c8c8
 8003360:	080030ad 	.word	0x080030ad
 8003364:	20000798 	.word	0x20000798
 8003368:	0800c8ec 	.word	0x0800c8ec
 800336c:	080030f5 	.word	0x080030f5
 8003370:	2000079c 	.word	0x2000079c

08003374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003378:	480d      	ldr	r0, [pc, #52]	; (80033b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800337a:	490e      	ldr	r1, [pc, #56]	; (80033b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800337c:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003380:	e002      	b.n	8003388 <LoopCopyDataInit>

08003382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003386:	3304      	adds	r3, #4

08003388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800338a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800338c:	d3f9      	bcc.n	8003382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800338e:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003390:	4c0b      	ldr	r4, [pc, #44]	; (80033c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003394:	e001      	b.n	800339a <LoopFillZerobss>

08003396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003398:	3204      	adds	r2, #4

0800339a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800339a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800339c:	d3fb      	bcc.n	8003396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800339e:	f7ff fe73 	bl	8003088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033a2:	f007 fa71 	bl	800a888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033a6:	f7ff f9a3 	bl	80026f0 <main>
  bx  lr    
 80033aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033b4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80033b8:	0800c9b0 	.word	0x0800c9b0
  ldr r2, =_sbss
 80033bc:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80033c0:	200051c4 	.word	0x200051c4

080033c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033c4:	e7fe      	b.n	80033c4 <ADC_IRQHandler>
	...

080033c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <HAL_Init+0x40>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <HAL_Init+0x40>)
 80033d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_Init+0x40>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_Init+0x40>)
 80033de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_Init+0x40>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a07      	ldr	r2, [pc, #28]	; (8003408 <HAL_Init+0x40>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f000 f8fc 	bl	80035ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7ff fd6c 	bl	8002ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033fc:	f7ff fc16 	bl	8002c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00

0800340c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_IncTick+0x20>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_IncTick+0x24>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4413      	add	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_IncTick+0x24>)
 800341e:	6013      	str	r3, [r2, #0]
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000040 	.word	0x20000040
 8003430:	200007a0 	.word	0x200007a0

08003434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return uwTick;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_GetTick+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	200007a0 	.word	0x200007a0

0800344c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7ff ffee 	bl	8003434 <HAL_GetTick>
 8003458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d005      	beq.n	8003472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_Delay+0x44>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003472:	bf00      	nop
 8003474:	f7ff ffde 	bl	8003434 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d8f7      	bhi.n	8003474 <HAL_Delay+0x28>
  {
  }
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000040 	.word	0x20000040

08003494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c6:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_GetPriorityGrouping+0x18>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 0307 	and.w	r3, r3, #7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db0b      	blt.n	8003522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4907      	ldr	r1, [pc, #28]	; (8003530 <__NVIC_EnableIRQ+0x38>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2001      	movs	r0, #1
 800351a:	fa00 f202 	lsl.w	r2, r0, r2
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	; (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	; (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
         );
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ff4c 	bl	8003494 <__NVIC_SetPriorityGrouping>
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003616:	f7ff ff61 	bl	80034dc <__NVIC_GetPriorityGrouping>
 800361a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f7ff ffb1 	bl	8003588 <NVIC_EncodePriority>
 8003626:	4602      	mov	r2, r0
 8003628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ff80 	bl	8003534 <__NVIC_SetPriority>
}
 8003634:	bf00      	nop
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff ff54 	bl	80034f8 <__NVIC_EnableIRQ>
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003664:	f7ff fee6 	bl	8003434 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e099      	b.n	80037a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003694:	e00f      	b.n	80036b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003696:	f7ff fecd 	bl	8003434 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d908      	bls.n	80036b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2203      	movs	r2, #3
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e078      	b.n	80037a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e8      	bne.n	8003696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <HAL_DMA_Init+0x158>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2b04      	cmp	r3, #4
 800370e:	d107      	bne.n	8003720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4313      	orrs	r3, r2
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0307 	bic.w	r3, r3, #7
 8003736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b04      	cmp	r3, #4
 8003748:	d117      	bne.n	800377a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa91 	bl	8003c84 <DMA_CheckFifoParam>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2240      	movs	r2, #64	; 0x40
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003776:	2301      	movs	r3, #1
 8003778:	e016      	b.n	80037a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa48 	bl	8003c18 <DMA_CalcBaseAndBitshift>
 8003788:	4603      	mov	r3, r0
 800378a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	223f      	movs	r2, #63	; 0x3f
 8003792:	409a      	lsls	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	f010803f 	.word	0xf010803f

080037b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_DMA_Start_IT+0x26>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e040      	b.n	800385c <HAL_DMA_Start_IT+0xa8>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d12f      	bne.n	800384e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f9da 	bl	8003bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	223f      	movs	r2, #63	; 0x3f
 800380e:	409a      	lsls	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0216 	orr.w	r2, r2, #22
 8003822:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0208 	orr.w	r2, r2, #8
 800383a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e005      	b.n	800385a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800385a:	7dfb      	ldrb	r3, [r7, #23]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d004      	beq.n	8003882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e00c      	b.n	800389c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2205      	movs	r2, #5
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038b4:	4b8e      	ldr	r3, [pc, #568]	; (8003af0 <HAL_DMA_IRQHandler+0x248>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a8e      	ldr	r2, [pc, #568]	; (8003af4 <HAL_DMA_IRQHandler+0x24c>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	2208      	movs	r2, #8
 80038d4:	409a      	lsls	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01a      	beq.n	8003914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0204 	bic.w	r2, r2, #4
 80038fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	2208      	movs	r2, #8
 8003902:	409a      	lsls	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	2201      	movs	r2, #1
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d012      	beq.n	800394a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	2201      	movs	r2, #1
 8003938:	409a      	lsls	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	2204      	movs	r2, #4
 8003950:	409a      	lsls	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d012      	beq.n	8003980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	2204      	movs	r2, #4
 800396e:	409a      	lsls	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	f043 0204 	orr.w	r2, r3, #4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	2210      	movs	r2, #16
 8003986:	409a      	lsls	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d043      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d03c      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	2210      	movs	r2, #16
 80039a4:	409a      	lsls	r2, r3
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d018      	beq.n	80039ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d024      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
 80039d6:	e01f      	b.n	8003a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01b      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
 80039e8:	e016      	b.n	8003a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0208 	bic.w	r2, r2, #8
 8003a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 808f 	beq.w	8003b48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8087 	beq.w	8003b48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	2220      	movs	r2, #32
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d136      	bne.n	8003ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0216 	bic.w	r2, r2, #22
 8003a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x1da>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0208 	bic.w	r2, r2, #8
 8003a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	223f      	movs	r2, #63	; 0x3f
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d07e      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
        }
        return;
 8003abe:	e079      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01d      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d031      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
 8003aec:	e02c      	b.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
 8003aee:	bf00      	nop
 8003af0:	20000038 	.word	0x20000038
 8003af4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d023      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
 8003b08:	e01e      	b.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10f      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0210 	bic.w	r2, r2, #16
 8003b26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d032      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d022      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2205      	movs	r2, #5
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d307      	bcc.n	8003b90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f2      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x2cc>
 8003b8e:	e000      	b.n	8003b92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
 8003bb2:	e000      	b.n	8003bb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bb4:	bf00      	nop
    }
  }
}
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d108      	bne.n	8003bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bfa:	e007      	b.n	8003c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	60da      	str	r2, [r3, #12]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	3b10      	subs	r3, #16
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <DMA_CalcBaseAndBitshift+0x64>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c32:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <DMA_CalcBaseAndBitshift+0x68>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d909      	bls.n	8003c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58
 8003c58:	e007      	b.n	8003c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	aaaaaaab 	.word	0xaaaaaaab
 8003c80:	0800c910 	.word	0x0800c910

08003c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11f      	bne.n	8003cde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d856      	bhi.n	8003d52 <DMA_CheckFifoParam+0xce>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <DMA_CheckFifoParam+0x28>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003ccf 	.word	0x08003ccf
 8003cb4:	08003cbd 	.word	0x08003cbd
 8003cb8:	08003d53 	.word	0x08003d53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d046      	beq.n	8003d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ccc:	e043      	b.n	8003d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cd6:	d140      	bne.n	8003d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cdc:	e03d      	b.n	8003d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce6:	d121      	bne.n	8003d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d837      	bhi.n	8003d5e <DMA_CheckFifoParam+0xda>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <DMA_CheckFifoParam+0x70>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d0b 	.word	0x08003d0b
 8003cfc:	08003d05 	.word	0x08003d05
 8003d00:	08003d1d 	.word	0x08003d1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      break;
 8003d08:	e030      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d025      	beq.n	8003d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d1a:	e022      	b.n	8003d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d24:	d11f      	bne.n	8003d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d2a:	e01c      	b.n	8003d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d903      	bls.n	8003d3a <DMA_CheckFifoParam+0xb6>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d003      	beq.n	8003d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d38:	e018      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3e:	e015      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00e      	beq.n	8003d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d50:	e00b      	b.n	8003d6a <DMA_CheckFifoParam+0xe6>
      break;
 8003d52:	bf00      	nop
 8003d54:	e00a      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
      break;
 8003d56:	bf00      	nop
 8003d58:	e008      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e006      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e004      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
      break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
      break;
 8003d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop

08003d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	; 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e159      	b.n	800404c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	f040 8148 	bne.w	8004046 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d005      	beq.n	8003dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d130      	bne.n	8003e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	2203      	movs	r2, #3
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e04:	2201      	movs	r2, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 0201 	and.w	r2, r3, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d017      	beq.n	8003e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2203      	movs	r2, #3
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d123      	bne.n	8003ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	08da      	lsrs	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3208      	adds	r2, #8
 8003e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	220f      	movs	r2, #15
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	08da      	lsrs	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3208      	adds	r2, #8
 8003eba:	69b9      	ldr	r1, [r7, #24]
 8003ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0203 	and.w	r2, r3, #3
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80a2 	beq.w	8004046 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4b57      	ldr	r3, [pc, #348]	; (8004064 <HAL_GPIO_Init+0x2e8>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	4a56      	ldr	r2, [pc, #344]	; (8004064 <HAL_GPIO_Init+0x2e8>)
 8003f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f10:	6453      	str	r3, [r2, #68]	; 0x44
 8003f12:	4b54      	ldr	r3, [pc, #336]	; (8004064 <HAL_GPIO_Init+0x2e8>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f1e:	4a52      	ldr	r2, [pc, #328]	; (8004068 <HAL_GPIO_Init+0x2ec>)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	3302      	adds	r3, #2
 8003f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	220f      	movs	r2, #15
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a49      	ldr	r2, [pc, #292]	; (800406c <HAL_GPIO_Init+0x2f0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d019      	beq.n	8003f7e <HAL_GPIO_Init+0x202>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a48      	ldr	r2, [pc, #288]	; (8004070 <HAL_GPIO_Init+0x2f4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_GPIO_Init+0x1fe>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a47      	ldr	r2, [pc, #284]	; (8004074 <HAL_GPIO_Init+0x2f8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00d      	beq.n	8003f76 <HAL_GPIO_Init+0x1fa>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a46      	ldr	r2, [pc, #280]	; (8004078 <HAL_GPIO_Init+0x2fc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <HAL_GPIO_Init+0x1f6>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a45      	ldr	r2, [pc, #276]	; (800407c <HAL_GPIO_Init+0x300>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_GPIO_Init+0x1f2>
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	e008      	b.n	8003f80 <HAL_GPIO_Init+0x204>
 8003f6e:	2307      	movs	r3, #7
 8003f70:	e006      	b.n	8003f80 <HAL_GPIO_Init+0x204>
 8003f72:	2303      	movs	r3, #3
 8003f74:	e004      	b.n	8003f80 <HAL_GPIO_Init+0x204>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e002      	b.n	8003f80 <HAL_GPIO_Init+0x204>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_GPIO_Init+0x204>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	f002 0203 	and.w	r2, r2, #3
 8003f86:	0092      	lsls	r2, r2, #2
 8003f88:	4093      	lsls	r3, r2
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f90:	4935      	ldr	r1, [pc, #212]	; (8004068 <HAL_GPIO_Init+0x2ec>)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	3302      	adds	r3, #2
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f9e:	4b38      	ldr	r3, [pc, #224]	; (8004080 <HAL_GPIO_Init+0x304>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fc2:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <HAL_GPIO_Init+0x304>)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_GPIO_Init+0x304>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fec:	4a24      	ldr	r2, [pc, #144]	; (8004080 <HAL_GPIO_Init+0x304>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ff2:	4b23      	ldr	r3, [pc, #140]	; (8004080 <HAL_GPIO_Init+0x304>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004016:	4a1a      	ldr	r2, [pc, #104]	; (8004080 <HAL_GPIO_Init+0x304>)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800401c:	4b18      	ldr	r3, [pc, #96]	; (8004080 <HAL_GPIO_Init+0x304>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004040:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <HAL_GPIO_Init+0x304>)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3301      	adds	r3, #1
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b0f      	cmp	r3, #15
 8004050:	f67f aea2 	bls.w	8003d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3724      	adds	r7, #36	; 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	40013800 	.word	0x40013800
 800406c:	40020000 	.word	0x40020000
 8004070:	40020400 	.word	0x40020400
 8004074:	40020800 	.word	0x40020800
 8004078:	40020c00 	.word	0x40020c00
 800407c:	40021000 	.word	0x40021000
 8004080:	40013c00 	.word	0x40013c00

08004084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	807b      	strh	r3, [r7, #2]
 8004090:	4613      	mov	r3, r2
 8004092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004094:	787b      	ldrb	r3, [r7, #1]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040a0:	e003      	b.n	80040aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040a2:	887b      	ldrh	r3, [r7, #2]
 80040a4:	041a      	lsls	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	619a      	str	r2, [r3, #24]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d006      	beq.n	80040dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ce:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe fd50 	bl	8002b7c <HAL_GPIO_EXTI_Callback>
  }
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40013c00 	.word	0x40013c00

080040e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e12b      	b.n	8004352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe fdb8 	bl	8002c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800414a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800414c:	f002 f95e 	bl	800640c <HAL_RCC_GetPCLK1Freq>
 8004150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a81      	ldr	r2, [pc, #516]	; (800435c <HAL_I2C_Init+0x274>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d807      	bhi.n	800416c <HAL_I2C_Init+0x84>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a80      	ldr	r2, [pc, #512]	; (8004360 <HAL_I2C_Init+0x278>)
 8004160:	4293      	cmp	r3, r2
 8004162:	bf94      	ite	ls
 8004164:	2301      	movls	r3, #1
 8004166:	2300      	movhi	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e006      	b.n	800417a <HAL_I2C_Init+0x92>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a7d      	ldr	r2, [pc, #500]	; (8004364 <HAL_I2C_Init+0x27c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	bf94      	ite	ls
 8004174:	2301      	movls	r3, #1
 8004176:	2300      	movhi	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e0e7      	b.n	8004352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a78      	ldr	r2, [pc, #480]	; (8004368 <HAL_I2C_Init+0x280>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0c9b      	lsrs	r3, r3, #18
 800418c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a6a      	ldr	r2, [pc, #424]	; (800435c <HAL_I2C_Init+0x274>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d802      	bhi.n	80041bc <HAL_I2C_Init+0xd4>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3301      	adds	r3, #1
 80041ba:	e009      	b.n	80041d0 <HAL_I2C_Init+0xe8>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	4a69      	ldr	r2, [pc, #420]	; (800436c <HAL_I2C_Init+0x284>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	3301      	adds	r3, #1
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	495c      	ldr	r1, [pc, #368]	; (800435c <HAL_I2C_Init+0x274>)
 80041ec:	428b      	cmp	r3, r1
 80041ee:	d819      	bhi.n	8004224 <HAL_I2C_Init+0x13c>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e59      	subs	r1, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004204:	400b      	ands	r3, r1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_I2C_Init+0x138>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e59      	subs	r1, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fbb1 f3f3 	udiv	r3, r1, r3
 8004218:	3301      	adds	r3, #1
 800421a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421e:	e051      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 8004220:	2304      	movs	r3, #4
 8004222:	e04f      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d111      	bne.n	8004250 <HAL_I2C_Init+0x168>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e58      	subs	r0, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	440b      	add	r3, r1
 800423a:	fbb0 f3f3 	udiv	r3, r0, r3
 800423e:	3301      	adds	r3, #1
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf0c      	ite	eq
 8004248:	2301      	moveq	r3, #1
 800424a:	2300      	movne	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e012      	b.n	8004276 <HAL_I2C_Init+0x18e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	0099      	lsls	r1, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	fbb0 f3f3 	udiv	r3, r0, r3
 8004266:	3301      	adds	r3, #1
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Init+0x196>
 800427a:	2301      	movs	r3, #1
 800427c:	e022      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <HAL_I2C_Init+0x1bc>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1e58      	subs	r0, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	440b      	add	r3, r1
 8004294:	fbb0 f3f3 	udiv	r3, r0, r3
 8004298:	3301      	adds	r3, #1
 800429a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a2:	e00f      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	6809      	ldr	r1, [r1, #0]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6911      	ldr	r1, [r2, #16]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	000186a0 	.word	0x000186a0
 8004360:	001e847f 	.word	0x001e847f
 8004364:	003d08ff 	.word	0x003d08ff
 8004368:	431bde83 	.word	0x431bde83
 800436c:	10624dd3 	.word	0x10624dd3

08004370 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	460b      	mov	r3, r1
 800437e:	817b      	strh	r3, [r7, #10]
 8004380:	4613      	mov	r3, r2
 8004382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7ff f856 	bl	8003434 <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 80e0 	bne.w	8004558 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2319      	movs	r3, #25
 800439e:	2201      	movs	r2, #1
 80043a0:	4970      	ldr	r1, [pc, #448]	; (8004564 <HAL_I2C_Master_Transmit+0x1f4>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f001 fa24 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
 80043b0:	e0d3      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_I2C_Master_Transmit+0x50>
 80043bc:	2302      	movs	r3, #2
 80043be:	e0cc      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d007      	beq.n	80043e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2221      	movs	r2, #33	; 0x21
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2210      	movs	r2, #16
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	893a      	ldrh	r2, [r7, #8]
 8004416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a50      	ldr	r2, [pc, #320]	; (8004568 <HAL_I2C_Master_Transmit+0x1f8>)
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004428:	8979      	ldrh	r1, [r7, #10]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 ff10 	bl	8005254 <I2C_MasterRequestWrite>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e08d      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004454:	e066      	b.n	8004524 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f001 fa9e 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b04      	cmp	r3, #4
 800446c:	d107      	bne.n	800447e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06b      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d11b      	bne.n	80044f8 <HAL_I2C_Master_Transmit+0x188>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d017      	beq.n	80044f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	6a39      	ldr	r1, [r7, #32]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f001 fa8e 	bl	8005a1e <I2C_WaitOnBTFFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2b04      	cmp	r3, #4
 800450e:	d107      	bne.n	8004520 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e01a      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d194      	bne.n	8004456 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	00100002 	.word	0x00100002
 8004568:	ffff0000 	.word	0xffff0000

0800456c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	; 0x30
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	461a      	mov	r2, r3
 8004578:	460b      	mov	r3, r1
 800457a:	817b      	strh	r3, [r7, #10]
 800457c:	4613      	mov	r3, r2
 800457e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004580:	f7fe ff58 	bl	8003434 <HAL_GetTick>
 8004584:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b20      	cmp	r3, #32
 8004590:	f040 820b 	bne.w	80049aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2319      	movs	r3, #25
 800459a:	2201      	movs	r2, #1
 800459c:	497c      	ldr	r1, [pc, #496]	; (8004790 <HAL_I2C_Master_Receive+0x224>)
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f001 f926 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
 80045ac:	e1fe      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_I2C_Master_Receive+0x50>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e1f7      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d007      	beq.n	80045e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2222      	movs	r2, #34	; 0x22
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2210      	movs	r2, #16
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	893a      	ldrh	r2, [r7, #8]
 8004612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a5c      	ldr	r2, [pc, #368]	; (8004794 <HAL_I2C_Master_Receive+0x228>)
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004624:	8979      	ldrh	r1, [r7, #10]
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fe94 	bl	8005358 <I2C_MasterRequestRead>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e1b8      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d113      	bne.n	800466a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004642:	2300      	movs	r3, #0
 8004644:	623b      	str	r3, [r7, #32]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	623b      	str	r3, [r7, #32]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e18c      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	2b01      	cmp	r3, #1
 8004670:	d11b      	bne.n	80046aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004680:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e16c      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d11b      	bne.n	80046ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	e14c      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004710:	e138      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004716:	2b03      	cmp	r3, #3
 8004718:	f200 80f1 	bhi.w	80048fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	2b01      	cmp	r3, #1
 8004722:	d123      	bne.n	800476c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f001 f9b9 	bl	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e139      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a
 800476a:	e10b      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	2b02      	cmp	r3, #2
 8004772:	d14e      	bne.n	8004812 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	2200      	movs	r2, #0
 800477c:	4906      	ldr	r1, [pc, #24]	; (8004798 <HAL_I2C_Master_Receive+0x22c>)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f001 f836 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e10e      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
 800478e:	bf00      	nop
 8004790:	00100002 	.word	0x00100002
 8004794:	ffff0000 	.word	0xffff0000
 8004798:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004810:	e0b8      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2200      	movs	r2, #0
 800481a:	4966      	ldr	r1, [pc, #408]	; (80049b4 <HAL_I2C_Master_Receive+0x448>)
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 ffe7 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0bf      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	2200      	movs	r2, #0
 8004876:	494f      	ldr	r1, [pc, #316]	; (80049b4 <HAL_I2C_Master_Receive+0x448>)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 ffb9 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e091      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048fc:	e042      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f001 f8cc 	bl	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e04c      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b04      	cmp	r3, #4
 8004950:	d118      	bne.n	8004984 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f aec2 	bne.w	8004712 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e000      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
  }
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3728      	adds	r7, #40	; 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	00010004 	.word	0x00010004

080049b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	817b      	strh	r3, [r7, #10]
 80049ca:	460b      	mov	r3, r1
 80049cc:	813b      	strh	r3, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d2:	f7fe fd2f 	bl	8003434 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	f040 80d9 	bne.w	8004b98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	2319      	movs	r3, #25
 80049ec:	2201      	movs	r2, #1
 80049ee:	496d      	ldr	r1, [pc, #436]	; (8004ba4 <HAL_I2C_Mem_Write+0x1ec>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fefd 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
 80049fe:	e0cc      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_I2C_Mem_Write+0x56>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e0c5      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d007      	beq.n	8004a34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2221      	movs	r2, #33	; 0x21
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2240      	movs	r2, #64	; 0x40
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a4d      	ldr	r2, [pc, #308]	; (8004ba8 <HAL_I2C_Mem_Write+0x1f0>)
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a76:	88f8      	ldrh	r0, [r7, #6]
 8004a78:	893a      	ldrh	r2, [r7, #8]
 8004a7a:	8979      	ldrh	r1, [r7, #10]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	4603      	mov	r3, r0
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fd34 	bl	80054f4 <I2C_RequestMemoryWrite>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d052      	beq.n	8004b38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e081      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 ff7e 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d107      	bne.n	8004abe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06b      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d11b      	bne.n	8004b38 <HAL_I2C_Mem_Write+0x180>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d017      	beq.n	8004b38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1aa      	bne.n	8004a96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 ff6a 	bl	8005a1e <I2C_WaitOnBTFFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d107      	bne.n	8004b68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e016      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e000      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b98:	2302      	movs	r3, #2
  }
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	00100002 	.word	0x00100002
 8004ba8:	ffff0000 	.word	0xffff0000

08004bac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	; 0x30
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	817b      	strh	r3, [r7, #10]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	813b      	strh	r3, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bc6:	f7fe fc35 	bl	8003434 <HAL_GetTick>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	f040 8208 	bne.w	8004fea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	2319      	movs	r3, #25
 8004be0:	2201      	movs	r2, #1
 8004be2:	497b      	ldr	r1, [pc, #492]	; (8004dd0 <HAL_I2C_Mem_Read+0x224>)
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fe03 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e1fb      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_I2C_Mem_Read+0x56>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e1f4      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d007      	beq.n	8004c28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2222      	movs	r2, #34	; 0x22
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a5b      	ldr	r2, [pc, #364]	; (8004dd4 <HAL_I2C_Mem_Read+0x228>)
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c6a:	88f8      	ldrh	r0, [r7, #6]
 8004c6c:	893a      	ldrh	r2, [r7, #8]
 8004c6e:	8979      	ldrh	r1, [r7, #10]
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4603      	mov	r3, r0
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fcd0 	bl	8005620 <I2C_RequestMemoryRead>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e1b0      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d113      	bne.n	8004cba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e184      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d11b      	bne.n	8004cfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	e164      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d11b      	bne.n	8004d3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	e144      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d50:	e138      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	f200 80f1 	bhi.w	8004f3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d123      	bne.n	8004dac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fe99 	bl	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e139      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004daa:	e10b      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d14e      	bne.n	8004e52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	2200      	movs	r2, #0
 8004dbc:	4906      	ldr	r1, [pc, #24]	; (8004dd8 <HAL_I2C_Mem_Read+0x22c>)
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fd16 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e10e      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
 8004dce:	bf00      	nop
 8004dd0:	00100002 	.word	0x00100002
 8004dd4:	ffff0000 	.word	0xffff0000
 8004dd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e50:	e0b8      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4966      	ldr	r1, [pc, #408]	; (8004ff4 <HAL_I2C_Mem_Read+0x448>)
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fcc7 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0bf      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	494f      	ldr	r1, [pc, #316]	; (8004ff4 <HAL_I2C_Mem_Read+0x448>)
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fc99 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e091      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f3c:	e042      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fdac 	bl	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e04c      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d118      	bne.n	8004fc4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f47f aec2 	bne.w	8004d52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e000      	b.n	8004fec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3728      	adds	r7, #40	; 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	00010004 	.word	0x00010004

08004ff8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	460b      	mov	r3, r1
 8005006:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005008:	f7fe fa14 	bl	8003434 <HAL_GetTick>
 800500c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b20      	cmp	r3, #32
 800501c:	f040 8111 	bne.w	8005242 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2319      	movs	r3, #25
 8005026:	2201      	movs	r2, #1
 8005028:	4988      	ldr	r1, [pc, #544]	; (800524c <HAL_I2C_IsDeviceReady+0x254>)
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fbe0 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
 8005038:	e104      	b.n	8005244 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_I2C_IsDeviceReady+0x50>
 8005044:	2302      	movs	r3, #2
 8005046:	e0fd      	b.n	8005244 <HAL_I2C_IsDeviceReady+0x24c>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b01      	cmp	r3, #1
 800505c:	d007      	beq.n	800506e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0201 	orr.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800507c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2224      	movs	r2, #36	; 0x24
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a70      	ldr	r2, [pc, #448]	; (8005250 <HAL_I2C_IsDeviceReady+0x258>)
 8005090:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fb9e 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00d      	beq.n	80050d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c8:	d103      	bne.n	80050d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e0b6      	b.n	8005244 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050d6:	897b      	ldrh	r3, [r7, #10]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80050e6:	f7fe f9a5 	bl	8003434 <HAL_GetTick>
 80050ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800511a:	e025      	b.n	8005168 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800511c:	f7fe f98a 	bl	8003434 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d302      	bcc.n	8005132 <HAL_I2C_IsDeviceReady+0x13a>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	22a0      	movs	r2, #160	; 0xa0
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b02      	cmp	r3, #2
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2ba0      	cmp	r3, #160	; 0xa0
 8005172:	d005      	beq.n	8005180 <HAL_I2C_IsDeviceReady+0x188>
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <HAL_I2C_IsDeviceReady+0x188>
 800517a:	7dbb      	ldrb	r3, [r7, #22]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0cd      	beq.n	800511c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d129      	bne.n	80051ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	2319      	movs	r3, #25
 80051c2:	2201      	movs	r2, #1
 80051c4:	4921      	ldr	r1, [pc, #132]	; (800524c <HAL_I2C_IsDeviceReady+0x254>)
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fb12 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e036      	b.n	8005244 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e02c      	b.n	8005244 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005202:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	2319      	movs	r3, #25
 800520a:	2201      	movs	r2, #1
 800520c:	490f      	ldr	r1, [pc, #60]	; (800524c <HAL_I2C_IsDeviceReady+0x254>)
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 faee 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e012      	b.n	8005244 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	3301      	adds	r3, #1
 8005222:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	429a      	cmp	r2, r3
 800522a:	f4ff af32 	bcc.w	8005092 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	00100002 	.word	0x00100002
 8005250:	ffff0000 	.word	0xffff0000

08005254 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	460b      	mov	r3, r1
 8005262:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d006      	beq.n	800527e <I2C_MasterRequestWrite+0x2a>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d003      	beq.n	800527e <I2C_MasterRequestWrite+0x2a>
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800527c:	d108      	bne.n	8005290 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e00b      	b.n	80052a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	2b12      	cmp	r3, #18
 8005296:	d107      	bne.n	80052a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fa9b 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00d      	beq.n	80052dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ce:	d103      	bne.n	80052d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e035      	b.n	8005348 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052e4:	d108      	bne.n	80052f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052e6:	897b      	ldrh	r3, [r7, #10]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052f4:	611a      	str	r2, [r3, #16]
 80052f6:	e01b      	b.n	8005330 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052f8:	897b      	ldrh	r3, [r7, #10]
 80052fa:	11db      	asrs	r3, r3, #7
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f003 0306 	and.w	r3, r3, #6
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f063 030f 	orn	r3, r3, #15
 8005308:	b2da      	uxtb	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <I2C_MasterRequestWrite+0xfc>)
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fac1 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e010      	b.n	8005348 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	4907      	ldr	r1, [pc, #28]	; (8005354 <I2C_MasterRequestWrite+0x100>)
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 fab1 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	00010008 	.word	0x00010008
 8005354:	00010002 	.word	0x00010002

08005358 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	460b      	mov	r3, r1
 8005366:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800537c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b08      	cmp	r3, #8
 8005382:	d006      	beq.n	8005392 <I2C_MasterRequestRead+0x3a>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d003      	beq.n	8005392 <I2C_MasterRequestRead+0x3a>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005390:	d108      	bne.n	80053a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e00b      	b.n	80053bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	2b11      	cmp	r3, #17
 80053aa:	d107      	bne.n	80053bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fa11 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e2:	d103      	bne.n	80053ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e079      	b.n	80054e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f8:	d108      	bne.n	800540c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053fa:	897b      	ldrh	r3, [r7, #10]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	b2da      	uxtb	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	611a      	str	r2, [r3, #16]
 800540a:	e05f      	b.n	80054cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800540c:	897b      	ldrh	r3, [r7, #10]
 800540e:	11db      	asrs	r3, r3, #7
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 0306 	and.w	r3, r3, #6
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f063 030f 	orn	r3, r3, #15
 800541c:	b2da      	uxtb	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4930      	ldr	r1, [pc, #192]	; (80054ec <I2C_MasterRequestRead+0x194>)
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fa37 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e054      	b.n	80054e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800543a:	897b      	ldrh	r3, [r7, #10]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4929      	ldr	r1, [pc, #164]	; (80054f0 <I2C_MasterRequestRead+0x198>)
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fa27 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e044      	b.n	80054e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f9af 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00d      	beq.n	80054b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a6:	d103      	bne.n	80054b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e017      	b.n	80054e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80054b4:	897b      	ldrh	r3, [r7, #10]
 80054b6:	11db      	asrs	r3, r3, #7
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f003 0306 	and.w	r3, r3, #6
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f063 030e 	orn	r3, r3, #14
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4907      	ldr	r1, [pc, #28]	; (80054f0 <I2C_MasterRequestRead+0x198>)
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f9e3 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	00010008 	.word	0x00010008
 80054f0:	00010002 	.word	0x00010002

080054f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	461a      	mov	r2, r3
 8005502:	4603      	mov	r3, r0
 8005504:	817b      	strh	r3, [r7, #10]
 8005506:	460b      	mov	r3, r1
 8005508:	813b      	strh	r3, [r7, #8]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800551c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2200      	movs	r2, #0
 8005526:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f960 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005544:	d103      	bne.n	800554e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e05f      	b.n	8005612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005552:	897b      	ldrh	r3, [r7, #10]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	6a3a      	ldr	r2, [r7, #32]
 8005566:	492d      	ldr	r1, [pc, #180]	; (800561c <I2C_RequestMemoryWrite+0x128>)
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f998 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e04c      	b.n	8005612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fa02 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00d      	beq.n	80055ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d107      	bne.n	80055b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e02b      	b.n	8005612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d105      	bne.n	80055cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055c0:	893b      	ldrh	r3, [r7, #8]
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	611a      	str	r2, [r3, #16]
 80055ca:	e021      	b.n	8005610 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055cc:	893b      	ldrh	r3, [r7, #8]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055dc:	6a39      	ldr	r1, [r7, #32]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f9dc 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d107      	bne.n	8005602 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e005      	b.n	8005612 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005606:	893b      	ldrh	r3, [r7, #8]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	00010002 	.word	0x00010002

08005620 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af02      	add	r7, sp, #8
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	4608      	mov	r0, r1
 800562a:	4611      	mov	r1, r2
 800562c:	461a      	mov	r2, r3
 800562e:	4603      	mov	r3, r0
 8005630:	817b      	strh	r3, [r7, #10]
 8005632:	460b      	mov	r3, r1
 8005634:	813b      	strh	r3, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005648:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	2200      	movs	r2, #0
 8005662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f8c2 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00d      	beq.n	800568e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d103      	bne.n	800568a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e0aa      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800568e:	897b      	ldrh	r3, [r7, #10]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800569c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	6a3a      	ldr	r2, [r7, #32]
 80056a2:	4952      	ldr	r1, [pc, #328]	; (80057ec <I2C_RequestMemoryRead+0x1cc>)
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f8fa 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e097      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056cc:	6a39      	ldr	r1, [r7, #32]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f964 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d107      	bne.n	80056f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e076      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d105      	bne.n	8005708 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056fc:	893b      	ldrh	r3, [r7, #8]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	611a      	str	r2, [r3, #16]
 8005706:	e021      	b.n	800574c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005708:	893b      	ldrh	r3, [r7, #8]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	b29b      	uxth	r3, r3
 800570e:	b2da      	uxtb	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005718:	6a39      	ldr	r1, [r7, #32]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f93e 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2b04      	cmp	r3, #4
 800572c:	d107      	bne.n	800573e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800573c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e050      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005742:	893b      	ldrh	r3, [r7, #8]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574e:	6a39      	ldr	r1, [r7, #32]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f923 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	2b04      	cmp	r3, #4
 8005762:	d107      	bne.n	8005774 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005772:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e035      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005786:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	2200      	movs	r2, #0
 8005790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f82b 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ae:	d103      	bne.n	80057b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e013      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057bc:	897b      	ldrh	r3, [r7, #10]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	4906      	ldr	r1, [pc, #24]	; (80057ec <I2C_RequestMemoryRead+0x1cc>)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f863 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	00010002 	.word	0x00010002

080057f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005800:	e025      	b.n	800584e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d021      	beq.n	800584e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580a:	f7fd fe13 	bl	8003434 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d116      	bne.n	800584e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e023      	b.n	8005896 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d10d      	bne.n	8005874 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	43da      	mvns	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	e00c      	b.n	800588e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	43da      	mvns	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	bf0c      	ite	eq
 8005886:	2301      	moveq	r3, #1
 8005888:	2300      	movne	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	429a      	cmp	r2, r3
 8005892:	d0b6      	beq.n	8005802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
 80058aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058ac:	e051      	b.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d123      	bne.n	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f043 0204 	orr.w	r2, r3, #4
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e046      	b.n	8005994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d021      	beq.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590e:	f7fd fd91 	bl	8003434 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d116      	bne.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f043 0220 	orr.w	r2, r3, #32
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e020      	b.n	8005994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d10c      	bne.n	8005976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	43da      	mvns	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	bf14      	ite	ne
 800596e:	2301      	movne	r3, #1
 8005970:	2300      	moveq	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	e00b      	b.n	800598e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	43da      	mvns	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4013      	ands	r3, r2
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	bf14      	ite	ne
 8005988:	2301      	movne	r3, #1
 800598a:	2300      	moveq	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d18d      	bne.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059a8:	e02d      	b.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f8ce 	bl	8005b4c <I2C_IsAcknowledgeFailed>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e02d      	b.n	8005a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d021      	beq.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c2:	f7fd fd37 	bl	8003434 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d302      	bcc.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d116      	bne.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e007      	b.n	8005a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a10:	2b80      	cmp	r3, #128	; 0x80
 8005a12:	d1ca      	bne.n	80059aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a2a:	e02d      	b.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f88d 	bl	8005b4c <I2C_IsAcknowledgeFailed>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e02d      	b.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d021      	beq.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a44:	f7fd fcf6 	bl	8003434 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d302      	bcc.n	8005a5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d116      	bne.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e007      	b.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d1ca      	bne.n	8005a2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aac:	e042      	b.n	8005b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d119      	bne.n	8005af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0210 	mvn.w	r2, #16
 8005ac4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e029      	b.n	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af0:	f7fd fca0 	bl	8003434 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d302      	bcc.n	8005b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d116      	bne.n	8005b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e007      	b.n	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d1b5      	bne.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b62:	d11b      	bne.n	8005b9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f043 0204 	orr.w	r2, r3, #4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e267      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d075      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bca:	4b88      	ldr	r3, [pc, #544]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bd6:	4b85      	ldr	r3, [pc, #532]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d112      	bne.n	8005c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005be2:	4b82      	ldr	r3, [pc, #520]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bee:	d10b      	bne.n	8005c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf0:	4b7e      	ldr	r3, [pc, #504]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d05b      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x108>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d157      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e242      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d106      	bne.n	8005c20 <HAL_RCC_OscConfig+0x74>
 8005c12:	4b76      	ldr	r3, [pc, #472]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a75      	ldr	r2, [pc, #468]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e01d      	b.n	8005c5c <HAL_RCC_OscConfig+0xb0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCC_OscConfig+0x98>
 8005c2a:	4b70      	ldr	r3, [pc, #448]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a6f      	ldr	r2, [pc, #444]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	4b6d      	ldr	r3, [pc, #436]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a6c      	ldr	r2, [pc, #432]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e00b      	b.n	8005c5c <HAL_RCC_OscConfig+0xb0>
 8005c44:	4b69      	ldr	r3, [pc, #420]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a68      	ldr	r2, [pc, #416]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	4b66      	ldr	r3, [pc, #408]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a65      	ldr	r2, [pc, #404]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d013      	beq.n	8005c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c64:	f7fd fbe6 	bl	8003434 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c6c:	f7fd fbe2 	bl	8003434 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	; 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e207      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7e:	4b5b      	ldr	r3, [pc, #364]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0xc0>
 8005c8a:	e014      	b.n	8005cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8c:	f7fd fbd2 	bl	8003434 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c94:	f7fd fbce 	bl	8003434 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b64      	cmp	r3, #100	; 0x64
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e1f3      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca6:	4b51      	ldr	r3, [pc, #324]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <HAL_RCC_OscConfig+0xe8>
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d063      	beq.n	8005d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cc2:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cce:	4b47      	ldr	r3, [pc, #284]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d11c      	bne.n	8005d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cda:	4b44      	ldr	r3, [pc, #272]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d116      	bne.n	8005d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ce6:	4b41      	ldr	r3, [pc, #260]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d005      	beq.n	8005cfe <HAL_RCC_OscConfig+0x152>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d001      	beq.n	8005cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e1c7      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfe:	4b3b      	ldr	r3, [pc, #236]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4937      	ldr	r1, [pc, #220]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d12:	e03a      	b.n	8005d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d020      	beq.n	8005d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d1c:	4b34      	ldr	r3, [pc, #208]	; (8005df0 <HAL_RCC_OscConfig+0x244>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d22:	f7fd fb87 	bl	8003434 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d2a:	f7fd fb83 	bl	8003434 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e1a8      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d48:	4b28      	ldr	r3, [pc, #160]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	4925      	ldr	r1, [pc, #148]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	600b      	str	r3, [r1, #0]
 8005d5c:	e015      	b.n	8005d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <HAL_RCC_OscConfig+0x244>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fd fb66 	bl	8003434 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d6c:	f7fd fb62 	bl	8003434 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e187      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f0      	bne.n	8005d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d036      	beq.n	8005e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d016      	beq.n	8005dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <HAL_RCC_OscConfig+0x248>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da4:	f7fd fb46 	bl	8003434 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dac:	f7fd fb42 	bl	8003434 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e167      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0f0      	beq.n	8005dac <HAL_RCC_OscConfig+0x200>
 8005dca:	e01b      	b.n	8005e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <HAL_RCC_OscConfig+0x248>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd2:	f7fd fb2f 	bl	8003434 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dd8:	e00e      	b.n	8005df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dda:	f7fd fb2b 	bl	8003434 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d907      	bls.n	8005df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e150      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
 8005dec:	40023800 	.word	0x40023800
 8005df0:	42470000 	.word	0x42470000
 8005df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df8:	4b88      	ldr	r3, [pc, #544]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1ea      	bne.n	8005dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8097 	beq.w	8005f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e12:	2300      	movs	r3, #0
 8005e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e16:	4b81      	ldr	r3, [pc, #516]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10f      	bne.n	8005e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	4b7d      	ldr	r3, [pc, #500]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	4a7c      	ldr	r2, [pc, #496]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e30:	6413      	str	r3, [r2, #64]	; 0x40
 8005e32:	4b7a      	ldr	r3, [pc, #488]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	60bb      	str	r3, [r7, #8]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e42:	4b77      	ldr	r3, [pc, #476]	; (8006020 <HAL_RCC_OscConfig+0x474>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d118      	bne.n	8005e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e4e:	4b74      	ldr	r3, [pc, #464]	; (8006020 <HAL_RCC_OscConfig+0x474>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a73      	ldr	r2, [pc, #460]	; (8006020 <HAL_RCC_OscConfig+0x474>)
 8005e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e5a:	f7fd faeb 	bl	8003434 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e62:	f7fd fae7 	bl	8003434 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e10c      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e74:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <HAL_RCC_OscConfig+0x474>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f0      	beq.n	8005e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d106      	bne.n	8005e96 <HAL_RCC_OscConfig+0x2ea>
 8005e88:	4b64      	ldr	r3, [pc, #400]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	4a63      	ldr	r2, [pc, #396]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	6713      	str	r3, [r2, #112]	; 0x70
 8005e94:	e01c      	b.n	8005ed0 <HAL_RCC_OscConfig+0x324>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x30c>
 8005e9e:	4b5f      	ldr	r3, [pc, #380]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	4a5e      	ldr	r2, [pc, #376]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ea4:	f043 0304 	orr.w	r3, r3, #4
 8005ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eaa:	4b5c      	ldr	r3, [pc, #368]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	4a5b      	ldr	r2, [pc, #364]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb6:	e00b      	b.n	8005ed0 <HAL_RCC_OscConfig+0x324>
 8005eb8:	4b58      	ldr	r3, [pc, #352]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a57      	ldr	r2, [pc, #348]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec4:	4b55      	ldr	r3, [pc, #340]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec8:	4a54      	ldr	r2, [pc, #336]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005eca:	f023 0304 	bic.w	r3, r3, #4
 8005ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d015      	beq.n	8005f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed8:	f7fd faac 	bl	8003434 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ede:	e00a      	b.n	8005ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ee0:	f7fd faa8 	bl	8003434 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e0cb      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef6:	4b49      	ldr	r3, [pc, #292]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0ee      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x334>
 8005f02:	e014      	b.n	8005f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f04:	f7fd fa96 	bl	8003434 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0a:	e00a      	b.n	8005f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f0c:	f7fd fa92 	bl	8003434 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e0b5      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f22:	4b3e      	ldr	r3, [pc, #248]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1ee      	bne.n	8005f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d105      	bne.n	8005f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f34:	4b39      	ldr	r3, [pc, #228]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	4a38      	ldr	r2, [pc, #224]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80a1 	beq.w	800608c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f4a:	4b34      	ldr	r3, [pc, #208]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d05c      	beq.n	8006010 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d141      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f5e:	4b31      	ldr	r3, [pc, #196]	; (8006024 <HAL_RCC_OscConfig+0x478>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f64:	f7fd fa66 	bl	8003434 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f6c:	f7fd fa62 	bl	8003434 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e087      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7e:	4b27      	ldr	r3, [pc, #156]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f0      	bne.n	8005f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	019b      	lsls	r3, r3, #6
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	041b      	lsls	r3, r3, #16
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	061b      	lsls	r3, r3, #24
 8005fae:	491b      	ldr	r1, [pc, #108]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <HAL_RCC_OscConfig+0x478>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fba:	f7fd fa3b 	bl	8003434 <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fc2:	f7fd fa37 	bl	8003434 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e05c      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd4:	4b11      	ldr	r3, [pc, #68]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f0      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x416>
 8005fe0:	e054      	b.n	800608c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <HAL_RCC_OscConfig+0x478>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe8:	f7fd fa24 	bl	8003434 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fd fa20 	bl	8003434 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e045      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x444>
 800600e:	e03d      	b.n	800608c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d107      	bne.n	8006028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e038      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
 800601c:	40023800 	.word	0x40023800
 8006020:	40007000 	.word	0x40007000
 8006024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006028:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <HAL_RCC_OscConfig+0x4ec>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d028      	beq.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006040:	429a      	cmp	r2, r3
 8006042:	d121      	bne.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604e:	429a      	cmp	r2, r3
 8006050:	d11a      	bne.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006058:	4013      	ands	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800605e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006060:	4293      	cmp	r3, r2
 8006062:	d111      	bne.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	3b01      	subs	r3, #1
 8006072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006074:	429a      	cmp	r2, r3
 8006076:	d107      	bne.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40023800 	.word	0x40023800

0800609c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e0cc      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060b0:	4b68      	ldr	r3, [pc, #416]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d90c      	bls.n	80060d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060be:	4b65      	ldr	r3, [pc, #404]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c6:	4b63      	ldr	r3, [pc, #396]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0b8      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d020      	beq.n	8006126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060f0:	4b59      	ldr	r3, [pc, #356]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	4a58      	ldr	r2, [pc, #352]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006108:	4b53      	ldr	r3, [pc, #332]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4a52      	ldr	r2, [pc, #328]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006114:	4b50      	ldr	r3, [pc, #320]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	494d      	ldr	r1, [pc, #308]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	4313      	orrs	r3, r2
 8006124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d044      	beq.n	80061bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d107      	bne.n	800614a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613a:	4b47      	ldr	r3, [pc, #284]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d119      	bne.n	800617a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e07f      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d003      	beq.n	800615a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006156:	2b03      	cmp	r3, #3
 8006158:	d107      	bne.n	800616a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800615a:	4b3f      	ldr	r3, [pc, #252]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e06f      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800616a:	4b3b      	ldr	r3, [pc, #236]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e067      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800617a:	4b37      	ldr	r3, [pc, #220]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f023 0203 	bic.w	r2, r3, #3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	4934      	ldr	r1, [pc, #208]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	4313      	orrs	r3, r2
 800618a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800618c:	f7fd f952 	bl	8003434 <HAL_GetTick>
 8006190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006192:	e00a      	b.n	80061aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006194:	f7fd f94e 	bl	8003434 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e04f      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061aa:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 020c 	and.w	r2, r3, #12
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d1eb      	bne.n	8006194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061bc:	4b25      	ldr	r3, [pc, #148]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d20c      	bcs.n	80061e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4b22      	ldr	r3, [pc, #136]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d2:	4b20      	ldr	r3, [pc, #128]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d001      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e032      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d008      	beq.n	8006202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061f0:	4b19      	ldr	r3, [pc, #100]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	4916      	ldr	r1, [pc, #88]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d009      	beq.n	8006222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800620e:	4b12      	ldr	r3, [pc, #72]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	490e      	ldr	r1, [pc, #56]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006222:	f000 f821 	bl	8006268 <HAL_RCC_GetSysClockFreq>
 8006226:	4602      	mov	r2, r0
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	490a      	ldr	r1, [pc, #40]	; (800625c <HAL_RCC_ClockConfig+0x1c0>)
 8006234:	5ccb      	ldrb	r3, [r1, r3]
 8006236:	fa22 f303 	lsr.w	r3, r2, r3
 800623a:	4a09      	ldr	r2, [pc, #36]	; (8006260 <HAL_RCC_ClockConfig+0x1c4>)
 800623c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800623e:	4b09      	ldr	r3, [pc, #36]	; (8006264 <HAL_RCC_ClockConfig+0x1c8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f7fc fe46 	bl	8002ed4 <HAL_InitTick>

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40023c00 	.word	0x40023c00
 8006258:	40023800 	.word	0x40023800
 800625c:	0800c88c 	.word	0x0800c88c
 8006260:	20000038 	.word	0x20000038
 8006264:	2000003c 	.word	0x2000003c

08006268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b090      	sub	sp, #64	; 0x40
 800626e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
 8006274:	2300      	movs	r3, #0
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006278:	2300      	movs	r3, #0
 800627a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006280:	4b59      	ldr	r3, [pc, #356]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 030c 	and.w	r3, r3, #12
 8006288:	2b08      	cmp	r3, #8
 800628a:	d00d      	beq.n	80062a8 <HAL_RCC_GetSysClockFreq+0x40>
 800628c:	2b08      	cmp	r3, #8
 800628e:	f200 80a1 	bhi.w	80063d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_RCC_GetSysClockFreq+0x34>
 8006296:	2b04      	cmp	r3, #4
 8006298:	d003      	beq.n	80062a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800629a:	e09b      	b.n	80063d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800629c:	4b53      	ldr	r3, [pc, #332]	; (80063ec <HAL_RCC_GetSysClockFreq+0x184>)
 800629e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80062a0:	e09b      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062a2:	4b53      	ldr	r3, [pc, #332]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80062a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062a6:	e098      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062a8:	4b4f      	ldr	r3, [pc, #316]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062b2:	4b4d      	ldr	r3, [pc, #308]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d028      	beq.n	8006310 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062be:	4b4a      	ldr	r3, [pc, #296]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	099b      	lsrs	r3, r3, #6
 80062c4:	2200      	movs	r2, #0
 80062c6:	623b      	str	r3, [r7, #32]
 80062c8:	627a      	str	r2, [r7, #36]	; 0x24
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80062d0:	2100      	movs	r1, #0
 80062d2:	4b47      	ldr	r3, [pc, #284]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80062d4:	fb03 f201 	mul.w	r2, r3, r1
 80062d8:	2300      	movs	r3, #0
 80062da:	fb00 f303 	mul.w	r3, r0, r3
 80062de:	4413      	add	r3, r2
 80062e0:	4a43      	ldr	r2, [pc, #268]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80062e2:	fba0 1202 	umull	r1, r2, r0, r2
 80062e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062e8:	460a      	mov	r2, r1
 80062ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80062ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ee:	4413      	add	r3, r2
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f4:	2200      	movs	r2, #0
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	61fa      	str	r2, [r7, #28]
 80062fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006302:	f7fa fb5b 	bl	80009bc <__aeabi_uldivmod>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4613      	mov	r3, r2
 800630c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800630e:	e053      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006310:	4b35      	ldr	r3, [pc, #212]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	099b      	lsrs	r3, r3, #6
 8006316:	2200      	movs	r2, #0
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	617a      	str	r2, [r7, #20]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006322:	f04f 0b00 	mov.w	fp, #0
 8006326:	4652      	mov	r2, sl
 8006328:	465b      	mov	r3, fp
 800632a:	f04f 0000 	mov.w	r0, #0
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	0159      	lsls	r1, r3, #5
 8006334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006338:	0150      	lsls	r0, r2, #5
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	ebb2 080a 	subs.w	r8, r2, sl
 8006342:	eb63 090b 	sbc.w	r9, r3, fp
 8006346:	f04f 0200 	mov.w	r2, #0
 800634a:	f04f 0300 	mov.w	r3, #0
 800634e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006352:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006356:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800635a:	ebb2 0408 	subs.w	r4, r2, r8
 800635e:	eb63 0509 	sbc.w	r5, r3, r9
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	00eb      	lsls	r3, r5, #3
 800636c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006370:	00e2      	lsls	r2, r4, #3
 8006372:	4614      	mov	r4, r2
 8006374:	461d      	mov	r5, r3
 8006376:	eb14 030a 	adds.w	r3, r4, sl
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	eb45 030b 	adc.w	r3, r5, fp
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800638e:	4629      	mov	r1, r5
 8006390:	028b      	lsls	r3, r1, #10
 8006392:	4621      	mov	r1, r4
 8006394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006398:	4621      	mov	r1, r4
 800639a:	028a      	lsls	r2, r1, #10
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a2:	2200      	movs	r2, #0
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	60fa      	str	r2, [r7, #12]
 80063a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063ac:	f7fa fb06 	bl	80009bc <__aeabi_uldivmod>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4613      	mov	r3, r2
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	3301      	adds	r3, #1
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80063c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80063d2:	e002      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <HAL_RCC_GetSysClockFreq+0x184>)
 80063d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80063d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3740      	adds	r7, #64	; 0x40
 80063e0:	46bd      	mov	sp, r7
 80063e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063e6:	bf00      	nop
 80063e8:	40023800 	.word	0x40023800
 80063ec:	00f42400 	.word	0x00f42400
 80063f0:	017d7840 	.word	0x017d7840

080063f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063f8:	4b03      	ldr	r3, [pc, #12]	; (8006408 <HAL_RCC_GetHCLKFreq+0x14>)
 80063fa:	681b      	ldr	r3, [r3, #0]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000038 	.word	0x20000038

0800640c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006410:	f7ff fff0 	bl	80063f4 <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	0a9b      	lsrs	r3, r3, #10
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4903      	ldr	r1, [pc, #12]	; (8006430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40023800 	.word	0x40023800
 8006430:	0800c89c 	.word	0x0800c89c

08006434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006438:	f7ff ffdc 	bl	80063f4 <HAL_RCC_GetHCLKFreq>
 800643c:	4602      	mov	r2, r0
 800643e:	4b05      	ldr	r3, [pc, #20]	; (8006454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	0b5b      	lsrs	r3, r3, #13
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	4903      	ldr	r1, [pc, #12]	; (8006458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800644a:	5ccb      	ldrb	r3, [r1, r3]
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006450:	4618      	mov	r0, r3
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40023800 	.word	0x40023800
 8006458:	0800c89c 	.word	0x0800c89c

0800645c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	220f      	movs	r2, #15
 800646a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800646c:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <HAL_RCC_GetClockConfig+0x5c>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 0203 	and.w	r2, r3, #3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <HAL_RCC_GetClockConfig+0x5c>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006484:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006490:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	08db      	lsrs	r3, r3, #3
 8006496:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <HAL_RCC_GetClockConfig+0x60>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0207 	and.w	r2, r3, #7
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	601a      	str	r2, [r3, #0]
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40023800 	.word	0x40023800
 80064bc:	40023c00 	.word	0x40023c00

080064c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e07b      	b.n	80065ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d108      	bne.n	80064ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064e2:	d009      	beq.n	80064f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	61da      	str	r2, [r3, #28]
 80064ea:	e005      	b.n	80064f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fc fbfe 	bl	8002d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800652e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657c:	ea42 0103 	orr.w	r1, r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	0c1b      	lsrs	r3, r3, #16
 8006596:	f003 0104 	and.w	r1, r3, #4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	f003 0210 	and.w	r2, r3, #16
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e041      	b.n	8006668 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d106      	bne.n	80065fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7fc fbd3 	bl	8002da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3304      	adds	r3, #4
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f000 fbf5 	bl	8006e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b01      	cmp	r3, #1
 8006682:	d001      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e044      	b.n	8006712 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_TIM_Base_Start_IT+0xb0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d018      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x6c>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b2:	d013      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x6c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <HAL_TIM_Base_Start_IT+0xb4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00e      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x6c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a19      	ldr	r2, [pc, #100]	; (8006728 <HAL_TIM_Base_Start_IT+0xb8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x6c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a17      	ldr	r2, [pc, #92]	; (800672c <HAL_TIM_Base_Start_IT+0xbc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x6c>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a16      	ldr	r2, [pc, #88]	; (8006730 <HAL_TIM_Base_Start_IT+0xc0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d111      	bne.n	8006700 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b06      	cmp	r3, #6
 80066ec:	d010      	beq.n	8006710 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0201 	orr.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fe:	e007      	b.n	8006710 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40010000 	.word	0x40010000
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800
 800672c:	40000c00 	.word	0x40000c00
 8006730:	40014000 	.word	0x40014000

08006734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e041      	b.n	80067ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f839 	bl	80067d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f000 fb44 	bl	8006e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d122      	bne.n	8006842 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b02      	cmp	r3, #2
 8006808:	d11b      	bne.n	8006842 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f06f 0202 	mvn.w	r2, #2
 8006812:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fa78 	bl	8006d1e <HAL_TIM_IC_CaptureCallback>
 800682e:	e005      	b.n	800683c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa6a 	bl	8006d0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa7b 	bl	8006d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b04      	cmp	r3, #4
 800684e:	d122      	bne.n	8006896 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b04      	cmp	r3, #4
 800685c:	d11b      	bne.n	8006896 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f06f 0204 	mvn.w	r2, #4
 8006866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fa4e 	bl	8006d1e <HAL_TIM_IC_CaptureCallback>
 8006882:	e005      	b.n	8006890 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa40 	bl	8006d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa51 	bl	8006d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d122      	bne.n	80068ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d11b      	bne.n	80068ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f06f 0208 	mvn.w	r2, #8
 80068ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2204      	movs	r2, #4
 80068c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	f003 0303 	and.w	r3, r3, #3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fa24 	bl	8006d1e <HAL_TIM_IC_CaptureCallback>
 80068d6:	e005      	b.n	80068e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa16 	bl	8006d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa27 	bl	8006d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d122      	bne.n	800693e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b10      	cmp	r3, #16
 8006904:	d11b      	bne.n	800693e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f06f 0210 	mvn.w	r2, #16
 800690e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2208      	movs	r2, #8
 8006914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9fa 	bl	8006d1e <HAL_TIM_IC_CaptureCallback>
 800692a:	e005      	b.n	8006938 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f9ec 	bl	8006d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9fd 	bl	8006d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b01      	cmp	r3, #1
 800694a:	d10e      	bne.n	800696a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b01      	cmp	r3, #1
 8006958:	d107      	bne.n	800696a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f06f 0201 	mvn.w	r2, #1
 8006962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7fc f949 	bl	8002bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d10e      	bne.n	8006996 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d107      	bne.n	8006996 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800698e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fd79 	bl	8007488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d10e      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d107      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f9c2 	bl	8006d46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d10e      	bne.n	80069ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d107      	bne.n	80069ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0220 	mvn.w	r2, #32
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fd43 	bl	8007474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e0ae      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b0c      	cmp	r3, #12
 8006a22:	f200 809f 	bhi.w	8006b64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a61 	.word	0x08006a61
 8006a30:	08006b65 	.word	0x08006b65
 8006a34:	08006b65 	.word	0x08006b65
 8006a38:	08006b65 	.word	0x08006b65
 8006a3c:	08006aa1 	.word	0x08006aa1
 8006a40:	08006b65 	.word	0x08006b65
 8006a44:	08006b65 	.word	0x08006b65
 8006a48:	08006b65 	.word	0x08006b65
 8006a4c:	08006ae3 	.word	0x08006ae3
 8006a50:	08006b65 	.word	0x08006b65
 8006a54:	08006b65 	.word	0x08006b65
 8006a58:	08006b65 	.word	0x08006b65
 8006a5c:	08006b23 	.word	0x08006b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fa4a 	bl	8006f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0208 	orr.w	r2, r2, #8
 8006a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0204 	bic.w	r2, r2, #4
 8006a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6999      	ldr	r1, [r3, #24]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	619a      	str	r2, [r3, #24]
      break;
 8006a9e:	e064      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fa90 	bl	8006fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6999      	ldr	r1, [r3, #24]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	021a      	lsls	r2, r3, #8
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	619a      	str	r2, [r3, #24]
      break;
 8006ae0:	e043      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 fadb 	bl	80070a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0208 	orr.w	r2, r2, #8
 8006afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0204 	bic.w	r2, r2, #4
 8006b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69d9      	ldr	r1, [r3, #28]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	61da      	str	r2, [r3, #28]
      break;
 8006b20:	e023      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fb25 	bl	8007178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69d9      	ldr	r1, [r3, #28]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	021a      	lsls	r2, r3, #8
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	61da      	str	r2, [r3, #28]
      break;
 8006b62:	e002      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	75fb      	strb	r3, [r7, #23]
      break;
 8006b68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e0b4      	b.n	8006d02 <HAL_TIM_ConfigClockSource+0x186>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd0:	d03e      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0xd4>
 8006bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd6:	f200 8087 	bhi.w	8006ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	f000 8086 	beq.w	8006cee <HAL_TIM_ConfigClockSource+0x172>
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be6:	d87f      	bhi.n	8006ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b70      	cmp	r3, #112	; 0x70
 8006bea:	d01a      	beq.n	8006c22 <HAL_TIM_ConfigClockSource+0xa6>
 8006bec:	2b70      	cmp	r3, #112	; 0x70
 8006bee:	d87b      	bhi.n	8006ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b60      	cmp	r3, #96	; 0x60
 8006bf2:	d050      	beq.n	8006c96 <HAL_TIM_ConfigClockSource+0x11a>
 8006bf4:	2b60      	cmp	r3, #96	; 0x60
 8006bf6:	d877      	bhi.n	8006ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b50      	cmp	r3, #80	; 0x50
 8006bfa:	d03c      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0xfa>
 8006bfc:	2b50      	cmp	r3, #80	; 0x50
 8006bfe:	d873      	bhi.n	8006ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	d058      	beq.n	8006cb6 <HAL_TIM_ConfigClockSource+0x13a>
 8006c04:	2b40      	cmp	r3, #64	; 0x40
 8006c06:	d86f      	bhi.n	8006ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c08:	2b30      	cmp	r3, #48	; 0x30
 8006c0a:	d064      	beq.n	8006cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c0c:	2b30      	cmp	r3, #48	; 0x30
 8006c0e:	d86b      	bhi.n	8006ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d060      	beq.n	8006cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	d867      	bhi.n	8006ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d05c      	beq.n	8006cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c1c:	2b10      	cmp	r3, #16
 8006c1e:	d05a      	beq.n	8006cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c20:	e062      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6899      	ldr	r1, [r3, #8]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f000 fb6b 	bl	800730c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	609a      	str	r2, [r3, #8]
      break;
 8006c4e:	e04f      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	6899      	ldr	r1, [r3, #8]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f000 fb54 	bl	800730c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c72:	609a      	str	r2, [r3, #8]
      break;
 8006c74:	e03c      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	6859      	ldr	r1, [r3, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f000 fac8 	bl	8007218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2150      	movs	r1, #80	; 0x50
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fb21 	bl	80072d6 <TIM_ITRx_SetConfig>
      break;
 8006c94:	e02c      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	6859      	ldr	r1, [r3, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f000 fae7 	bl	8007276 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2160      	movs	r1, #96	; 0x60
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fb11 	bl	80072d6 <TIM_ITRx_SetConfig>
      break;
 8006cb4:	e01c      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6818      	ldr	r0, [r3, #0]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	6859      	ldr	r1, [r3, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f000 faa8 	bl	8007218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2140      	movs	r1, #64	; 0x40
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fb01 	bl	80072d6 <TIM_ITRx_SetConfig>
      break;
 8006cd4:	e00c      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	f000 faf8 	bl	80072d6 <TIM_ITRx_SetConfig>
      break;
 8006ce6:	e003      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	73fb      	strb	r3, [r7, #15]
      break;
 8006cec:	e000      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d107      	bne.n	8006d96 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d94:	e02a      	b.n	8006dec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d107      	bne.n	8006db0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2202      	movs	r2, #2
 8006da4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dae:	e01d      	b.n	8006dec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d107      	bne.n	8006dca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dc8:	e010      	b.n	8006dec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d107      	bne.n	8006de4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006de2:	e003      	b.n	8006dec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7ff ffb4 	bl	8006d5a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
}
 8006df8:	bf00      	nop
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a34      	ldr	r2, [pc, #208]	; (8006ee4 <TIM_Base_SetConfig+0xe4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00f      	beq.n	8006e38 <TIM_Base_SetConfig+0x38>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1e:	d00b      	beq.n	8006e38 <TIM_Base_SetConfig+0x38>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a31      	ldr	r2, [pc, #196]	; (8006ee8 <TIM_Base_SetConfig+0xe8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <TIM_Base_SetConfig+0x38>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a30      	ldr	r2, [pc, #192]	; (8006eec <TIM_Base_SetConfig+0xec>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_Base_SetConfig+0x38>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a2f      	ldr	r2, [pc, #188]	; (8006ef0 <TIM_Base_SetConfig+0xf0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d108      	bne.n	8006e4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a25      	ldr	r2, [pc, #148]	; (8006ee4 <TIM_Base_SetConfig+0xe4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01b      	beq.n	8006e8a <TIM_Base_SetConfig+0x8a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e58:	d017      	beq.n	8006e8a <TIM_Base_SetConfig+0x8a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a22      	ldr	r2, [pc, #136]	; (8006ee8 <TIM_Base_SetConfig+0xe8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <TIM_Base_SetConfig+0x8a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a21      	ldr	r2, [pc, #132]	; (8006eec <TIM_Base_SetConfig+0xec>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00f      	beq.n	8006e8a <TIM_Base_SetConfig+0x8a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <TIM_Base_SetConfig+0xf0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_Base_SetConfig+0x8a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1f      	ldr	r2, [pc, #124]	; (8006ef4 <TIM_Base_SetConfig+0xf4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_Base_SetConfig+0x8a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1e      	ldr	r2, [pc, #120]	; (8006ef8 <TIM_Base_SetConfig+0xf8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_Base_SetConfig+0x8a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1d      	ldr	r2, [pc, #116]	; (8006efc <TIM_Base_SetConfig+0xfc>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d108      	bne.n	8006e9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <TIM_Base_SetConfig+0xe4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d103      	bne.n	8006ed0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	615a      	str	r2, [r3, #20]
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40000800 	.word	0x40000800
 8006ef0:	40000c00 	.word	0x40000c00
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40014400 	.word	0x40014400
 8006efc:	40014800 	.word	0x40014800

08006f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f023 0201 	bic.w	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0303 	bic.w	r3, r3, #3
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f023 0302 	bic.w	r3, r3, #2
 8006f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a1c      	ldr	r2, [pc, #112]	; (8006fc8 <TIM_OC1_SetConfig+0xc8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d10c      	bne.n	8006f76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0308 	bic.w	r3, r3, #8
 8006f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f023 0304 	bic.w	r3, r3, #4
 8006f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a13      	ldr	r2, [pc, #76]	; (8006fc8 <TIM_OC1_SetConfig+0xc8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d111      	bne.n	8006fa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	621a      	str	r2, [r3, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40010000 	.word	0x40010000

08006fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f023 0210 	bic.w	r2, r3, #16
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f023 0320 	bic.w	r3, r3, #32
 8007016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a1e      	ldr	r2, [pc, #120]	; (80070a0 <TIM_OC2_SetConfig+0xd4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d10d      	bne.n	8007048 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a15      	ldr	r2, [pc, #84]	; (80070a0 <TIM_OC2_SetConfig+0xd4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d113      	bne.n	8007078 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800705e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40010000 	.word	0x40010000

080070a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a1d      	ldr	r2, [pc, #116]	; (8007174 <TIM_OC3_SetConfig+0xd0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10d      	bne.n	800711e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800711c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a14      	ldr	r2, [pc, #80]	; (8007174 <TIM_OC3_SetConfig+0xd0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d113      	bne.n	800714e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800712c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	621a      	str	r2, [r3, #32]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	40010000 	.word	0x40010000

08007178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	031b      	lsls	r3, r3, #12
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a10      	ldr	r2, [pc, #64]	; (8007214 <TIM_OC4_SetConfig+0x9c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d109      	bne.n	80071ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	019b      	lsls	r3, r3, #6
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	621a      	str	r2, [r3, #32]
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40010000 	.word	0x40010000

08007218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0201 	bic.w	r2, r3, #1
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f023 030a 	bic.w	r3, r3, #10
 8007254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	621a      	str	r2, [r3, #32]
}
 800726a:	bf00      	nop
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007276:	b480      	push	{r7}
 8007278:	b087      	sub	sp, #28
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0210 	bic.w	r2, r3, #16
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	031b      	lsls	r3, r3, #12
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	621a      	str	r2, [r3, #32]
}
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f043 0307 	orr.w	r3, r3, #7
 80072f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	609a      	str	r2, [r3, #8]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	021a      	lsls	r2, r3, #8
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	431a      	orrs	r2, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4313      	orrs	r3, r2
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	609a      	str	r2, [r3, #8]
}
 8007340:	bf00      	nop
 8007342:	371c      	adds	r7, #28
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2201      	movs	r2, #1
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a1a      	ldr	r2, [r3, #32]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	43db      	mvns	r3, r3
 800736e:	401a      	ands	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a1a      	ldr	r2, [r3, #32]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	fa01 f303 	lsl.w	r3, r1, r3
 8007384:	431a      	orrs	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
	...

08007398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e050      	b.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1c      	ldr	r2, [pc, #112]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d018      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fc:	d013      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a18      	ldr	r2, [pc, #96]	; (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00e      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a16      	ldr	r2, [pc, #88]	; (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d009      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a15      	ldr	r2, [pc, #84]	; (800746c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a13      	ldr	r2, [pc, #76]	; (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d10c      	bne.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800742c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	4313      	orrs	r3, r2
 8007436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40010000 	.word	0x40010000
 8007464:	40000400 	.word	0x40000400
 8007468:	40000800 	.word	0x40000800
 800746c:	40000c00 	.word	0x40000c00
 8007470:	40014000 	.word	0x40014000

08007474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <__NVIC_SetPriority>:
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	6039      	str	r1, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	db0a      	blt.n	80074c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	490c      	ldr	r1, [pc, #48]	; (80074e8 <__NVIC_SetPriority+0x4c>)
 80074b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ba:	0112      	lsls	r2, r2, #4
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	440b      	add	r3, r1
 80074c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80074c4:	e00a      	b.n	80074dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	4908      	ldr	r1, [pc, #32]	; (80074ec <__NVIC_SetPriority+0x50>)
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	3b04      	subs	r3, #4
 80074d4:	0112      	lsls	r2, r2, #4
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	440b      	add	r3, r1
 80074da:	761a      	strb	r2, [r3, #24]
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	e000e100 	.word	0xe000e100
 80074ec:	e000ed00 	.word	0xe000ed00

080074f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <SysTick_Handler+0x1c>)
 80074f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074f8:	f002 f85a 	bl	80095b0 <xTaskGetSchedulerState>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d001      	beq.n	8007506 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007502:	f002 ff41 	bl	800a388 <xPortSysTickHandler>
  }
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	e000e010 	.word	0xe000e010

08007510 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007514:	2100      	movs	r1, #0
 8007516:	f06f 0004 	mvn.w	r0, #4
 800751a:	f7ff ffbf 	bl	800749c <__NVIC_SetPriority>
#endif
}
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800752a:	f3ef 8305 	mrs	r3, IPSR
 800752e:	603b      	str	r3, [r7, #0]
  return(result);
 8007530:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007536:	f06f 0305 	mvn.w	r3, #5
 800753a:	607b      	str	r3, [r7, #4]
 800753c:	e00c      	b.n	8007558 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800753e:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <osKernelInitialize+0x44>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007546:	4b08      	ldr	r3, [pc, #32]	; (8007568 <osKernelInitialize+0x44>)
 8007548:	2201      	movs	r2, #1
 800754a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800754c:	2300      	movs	r3, #0
 800754e:	607b      	str	r3, [r7, #4]
 8007550:	e002      	b.n	8007558 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007552:	f04f 33ff 	mov.w	r3, #4294967295
 8007556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007558:	687b      	ldr	r3, [r7, #4]
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	200007a4 	.word	0x200007a4

0800756c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007572:	f3ef 8305 	mrs	r3, IPSR
 8007576:	603b      	str	r3, [r7, #0]
  return(result);
 8007578:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <osKernelStart+0x1a>
    stat = osErrorISR;
 800757e:	f06f 0305 	mvn.w	r3, #5
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	e010      	b.n	80075a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <osKernelStart+0x48>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d109      	bne.n	80075a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800758e:	f7ff ffbf 	bl	8007510 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007592:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <osKernelStart+0x48>)
 8007594:	2202      	movs	r2, #2
 8007596:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007598:	f001 fb9e 	bl	8008cd8 <vTaskStartScheduler>
      stat = osOK;
 800759c:	2300      	movs	r3, #0
 800759e:	607b      	str	r3, [r7, #4]
 80075a0:	e002      	b.n	80075a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80075a2:	f04f 33ff 	mov.w	r3, #4294967295
 80075a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80075a8:	687b      	ldr	r3, [r7, #4]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	200007a4 	.word	0x200007a4

080075b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08e      	sub	sp, #56	; 0x38
 80075bc:	af04      	add	r7, sp, #16
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c8:	f3ef 8305 	mrs	r3, IPSR
 80075cc:	617b      	str	r3, [r7, #20]
  return(result);
 80075ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d17e      	bne.n	80076d2 <osThreadNew+0x11a>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d07b      	beq.n	80076d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075da:	2380      	movs	r3, #128	; 0x80
 80075dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075de:	2318      	movs	r3, #24
 80075e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d045      	beq.n	800767e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <osThreadNew+0x48>
        name = attr->name;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <osThreadNew+0x6e>
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	2b38      	cmp	r3, #56	; 0x38
 8007618:	d805      	bhi.n	8007626 <osThreadNew+0x6e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <osThreadNew+0x72>
        return (NULL);
 8007626:	2300      	movs	r3, #0
 8007628:	e054      	b.n	80076d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	089b      	lsrs	r3, r3, #2
 8007638:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00e      	beq.n	8007660 <osThreadNew+0xa8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2bbb      	cmp	r3, #187	; 0xbb
 8007648:	d90a      	bls.n	8007660 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800764e:	2b00      	cmp	r3, #0
 8007650:	d006      	beq.n	8007660 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <osThreadNew+0xa8>
        mem = 1;
 800765a:	2301      	movs	r3, #1
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	e010      	b.n	8007682 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10c      	bne.n	8007682 <osThreadNew+0xca>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d108      	bne.n	8007682 <osThreadNew+0xca>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <osThreadNew+0xca>
          mem = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	e001      	b.n	8007682 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d110      	bne.n	80076aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007690:	9202      	str	r2, [sp, #8]
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f001 f92e 	bl	8008900 <xTaskCreateStatic>
 80076a4:	4603      	mov	r3, r0
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	e013      	b.n	80076d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d110      	bne.n	80076d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	f107 0310 	add.w	r3, r7, #16
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f001 f979 	bl	80089ba <xTaskCreate>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d001      	beq.n	80076d2 <osThreadNew+0x11a>
            hTask = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076d2:	693b      	ldr	r3, [r7, #16]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3728      	adds	r7, #40	; 0x28
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076e4:	f3ef 8305 	mrs	r3, IPSR
 80076e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80076ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <osDelay+0x1c>
    stat = osErrorISR;
 80076f0:	f06f 0305 	mvn.w	r3, #5
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e007      	b.n	8007708 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 fab4 	bl	8008c70 <vTaskDelay>
    }
  }

  return (stat);
 8007708:	68fb      	ldr	r3, [r7, #12]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007712:	b580      	push	{r7, lr}
 8007714:	b088      	sub	sp, #32
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800771e:	f3ef 8305 	mrs	r3, IPSR
 8007722:	60bb      	str	r3, [r7, #8]
  return(result);
 8007724:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007726:	2b00      	cmp	r3, #0
 8007728:	d174      	bne.n	8007814 <osMutexNew+0x102>
    if (attr != NULL) {
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	e001      	b.n	800773c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <osMutexNew+0x3a>
      rmtx = 1U;
 8007746:	2301      	movs	r3, #1
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e001      	b.n	8007750 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d15c      	bne.n	8007814 <osMutexNew+0x102>
      mem = -1;
 800775a:	f04f 33ff 	mov.w	r3, #4294967295
 800775e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d015      	beq.n	8007792 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d006      	beq.n	800777c <osMutexNew+0x6a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	2b4f      	cmp	r3, #79	; 0x4f
 8007774:	d902      	bls.n	800777c <osMutexNew+0x6a>
          mem = 1;
 8007776:	2301      	movs	r3, #1
 8007778:	613b      	str	r3, [r7, #16]
 800777a:	e00c      	b.n	8007796 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d108      	bne.n	8007796 <osMutexNew+0x84>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d104      	bne.n	8007796 <osMutexNew+0x84>
            mem = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	e001      	b.n	8007796 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d112      	bne.n	80077c2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	4619      	mov	r1, r3
 80077a8:	2004      	movs	r0, #4
 80077aa:	f000 fb18 	bl	8007dde <xQueueCreateMutexStatic>
 80077ae:	61f8      	str	r0, [r7, #28]
 80077b0:	e016      	b.n	80077e0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	4619      	mov	r1, r3
 80077b8:	2001      	movs	r0, #1
 80077ba:	f000 fb10 	bl	8007dde <xQueueCreateMutexStatic>
 80077be:	61f8      	str	r0, [r7, #28]
 80077c0:	e00e      	b.n	80077e0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10b      	bne.n	80077e0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80077ce:	2004      	movs	r0, #4
 80077d0:	f000 faed 	bl	8007dae <xQueueCreateMutex>
 80077d4:	61f8      	str	r0, [r7, #28]
 80077d6:	e003      	b.n	80077e0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80077d8:	2001      	movs	r0, #1
 80077da:	f000 fae8 	bl	8007dae <xQueueCreateMutex>
 80077de:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00c      	beq.n	8007800 <osMutexNew+0xee>
        if (attr != NULL) {
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <osMutexNew+0xe2>
          name = attr->name;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	e001      	b.n	80077f8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80077f8:	68f9      	ldr	r1, [r7, #12]
 80077fa:	69f8      	ldr	r0, [r7, #28]
 80077fc:	f001 f822 	bl	8008844 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d006      	beq.n	8007814 <osMutexNew+0x102>
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007814:	69fb      	ldr	r3, [r7, #28]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3720      	adds	r7, #32
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800781e:	b580      	push	{r7, lr}
 8007820:	b086      	sub	sp, #24
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f023 0301 	bic.w	r3, r3, #1
 800782e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800783c:	f3ef 8305 	mrs	r3, IPSR
 8007840:	60bb      	str	r3, [r7, #8]
  return(result);
 8007842:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007848:	f06f 0305 	mvn.w	r3, #5
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	e02c      	b.n	80078aa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007856:	f06f 0303 	mvn.w	r3, #3
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	e025      	b.n	80078aa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d011      	beq.n	8007888 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6938      	ldr	r0, [r7, #16]
 8007868:	f000 fb08 	bl	8007e7c <xQueueTakeMutexRecursive>
 800786c:	4603      	mov	r3, r0
 800786e:	2b01      	cmp	r3, #1
 8007870:	d01b      	beq.n	80078aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007878:	f06f 0301 	mvn.w	r3, #1
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	e014      	b.n	80078aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007880:	f06f 0302 	mvn.w	r3, #2
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	e010      	b.n	80078aa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6938      	ldr	r0, [r7, #16]
 800788c:	f000 fda6 	bl	80083dc <xQueueSemaphoreTake>
 8007890:	4603      	mov	r3, r0
 8007892:	2b01      	cmp	r3, #1
 8007894:	d009      	beq.n	80078aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800789c:	f06f 0301 	mvn.w	r3, #1
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	e002      	b.n	80078aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80078a4:	f06f 0302 	mvn.w	r3, #2
 80078a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80078aa:	697b      	ldr	r3, [r7, #20]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f023 0301 	bic.w	r3, r3, #1
 80078c2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078d0:	f3ef 8305 	mrs	r3, IPSR
 80078d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80078d6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80078dc:	f06f 0305 	mvn.w	r3, #5
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e01f      	b.n	8007924 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80078ea:	f06f 0303 	mvn.w	r3, #3
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e018      	b.n	8007924 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80078f8:	6938      	ldr	r0, [r7, #16]
 80078fa:	f000 fa8b 	bl	8007e14 <xQueueGiveMutexRecursive>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b01      	cmp	r3, #1
 8007902:	d00f      	beq.n	8007924 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007904:	f06f 0302 	mvn.w	r3, #2
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	e00b      	b.n	8007924 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800790c:	2300      	movs	r3, #0
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	6938      	ldr	r0, [r7, #16]
 8007914:	f000 fae8 	bl	8007ee8 <xQueueGenericSend>
 8007918:	4603      	mov	r3, r0
 800791a:	2b01      	cmp	r3, #1
 800791c:	d002      	beq.n	8007924 <osMutexRelease+0x70>
        stat = osErrorResource;
 800791e:	f06f 0302 	mvn.w	r3, #2
 8007922:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007924:	697b      	ldr	r3, [r7, #20]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4a07      	ldr	r2, [pc, #28]	; (800795c <vApplicationGetIdleTaskMemory+0x2c>)
 8007940:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	4a06      	ldr	r2, [pc, #24]	; (8007960 <vApplicationGetIdleTaskMemory+0x30>)
 8007946:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2280      	movs	r2, #128	; 0x80
 800794c:	601a      	str	r2, [r3, #0]
}
 800794e:	bf00      	nop
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	200007a8 	.word	0x200007a8
 8007960:	20000864 	.word	0x20000864

08007964 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a07      	ldr	r2, [pc, #28]	; (8007990 <vApplicationGetTimerTaskMemory+0x2c>)
 8007974:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4a06      	ldr	r2, [pc, #24]	; (8007994 <vApplicationGetTimerTaskMemory+0x30>)
 800797a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	20000a64 	.word	0x20000a64
 8007994:	20000b20 	.word	0x20000b20

08007998 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f103 0208 	add.w	r2, r3, #8
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f04f 32ff 	mov.w	r2, #4294967295
 80079b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f103 0208 	add.w	r2, r3, #8
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f103 0208 	add.w	r2, r3, #8
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
}
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a50:	d103      	bne.n	8007a5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	e00c      	b.n	8007a74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e002      	b.n	8007a68 <vListInsert+0x2e>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d2f6      	bcs.n	8007a62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6892      	ldr	r2, [r2, #8]
 8007ac2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	6852      	ldr	r2, [r2, #4]
 8007acc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d103      	bne.n	8007ae0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	1e5a      	subs	r2, r3, #1
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b2a:	f002 fb9b 	bl	800a264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b36:	68f9      	ldr	r1, [r7, #12]
 8007b38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b3a:	fb01 f303 	mul.w	r3, r1, r3
 8007b3e:	441a      	add	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	68f9      	ldr	r1, [r7, #12]
 8007b5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b60:	fb01 f303 	mul.w	r3, r1, r3
 8007b64:	441a      	add	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	22ff      	movs	r2, #255	; 0xff
 8007b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	22ff      	movs	r2, #255	; 0xff
 8007b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d114      	bne.n	8007baa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01a      	beq.n	8007bbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3310      	adds	r3, #16
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f001 fb3d 	bl	800920c <xTaskRemoveFromEventList>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d012      	beq.n	8007bbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b98:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <xQueueGenericReset+0xcc>)
 8007b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	e009      	b.n	8007bbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3310      	adds	r3, #16
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff fef2 	bl	8007998 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3324      	adds	r3, #36	; 0x24
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7ff feed 	bl	8007998 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bbe:	f002 fb81 	bl	800a2c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bc2:	2301      	movs	r3, #1
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	e000ed04 	.word	0xe000ed04

08007bd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08e      	sub	sp, #56	; 0x38
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10a      	bne.n	8007bfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <xQueueGenericCreateStatic+0x52>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <xQueueGenericCreateStatic+0x56>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e000      	b.n	8007c28 <xQueueGenericCreateStatic+0x58>
 8007c26:	2300      	movs	r3, #0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	623b      	str	r3, [r7, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <xQueueGenericCreateStatic+0x7e>
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <xQueueGenericCreateStatic+0x82>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <xQueueGenericCreateStatic+0x84>
 8007c52:	2300      	movs	r3, #0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10a      	bne.n	8007c6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	61fb      	str	r3, [r7, #28]
}
 8007c6a:	bf00      	nop
 8007c6c:	e7fe      	b.n	8007c6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c6e:	2350      	movs	r3, #80	; 0x50
 8007c70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b50      	cmp	r3, #80	; 0x50
 8007c76:	d00a      	beq.n	8007c8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	61bb      	str	r3, [r7, #24]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00d      	beq.n	8007cb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ca2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	4613      	mov	r3, r2
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f83f 	bl	8007d34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3730      	adds	r7, #48	; 0x30
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <xQueueGenericCreate+0x2a>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	613b      	str	r3, [r7, #16]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	fb02 f303 	mul.w	r3, r2, r3
 8007cf2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	3350      	adds	r3, #80	; 0x50
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f002 fbd5 	bl	800a4a8 <pvPortMalloc>
 8007cfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d011      	beq.n	8007d2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	3350      	adds	r3, #80	; 0x50
 8007d0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d18:	79fa      	ldrb	r2, [r7, #7]
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 f805 	bl	8007d34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3720      	adds	r7, #32
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e002      	b.n	8007d56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d62:	2101      	movs	r1, #1
 8007d64:	69b8      	ldr	r0, [r7, #24]
 8007d66:	f7ff fecb 	bl	8007b00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	78fa      	ldrb	r2, [r7, #3]
 8007d6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00e      	beq.n	8007da6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2100      	movs	r1, #0
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f8a1 	bl	8007ee8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b086      	sub	sp, #24
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	4603      	mov	r3, r0
 8007db6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007db8:	2301      	movs	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6939      	ldr	r1, [r7, #16]
 8007dc6:	6978      	ldr	r0, [r7, #20]
 8007dc8:	f7ff ff7a 	bl	8007cc0 <xQueueGenericCreate>
 8007dcc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f7ff ffd3 	bl	8007d7a <prvInitialiseMutex>

		return xNewQueue;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
	}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b088      	sub	sp, #32
 8007de2:	af02      	add	r7, sp, #8
 8007de4:	4603      	mov	r3, r0
 8007de6:	6039      	str	r1, [r7, #0]
 8007de8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007dea:	2301      	movs	r3, #1
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	6939      	ldr	r1, [r7, #16]
 8007dfc:	6978      	ldr	r0, [r7, #20]
 8007dfe:	f7ff fee7 	bl	8007bd0 <xQueueGenericCreateStatic>
 8007e02:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7ff ffb8 	bl	8007d7a <prvInitialiseMutex>

		return xNewQueue;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
	}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007e14:	b590      	push	{r4, r7, lr}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	60fb      	str	r3, [r7, #12]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	689c      	ldr	r4, [r3, #8]
 8007e40:	f001 fba6 	bl	8009590 <xTaskGetCurrentTaskHandle>
 8007e44:	4603      	mov	r3, r0
 8007e46:	429c      	cmp	r4, r3
 8007e48:	d111      	bne.n	8007e6e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	1e5a      	subs	r2, r3, #1
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d105      	bne.n	8007e68 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2100      	movs	r1, #0
 8007e62:	6938      	ldr	r0, [r7, #16]
 8007e64:	f000 f840 	bl	8007ee8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	e001      	b.n	8007e72 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007e72:	697b      	ldr	r3, [r7, #20]
	}
 8007e74:	4618      	mov	r0, r3
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd90      	pop	{r4, r7, pc}

08007e7c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007e7c:	b590      	push	{r4, r7, lr}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60fb      	str	r3, [r7, #12]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	689c      	ldr	r4, [r3, #8]
 8007eaa:	f001 fb71 	bl	8009590 <xTaskGetCurrentTaskHandle>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	429c      	cmp	r4, r3
 8007eb2:	d107      	bne.n	8007ec4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e00c      	b.n	8007ede <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6938      	ldr	r0, [r7, #16]
 8007ec8:	f000 fa88 	bl	80083dc <xQueueSemaphoreTake>
 8007ecc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007ede:	697b      	ldr	r3, [r7, #20]
	}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd90      	pop	{r4, r7, pc}

08007ee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08e      	sub	sp, #56	; 0x38
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <xQueueGenericSend+0x32>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d103      	bne.n	8007f28 <xQueueGenericSend+0x40>
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <xQueueGenericSend+0x44>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <xQueueGenericSend+0x46>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <xQueueGenericSend+0x60>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d103      	bne.n	8007f56 <xQueueGenericSend+0x6e>
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d101      	bne.n	8007f5a <xQueueGenericSend+0x72>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <xQueueGenericSend+0x74>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <xQueueGenericSend+0x8e>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	623b      	str	r3, [r7, #32]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f76:	f001 fb1b 	bl	80095b0 <xTaskGetSchedulerState>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <xQueueGenericSend+0x9e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <xQueueGenericSend+0xa2>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <xQueueGenericSend+0xa4>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	61fb      	str	r3, [r7, #28]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fa6:	f002 f95d 	bl	800a264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d302      	bcc.n	8007fbc <xQueueGenericSend+0xd4>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d129      	bne.n	8008010 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fc2:	f000 fb2f 	bl	8008624 <prvCopyDataToQueue>
 8007fc6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d010      	beq.n	8007ff2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	3324      	adds	r3, #36	; 0x24
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 f919 	bl	800920c <xTaskRemoveFromEventList>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d013      	beq.n	8008008 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fe0:	4b3f      	ldr	r3, [pc, #252]	; (80080e0 <xQueueGenericSend+0x1f8>)
 8007fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	e00a      	b.n	8008008 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d007      	beq.n	8008008 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ff8:	4b39      	ldr	r3, [pc, #228]	; (80080e0 <xQueueGenericSend+0x1f8>)
 8007ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008008:	f002 f95c 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 800800c:	2301      	movs	r3, #1
 800800e:	e063      	b.n	80080d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d103      	bne.n	800801e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008016:	f002 f955 	bl	800a2c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800801a:	2300      	movs	r3, #0
 800801c:	e05c      	b.n	80080d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800801e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008020:	2b00      	cmp	r3, #0
 8008022:	d106      	bne.n	8008032 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	4618      	mov	r0, r3
 800802a:	f001 f953 	bl	80092d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800802e:	2301      	movs	r3, #1
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008032:	f002 f947 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008036:	f000 febf 	bl	8008db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800803a:	f002 f913 	bl	800a264 <vPortEnterCritical>
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008044:	b25b      	sxtb	r3, r3
 8008046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804a:	d103      	bne.n	8008054 <xQueueGenericSend+0x16c>
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800805a:	b25b      	sxtb	r3, r3
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d103      	bne.n	800806a <xQueueGenericSend+0x182>
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800806a:	f002 f92b 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800806e:	1d3a      	adds	r2, r7, #4
 8008070:	f107 0314 	add.w	r3, r7, #20
 8008074:	4611      	mov	r1, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f001 f942 	bl	8009300 <xTaskCheckForTimeOut>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d124      	bne.n	80080cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008084:	f000 fbc6 	bl	8008814 <prvIsQueueFull>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d018      	beq.n	80080c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	3310      	adds	r3, #16
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f001 f868 	bl	800916c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800809c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800809e:	f000 fb51 	bl	8008744 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080a2:	f000 fe97 	bl	8008dd4 <xTaskResumeAll>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f47f af7c 	bne.w	8007fa6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <xQueueGenericSend+0x1f8>)
 80080b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	e772      	b.n	8007fa6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080c2:	f000 fb3f 	bl	8008744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080c6:	f000 fe85 	bl	8008dd4 <xTaskResumeAll>
 80080ca:	e76c      	b.n	8007fa6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ce:	f000 fb39 	bl	8008744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080d2:	f000 fe7f 	bl	8008dd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3738      	adds	r7, #56	; 0x38
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b090      	sub	sp, #64	; 0x40
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d103      	bne.n	8008120 <xQueueGenericSendFromISR+0x3c>
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <xQueueGenericSendFromISR+0x40>
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <xQueueGenericSendFromISR+0x42>
 8008124:	2300      	movs	r3, #0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10a      	bne.n	8008140 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d103      	bne.n	800814e <xQueueGenericSendFromISR+0x6a>
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	2b01      	cmp	r3, #1
 800814c:	d101      	bne.n	8008152 <xQueueGenericSendFromISR+0x6e>
 800814e:	2301      	movs	r3, #1
 8008150:	e000      	b.n	8008154 <xQueueGenericSendFromISR+0x70>
 8008152:	2300      	movs	r3, #0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10a      	bne.n	800816e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	623b      	str	r3, [r7, #32]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800816e:	f002 f95b 	bl	800a428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008172:	f3ef 8211 	mrs	r2, BASEPRI
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	61fa      	str	r2, [r7, #28]
 8008188:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800818a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008196:	429a      	cmp	r2, r3
 8008198:	d302      	bcc.n	80081a0 <xQueueGenericSendFromISR+0xbc>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d12f      	bne.n	8008200 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081b6:	f000 fa35 	bl	8008624 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80081be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c2:	d112      	bne.n	80081ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d016      	beq.n	80081fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	3324      	adds	r3, #36	; 0x24
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 f81b 	bl	800920c <xTaskRemoveFromEventList>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00e      	beq.n	80081fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00b      	beq.n	80081fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e007      	b.n	80081fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081ee:	3301      	adds	r3, #1
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	b25a      	sxtb	r2, r3
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081fa:	2301      	movs	r3, #1
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80081fe:	e001      	b.n	8008204 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008200:	2300      	movs	r3, #0
 8008202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008206:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800820e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008212:	4618      	mov	r0, r3
 8008214:	3740      	adds	r7, #64	; 0x40
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08c      	sub	sp, #48	; 0x30
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008228:	2300      	movs	r3, #0
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10a      	bne.n	800824c <xQueueReceive+0x30>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	623b      	str	r3, [r7, #32]
}
 8008248:	bf00      	nop
 800824a:	e7fe      	b.n	800824a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <xQueueReceive+0x3e>
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <xQueueReceive+0x42>
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <xQueueReceive+0x44>
 800825e:	2300      	movs	r3, #0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <xQueueReceive+0x5e>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	61fb      	str	r3, [r7, #28]
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800827a:	f001 f999 	bl	80095b0 <xTaskGetSchedulerState>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <xQueueReceive+0x6e>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <xQueueReceive+0x72>
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <xQueueReceive+0x74>
 800828e:	2300      	movs	r3, #0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <xQueueReceive+0x8e>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	61bb      	str	r3, [r7, #24]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082aa:	f001 ffdb 	bl	800a264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01f      	beq.n	80082fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082be:	f000 fa1b 	bl	80086f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	1e5a      	subs	r2, r3, #1
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00f      	beq.n	80082f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	3310      	adds	r3, #16
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 ff98 	bl	800920c <xTaskRemoveFromEventList>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d007      	beq.n	80082f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082e2:	4b3d      	ldr	r3, [pc, #244]	; (80083d8 <xQueueReceive+0x1bc>)
 80082e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082f2:	f001 ffe7 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e069      	b.n	80083ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008300:	f001 ffe0 	bl	800a2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008304:	2300      	movs	r3, #0
 8008306:	e062      	b.n	80083ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800830e:	f107 0310 	add.w	r3, r7, #16
 8008312:	4618      	mov	r0, r3
 8008314:	f000 ffde 	bl	80092d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800831c:	f001 ffd2 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008320:	f000 fd4a 	bl	8008db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008324:	f001 ff9e 	bl	800a264 <vPortEnterCritical>
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800832e:	b25b      	sxtb	r3, r3
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d103      	bne.n	800833e <xQueueReceive+0x122>
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008344:	b25b      	sxtb	r3, r3
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d103      	bne.n	8008354 <xQueueReceive+0x138>
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008354:	f001 ffb6 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008358:	1d3a      	adds	r2, r7, #4
 800835a:	f107 0310 	add.w	r3, r7, #16
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f000 ffcd 	bl	8009300 <xTaskCheckForTimeOut>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d123      	bne.n	80083b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800836c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800836e:	f000 fa3b 	bl	80087e8 <prvIsQueueEmpty>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d017      	beq.n	80083a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	3324      	adds	r3, #36	; 0x24
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fef3 	bl	800916c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008388:	f000 f9dc 	bl	8008744 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800838c:	f000 fd22 	bl	8008dd4 <xTaskResumeAll>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d189      	bne.n	80082aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008396:	4b10      	ldr	r3, [pc, #64]	; (80083d8 <xQueueReceive+0x1bc>)
 8008398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	e780      	b.n	80082aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083aa:	f000 f9cb 	bl	8008744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ae:	f000 fd11 	bl	8008dd4 <xTaskResumeAll>
 80083b2:	e77a      	b.n	80082aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b6:	f000 f9c5 	bl	8008744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ba:	f000 fd0b 	bl	8008dd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083c0:	f000 fa12 	bl	80087e8 <prvIsQueueEmpty>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f43f af6f 	beq.w	80082aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3730      	adds	r7, #48	; 0x30
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08e      	sub	sp, #56	; 0x38
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	623b      	str	r3, [r7, #32]
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800840e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	61fb      	str	r3, [r7, #28]
}
 8008428:	bf00      	nop
 800842a:	e7fe      	b.n	800842a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800842c:	f001 f8c0 	bl	80095b0 <xTaskGetSchedulerState>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <xQueueSemaphoreTake+0x60>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <xQueueSemaphoreTake+0x64>
 800843c:	2301      	movs	r3, #1
 800843e:	e000      	b.n	8008442 <xQueueSemaphoreTake+0x66>
 8008440:	2300      	movs	r3, #0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	61bb      	str	r3, [r7, #24]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800845c:	f001 ff02 	bl	800a264 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	2b00      	cmp	r3, #0
 800846a:	d024      	beq.n	80084b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	1e5a      	subs	r2, r3, #1
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800847c:	f001 fa0e 	bl	800989c <pvTaskIncrementMutexHeldCount>
 8008480:	4602      	mov	r2, r0
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008484:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00f      	beq.n	80084ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	3310      	adds	r3, #16
 8008492:	4618      	mov	r0, r3
 8008494:	f000 feba 	bl	800920c <xTaskRemoveFromEventList>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800849e:	4b54      	ldr	r3, [pc, #336]	; (80085f0 <xQueueSemaphoreTake+0x214>)
 80084a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084ae:	f001 ff09 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e097      	b.n	80085e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d111      	bne.n	80084e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	617b      	str	r3, [r7, #20]
}
 80084d4:	bf00      	nop
 80084d6:	e7fe      	b.n	80084d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80084d8:	f001 fef4 	bl	800a2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084dc:	2300      	movs	r3, #0
 80084de:	e082      	b.n	80085e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d106      	bne.n	80084f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fef2 	bl	80092d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084f0:	2301      	movs	r3, #1
 80084f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084f4:	f001 fee6 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084f8:	f000 fc5e 	bl	8008db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084fc:	f001 feb2 	bl	800a264 <vPortEnterCritical>
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008506:	b25b      	sxtb	r3, r3
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850c:	d103      	bne.n	8008516 <xQueueSemaphoreTake+0x13a>
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800851c:	b25b      	sxtb	r3, r3
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008522:	d103      	bne.n	800852c <xQueueSemaphoreTake+0x150>
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800852c:	f001 feca 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008530:	463a      	mov	r2, r7
 8008532:	f107 030c 	add.w	r3, r7, #12
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fee1 	bl	8009300 <xTaskCheckForTimeOut>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d132      	bne.n	80085aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008546:	f000 f94f 	bl	80087e8 <prvIsQueueEmpty>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d026      	beq.n	800859e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d109      	bne.n	800856c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008558:	f001 fe84 	bl	800a264 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	4618      	mov	r0, r3
 8008562:	f001 f843 	bl	80095ec <xTaskPriorityInherit>
 8008566:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008568:	f001 feac 	bl	800a2c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856e:	3324      	adds	r3, #36	; 0x24
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	4611      	mov	r1, r2
 8008574:	4618      	mov	r0, r3
 8008576:	f000 fdf9 	bl	800916c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800857a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800857c:	f000 f8e2 	bl	8008744 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008580:	f000 fc28 	bl	8008dd4 <xTaskResumeAll>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	f47f af68 	bne.w	800845c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800858c:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <xQueueSemaphoreTake+0x214>)
 800858e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	e75e      	b.n	800845c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800859e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085a0:	f000 f8d0 	bl	8008744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085a4:	f000 fc16 	bl	8008dd4 <xTaskResumeAll>
 80085a8:	e758      	b.n	800845c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80085aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085ac:	f000 f8ca 	bl	8008744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085b0:	f000 fc10 	bl	8008dd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085b6:	f000 f917 	bl	80087e8 <prvIsQueueEmpty>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f43f af4d 	beq.w	800845c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00d      	beq.n	80085e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80085c8:	f001 fe4c 	bl	800a264 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80085cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085ce:	f000 f811 	bl	80085f4 <prvGetDisinheritPriorityAfterTimeout>
 80085d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80085d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 f8dc 	bl	8009798 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80085e0:	f001 fe70 	bl	800a2c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3738      	adds	r7, #56	; 0x38
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	2b00      	cmp	r3, #0
 8008602:	d006      	beq.n	8008612 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e001      	b.n	8008616 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008616:	68fb      	ldr	r3, [r7, #12]
	}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10d      	bne.n	800865e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d14d      	bne.n	80086e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	4618      	mov	r0, r3
 8008650:	f001 f834 	bl	80096bc <xTaskPriorityDisinherit>
 8008654:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	609a      	str	r2, [r3, #8]
 800865c:	e043      	b.n	80086e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d119      	bne.n	8008698 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6858      	ldr	r0, [r3, #4]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866c:	461a      	mov	r2, r3
 800866e:	68b9      	ldr	r1, [r7, #8]
 8008670:	f002 f952 	bl	800a918 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867c:	441a      	add	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	429a      	cmp	r2, r3
 800868c:	d32b      	bcc.n	80086e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]
 8008696:	e026      	b.n	80086e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	68d8      	ldr	r0, [r3, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	461a      	mov	r2, r3
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	f002 f938 	bl	800a918 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b0:	425b      	negs	r3, r3
 80086b2:	441a      	add	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d207      	bcs.n	80086d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086cc:	425b      	negs	r3, r3
 80086ce:	441a      	add	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d105      	bne.n	80086e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086ee:	697b      	ldr	r3, [r7, #20]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d018      	beq.n	800873c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	441a      	add	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	429a      	cmp	r2, r3
 8008722:	d303      	bcc.n	800872c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68d9      	ldr	r1, [r3, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008734:	461a      	mov	r2, r3
 8008736:	6838      	ldr	r0, [r7, #0]
 8008738:	f002 f8ee 	bl	800a918 <memcpy>
	}
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800874c:	f001 fd8a 	bl	800a264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008756:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008758:	e011      	b.n	800877e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	2b00      	cmp	r3, #0
 8008760:	d012      	beq.n	8008788 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3324      	adds	r3, #36	; 0x24
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fd50 	bl	800920c <xTaskRemoveFromEventList>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008772:	f000 fe27 	bl	80093c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	3b01      	subs	r3, #1
 800877a:	b2db      	uxtb	r3, r3
 800877c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800877e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	dce9      	bgt.n	800875a <prvUnlockQueue+0x16>
 8008786:	e000      	b.n	800878a <prvUnlockQueue+0x46>
					break;
 8008788:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	22ff      	movs	r2, #255	; 0xff
 800878e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008792:	f001 fd97 	bl	800a2c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008796:	f001 fd65 	bl	800a264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087a2:	e011      	b.n	80087c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d012      	beq.n	80087d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3310      	adds	r3, #16
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fd2b 	bl	800920c <xTaskRemoveFromEventList>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087bc:	f000 fe02 	bl	80093c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dce9      	bgt.n	80087a4 <prvUnlockQueue+0x60>
 80087d0:	e000      	b.n	80087d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	22ff      	movs	r2, #255	; 0xff
 80087d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087dc:	f001 fd72 	bl	800a2c4 <vPortExitCritical>
}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087f0:	f001 fd38 	bl	800a264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d102      	bne.n	8008802 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087fc:	2301      	movs	r3, #1
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e001      	b.n	8008806 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008806:	f001 fd5d 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 800880a:	68fb      	ldr	r3, [r7, #12]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800881c:	f001 fd22 	bl	800a264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008828:	429a      	cmp	r2, r3
 800882a:	d102      	bne.n	8008832 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800882c:	2301      	movs	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	e001      	b.n	8008836 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008836:	f001 fd45 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 800883a:	68fb      	ldr	r3, [r7, #12]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	e014      	b.n	800887e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008854:	4a0f      	ldr	r2, [pc, #60]	; (8008894 <vQueueAddToRegistry+0x50>)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10b      	bne.n	8008878 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008860:	490c      	ldr	r1, [pc, #48]	; (8008894 <vQueueAddToRegistry+0x50>)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800886a:	4a0a      	ldr	r2, [pc, #40]	; (8008894 <vQueueAddToRegistry+0x50>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	4413      	add	r3, r2
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008876:	e006      	b.n	8008886 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3301      	adds	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b07      	cmp	r3, #7
 8008882:	d9e7      	bls.n	8008854 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	20000f20 	.word	0x20000f20

08008898 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088a8:	f001 fcdc 	bl	800a264 <vPortEnterCritical>
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d103      	bne.n	80088c2 <vQueueWaitForMessageRestricted+0x2a>
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088c8:	b25b      	sxtb	r3, r3
 80088ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ce:	d103      	bne.n	80088d8 <vQueueWaitForMessageRestricted+0x40>
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088d8:	f001 fcf4 	bl	800a2c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	3324      	adds	r3, #36	; 0x24
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fc61 	bl	80091b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088f2:	6978      	ldr	r0, [r7, #20]
 80088f4:	f7ff ff26 	bl	8008744 <prvUnlockQueue>
	}
 80088f8:	bf00      	nop
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08e      	sub	sp, #56	; 0x38
 8008904:	af04      	add	r7, sp, #16
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	623b      	str	r3, [r7, #32]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <xTaskCreateStatic+0x46>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	61fb      	str	r3, [r7, #28]
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008946:	23bc      	movs	r3, #188	; 0xbc
 8008948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2bbc      	cmp	r3, #188	; 0xbc
 800894e:	d00a      	beq.n	8008966 <xTaskCreateStatic+0x66>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	61bb      	str	r3, [r7, #24]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008966:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896a:	2b00      	cmp	r3, #0
 800896c:	d01e      	beq.n	80089ac <xTaskCreateStatic+0xac>
 800896e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01b      	beq.n	80089ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800897c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	2202      	movs	r2, #2
 8008982:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008986:	2300      	movs	r3, #0
 8008988:	9303      	str	r3, [sp, #12]
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	9302      	str	r3, [sp, #8]
 800898e:	f107 0314 	add.w	r3, r7, #20
 8008992:	9301      	str	r3, [sp, #4]
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 f850 	bl	8008a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089a6:	f000 f8f3 	bl	8008b90 <prvAddNewTaskToReadyList>
 80089aa:	e001      	b.n	80089b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089b0:	697b      	ldr	r3, [r7, #20]
	}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3728      	adds	r7, #40	; 0x28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b08c      	sub	sp, #48	; 0x30
 80089be:	af04      	add	r7, sp, #16
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089ca:	88fb      	ldrh	r3, [r7, #6]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fd6a 	bl	800a4a8 <pvPortMalloc>
 80089d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00e      	beq.n	80089fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089dc:	20bc      	movs	r0, #188	; 0xbc
 80089de:	f001 fd63 	bl	800a4a8 <pvPortMalloc>
 80089e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	631a      	str	r2, [r3, #48]	; 0x30
 80089f0:	e005      	b.n	80089fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089f2:	6978      	ldr	r0, [r7, #20]
 80089f4:	f001 fe24 	bl	800a640 <vPortFree>
 80089f8:	e001      	b.n	80089fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d017      	beq.n	8008a34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	9303      	str	r3, [sp, #12]
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	9302      	str	r3, [sp, #8]
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	68b9      	ldr	r1, [r7, #8]
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 f80e 	bl	8008a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a28:	69f8      	ldr	r0, [r7, #28]
 8008a2a:	f000 f8b1 	bl	8008b90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	61bb      	str	r3, [r7, #24]
 8008a32:	e002      	b.n	8008a3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a34:	f04f 33ff 	mov.w	r3, #4294967295
 8008a38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a3a:	69bb      	ldr	r3, [r7, #24]
	}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3720      	adds	r7, #32
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	21a5      	movs	r1, #165	; 0xa5
 8008a5e:	f001 ff69 	bl	800a934 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	f023 0307 	bic.w	r3, r3, #7
 8008a7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	617b      	str	r3, [r7, #20]
}
 8008a98:	bf00      	nop
 8008a9a:	e7fe      	b.n	8008a9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d01f      	beq.n	8008ae2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	61fb      	str	r3, [r7, #28]
 8008aa6:	e012      	b.n	8008ace <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	4413      	add	r3, r2
 8008aae:	7819      	ldrb	r1, [r3, #0]
 8008ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	3334      	adds	r3, #52	; 0x34
 8008ab8:	460a      	mov	r2, r1
 8008aba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d006      	beq.n	8008ad6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	3301      	adds	r3, #1
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	2b0f      	cmp	r3, #15
 8008ad2:	d9e9      	bls.n	8008aa8 <prvInitialiseNewTask+0x64>
 8008ad4:	e000      	b.n	8008ad8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008ad6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ae0:	e003      	b.n	8008aea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	2b37      	cmp	r3, #55	; 0x37
 8008aee:	d901      	bls.n	8008af4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008af0:	2337      	movs	r3, #55	; 0x37
 8008af2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008af8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008afe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	2200      	movs	r2, #0
 8008b04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	3304      	adds	r3, #4
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe ff64 	bl	80079d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	3318      	adds	r3, #24
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe ff5f 	bl	80079d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	3354      	adds	r3, #84	; 0x54
 8008b44:	2260      	movs	r2, #96	; 0x60
 8008b46:	2100      	movs	r1, #0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f001 fef3 	bl	800a934 <memset>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	4a0c      	ldr	r2, [pc, #48]	; (8008b84 <prvInitialiseNewTask+0x140>)
 8008b52:	659a      	str	r2, [r3, #88]	; 0x58
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	4a0c      	ldr	r2, [pc, #48]	; (8008b88 <prvInitialiseNewTask+0x144>)
 8008b58:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	4a0b      	ldr	r2, [pc, #44]	; (8008b8c <prvInitialiseNewTask+0x148>)
 8008b5e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	69b8      	ldr	r0, [r7, #24]
 8008b66:	f001 fa4f 	bl	800a008 <pxPortInitialiseStack>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b7c:	bf00      	nop
 8008b7e:	3720      	adds	r7, #32
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	0800c938 	.word	0x0800c938
 8008b88:	0800c958 	.word	0x0800c958
 8008b8c:	0800c918 	.word	0x0800c918

08008b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b98:	f001 fb64 	bl	800a264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b9c:	4b2d      	ldr	r3, [pc, #180]	; (8008c54 <prvAddNewTaskToReadyList+0xc4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	4a2c      	ldr	r2, [pc, #176]	; (8008c54 <prvAddNewTaskToReadyList+0xc4>)
 8008ba4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ba6:	4b2c      	ldr	r3, [pc, #176]	; (8008c58 <prvAddNewTaskToReadyList+0xc8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bae:	4a2a      	ldr	r2, [pc, #168]	; (8008c58 <prvAddNewTaskToReadyList+0xc8>)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bb4:	4b27      	ldr	r3, [pc, #156]	; (8008c54 <prvAddNewTaskToReadyList+0xc4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d110      	bne.n	8008bde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bbc:	f000 fc26 	bl	800940c <prvInitialiseTaskLists>
 8008bc0:	e00d      	b.n	8008bde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bc2:	4b26      	ldr	r3, [pc, #152]	; (8008c5c <prvAddNewTaskToReadyList+0xcc>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d109      	bne.n	8008bde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bca:	4b23      	ldr	r3, [pc, #140]	; (8008c58 <prvAddNewTaskToReadyList+0xc8>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d802      	bhi.n	8008bde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bd8:	4a1f      	ldr	r2, [pc, #124]	; (8008c58 <prvAddNewTaskToReadyList+0xc8>)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bde:	4b20      	ldr	r3, [pc, #128]	; (8008c60 <prvAddNewTaskToReadyList+0xd0>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a1e      	ldr	r2, [pc, #120]	; (8008c60 <prvAddNewTaskToReadyList+0xd0>)
 8008be6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008be8:	4b1d      	ldr	r3, [pc, #116]	; (8008c60 <prvAddNewTaskToReadyList+0xd0>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf4:	4b1b      	ldr	r3, [pc, #108]	; (8008c64 <prvAddNewTaskToReadyList+0xd4>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d903      	bls.n	8008c04 <prvAddNewTaskToReadyList+0x74>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c00:	4a18      	ldr	r2, [pc, #96]	; (8008c64 <prvAddNewTaskToReadyList+0xd4>)
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c08:	4613      	mov	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4a15      	ldr	r2, [pc, #84]	; (8008c68 <prvAddNewTaskToReadyList+0xd8>)
 8008c12:	441a      	add	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3304      	adds	r3, #4
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	f7fe fee9 	bl	80079f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c20:	f001 fb50 	bl	800a2c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c24:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <prvAddNewTaskToReadyList+0xcc>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00e      	beq.n	8008c4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <prvAddNewTaskToReadyList+0xc8>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d207      	bcs.n	8008c4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <prvAddNewTaskToReadyList+0xdc>)
 8008c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c4a:	bf00      	nop
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20001434 	.word	0x20001434
 8008c58:	20000f60 	.word	0x20000f60
 8008c5c:	20001440 	.word	0x20001440
 8008c60:	20001450 	.word	0x20001450
 8008c64:	2000143c 	.word	0x2000143c
 8008c68:	20000f64 	.word	0x20000f64
 8008c6c:	e000ed04 	.word	0xe000ed04

08008c70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d017      	beq.n	8008cb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c82:	4b13      	ldr	r3, [pc, #76]	; (8008cd0 <vTaskDelay+0x60>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <vTaskDelay+0x30>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	60bb      	str	r3, [r7, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ca0:	f000 f88a 	bl	8008db8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fe0c 	bl	80098c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cac:	f000 f892 	bl	8008dd4 <xTaskResumeAll>
 8008cb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d107      	bne.n	8008cc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008cb8:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <vTaskDelay+0x64>)
 8008cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cc8:	bf00      	nop
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	2000145c 	.word	0x2000145c
 8008cd4:	e000ed04 	.word	0xe000ed04

08008cd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	; 0x28
 8008cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ce6:	463a      	mov	r2, r7
 8008ce8:	1d39      	adds	r1, r7, #4
 8008cea:	f107 0308 	add.w	r3, r7, #8
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fe1e 	bl	8007930 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	9202      	str	r2, [sp, #8]
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	2300      	movs	r3, #0
 8008d04:	460a      	mov	r2, r1
 8008d06:	4924      	ldr	r1, [pc, #144]	; (8008d98 <vTaskStartScheduler+0xc0>)
 8008d08:	4824      	ldr	r0, [pc, #144]	; (8008d9c <vTaskStartScheduler+0xc4>)
 8008d0a:	f7ff fdf9 	bl	8008900 <xTaskCreateStatic>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	4a23      	ldr	r2, [pc, #140]	; (8008da0 <vTaskStartScheduler+0xc8>)
 8008d12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d14:	4b22      	ldr	r3, [pc, #136]	; (8008da0 <vTaskStartScheduler+0xc8>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	e001      	b.n	8008d26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d102      	bne.n	8008d32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d2c:	f000 fe1e 	bl	800996c <xTimerCreateTimerTask>
 8008d30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d11b      	bne.n	8008d70 <vTaskStartScheduler+0x98>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	613b      	str	r3, [r7, #16]
}
 8008d4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d4c:	4b15      	ldr	r3, [pc, #84]	; (8008da4 <vTaskStartScheduler+0xcc>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3354      	adds	r3, #84	; 0x54
 8008d52:	4a15      	ldr	r2, [pc, #84]	; (8008da8 <vTaskStartScheduler+0xd0>)
 8008d54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d56:	4b15      	ldr	r3, [pc, #84]	; (8008dac <vTaskStartScheduler+0xd4>)
 8008d58:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d5e:	4b14      	ldr	r3, [pc, #80]	; (8008db0 <vTaskStartScheduler+0xd8>)
 8008d60:	2201      	movs	r2, #1
 8008d62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d64:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <vTaskStartScheduler+0xdc>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d6a:	f001 f9d9 	bl	800a120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d6e:	e00e      	b.n	8008d8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d76:	d10a      	bne.n	8008d8e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	60fb      	str	r3, [r7, #12]
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <vTaskStartScheduler+0xb4>
}
 8008d8e:	bf00      	nop
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	0800ad88 	.word	0x0800ad88
 8008d9c:	080093dd 	.word	0x080093dd
 8008da0:	20001458 	.word	0x20001458
 8008da4:	20000f60 	.word	0x20000f60
 8008da8:	20000048 	.word	0x20000048
 8008dac:	20001454 	.word	0x20001454
 8008db0:	20001440 	.word	0x20001440
 8008db4:	20001438 	.word	0x20001438

08008db8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008db8:	b480      	push	{r7}
 8008dba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008dbc:	4b04      	ldr	r3, [pc, #16]	; (8008dd0 <vTaskSuspendAll+0x18>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	4a03      	ldr	r2, [pc, #12]	; (8008dd0 <vTaskSuspendAll+0x18>)
 8008dc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008dc6:	bf00      	nop
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	2000145c 	.word	0x2000145c

08008dd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008de2:	4b42      	ldr	r3, [pc, #264]	; (8008eec <xTaskResumeAll+0x118>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <xTaskResumeAll+0x2c>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	603b      	str	r3, [r7, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e00:	f001 fa30 	bl	800a264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e04:	4b39      	ldr	r3, [pc, #228]	; (8008eec <xTaskResumeAll+0x118>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	4a38      	ldr	r2, [pc, #224]	; (8008eec <xTaskResumeAll+0x118>)
 8008e0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e0e:	4b37      	ldr	r3, [pc, #220]	; (8008eec <xTaskResumeAll+0x118>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d162      	bne.n	8008edc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e16:	4b36      	ldr	r3, [pc, #216]	; (8008ef0 <xTaskResumeAll+0x11c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d05e      	beq.n	8008edc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e1e:	e02f      	b.n	8008e80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e20:	4b34      	ldr	r3, [pc, #208]	; (8008ef4 <xTaskResumeAll+0x120>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3318      	adds	r3, #24
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe fe3d 	bl	8007aac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fe38 	bl	8007aac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e40:	4b2d      	ldr	r3, [pc, #180]	; (8008ef8 <xTaskResumeAll+0x124>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d903      	bls.n	8008e50 <xTaskResumeAll+0x7c>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	4a2a      	ldr	r2, [pc, #168]	; (8008ef8 <xTaskResumeAll+0x124>)
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4a27      	ldr	r2, [pc, #156]	; (8008efc <xTaskResumeAll+0x128>)
 8008e5e:	441a      	add	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3304      	adds	r3, #4
 8008e64:	4619      	mov	r1, r3
 8008e66:	4610      	mov	r0, r2
 8008e68:	f7fe fdc3 	bl	80079f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e70:	4b23      	ldr	r3, [pc, #140]	; (8008f00 <xTaskResumeAll+0x12c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d302      	bcc.n	8008e80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e7a:	4b22      	ldr	r3, [pc, #136]	; (8008f04 <xTaskResumeAll+0x130>)
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e80:	4b1c      	ldr	r3, [pc, #112]	; (8008ef4 <xTaskResumeAll+0x120>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1cb      	bne.n	8008e20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e8e:	f000 fb5f 	bl	8009550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e92:	4b1d      	ldr	r3, [pc, #116]	; (8008f08 <xTaskResumeAll+0x134>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d010      	beq.n	8008ec0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e9e:	f000 f847 	bl	8008f30 <xTaskIncrementTick>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008ea8:	4b16      	ldr	r3, [pc, #88]	; (8008f04 <xTaskResumeAll+0x130>)
 8008eaa:	2201      	movs	r2, #1
 8008eac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1f1      	bne.n	8008e9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008eba:	4b13      	ldr	r3, [pc, #76]	; (8008f08 <xTaskResumeAll+0x134>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ec0:	4b10      	ldr	r3, [pc, #64]	; (8008f04 <xTaskResumeAll+0x130>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d009      	beq.n	8008edc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ecc:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <xTaskResumeAll+0x138>)
 8008ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008edc:	f001 f9f2 	bl	800a2c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	2000145c 	.word	0x2000145c
 8008ef0:	20001434 	.word	0x20001434
 8008ef4:	200013f4 	.word	0x200013f4
 8008ef8:	2000143c 	.word	0x2000143c
 8008efc:	20000f64 	.word	0x20000f64
 8008f00:	20000f60 	.word	0x20000f60
 8008f04:	20001448 	.word	0x20001448
 8008f08:	20001444 	.word	0x20001444
 8008f0c:	e000ed04 	.word	0xe000ed04

08008f10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f16:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <xTaskGetTickCount+0x1c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f1c:	687b      	ldr	r3, [r7, #4]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	20001438 	.word	0x20001438

08008f30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f36:	2300      	movs	r3, #0
 8008f38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f3a:	4b4f      	ldr	r3, [pc, #316]	; (8009078 <xTaskIncrementTick+0x148>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f040 808f 	bne.w	8009062 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f44:	4b4d      	ldr	r3, [pc, #308]	; (800907c <xTaskIncrementTick+0x14c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f4c:	4a4b      	ldr	r2, [pc, #300]	; (800907c <xTaskIncrementTick+0x14c>)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d120      	bne.n	8008f9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f58:	4b49      	ldr	r3, [pc, #292]	; (8009080 <xTaskIncrementTick+0x150>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	603b      	str	r3, [r7, #0]
}
 8008f74:	bf00      	nop
 8008f76:	e7fe      	b.n	8008f76 <xTaskIncrementTick+0x46>
 8008f78:	4b41      	ldr	r3, [pc, #260]	; (8009080 <xTaskIncrementTick+0x150>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	4b41      	ldr	r3, [pc, #260]	; (8009084 <xTaskIncrementTick+0x154>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a3f      	ldr	r2, [pc, #252]	; (8009080 <xTaskIncrementTick+0x150>)
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	4a3f      	ldr	r2, [pc, #252]	; (8009084 <xTaskIncrementTick+0x154>)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	4b3e      	ldr	r3, [pc, #248]	; (8009088 <xTaskIncrementTick+0x158>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3301      	adds	r3, #1
 8008f92:	4a3d      	ldr	r2, [pc, #244]	; (8009088 <xTaskIncrementTick+0x158>)
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	f000 fadb 	bl	8009550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f9a:	4b3c      	ldr	r3, [pc, #240]	; (800908c <xTaskIncrementTick+0x15c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d349      	bcc.n	8009038 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa4:	4b36      	ldr	r3, [pc, #216]	; (8009080 <xTaskIncrementTick+0x150>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d104      	bne.n	8008fb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fae:	4b37      	ldr	r3, [pc, #220]	; (800908c <xTaskIncrementTick+0x15c>)
 8008fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb4:	601a      	str	r2, [r3, #0]
					break;
 8008fb6:	e03f      	b.n	8009038 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb8:	4b31      	ldr	r3, [pc, #196]	; (8009080 <xTaskIncrementTick+0x150>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d203      	bcs.n	8008fd8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fd0:	4a2e      	ldr	r2, [pc, #184]	; (800908c <xTaskIncrementTick+0x15c>)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fd6:	e02f      	b.n	8009038 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fd65 	bl	8007aac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d004      	beq.n	8008ff4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	3318      	adds	r3, #24
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe fd5c 	bl	8007aac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff8:	4b25      	ldr	r3, [pc, #148]	; (8009090 <xTaskIncrementTick+0x160>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d903      	bls.n	8009008 <xTaskIncrementTick+0xd8>
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	4a22      	ldr	r2, [pc, #136]	; (8009090 <xTaskIncrementTick+0x160>)
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900c:	4613      	mov	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4a1f      	ldr	r2, [pc, #124]	; (8009094 <xTaskIncrementTick+0x164>)
 8009016:	441a      	add	r2, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	3304      	adds	r3, #4
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f7fe fce7 	bl	80079f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009028:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <xTaskIncrementTick+0x168>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	429a      	cmp	r2, r3
 8009030:	d3b8      	bcc.n	8008fa4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009032:	2301      	movs	r3, #1
 8009034:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009036:	e7b5      	b.n	8008fa4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009038:	4b17      	ldr	r3, [pc, #92]	; (8009098 <xTaskIncrementTick+0x168>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903e:	4915      	ldr	r1, [pc, #84]	; (8009094 <xTaskIncrementTick+0x164>)
 8009040:	4613      	mov	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	440b      	add	r3, r1
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d901      	bls.n	8009054 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009054:	4b11      	ldr	r3, [pc, #68]	; (800909c <xTaskIncrementTick+0x16c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d007      	beq.n	800906c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800905c:	2301      	movs	r3, #1
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	e004      	b.n	800906c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009062:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <xTaskIncrementTick+0x170>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3301      	adds	r3, #1
 8009068:	4a0d      	ldr	r2, [pc, #52]	; (80090a0 <xTaskIncrementTick+0x170>)
 800906a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800906c:	697b      	ldr	r3, [r7, #20]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	2000145c 	.word	0x2000145c
 800907c:	20001438 	.word	0x20001438
 8009080:	200013ec 	.word	0x200013ec
 8009084:	200013f0 	.word	0x200013f0
 8009088:	2000144c 	.word	0x2000144c
 800908c:	20001454 	.word	0x20001454
 8009090:	2000143c 	.word	0x2000143c
 8009094:	20000f64 	.word	0x20000f64
 8009098:	20000f60 	.word	0x20000f60
 800909c:	20001448 	.word	0x20001448
 80090a0:	20001444 	.word	0x20001444

080090a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090aa:	4b2a      	ldr	r3, [pc, #168]	; (8009154 <vTaskSwitchContext+0xb0>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090b2:	4b29      	ldr	r3, [pc, #164]	; (8009158 <vTaskSwitchContext+0xb4>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090b8:	e046      	b.n	8009148 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80090ba:	4b27      	ldr	r3, [pc, #156]	; (8009158 <vTaskSwitchContext+0xb4>)
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c0:	4b26      	ldr	r3, [pc, #152]	; (800915c <vTaskSwitchContext+0xb8>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	e010      	b.n	80090ea <vTaskSwitchContext+0x46>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10a      	bne.n	80090e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	607b      	str	r3, [r7, #4]
}
 80090e0:	bf00      	nop
 80090e2:	e7fe      	b.n	80090e2 <vTaskSwitchContext+0x3e>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3b01      	subs	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	491d      	ldr	r1, [pc, #116]	; (8009160 <vTaskSwitchContext+0xbc>)
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4613      	mov	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	440b      	add	r3, r1
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0e4      	beq.n	80090c8 <vTaskSwitchContext+0x24>
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4a15      	ldr	r2, [pc, #84]	; (8009160 <vTaskSwitchContext+0xbc>)
 800910a:	4413      	add	r3, r2
 800910c:	60bb      	str	r3, [r7, #8]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	605a      	str	r2, [r3, #4]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	3308      	adds	r3, #8
 8009120:	429a      	cmp	r2, r3
 8009122:	d104      	bne.n	800912e <vTaskSwitchContext+0x8a>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	605a      	str	r2, [r3, #4]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	4a0b      	ldr	r2, [pc, #44]	; (8009164 <vTaskSwitchContext+0xc0>)
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	4a08      	ldr	r2, [pc, #32]	; (800915c <vTaskSwitchContext+0xb8>)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800913e:	4b09      	ldr	r3, [pc, #36]	; (8009164 <vTaskSwitchContext+0xc0>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3354      	adds	r3, #84	; 0x54
 8009144:	4a08      	ldr	r2, [pc, #32]	; (8009168 <vTaskSwitchContext+0xc4>)
 8009146:	6013      	str	r3, [r2, #0]
}
 8009148:	bf00      	nop
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	2000145c 	.word	0x2000145c
 8009158:	20001448 	.word	0x20001448
 800915c:	2000143c 	.word	0x2000143c
 8009160:	20000f64 	.word	0x20000f64
 8009164:	20000f60 	.word	0x20000f60
 8009168:	20000048 	.word	0x20000048

0800916c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	60fb      	str	r3, [r7, #12]
}
 800918e:	bf00      	nop
 8009190:	e7fe      	b.n	8009190 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009192:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <vTaskPlaceOnEventList+0x44>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3318      	adds	r3, #24
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7fe fc4d 	bl	8007a3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091a0:	2101      	movs	r1, #1
 80091a2:	6838      	ldr	r0, [r7, #0]
 80091a4:	f000 fb8e 	bl	80098c4 <prvAddCurrentTaskToDelayedList>
}
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20000f60 	.word	0x20000f60

080091b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	617b      	str	r3, [r7, #20]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <vTaskPlaceOnEventListRestricted+0x54>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3318      	adds	r3, #24
 80091e2:	4619      	mov	r1, r3
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f7fe fc04 	bl	80079f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80091f0:	f04f 33ff 	mov.w	r3, #4294967295
 80091f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	68b8      	ldr	r0, [r7, #8]
 80091fa:	f000 fb63 	bl	80098c4 <prvAddCurrentTaskToDelayedList>
	}
 80091fe:	bf00      	nop
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20000f60 	.word	0x20000f60

0800920c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10a      	bne.n	8009238 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	60fb      	str	r3, [r7, #12]
}
 8009234:	bf00      	nop
 8009236:	e7fe      	b.n	8009236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	3318      	adds	r3, #24
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fc35 	bl	8007aac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009242:	4b1e      	ldr	r3, [pc, #120]	; (80092bc <xTaskRemoveFromEventList+0xb0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d11d      	bne.n	8009286 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	3304      	adds	r3, #4
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fc2c 	bl	8007aac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009258:	4b19      	ldr	r3, [pc, #100]	; (80092c0 <xTaskRemoveFromEventList+0xb4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	429a      	cmp	r2, r3
 800925e:	d903      	bls.n	8009268 <xTaskRemoveFromEventList+0x5c>
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	4a16      	ldr	r2, [pc, #88]	; (80092c0 <xTaskRemoveFromEventList+0xb4>)
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926c:	4613      	mov	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4a13      	ldr	r2, [pc, #76]	; (80092c4 <xTaskRemoveFromEventList+0xb8>)
 8009276:	441a      	add	r2, r3
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	3304      	adds	r3, #4
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f7fe fbb7 	bl	80079f2 <vListInsertEnd>
 8009284:	e005      	b.n	8009292 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3318      	adds	r3, #24
 800928a:	4619      	mov	r1, r3
 800928c:	480e      	ldr	r0, [pc, #56]	; (80092c8 <xTaskRemoveFromEventList+0xbc>)
 800928e:	f7fe fbb0 	bl	80079f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009296:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <xTaskRemoveFromEventList+0xc0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	429a      	cmp	r2, r3
 800929e:	d905      	bls.n	80092ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092a0:	2301      	movs	r3, #1
 80092a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092a4:	4b0a      	ldr	r3, [pc, #40]	; (80092d0 <xTaskRemoveFromEventList+0xc4>)
 80092a6:	2201      	movs	r2, #1
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	e001      	b.n	80092b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80092ac:	2300      	movs	r3, #0
 80092ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092b0:	697b      	ldr	r3, [r7, #20]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	2000145c 	.word	0x2000145c
 80092c0:	2000143c 	.word	0x2000143c
 80092c4:	20000f64 	.word	0x20000f64
 80092c8:	200013f4 	.word	0x200013f4
 80092cc:	20000f60 	.word	0x20000f60
 80092d0:	20001448 	.word	0x20001448

080092d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092dc:	4b06      	ldr	r3, [pc, #24]	; (80092f8 <vTaskInternalSetTimeOutState+0x24>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092e4:	4b05      	ldr	r3, [pc, #20]	; (80092fc <vTaskInternalSetTimeOutState+0x28>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	2000144c 	.word	0x2000144c
 80092fc:	20001438 	.word	0x20001438

08009300 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	613b      	str	r3, [r7, #16]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60fb      	str	r3, [r7, #12]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009342:	f000 ff8f 	bl	800a264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009346:	4b1d      	ldr	r3, [pc, #116]	; (80093bc <xTaskCheckForTimeOut+0xbc>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935e:	d102      	bne.n	8009366 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009360:	2300      	movs	r3, #0
 8009362:	61fb      	str	r3, [r7, #28]
 8009364:	e023      	b.n	80093ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	4b15      	ldr	r3, [pc, #84]	; (80093c0 <xTaskCheckForTimeOut+0xc0>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d007      	beq.n	8009382 <xTaskCheckForTimeOut+0x82>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	429a      	cmp	r2, r3
 800937a:	d302      	bcc.n	8009382 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800937c:	2301      	movs	r3, #1
 800937e:	61fb      	str	r3, [r7, #28]
 8009380:	e015      	b.n	80093ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	429a      	cmp	r2, r3
 800938a:	d20b      	bcs.n	80093a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	1ad2      	subs	r2, r2, r3
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff ff9b 	bl	80092d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800939e:	2300      	movs	r3, #0
 80093a0:	61fb      	str	r3, [r7, #28]
 80093a2:	e004      	b.n	80093ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093aa:	2301      	movs	r3, #1
 80093ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093ae:	f000 ff89 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 80093b2:	69fb      	ldr	r3, [r7, #28]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3720      	adds	r7, #32
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20001438 	.word	0x20001438
 80093c0:	2000144c 	.word	0x2000144c

080093c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093c4:	b480      	push	{r7}
 80093c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093c8:	4b03      	ldr	r3, [pc, #12]	; (80093d8 <vTaskMissedYield+0x14>)
 80093ca:	2201      	movs	r2, #1
 80093cc:	601a      	str	r2, [r3, #0]
}
 80093ce:	bf00      	nop
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	20001448 	.word	0x20001448

080093dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093e4:	f000 f852 	bl	800948c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093e8:	4b06      	ldr	r3, [pc, #24]	; (8009404 <prvIdleTask+0x28>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d9f9      	bls.n	80093e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093f0:	4b05      	ldr	r3, [pc, #20]	; (8009408 <prvIdleTask+0x2c>)
 80093f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009400:	e7f0      	b.n	80093e4 <prvIdleTask+0x8>
 8009402:	bf00      	nop
 8009404:	20000f64 	.word	0x20000f64
 8009408:	e000ed04 	.word	0xe000ed04

0800940c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009412:	2300      	movs	r3, #0
 8009414:	607b      	str	r3, [r7, #4]
 8009416:	e00c      	b.n	8009432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4a12      	ldr	r2, [pc, #72]	; (800946c <prvInitialiseTaskLists+0x60>)
 8009424:	4413      	add	r3, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fab6 	bl	8007998 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3301      	adds	r3, #1
 8009430:	607b      	str	r3, [r7, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b37      	cmp	r3, #55	; 0x37
 8009436:	d9ef      	bls.n	8009418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009438:	480d      	ldr	r0, [pc, #52]	; (8009470 <prvInitialiseTaskLists+0x64>)
 800943a:	f7fe faad 	bl	8007998 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800943e:	480d      	ldr	r0, [pc, #52]	; (8009474 <prvInitialiseTaskLists+0x68>)
 8009440:	f7fe faaa 	bl	8007998 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009444:	480c      	ldr	r0, [pc, #48]	; (8009478 <prvInitialiseTaskLists+0x6c>)
 8009446:	f7fe faa7 	bl	8007998 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800944a:	480c      	ldr	r0, [pc, #48]	; (800947c <prvInitialiseTaskLists+0x70>)
 800944c:	f7fe faa4 	bl	8007998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009450:	480b      	ldr	r0, [pc, #44]	; (8009480 <prvInitialiseTaskLists+0x74>)
 8009452:	f7fe faa1 	bl	8007998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <prvInitialiseTaskLists+0x78>)
 8009458:	4a05      	ldr	r2, [pc, #20]	; (8009470 <prvInitialiseTaskLists+0x64>)
 800945a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800945c:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <prvInitialiseTaskLists+0x7c>)
 800945e:	4a05      	ldr	r2, [pc, #20]	; (8009474 <prvInitialiseTaskLists+0x68>)
 8009460:	601a      	str	r2, [r3, #0]
}
 8009462:	bf00      	nop
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20000f64 	.word	0x20000f64
 8009470:	200013c4 	.word	0x200013c4
 8009474:	200013d8 	.word	0x200013d8
 8009478:	200013f4 	.word	0x200013f4
 800947c:	20001408 	.word	0x20001408
 8009480:	20001420 	.word	0x20001420
 8009484:	200013ec 	.word	0x200013ec
 8009488:	200013f0 	.word	0x200013f0

0800948c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009492:	e019      	b.n	80094c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009494:	f000 fee6 	bl	800a264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009498:	4b10      	ldr	r3, [pc, #64]	; (80094dc <prvCheckTasksWaitingTermination+0x50>)
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe fb01 	bl	8007aac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094aa:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <prvCheckTasksWaitingTermination+0x54>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3b01      	subs	r3, #1
 80094b0:	4a0b      	ldr	r2, [pc, #44]	; (80094e0 <prvCheckTasksWaitingTermination+0x54>)
 80094b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094b4:	4b0b      	ldr	r3, [pc, #44]	; (80094e4 <prvCheckTasksWaitingTermination+0x58>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	4a0a      	ldr	r2, [pc, #40]	; (80094e4 <prvCheckTasksWaitingTermination+0x58>)
 80094bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094be:	f000 ff01 	bl	800a2c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f810 	bl	80094e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094c8:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <prvCheckTasksWaitingTermination+0x58>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e1      	bne.n	8009494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20001408 	.word	0x20001408
 80094e0:	20001434 	.word	0x20001434
 80094e4:	2000141c 	.word	0x2000141c

080094e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3354      	adds	r3, #84	; 0x54
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 fb13 	bl	800ab20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009500:	2b00      	cmp	r3, #0
 8009502:	d108      	bne.n	8009516 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009508:	4618      	mov	r0, r3
 800950a:	f001 f899 	bl	800a640 <vPortFree>
				vPortFree( pxTCB );
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 f896 	bl	800a640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009514:	e018      	b.n	8009548 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800951c:	2b01      	cmp	r3, #1
 800951e:	d103      	bne.n	8009528 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f001 f88d 	bl	800a640 <vPortFree>
	}
 8009526:	e00f      	b.n	8009548 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800952e:	2b02      	cmp	r3, #2
 8009530:	d00a      	beq.n	8009548 <prvDeleteTCB+0x60>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	60fb      	str	r3, [r7, #12]
}
 8009544:	bf00      	nop
 8009546:	e7fe      	b.n	8009546 <prvDeleteTCB+0x5e>
	}
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <prvResetNextTaskUnblockTime+0x38>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d104      	bne.n	800956a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <prvResetNextTaskUnblockTime+0x3c>)
 8009562:	f04f 32ff 	mov.w	r2, #4294967295
 8009566:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009568:	e008      	b.n	800957c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <prvResetNextTaskUnblockTime+0x38>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4a04      	ldr	r2, [pc, #16]	; (800958c <prvResetNextTaskUnblockTime+0x3c>)
 800957a:	6013      	str	r3, [r2, #0]
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	200013ec 	.word	0x200013ec
 800958c:	20001454 	.word	0x20001454

08009590 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009596:	4b05      	ldr	r3, [pc, #20]	; (80095ac <xTaskGetCurrentTaskHandle+0x1c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800959c:	687b      	ldr	r3, [r7, #4]
	}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	20000f60 	.word	0x20000f60

080095b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <xTaskGetSchedulerState+0x34>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d102      	bne.n	80095c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095be:	2301      	movs	r3, #1
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	e008      	b.n	80095d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095c4:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <xTaskGetSchedulerState+0x38>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095cc:	2302      	movs	r3, #2
 80095ce:	607b      	str	r3, [r7, #4]
 80095d0:	e001      	b.n	80095d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095d2:	2300      	movs	r3, #0
 80095d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095d6:	687b      	ldr	r3, [r7, #4]
	}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	20001440 	.word	0x20001440
 80095e8:	2000145c 	.word	0x2000145c

080095ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d051      	beq.n	80096a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009606:	4b2a      	ldr	r3, [pc, #168]	; (80096b0 <xTaskPriorityInherit+0xc4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	429a      	cmp	r2, r3
 800960e:	d241      	bcs.n	8009694 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	db06      	blt.n	8009626 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <xTaskPriorityInherit+0xc4>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6959      	ldr	r1, [r3, #20]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4a1f      	ldr	r2, [pc, #124]	; (80096b4 <xTaskPriorityInherit+0xc8>)
 8009638:	4413      	add	r3, r2
 800963a:	4299      	cmp	r1, r3
 800963c:	d122      	bne.n	8009684 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	3304      	adds	r3, #4
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fa32 	bl	8007aac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009648:	4b19      	ldr	r3, [pc, #100]	; (80096b0 <xTaskPriorityInherit+0xc4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009656:	4b18      	ldr	r3, [pc, #96]	; (80096b8 <xTaskPriorityInherit+0xcc>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	429a      	cmp	r2, r3
 800965c:	d903      	bls.n	8009666 <xTaskPriorityInherit+0x7a>
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009662:	4a15      	ldr	r2, [pc, #84]	; (80096b8 <xTaskPriorityInherit+0xcc>)
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966a:	4613      	mov	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4a10      	ldr	r2, [pc, #64]	; (80096b4 <xTaskPriorityInherit+0xc8>)
 8009674:	441a      	add	r2, r3
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	3304      	adds	r3, #4
 800967a:	4619      	mov	r1, r3
 800967c:	4610      	mov	r0, r2
 800967e:	f7fe f9b8 	bl	80079f2 <vListInsertEnd>
 8009682:	e004      	b.n	800968e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009684:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <xTaskPriorityInherit+0xc4>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800968e:	2301      	movs	r3, #1
 8009690:	60fb      	str	r3, [r7, #12]
 8009692:	e008      	b.n	80096a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009698:	4b05      	ldr	r3, [pc, #20]	; (80096b0 <xTaskPriorityInherit+0xc4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	429a      	cmp	r2, r3
 80096a0:	d201      	bcs.n	80096a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80096a2:	2301      	movs	r3, #1
 80096a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096a6:	68fb      	ldr	r3, [r7, #12]
	}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	20000f60 	.word	0x20000f60
 80096b4:	20000f64 	.word	0x20000f64
 80096b8:	2000143c 	.word	0x2000143c

080096bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d056      	beq.n	8009780 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096d2:	4b2e      	ldr	r3, [pc, #184]	; (800978c <xTaskPriorityDisinherit+0xd0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d00a      	beq.n	80096f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	60fb      	str	r3, [r7, #12]
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10a      	bne.n	8009710 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	60bb      	str	r3, [r7, #8]
}
 800970c:	bf00      	nop
 800970e:	e7fe      	b.n	800970e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009714:	1e5a      	subs	r2, r3, #1
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009722:	429a      	cmp	r2, r3
 8009724:	d02c      	beq.n	8009780 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800972a:	2b00      	cmp	r3, #0
 800972c:	d128      	bne.n	8009780 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	3304      	adds	r3, #4
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe f9ba 	bl	8007aac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009750:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <xTaskPriorityDisinherit+0xd4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d903      	bls.n	8009760 <xTaskPriorityDisinherit+0xa4>
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	4a0c      	ldr	r2, [pc, #48]	; (8009790 <xTaskPriorityDisinherit+0xd4>)
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4a09      	ldr	r2, [pc, #36]	; (8009794 <xTaskPriorityDisinherit+0xd8>)
 800976e:	441a      	add	r2, r3
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	3304      	adds	r3, #4
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7fe f93b 	bl	80079f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800977c:	2301      	movs	r3, #1
 800977e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009780:	697b      	ldr	r3, [r7, #20]
	}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000f60 	.word	0x20000f60
 8009790:	2000143c 	.word	0x2000143c
 8009794:	20000f64 	.word	0x20000f64

08009798 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80097a6:	2301      	movs	r3, #1
 80097a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d06a      	beq.n	8009886 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10a      	bne.n	80097ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	60fb      	str	r3, [r7, #12]
}
 80097ca:	bf00      	nop
 80097cc:	e7fe      	b.n	80097cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d902      	bls.n	80097de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	e002      	b.n	80097e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	69fa      	ldr	r2, [r7, #28]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d04b      	beq.n	8009886 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d146      	bne.n	8009886 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80097f8:	4b25      	ldr	r3, [pc, #148]	; (8009890 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d10a      	bne.n	8009818 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	60bb      	str	r3, [r7, #8]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	69fa      	ldr	r2, [r7, #28]
 8009822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	db04      	blt.n	8009836 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	6959      	ldr	r1, [r3, #20]
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4a13      	ldr	r2, [pc, #76]	; (8009894 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009846:	4413      	add	r3, r2
 8009848:	4299      	cmp	r1, r3
 800984a:	d11c      	bne.n	8009886 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	3304      	adds	r3, #4
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe f92b 	bl	8007aac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985a:	4b0f      	ldr	r3, [pc, #60]	; (8009898 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d903      	bls.n	800986a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009866:	4a0c      	ldr	r2, [pc, #48]	; (8009898 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4a07      	ldr	r2, [pc, #28]	; (8009894 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009878:	441a      	add	r2, r3
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f7fe f8b6 	bl	80079f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009886:	bf00      	nop
 8009888:	3720      	adds	r7, #32
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000f60 	.word	0x20000f60
 8009894:	20000f64 	.word	0x20000f64
 8009898:	2000143c 	.word	0x2000143c

0800989c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098ae:	3201      	adds	r2, #1
 80098b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80098b2:	4b03      	ldr	r3, [pc, #12]	; (80098c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098b4:	681b      	ldr	r3, [r3, #0]
	}
 80098b6:	4618      	mov	r0, r3
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr
 80098c0:	20000f60 	.word	0x20000f60

080098c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098ce:	4b21      	ldr	r3, [pc, #132]	; (8009954 <prvAddCurrentTaskToDelayedList+0x90>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098d4:	4b20      	ldr	r3, [pc, #128]	; (8009958 <prvAddCurrentTaskToDelayedList+0x94>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3304      	adds	r3, #4
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe f8e6 	bl	8007aac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d10a      	bne.n	80098fe <prvAddCurrentTaskToDelayedList+0x3a>
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d007      	beq.n	80098fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ee:	4b1a      	ldr	r3, [pc, #104]	; (8009958 <prvAddCurrentTaskToDelayedList+0x94>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4819      	ldr	r0, [pc, #100]	; (800995c <prvAddCurrentTaskToDelayedList+0x98>)
 80098f8:	f7fe f87b 	bl	80079f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098fc:	e026      	b.n	800994c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4413      	add	r3, r2
 8009904:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009906:	4b14      	ldr	r3, [pc, #80]	; (8009958 <prvAddCurrentTaskToDelayedList+0x94>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	429a      	cmp	r2, r3
 8009914:	d209      	bcs.n	800992a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009916:	4b12      	ldr	r3, [pc, #72]	; (8009960 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	4b0f      	ldr	r3, [pc, #60]	; (8009958 <prvAddCurrentTaskToDelayedList+0x94>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3304      	adds	r3, #4
 8009920:	4619      	mov	r1, r3
 8009922:	4610      	mov	r0, r2
 8009924:	f7fe f889 	bl	8007a3a <vListInsert>
}
 8009928:	e010      	b.n	800994c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800992a:	4b0e      	ldr	r3, [pc, #56]	; (8009964 <prvAddCurrentTaskToDelayedList+0xa0>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <prvAddCurrentTaskToDelayedList+0x94>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3304      	adds	r3, #4
 8009934:	4619      	mov	r1, r3
 8009936:	4610      	mov	r0, r2
 8009938:	f7fe f87f 	bl	8007a3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800993c:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <prvAddCurrentTaskToDelayedList+0xa4>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	429a      	cmp	r2, r3
 8009944:	d202      	bcs.n	800994c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009946:	4a08      	ldr	r2, [pc, #32]	; (8009968 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	6013      	str	r3, [r2, #0]
}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20001438 	.word	0x20001438
 8009958:	20000f60 	.word	0x20000f60
 800995c:	20001420 	.word	0x20001420
 8009960:	200013f0 	.word	0x200013f0
 8009964:	200013ec 	.word	0x200013ec
 8009968:	20001454 	.word	0x20001454

0800996c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08a      	sub	sp, #40	; 0x28
 8009970:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009972:	2300      	movs	r3, #0
 8009974:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009976:	f000 fb07 	bl	8009f88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800997a:	4b1c      	ldr	r3, [pc, #112]	; (80099ec <xTimerCreateTimerTask+0x80>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d021      	beq.n	80099c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009982:	2300      	movs	r3, #0
 8009984:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800998a:	1d3a      	adds	r2, r7, #4
 800998c:	f107 0108 	add.w	r1, r7, #8
 8009990:	f107 030c 	add.w	r3, r7, #12
 8009994:	4618      	mov	r0, r3
 8009996:	f7fd ffe5 	bl	8007964 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	9202      	str	r2, [sp, #8]
 80099a2:	9301      	str	r3, [sp, #4]
 80099a4:	2302      	movs	r3, #2
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	2300      	movs	r3, #0
 80099aa:	460a      	mov	r2, r1
 80099ac:	4910      	ldr	r1, [pc, #64]	; (80099f0 <xTimerCreateTimerTask+0x84>)
 80099ae:	4811      	ldr	r0, [pc, #68]	; (80099f4 <xTimerCreateTimerTask+0x88>)
 80099b0:	f7fe ffa6 	bl	8008900 <xTaskCreateStatic>
 80099b4:	4603      	mov	r3, r0
 80099b6:	4a10      	ldr	r2, [pc, #64]	; (80099f8 <xTimerCreateTimerTask+0x8c>)
 80099b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099ba:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <xTimerCreateTimerTask+0x8c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099c2:	2301      	movs	r3, #1
 80099c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10a      	bne.n	80099e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	613b      	str	r3, [r7, #16]
}
 80099de:	bf00      	nop
 80099e0:	e7fe      	b.n	80099e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80099e2:	697b      	ldr	r3, [r7, #20]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3718      	adds	r7, #24
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20001490 	.word	0x20001490
 80099f0:	0800ad90 	.word	0x0800ad90
 80099f4:	08009b31 	.word	0x08009b31
 80099f8:	20001494 	.word	0x20001494

080099fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08a      	sub	sp, #40	; 0x28
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	623b      	str	r3, [r7, #32]
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a2a:	4b1a      	ldr	r3, [pc, #104]	; (8009a94 <xTimerGenericCommand+0x98>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d02a      	beq.n	8009a88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2b05      	cmp	r3, #5
 8009a42:	dc18      	bgt.n	8009a76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a44:	f7ff fdb4 	bl	80095b0 <xTaskGetSchedulerState>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d109      	bne.n	8009a62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a4e:	4b11      	ldr	r3, [pc, #68]	; (8009a94 <xTimerGenericCommand+0x98>)
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	f107 0110 	add.w	r1, r7, #16
 8009a56:	2300      	movs	r3, #0
 8009a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a5a:	f7fe fa45 	bl	8007ee8 <xQueueGenericSend>
 8009a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8009a60:	e012      	b.n	8009a88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a62:	4b0c      	ldr	r3, [pc, #48]	; (8009a94 <xTimerGenericCommand+0x98>)
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	f107 0110 	add.w	r1, r7, #16
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f7fe fa3b 	bl	8007ee8 <xQueueGenericSend>
 8009a72:	6278      	str	r0, [r7, #36]	; 0x24
 8009a74:	e008      	b.n	8009a88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a76:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <xTimerGenericCommand+0x98>)
 8009a78:	6818      	ldr	r0, [r3, #0]
 8009a7a:	f107 0110 	add.w	r1, r7, #16
 8009a7e:	2300      	movs	r3, #0
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	f7fe fb2f 	bl	80080e4 <xQueueGenericSendFromISR>
 8009a86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3728      	adds	r7, #40	; 0x28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20001490 	.word	0x20001490

08009a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af02      	add	r7, sp, #8
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa2:	4b22      	ldr	r3, [pc, #136]	; (8009b2c <prvProcessExpiredTimer+0x94>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fd fffb 	bl	8007aac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d022      	beq.n	8009b0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	699a      	ldr	r2, [r3, #24]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	18d1      	adds	r1, r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	6978      	ldr	r0, [r7, #20]
 8009ad2:	f000 f8d1 	bl	8009c78 <prvInsertTimerInActiveList>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01f      	beq.n	8009b1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009adc:	2300      	movs	r3, #0
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	6978      	ldr	r0, [r7, #20]
 8009ae8:	f7ff ff88 	bl	80099fc <xTimerGenericCommand>
 8009aec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d113      	bne.n	8009b1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	60fb      	str	r3, [r7, #12]
}
 8009b06:	bf00      	nop
 8009b08:	e7fe      	b.n	8009b08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b10:	f023 0301 	bic.w	r3, r3, #1
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	6a1b      	ldr	r3, [r3, #32]
 8009b20:	6978      	ldr	r0, [r7, #20]
 8009b22:	4798      	blx	r3
}
 8009b24:	bf00      	nop
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20001488 	.word	0x20001488

08009b30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b38:	f107 0308 	add.w	r3, r7, #8
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f000 f857 	bl	8009bf0 <prvGetNextExpireTime>
 8009b42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	4619      	mov	r1, r3
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 f803 	bl	8009b54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b4e:	f000 f8d5 	bl	8009cfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b52:	e7f1      	b.n	8009b38 <prvTimerTask+0x8>

08009b54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b5e:	f7ff f92b 	bl	8008db8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b62:	f107 0308 	add.w	r3, r7, #8
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 f866 	bl	8009c38 <prvSampleTimeNow>
 8009b6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d130      	bne.n	8009bd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10a      	bne.n	8009b90 <prvProcessTimerOrBlockTask+0x3c>
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d806      	bhi.n	8009b90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b82:	f7ff f927 	bl	8008dd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b86:	68f9      	ldr	r1, [r7, #12]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff ff85 	bl	8009a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b8e:	e024      	b.n	8009bda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d008      	beq.n	8009ba8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <prvProcessTimerOrBlockTask+0x90>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <prvProcessTimerOrBlockTask+0x50>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e000      	b.n	8009ba6 <prvProcessTimerOrBlockTask+0x52>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ba8:	4b0f      	ldr	r3, [pc, #60]	; (8009be8 <prvProcessTimerOrBlockTask+0x94>)
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f7fe fe6f 	bl	8008898 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009bba:	f7ff f90b 	bl	8008dd4 <xTaskResumeAll>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10a      	bne.n	8009bda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009bc4:	4b09      	ldr	r3, [pc, #36]	; (8009bec <prvProcessTimerOrBlockTask+0x98>)
 8009bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	f3bf 8f6f 	isb	sy
}
 8009bd4:	e001      	b.n	8009bda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009bd6:	f7ff f8fd 	bl	8008dd4 <xTaskResumeAll>
}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	2000148c 	.word	0x2000148c
 8009be8:	20001490 	.word	0x20001490
 8009bec:	e000ed04 	.word	0xe000ed04

08009bf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bf8:	4b0e      	ldr	r3, [pc, #56]	; (8009c34 <prvGetNextExpireTime+0x44>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <prvGetNextExpireTime+0x16>
 8009c02:	2201      	movs	r2, #1
 8009c04:	e000      	b.n	8009c08 <prvGetNextExpireTime+0x18>
 8009c06:	2200      	movs	r2, #0
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d105      	bne.n	8009c20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c14:	4b07      	ldr	r3, [pc, #28]	; (8009c34 <prvGetNextExpireTime+0x44>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	e001      	b.n	8009c24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c24:	68fb      	ldr	r3, [r7, #12]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	20001488 	.word	0x20001488

08009c38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c40:	f7ff f966 	bl	8008f10 <xTaskGetTickCount>
 8009c44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c46:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <prvSampleTimeNow+0x3c>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d205      	bcs.n	8009c5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c50:	f000 f936 	bl	8009ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	e002      	b.n	8009c62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c62:	4a04      	ldr	r2, [pc, #16]	; (8009c74 <prvSampleTimeNow+0x3c>)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c68:	68fb      	ldr	r3, [r7, #12]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20001498 	.word	0x20001498

08009c78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c86:	2300      	movs	r3, #0
 8009c88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d812      	bhi.n	8009cc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	1ad2      	subs	r2, r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d302      	bcc.n	8009cb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009cac:	2301      	movs	r3, #1
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	e01b      	b.n	8009cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009cb2:	4b10      	ldr	r3, [pc, #64]	; (8009cf4 <prvInsertTimerInActiveList+0x7c>)
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	f7fd febc 	bl	8007a3a <vListInsert>
 8009cc2:	e012      	b.n	8009cea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d206      	bcs.n	8009cda <prvInsertTimerInActiveList+0x62>
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d302      	bcc.n	8009cda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	617b      	str	r3, [r7, #20]
 8009cd8:	e007      	b.n	8009cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cda:	4b07      	ldr	r3, [pc, #28]	; (8009cf8 <prvInsertTimerInActiveList+0x80>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	f7fd fea8 	bl	8007a3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cea:	697b      	ldr	r3, [r7, #20]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	2000148c 	.word	0x2000148c
 8009cf8:	20001488 	.word	0x20001488

08009cfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08e      	sub	sp, #56	; 0x38
 8009d00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d02:	e0ca      	b.n	8009e9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	da18      	bge.n	8009d3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d0a:	1d3b      	adds	r3, r7, #4
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10a      	bne.n	8009d2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	61fb      	str	r3, [r7, #28]
}
 8009d28:	bf00      	nop
 8009d2a:	e7fe      	b.n	8009d2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d32:	6850      	ldr	r0, [r2, #4]
 8009d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d36:	6892      	ldr	r2, [r2, #8]
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f2c0 80aa 	blt.w	8009e98 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d004      	beq.n	8009d5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	3304      	adds	r3, #4
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fd fea9 	bl	8007aac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d5a:	463b      	mov	r3, r7
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff ff6b 	bl	8009c38 <prvSampleTimeNow>
 8009d62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b09      	cmp	r3, #9
 8009d68:	f200 8097 	bhi.w	8009e9a <prvProcessReceivedCommands+0x19e>
 8009d6c:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <prvProcessReceivedCommands+0x78>)
 8009d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d72:	bf00      	nop
 8009d74:	08009d9d 	.word	0x08009d9d
 8009d78:	08009d9d 	.word	0x08009d9d
 8009d7c:	08009d9d 	.word	0x08009d9d
 8009d80:	08009e11 	.word	0x08009e11
 8009d84:	08009e25 	.word	0x08009e25
 8009d88:	08009e6f 	.word	0x08009e6f
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009d9d 	.word	0x08009d9d
 8009d94:	08009e11 	.word	0x08009e11
 8009d98:	08009e25 	.word	0x08009e25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009da2:	f043 0301 	orr.w	r3, r3, #1
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	18d1      	adds	r1, r2, r3
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dbc:	f7ff ff5c 	bl	8009c78 <prvInsertTimerInActiveList>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d069      	beq.n	8009e9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d05e      	beq.n	8009e9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	441a      	add	r2, r3
 8009de4:	2300      	movs	r3, #0
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2300      	movs	r3, #0
 8009dea:	2100      	movs	r1, #0
 8009dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dee:	f7ff fe05 	bl	80099fc <xTimerGenericCommand>
 8009df2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d14f      	bne.n	8009e9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	61bb      	str	r3, [r7, #24]
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e22:	e03a      	b.n	8009e9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e2a:	f043 0301 	orr.w	r3, r3, #1
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	617b      	str	r3, [r7, #20]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5c:	699a      	ldr	r2, [r3, #24]
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	18d1      	adds	r1, r2, r3
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e68:	f7ff ff06 	bl	8009c78 <prvInsertTimerInActiveList>
					break;
 8009e6c:	e015      	b.n	8009e9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e74:	f003 0302 	and.w	r3, r3, #2
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d103      	bne.n	8009e84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e7e:	f000 fbdf 	bl	800a640 <vPortFree>
 8009e82:	e00a      	b.n	8009e9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e8a:	f023 0301 	bic.w	r3, r3, #1
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e96:	e000      	b.n	8009e9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e9a:	4b08      	ldr	r3, [pc, #32]	; (8009ebc <prvProcessReceivedCommands+0x1c0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	1d39      	adds	r1, r7, #4
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe f9ba 	bl	800821c <xQueueReceive>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f47f af2a 	bne.w	8009d04 <prvProcessReceivedCommands+0x8>
	}
}
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
 8009eb4:	3730      	adds	r7, #48	; 0x30
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20001490 	.word	0x20001490

08009ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ec6:	e048      	b.n	8009f5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ec8:	4b2d      	ldr	r3, [pc, #180]	; (8009f80 <prvSwitchTimerLists+0xc0>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed2:	4b2b      	ldr	r3, [pc, #172]	; (8009f80 <prvSwitchTimerLists+0xc0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fd fde3 	bl	8007aac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d02e      	beq.n	8009f5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4413      	add	r3, r2
 8009f04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d90e      	bls.n	8009f2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f1a:	4b19      	ldr	r3, [pc, #100]	; (8009f80 <prvSwitchTimerLists+0xc0>)
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3304      	adds	r3, #4
 8009f22:	4619      	mov	r1, r3
 8009f24:	4610      	mov	r0, r2
 8009f26:	f7fd fd88 	bl	8007a3a <vListInsert>
 8009f2a:	e016      	b.n	8009f5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	2300      	movs	r3, #0
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	2100      	movs	r1, #0
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f7ff fd60 	bl	80099fc <xTimerGenericCommand>
 8009f3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	603b      	str	r3, [r7, #0]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f5a:	4b09      	ldr	r3, [pc, #36]	; (8009f80 <prvSwitchTimerLists+0xc0>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1b1      	bne.n	8009ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f64:	4b06      	ldr	r3, [pc, #24]	; (8009f80 <prvSwitchTimerLists+0xc0>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f6a:	4b06      	ldr	r3, [pc, #24]	; (8009f84 <prvSwitchTimerLists+0xc4>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a04      	ldr	r2, [pc, #16]	; (8009f80 <prvSwitchTimerLists+0xc0>)
 8009f70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f72:	4a04      	ldr	r2, [pc, #16]	; (8009f84 <prvSwitchTimerLists+0xc4>)
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	6013      	str	r3, [r2, #0]
}
 8009f78:	bf00      	nop
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	20001488 	.word	0x20001488
 8009f84:	2000148c 	.word	0x2000148c

08009f88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f8e:	f000 f969 	bl	800a264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f92:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <prvCheckForValidListAndQueue+0x60>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d120      	bne.n	8009fdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f9a:	4814      	ldr	r0, [pc, #80]	; (8009fec <prvCheckForValidListAndQueue+0x64>)
 8009f9c:	f7fd fcfc 	bl	8007998 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009fa0:	4813      	ldr	r0, [pc, #76]	; (8009ff0 <prvCheckForValidListAndQueue+0x68>)
 8009fa2:	f7fd fcf9 	bl	8007998 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009fa6:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <prvCheckForValidListAndQueue+0x6c>)
 8009fa8:	4a10      	ldr	r2, [pc, #64]	; (8009fec <prvCheckForValidListAndQueue+0x64>)
 8009faa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009fac:	4b12      	ldr	r3, [pc, #72]	; (8009ff8 <prvCheckForValidListAndQueue+0x70>)
 8009fae:	4a10      	ldr	r2, [pc, #64]	; (8009ff0 <prvCheckForValidListAndQueue+0x68>)
 8009fb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	4b11      	ldr	r3, [pc, #68]	; (8009ffc <prvCheckForValidListAndQueue+0x74>)
 8009fb8:	4a11      	ldr	r2, [pc, #68]	; (800a000 <prvCheckForValidListAndQueue+0x78>)
 8009fba:	2110      	movs	r1, #16
 8009fbc:	200a      	movs	r0, #10
 8009fbe:	f7fd fe07 	bl	8007bd0 <xQueueGenericCreateStatic>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4a08      	ldr	r2, [pc, #32]	; (8009fe8 <prvCheckForValidListAndQueue+0x60>)
 8009fc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fc8:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <prvCheckForValidListAndQueue+0x60>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d005      	beq.n	8009fdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fd0:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <prvCheckForValidListAndQueue+0x60>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	490b      	ldr	r1, [pc, #44]	; (800a004 <prvCheckForValidListAndQueue+0x7c>)
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fc34 	bl	8008844 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fdc:	f000 f972 	bl	800a2c4 <vPortExitCritical>
}
 8009fe0:	bf00      	nop
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20001490 	.word	0x20001490
 8009fec:	20001460 	.word	0x20001460
 8009ff0:	20001474 	.word	0x20001474
 8009ff4:	20001488 	.word	0x20001488
 8009ff8:	2000148c 	.word	0x2000148c
 8009ffc:	2000153c 	.word	0x2000153c
 800a000:	2000149c 	.word	0x2000149c
 800a004:	0800ad98 	.word	0x0800ad98

0800a008 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3b04      	subs	r3, #4
 800a018:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3b04      	subs	r3, #4
 800a026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	f023 0201 	bic.w	r2, r3, #1
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3b04      	subs	r3, #4
 800a036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a038:	4a0c      	ldr	r2, [pc, #48]	; (800a06c <pxPortInitialiseStack+0x64>)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3b14      	subs	r3, #20
 800a042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3b04      	subs	r3, #4
 800a04e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f06f 0202 	mvn.w	r2, #2
 800a056:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3b20      	subs	r3, #32
 800a05c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a05e:	68fb      	ldr	r3, [r7, #12]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	0800a071 	.word	0x0800a071

0800a070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a07a:	4b12      	ldr	r3, [pc, #72]	; (800a0c4 <prvTaskExitError+0x54>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a082:	d00a      	beq.n	800a09a <prvTaskExitError+0x2a>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	60fb      	str	r3, [r7, #12]
}
 800a096:	bf00      	nop
 800a098:	e7fe      	b.n	800a098 <prvTaskExitError+0x28>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	60bb      	str	r3, [r7, #8]
}
 800a0ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a0ae:	bf00      	nop
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0fc      	beq.n	800a0b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0b6:	bf00      	nop
 800a0b8:	bf00      	nop
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	20000044 	.word	0x20000044
	...

0800a0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <pxCurrentTCBConst2>)
 800a0d2:	6819      	ldr	r1, [r3, #0]
 800a0d4:	6808      	ldr	r0, [r1, #0]
 800a0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0da:	f380 8809 	msr	PSP, r0
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8811 	msr	BASEPRI, r0
 800a0ea:	4770      	bx	lr
 800a0ec:	f3af 8000 	nop.w

0800a0f0 <pxCurrentTCBConst2>:
 800a0f0:	20000f60 	.word	0x20000f60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop

0800a0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0f8:	4808      	ldr	r0, [pc, #32]	; (800a11c <prvPortStartFirstTask+0x24>)
 800a0fa:	6800      	ldr	r0, [r0, #0]
 800a0fc:	6800      	ldr	r0, [r0, #0]
 800a0fe:	f380 8808 	msr	MSP, r0
 800a102:	f04f 0000 	mov.w	r0, #0
 800a106:	f380 8814 	msr	CONTROL, r0
 800a10a:	b662      	cpsie	i
 800a10c:	b661      	cpsie	f
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	df00      	svc	0
 800a118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a11a:	bf00      	nop
 800a11c:	e000ed08 	.word	0xe000ed08

0800a120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a126:	4b46      	ldr	r3, [pc, #280]	; (800a240 <xPortStartScheduler+0x120>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a46      	ldr	r2, [pc, #280]	; (800a244 <xPortStartScheduler+0x124>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10a      	bne.n	800a146 <xPortStartScheduler+0x26>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	613b      	str	r3, [r7, #16]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a146:	4b3e      	ldr	r3, [pc, #248]	; (800a240 <xPortStartScheduler+0x120>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a3f      	ldr	r2, [pc, #252]	; (800a248 <xPortStartScheduler+0x128>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d10a      	bne.n	800a166 <xPortStartScheduler+0x46>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60fb      	str	r3, [r7, #12]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a166:	4b39      	ldr	r3, [pc, #228]	; (800a24c <xPortStartScheduler+0x12c>)
 800a168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	22ff      	movs	r2, #255	; 0xff
 800a176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	4b31      	ldr	r3, [pc, #196]	; (800a250 <xPortStartScheduler+0x130>)
 800a18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a18e:	4b31      	ldr	r3, [pc, #196]	; (800a254 <xPortStartScheduler+0x134>)
 800a190:	2207      	movs	r2, #7
 800a192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a194:	e009      	b.n	800a1aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a196:	4b2f      	ldr	r3, [pc, #188]	; (800a254 <xPortStartScheduler+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	4a2d      	ldr	r2, [pc, #180]	; (800a254 <xPortStartScheduler+0x134>)
 800a19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1b2:	2b80      	cmp	r3, #128	; 0x80
 800a1b4:	d0ef      	beq.n	800a196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1b6:	4b27      	ldr	r3, [pc, #156]	; (800a254 <xPortStartScheduler+0x134>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f1c3 0307 	rsb	r3, r3, #7
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d00a      	beq.n	800a1d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	60bb      	str	r3, [r7, #8]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1d8:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <xPortStartScheduler+0x134>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	021b      	lsls	r3, r3, #8
 800a1de:	4a1d      	ldr	r2, [pc, #116]	; (800a254 <xPortStartScheduler+0x134>)
 800a1e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1e2:	4b1c      	ldr	r3, [pc, #112]	; (800a254 <xPortStartScheduler+0x134>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ea:	4a1a      	ldr	r2, [pc, #104]	; (800a254 <xPortStartScheduler+0x134>)
 800a1ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1f6:	4b18      	ldr	r3, [pc, #96]	; (800a258 <xPortStartScheduler+0x138>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a17      	ldr	r2, [pc, #92]	; (800a258 <xPortStartScheduler+0x138>)
 800a1fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a202:	4b15      	ldr	r3, [pc, #84]	; (800a258 <xPortStartScheduler+0x138>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a14      	ldr	r2, [pc, #80]	; (800a258 <xPortStartScheduler+0x138>)
 800a208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a20c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a20e:	f000 f8dd 	bl	800a3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a212:	4b12      	ldr	r3, [pc, #72]	; (800a25c <xPortStartScheduler+0x13c>)
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a218:	f000 f8fc 	bl	800a414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a21c:	4b10      	ldr	r3, [pc, #64]	; (800a260 <xPortStartScheduler+0x140>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a0f      	ldr	r2, [pc, #60]	; (800a260 <xPortStartScheduler+0x140>)
 800a222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a228:	f7ff ff66 	bl	800a0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a22c:	f7fe ff3a 	bl	80090a4 <vTaskSwitchContext>
	prvTaskExitError();
 800a230:	f7ff ff1e 	bl	800a070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	e000ed00 	.word	0xe000ed00
 800a244:	410fc271 	.word	0x410fc271
 800a248:	410fc270 	.word	0x410fc270
 800a24c:	e000e400 	.word	0xe000e400
 800a250:	2000158c 	.word	0x2000158c
 800a254:	20001590 	.word	0x20001590
 800a258:	e000ed20 	.word	0xe000ed20
 800a25c:	20000044 	.word	0x20000044
 800a260:	e000ef34 	.word	0xe000ef34

0800a264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	607b      	str	r3, [r7, #4]
}
 800a27c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a27e:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <vPortEnterCritical+0x58>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3301      	adds	r3, #1
 800a284:	4a0d      	ldr	r2, [pc, #52]	; (800a2bc <vPortEnterCritical+0x58>)
 800a286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <vPortEnterCritical+0x58>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d10f      	bne.n	800a2b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a290:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <vPortEnterCritical+0x5c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	603b      	str	r3, [r7, #0]
}
 800a2ac:	bf00      	nop
 800a2ae:	e7fe      	b.n	800a2ae <vPortEnterCritical+0x4a>
	}
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	20000044 	.word	0x20000044
 800a2c0:	e000ed04 	.word	0xe000ed04

0800a2c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2ca:	4b12      	ldr	r3, [pc, #72]	; (800a314 <vPortExitCritical+0x50>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <vPortExitCritical+0x24>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	607b      	str	r3, [r7, #4]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <vPortExitCritical+0x50>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	4a09      	ldr	r2, [pc, #36]	; (800a314 <vPortExitCritical+0x50>)
 800a2f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2f2:	4b08      	ldr	r3, [pc, #32]	; (800a314 <vPortExitCritical+0x50>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d105      	bne.n	800a306 <vPortExitCritical+0x42>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	f383 8811 	msr	BASEPRI, r3
}
 800a304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a306:	bf00      	nop
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000044 	.word	0x20000044
	...

0800a320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a320:	f3ef 8009 	mrs	r0, PSP
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	4b15      	ldr	r3, [pc, #84]	; (800a380 <pxCurrentTCBConst>)
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	f01e 0f10 	tst.w	lr, #16
 800a330:	bf08      	it	eq
 800a332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	6010      	str	r0, [r2, #0]
 800a33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a340:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a344:	f380 8811 	msr	BASEPRI, r0
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f7fe fea8 	bl	80090a4 <vTaskSwitchContext>
 800a354:	f04f 0000 	mov.w	r0, #0
 800a358:	f380 8811 	msr	BASEPRI, r0
 800a35c:	bc09      	pop	{r0, r3}
 800a35e:	6819      	ldr	r1, [r3, #0]
 800a360:	6808      	ldr	r0, [r1, #0]
 800a362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a366:	f01e 0f10 	tst.w	lr, #16
 800a36a:	bf08      	it	eq
 800a36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a370:	f380 8809 	msr	PSP, r0
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	f3af 8000 	nop.w

0800a380 <pxCurrentTCBConst>:
 800a380:	20000f60 	.word	0x20000f60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	607b      	str	r3, [r7, #4]
}
 800a3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3a2:	f7fe fdc5 	bl	8008f30 <xTaskIncrementTick>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3ac:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <xPortSysTickHandler+0x40>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f383 8811 	msr	BASEPRI, r3
}
 800a3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3d0:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <vPortSetupTimerInterrupt+0x34>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <vPortSetupTimerInterrupt+0x38>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <vPortSetupTimerInterrupt+0x3c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a0a      	ldr	r2, [pc, #40]	; (800a40c <vPortSetupTimerInterrupt+0x40>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	099b      	lsrs	r3, r3, #6
 800a3e8:	4a09      	ldr	r2, [pc, #36]	; (800a410 <vPortSetupTimerInterrupt+0x44>)
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ee:	4b04      	ldr	r3, [pc, #16]	; (800a400 <vPortSetupTimerInterrupt+0x34>)
 800a3f0:	2207      	movs	r2, #7
 800a3f2:	601a      	str	r2, [r3, #0]
}
 800a3f4:	bf00      	nop
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	e000e010 	.word	0xe000e010
 800a404:	e000e018 	.word	0xe000e018
 800a408:	20000038 	.word	0x20000038
 800a40c:	10624dd3 	.word	0x10624dd3
 800a410:	e000e014 	.word	0xe000e014

0800a414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a424 <vPortEnableVFP+0x10>
 800a418:	6801      	ldr	r1, [r0, #0]
 800a41a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a41e:	6001      	str	r1, [r0, #0]
 800a420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a422:	bf00      	nop
 800a424:	e000ed88 	.word	0xe000ed88

0800a428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a42e:	f3ef 8305 	mrs	r3, IPSR
 800a432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b0f      	cmp	r3, #15
 800a438:	d914      	bls.n	800a464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a43a:	4a17      	ldr	r2, [pc, #92]	; (800a498 <vPortValidateInterruptPriority+0x70>)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4413      	add	r3, r2
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a444:	4b15      	ldr	r3, [pc, #84]	; (800a49c <vPortValidateInterruptPriority+0x74>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	7afa      	ldrb	r2, [r7, #11]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d20a      	bcs.n	800a464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a464:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <vPortValidateInterruptPriority+0x78>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a46c:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <vPortValidateInterruptPriority+0x7c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d90a      	bls.n	800a48a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	603b      	str	r3, [r7, #0]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <vPortValidateInterruptPriority+0x60>
	}
 800a48a:	bf00      	nop
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	e000e3f0 	.word	0xe000e3f0
 800a49c:	2000158c 	.word	0x2000158c
 800a4a0:	e000ed0c 	.word	0xe000ed0c
 800a4a4:	20001590 	.word	0x20001590

0800a4a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08a      	sub	sp, #40	; 0x28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4b4:	f7fe fc80 	bl	8008db8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4b8:	4b5b      	ldr	r3, [pc, #364]	; (800a628 <pvPortMalloc+0x180>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4c0:	f000 f920 	bl	800a704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4c4:	4b59      	ldr	r3, [pc, #356]	; (800a62c <pvPortMalloc+0x184>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f040 8093 	bne.w	800a5f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01d      	beq.n	800a514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a4d8:	2208      	movs	r2, #8
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4413      	add	r3, r2
 800a4de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d014      	beq.n	800a514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f023 0307 	bic.w	r3, r3, #7
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <pvPortMalloc+0x6c>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	617b      	str	r3, [r7, #20]
}
 800a510:	bf00      	nop
 800a512:	e7fe      	b.n	800a512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d06e      	beq.n	800a5f8 <pvPortMalloc+0x150>
 800a51a:	4b45      	ldr	r3, [pc, #276]	; (800a630 <pvPortMalloc+0x188>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d869      	bhi.n	800a5f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a524:	4b43      	ldr	r3, [pc, #268]	; (800a634 <pvPortMalloc+0x18c>)
 800a526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a528:	4b42      	ldr	r3, [pc, #264]	; (800a634 <pvPortMalloc+0x18c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a52e:	e004      	b.n	800a53a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d903      	bls.n	800a54c <pvPortMalloc+0xa4>
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1f1      	bne.n	800a530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a54c:	4b36      	ldr	r3, [pc, #216]	; (800a628 <pvPortMalloc+0x180>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a552:	429a      	cmp	r2, r3
 800a554:	d050      	beq.n	800a5f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2208      	movs	r2, #8
 800a55c:	4413      	add	r3, r2
 800a55e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	1ad2      	subs	r2, r2, r3
 800a570:	2308      	movs	r3, #8
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	429a      	cmp	r2, r3
 800a576:	d91f      	bls.n	800a5b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4413      	add	r3, r2
 800a57e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	613b      	str	r3, [r7, #16]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5b2:	69b8      	ldr	r0, [r7, #24]
 800a5b4:	f000 f908 	bl	800a7c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5b8:	4b1d      	ldr	r3, [pc, #116]	; (800a630 <pvPortMalloc+0x188>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	4a1b      	ldr	r2, [pc, #108]	; (800a630 <pvPortMalloc+0x188>)
 800a5c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5c6:	4b1a      	ldr	r3, [pc, #104]	; (800a630 <pvPortMalloc+0x188>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	4b1b      	ldr	r3, [pc, #108]	; (800a638 <pvPortMalloc+0x190>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d203      	bcs.n	800a5da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5d2:	4b17      	ldr	r3, [pc, #92]	; (800a630 <pvPortMalloc+0x188>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a18      	ldr	r2, [pc, #96]	; (800a638 <pvPortMalloc+0x190>)
 800a5d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <pvPortMalloc+0x184>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5ee:	4b13      	ldr	r3, [pc, #76]	; (800a63c <pvPortMalloc+0x194>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	4a11      	ldr	r2, [pc, #68]	; (800a63c <pvPortMalloc+0x194>)
 800a5f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5f8:	f7fe fbec 	bl	8008dd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f003 0307 	and.w	r3, r3, #7
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <pvPortMalloc+0x174>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	60fb      	str	r3, [r7, #12]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <pvPortMalloc+0x172>
	return pvReturn;
 800a61c:	69fb      	ldr	r3, [r7, #28]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3728      	adds	r7, #40	; 0x28
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	2000519c 	.word	0x2000519c
 800a62c:	200051b0 	.word	0x200051b0
 800a630:	200051a0 	.word	0x200051a0
 800a634:	20005194 	.word	0x20005194
 800a638:	200051a4 	.word	0x200051a4
 800a63c:	200051a8 	.word	0x200051a8

0800a640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d04d      	beq.n	800a6ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a652:	2308      	movs	r3, #8
 800a654:	425b      	negs	r3, r3
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4413      	add	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	4b24      	ldr	r3, [pc, #144]	; (800a6f8 <vPortFree+0xb8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4013      	ands	r3, r2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10a      	bne.n	800a684 <vPortFree+0x44>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	60fb      	str	r3, [r7, #12]
}
 800a680:	bf00      	nop
 800a682:	e7fe      	b.n	800a682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00a      	beq.n	800a6a2 <vPortFree+0x62>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	60bb      	str	r3, [r7, #8]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <vPortFree+0xb8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01e      	beq.n	800a6ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d11a      	bne.n	800a6ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	4b0e      	ldr	r3, [pc, #56]	; (800a6f8 <vPortFree+0xb8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	43db      	mvns	r3, r3
 800a6c2:	401a      	ands	r2, r3
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6c8:	f7fe fb76 	bl	8008db8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <vPortFree+0xbc>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <vPortFree+0xbc>)
 800a6d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6da:	6938      	ldr	r0, [r7, #16]
 800a6dc:	f000 f874 	bl	800a7c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6e0:	4b07      	ldr	r3, [pc, #28]	; (800a700 <vPortFree+0xc0>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	4a06      	ldr	r2, [pc, #24]	; (800a700 <vPortFree+0xc0>)
 800a6e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6ea:	f7fe fb73 	bl	8008dd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6ee:	bf00      	nop
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	200051b0 	.word	0x200051b0
 800a6fc:	200051a0 	.word	0x200051a0
 800a700:	200051ac 	.word	0x200051ac

0800a704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a70a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a70e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a710:	4b27      	ldr	r3, [pc, #156]	; (800a7b0 <prvHeapInit+0xac>)
 800a712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f003 0307 	and.w	r3, r3, #7
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00c      	beq.n	800a738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3307      	adds	r3, #7
 800a722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 0307 	bic.w	r3, r3, #7
 800a72a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	4a1f      	ldr	r2, [pc, #124]	; (800a7b0 <prvHeapInit+0xac>)
 800a734:	4413      	add	r3, r2
 800a736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a73c:	4a1d      	ldr	r2, [pc, #116]	; (800a7b4 <prvHeapInit+0xb0>)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a742:	4b1c      	ldr	r3, [pc, #112]	; (800a7b4 <prvHeapInit+0xb0>)
 800a744:	2200      	movs	r2, #0
 800a746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	4413      	add	r3, r2
 800a74e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a750:	2208      	movs	r2, #8
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	1a9b      	subs	r3, r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 0307 	bic.w	r3, r3, #7
 800a75e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4a15      	ldr	r2, [pc, #84]	; (800a7b8 <prvHeapInit+0xb4>)
 800a764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a766:	4b14      	ldr	r3, [pc, #80]	; (800a7b8 <prvHeapInit+0xb4>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2200      	movs	r2, #0
 800a76c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a76e:	4b12      	ldr	r3, [pc, #72]	; (800a7b8 <prvHeapInit+0xb4>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2200      	movs	r2, #0
 800a774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	1ad2      	subs	r2, r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a784:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <prvHeapInit+0xb4>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <prvHeapInit+0xb8>)
 800a792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	4a09      	ldr	r2, [pc, #36]	; (800a7c0 <prvHeapInit+0xbc>)
 800a79a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a79c:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <prvHeapInit+0xc0>)
 800a79e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7a2:	601a      	str	r2, [r3, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	20001594 	.word	0x20001594
 800a7b4:	20005194 	.word	0x20005194
 800a7b8:	2000519c 	.word	0x2000519c
 800a7bc:	200051a4 	.word	0x200051a4
 800a7c0:	200051a0 	.word	0x200051a0
 800a7c4:	200051b0 	.word	0x200051b0

0800a7c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7d0:	4b28      	ldr	r3, [pc, #160]	; (800a874 <prvInsertBlockIntoFreeList+0xac>)
 800a7d2:	60fb      	str	r3, [r7, #12]
 800a7d4:	e002      	b.n	800a7dc <prvInsertBlockIntoFreeList+0x14>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d8f7      	bhi.n	800a7d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d108      	bne.n	800a80a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	441a      	add	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	441a      	add	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d118      	bne.n	800a850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <prvInsertBlockIntoFreeList+0xb0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d00d      	beq.n	800a846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	441a      	add	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	e008      	b.n	800a858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a846:	4b0c      	ldr	r3, [pc, #48]	; (800a878 <prvInsertBlockIntoFreeList+0xb0>)
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	e003      	b.n	800a858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d002      	beq.n	800a866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a866:	bf00      	nop
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	20005194 	.word	0x20005194
 800a878:	2000519c 	.word	0x2000519c

0800a87c <__errno>:
 800a87c:	4b01      	ldr	r3, [pc, #4]	; (800a884 <__errno+0x8>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20000048 	.word	0x20000048

0800a888 <__libc_init_array>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	4d0d      	ldr	r5, [pc, #52]	; (800a8c0 <__libc_init_array+0x38>)
 800a88c:	4c0d      	ldr	r4, [pc, #52]	; (800a8c4 <__libc_init_array+0x3c>)
 800a88e:	1b64      	subs	r4, r4, r5
 800a890:	10a4      	asrs	r4, r4, #2
 800a892:	2600      	movs	r6, #0
 800a894:	42a6      	cmp	r6, r4
 800a896:	d109      	bne.n	800a8ac <__libc_init_array+0x24>
 800a898:	4d0b      	ldr	r5, [pc, #44]	; (800a8c8 <__libc_init_array+0x40>)
 800a89a:	4c0c      	ldr	r4, [pc, #48]	; (800a8cc <__libc_init_array+0x44>)
 800a89c:	f000 f9fa 	bl	800ac94 <_init>
 800a8a0:	1b64      	subs	r4, r4, r5
 800a8a2:	10a4      	asrs	r4, r4, #2
 800a8a4:	2600      	movs	r6, #0
 800a8a6:	42a6      	cmp	r6, r4
 800a8a8:	d105      	bne.n	800a8b6 <__libc_init_array+0x2e>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b0:	4798      	blx	r3
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	e7ee      	b.n	800a894 <__libc_init_array+0xc>
 800a8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ba:	4798      	blx	r3
 800a8bc:	3601      	adds	r6, #1
 800a8be:	e7f2      	b.n	800a8a6 <__libc_init_array+0x1e>
 800a8c0:	0800c9a8 	.word	0x0800c9a8
 800a8c4:	0800c9a8 	.word	0x0800c9a8
 800a8c8:	0800c9a8 	.word	0x0800c9a8
 800a8cc:	0800c9ac 	.word	0x0800c9ac

0800a8d0 <__itoa>:
 800a8d0:	1e93      	subs	r3, r2, #2
 800a8d2:	2b22      	cmp	r3, #34	; 0x22
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	d904      	bls.n	800a8e4 <__itoa+0x14>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	700b      	strb	r3, [r1, #0]
 800a8de:	461c      	mov	r4, r3
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	bd10      	pop	{r4, pc}
 800a8e4:	2a0a      	cmp	r2, #10
 800a8e6:	d109      	bne.n	800a8fc <__itoa+0x2c>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	da07      	bge.n	800a8fc <__itoa+0x2c>
 800a8ec:	232d      	movs	r3, #45	; 0x2d
 800a8ee:	700b      	strb	r3, [r1, #0]
 800a8f0:	4240      	negs	r0, r0
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	4421      	add	r1, r4
 800a8f6:	f000 f97f 	bl	800abf8 <__utoa>
 800a8fa:	e7f1      	b.n	800a8e0 <__itoa+0x10>
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	e7f9      	b.n	800a8f4 <__itoa+0x24>

0800a900 <itoa>:
 800a900:	f7ff bfe6 	b.w	800a8d0 <__itoa>

0800a904 <__retarget_lock_acquire_recursive>:
 800a904:	4770      	bx	lr

0800a906 <__retarget_lock_release_recursive>:
 800a906:	4770      	bx	lr

0800a908 <malloc>:
 800a908:	4b02      	ldr	r3, [pc, #8]	; (800a914 <malloc+0xc>)
 800a90a:	4601      	mov	r1, r0
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	f000 b885 	b.w	800aa1c <_malloc_r>
 800a912:	bf00      	nop
 800a914:	20000048 	.word	0x20000048

0800a918 <memcpy>:
 800a918:	440a      	add	r2, r1
 800a91a:	4291      	cmp	r1, r2
 800a91c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a920:	d100      	bne.n	800a924 <memcpy+0xc>
 800a922:	4770      	bx	lr
 800a924:	b510      	push	{r4, lr}
 800a926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a92e:	4291      	cmp	r1, r2
 800a930:	d1f9      	bne.n	800a926 <memcpy+0xe>
 800a932:	bd10      	pop	{r4, pc}

0800a934 <memset>:
 800a934:	4402      	add	r2, r0
 800a936:	4603      	mov	r3, r0
 800a938:	4293      	cmp	r3, r2
 800a93a:	d100      	bne.n	800a93e <memset+0xa>
 800a93c:	4770      	bx	lr
 800a93e:	f803 1b01 	strb.w	r1, [r3], #1
 800a942:	e7f9      	b.n	800a938 <memset+0x4>

0800a944 <_free_r>:
 800a944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a946:	2900      	cmp	r1, #0
 800a948:	d044      	beq.n	800a9d4 <_free_r+0x90>
 800a94a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a94e:	9001      	str	r0, [sp, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f1a1 0404 	sub.w	r4, r1, #4
 800a956:	bfb8      	it	lt
 800a958:	18e4      	addlt	r4, r4, r3
 800a95a:	f000 f98f 	bl	800ac7c <__malloc_lock>
 800a95e:	4a1e      	ldr	r2, [pc, #120]	; (800a9d8 <_free_r+0x94>)
 800a960:	9801      	ldr	r0, [sp, #4]
 800a962:	6813      	ldr	r3, [r2, #0]
 800a964:	b933      	cbnz	r3, 800a974 <_free_r+0x30>
 800a966:	6063      	str	r3, [r4, #4]
 800a968:	6014      	str	r4, [r2, #0]
 800a96a:	b003      	add	sp, #12
 800a96c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a970:	f000 b98a 	b.w	800ac88 <__malloc_unlock>
 800a974:	42a3      	cmp	r3, r4
 800a976:	d908      	bls.n	800a98a <_free_r+0x46>
 800a978:	6825      	ldr	r5, [r4, #0]
 800a97a:	1961      	adds	r1, r4, r5
 800a97c:	428b      	cmp	r3, r1
 800a97e:	bf01      	itttt	eq
 800a980:	6819      	ldreq	r1, [r3, #0]
 800a982:	685b      	ldreq	r3, [r3, #4]
 800a984:	1949      	addeq	r1, r1, r5
 800a986:	6021      	streq	r1, [r4, #0]
 800a988:	e7ed      	b.n	800a966 <_free_r+0x22>
 800a98a:	461a      	mov	r2, r3
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	b10b      	cbz	r3, 800a994 <_free_r+0x50>
 800a990:	42a3      	cmp	r3, r4
 800a992:	d9fa      	bls.n	800a98a <_free_r+0x46>
 800a994:	6811      	ldr	r1, [r2, #0]
 800a996:	1855      	adds	r5, r2, r1
 800a998:	42a5      	cmp	r5, r4
 800a99a:	d10b      	bne.n	800a9b4 <_free_r+0x70>
 800a99c:	6824      	ldr	r4, [r4, #0]
 800a99e:	4421      	add	r1, r4
 800a9a0:	1854      	adds	r4, r2, r1
 800a9a2:	42a3      	cmp	r3, r4
 800a9a4:	6011      	str	r1, [r2, #0]
 800a9a6:	d1e0      	bne.n	800a96a <_free_r+0x26>
 800a9a8:	681c      	ldr	r4, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	6053      	str	r3, [r2, #4]
 800a9ae:	4421      	add	r1, r4
 800a9b0:	6011      	str	r1, [r2, #0]
 800a9b2:	e7da      	b.n	800a96a <_free_r+0x26>
 800a9b4:	d902      	bls.n	800a9bc <_free_r+0x78>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	6003      	str	r3, [r0, #0]
 800a9ba:	e7d6      	b.n	800a96a <_free_r+0x26>
 800a9bc:	6825      	ldr	r5, [r4, #0]
 800a9be:	1961      	adds	r1, r4, r5
 800a9c0:	428b      	cmp	r3, r1
 800a9c2:	bf04      	itt	eq
 800a9c4:	6819      	ldreq	r1, [r3, #0]
 800a9c6:	685b      	ldreq	r3, [r3, #4]
 800a9c8:	6063      	str	r3, [r4, #4]
 800a9ca:	bf04      	itt	eq
 800a9cc:	1949      	addeq	r1, r1, r5
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	6054      	str	r4, [r2, #4]
 800a9d2:	e7ca      	b.n	800a96a <_free_r+0x26>
 800a9d4:	b003      	add	sp, #12
 800a9d6:	bd30      	pop	{r4, r5, pc}
 800a9d8:	200051b8 	.word	0x200051b8

0800a9dc <sbrk_aligned>:
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	4e0e      	ldr	r6, [pc, #56]	; (800aa18 <sbrk_aligned+0x3c>)
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	6831      	ldr	r1, [r6, #0]
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	b911      	cbnz	r1, 800a9ee <sbrk_aligned+0x12>
 800a9e8:	f000 f8f6 	bl	800abd8 <_sbrk_r>
 800a9ec:	6030      	str	r0, [r6, #0]
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f000 f8f1 	bl	800abd8 <_sbrk_r>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	d00a      	beq.n	800aa10 <sbrk_aligned+0x34>
 800a9fa:	1cc4      	adds	r4, r0, #3
 800a9fc:	f024 0403 	bic.w	r4, r4, #3
 800aa00:	42a0      	cmp	r0, r4
 800aa02:	d007      	beq.n	800aa14 <sbrk_aligned+0x38>
 800aa04:	1a21      	subs	r1, r4, r0
 800aa06:	4628      	mov	r0, r5
 800aa08:	f000 f8e6 	bl	800abd8 <_sbrk_r>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d101      	bne.n	800aa14 <sbrk_aligned+0x38>
 800aa10:	f04f 34ff 	mov.w	r4, #4294967295
 800aa14:	4620      	mov	r0, r4
 800aa16:	bd70      	pop	{r4, r5, r6, pc}
 800aa18:	200051bc 	.word	0x200051bc

0800aa1c <_malloc_r>:
 800aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa20:	1ccd      	adds	r5, r1, #3
 800aa22:	f025 0503 	bic.w	r5, r5, #3
 800aa26:	3508      	adds	r5, #8
 800aa28:	2d0c      	cmp	r5, #12
 800aa2a:	bf38      	it	cc
 800aa2c:	250c      	movcc	r5, #12
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	4607      	mov	r7, r0
 800aa32:	db01      	blt.n	800aa38 <_malloc_r+0x1c>
 800aa34:	42a9      	cmp	r1, r5
 800aa36:	d905      	bls.n	800aa44 <_malloc_r+0x28>
 800aa38:	230c      	movs	r3, #12
 800aa3a:	603b      	str	r3, [r7, #0]
 800aa3c:	2600      	movs	r6, #0
 800aa3e:	4630      	mov	r0, r6
 800aa40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa44:	4e2e      	ldr	r6, [pc, #184]	; (800ab00 <_malloc_r+0xe4>)
 800aa46:	f000 f919 	bl	800ac7c <__malloc_lock>
 800aa4a:	6833      	ldr	r3, [r6, #0]
 800aa4c:	461c      	mov	r4, r3
 800aa4e:	bb34      	cbnz	r4, 800aa9e <_malloc_r+0x82>
 800aa50:	4629      	mov	r1, r5
 800aa52:	4638      	mov	r0, r7
 800aa54:	f7ff ffc2 	bl	800a9dc <sbrk_aligned>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	d14d      	bne.n	800aafa <_malloc_r+0xde>
 800aa5e:	6834      	ldr	r4, [r6, #0]
 800aa60:	4626      	mov	r6, r4
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	d140      	bne.n	800aae8 <_malloc_r+0xcc>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	4631      	mov	r1, r6
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	eb04 0803 	add.w	r8, r4, r3
 800aa70:	f000 f8b2 	bl	800abd8 <_sbrk_r>
 800aa74:	4580      	cmp	r8, r0
 800aa76:	d13a      	bne.n	800aaee <_malloc_r+0xd2>
 800aa78:	6821      	ldr	r1, [r4, #0]
 800aa7a:	3503      	adds	r5, #3
 800aa7c:	1a6d      	subs	r5, r5, r1
 800aa7e:	f025 0503 	bic.w	r5, r5, #3
 800aa82:	3508      	adds	r5, #8
 800aa84:	2d0c      	cmp	r5, #12
 800aa86:	bf38      	it	cc
 800aa88:	250c      	movcc	r5, #12
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	f7ff ffa5 	bl	800a9dc <sbrk_aligned>
 800aa92:	3001      	adds	r0, #1
 800aa94:	d02b      	beq.n	800aaee <_malloc_r+0xd2>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	442b      	add	r3, r5
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	e00e      	b.n	800aabc <_malloc_r+0xa0>
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	1b52      	subs	r2, r2, r5
 800aaa2:	d41e      	bmi.n	800aae2 <_malloc_r+0xc6>
 800aaa4:	2a0b      	cmp	r2, #11
 800aaa6:	d916      	bls.n	800aad6 <_malloc_r+0xba>
 800aaa8:	1961      	adds	r1, r4, r5
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	6025      	str	r5, [r4, #0]
 800aaae:	bf18      	it	ne
 800aab0:	6059      	strne	r1, [r3, #4]
 800aab2:	6863      	ldr	r3, [r4, #4]
 800aab4:	bf08      	it	eq
 800aab6:	6031      	streq	r1, [r6, #0]
 800aab8:	5162      	str	r2, [r4, r5]
 800aaba:	604b      	str	r3, [r1, #4]
 800aabc:	4638      	mov	r0, r7
 800aabe:	f104 060b 	add.w	r6, r4, #11
 800aac2:	f000 f8e1 	bl	800ac88 <__malloc_unlock>
 800aac6:	f026 0607 	bic.w	r6, r6, #7
 800aaca:	1d23      	adds	r3, r4, #4
 800aacc:	1af2      	subs	r2, r6, r3
 800aace:	d0b6      	beq.n	800aa3e <_malloc_r+0x22>
 800aad0:	1b9b      	subs	r3, r3, r6
 800aad2:	50a3      	str	r3, [r4, r2]
 800aad4:	e7b3      	b.n	800aa3e <_malloc_r+0x22>
 800aad6:	6862      	ldr	r2, [r4, #4]
 800aad8:	42a3      	cmp	r3, r4
 800aada:	bf0c      	ite	eq
 800aadc:	6032      	streq	r2, [r6, #0]
 800aade:	605a      	strne	r2, [r3, #4]
 800aae0:	e7ec      	b.n	800aabc <_malloc_r+0xa0>
 800aae2:	4623      	mov	r3, r4
 800aae4:	6864      	ldr	r4, [r4, #4]
 800aae6:	e7b2      	b.n	800aa4e <_malloc_r+0x32>
 800aae8:	4634      	mov	r4, r6
 800aaea:	6876      	ldr	r6, [r6, #4]
 800aaec:	e7b9      	b.n	800aa62 <_malloc_r+0x46>
 800aaee:	230c      	movs	r3, #12
 800aaf0:	603b      	str	r3, [r7, #0]
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f000 f8c8 	bl	800ac88 <__malloc_unlock>
 800aaf8:	e7a1      	b.n	800aa3e <_malloc_r+0x22>
 800aafa:	6025      	str	r5, [r4, #0]
 800aafc:	e7de      	b.n	800aabc <_malloc_r+0xa0>
 800aafe:	bf00      	nop
 800ab00:	200051b8 	.word	0x200051b8

0800ab04 <cleanup_glue>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	460c      	mov	r4, r1
 800ab08:	6809      	ldr	r1, [r1, #0]
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	b109      	cbz	r1, 800ab12 <cleanup_glue+0xe>
 800ab0e:	f7ff fff9 	bl	800ab04 <cleanup_glue>
 800ab12:	4621      	mov	r1, r4
 800ab14:	4628      	mov	r0, r5
 800ab16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab1a:	f7ff bf13 	b.w	800a944 <_free_r>
	...

0800ab20 <_reclaim_reent>:
 800ab20:	4b2c      	ldr	r3, [pc, #176]	; (800abd4 <_reclaim_reent+0xb4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4283      	cmp	r3, r0
 800ab26:	b570      	push	{r4, r5, r6, lr}
 800ab28:	4604      	mov	r4, r0
 800ab2a:	d051      	beq.n	800abd0 <_reclaim_reent+0xb0>
 800ab2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab2e:	b143      	cbz	r3, 800ab42 <_reclaim_reent+0x22>
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d14a      	bne.n	800abcc <_reclaim_reent+0xac>
 800ab36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab38:	6819      	ldr	r1, [r3, #0]
 800ab3a:	b111      	cbz	r1, 800ab42 <_reclaim_reent+0x22>
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f7ff ff01 	bl	800a944 <_free_r>
 800ab42:	6961      	ldr	r1, [r4, #20]
 800ab44:	b111      	cbz	r1, 800ab4c <_reclaim_reent+0x2c>
 800ab46:	4620      	mov	r0, r4
 800ab48:	f7ff fefc 	bl	800a944 <_free_r>
 800ab4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab4e:	b111      	cbz	r1, 800ab56 <_reclaim_reent+0x36>
 800ab50:	4620      	mov	r0, r4
 800ab52:	f7ff fef7 	bl	800a944 <_free_r>
 800ab56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab58:	b111      	cbz	r1, 800ab60 <_reclaim_reent+0x40>
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f7ff fef2 	bl	800a944 <_free_r>
 800ab60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab62:	b111      	cbz	r1, 800ab6a <_reclaim_reent+0x4a>
 800ab64:	4620      	mov	r0, r4
 800ab66:	f7ff feed 	bl	800a944 <_free_r>
 800ab6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab6c:	b111      	cbz	r1, 800ab74 <_reclaim_reent+0x54>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f7ff fee8 	bl	800a944 <_free_r>
 800ab74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab76:	b111      	cbz	r1, 800ab7e <_reclaim_reent+0x5e>
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f7ff fee3 	bl	800a944 <_free_r>
 800ab7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ab80:	b111      	cbz	r1, 800ab88 <_reclaim_reent+0x68>
 800ab82:	4620      	mov	r0, r4
 800ab84:	f7ff fede 	bl	800a944 <_free_r>
 800ab88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab8a:	b111      	cbz	r1, 800ab92 <_reclaim_reent+0x72>
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f7ff fed9 	bl	800a944 <_free_r>
 800ab92:	69a3      	ldr	r3, [r4, #24]
 800ab94:	b1e3      	cbz	r3, 800abd0 <_reclaim_reent+0xb0>
 800ab96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab98:	4620      	mov	r0, r4
 800ab9a:	4798      	blx	r3
 800ab9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab9e:	b1b9      	cbz	r1, 800abd0 <_reclaim_reent+0xb0>
 800aba0:	4620      	mov	r0, r4
 800aba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aba6:	f7ff bfad 	b.w	800ab04 <cleanup_glue>
 800abaa:	5949      	ldr	r1, [r1, r5]
 800abac:	b941      	cbnz	r1, 800abc0 <_reclaim_reent+0xa0>
 800abae:	3504      	adds	r5, #4
 800abb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abb2:	2d80      	cmp	r5, #128	; 0x80
 800abb4:	68d9      	ldr	r1, [r3, #12]
 800abb6:	d1f8      	bne.n	800abaa <_reclaim_reent+0x8a>
 800abb8:	4620      	mov	r0, r4
 800abba:	f7ff fec3 	bl	800a944 <_free_r>
 800abbe:	e7ba      	b.n	800ab36 <_reclaim_reent+0x16>
 800abc0:	680e      	ldr	r6, [r1, #0]
 800abc2:	4620      	mov	r0, r4
 800abc4:	f7ff febe 	bl	800a944 <_free_r>
 800abc8:	4631      	mov	r1, r6
 800abca:	e7ef      	b.n	800abac <_reclaim_reent+0x8c>
 800abcc:	2500      	movs	r5, #0
 800abce:	e7ef      	b.n	800abb0 <_reclaim_reent+0x90>
 800abd0:	bd70      	pop	{r4, r5, r6, pc}
 800abd2:	bf00      	nop
 800abd4:	20000048 	.word	0x20000048

0800abd8 <_sbrk_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d06      	ldr	r5, [pc, #24]	; (800abf4 <_sbrk_r+0x1c>)
 800abdc:	2300      	movs	r3, #0
 800abde:	4604      	mov	r4, r0
 800abe0:	4608      	mov	r0, r1
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	f7f8 fa1a 	bl	800301c <_sbrk>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_sbrk_r+0x1a>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_sbrk_r+0x1a>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	200051c0 	.word	0x200051c0

0800abf8 <__utoa>:
 800abf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abfa:	4c1f      	ldr	r4, [pc, #124]	; (800ac78 <__utoa+0x80>)
 800abfc:	b08b      	sub	sp, #44	; 0x2c
 800abfe:	4605      	mov	r5, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	466e      	mov	r6, sp
 800ac04:	f104 0c20 	add.w	ip, r4, #32
 800ac08:	6820      	ldr	r0, [r4, #0]
 800ac0a:	6861      	ldr	r1, [r4, #4]
 800ac0c:	4637      	mov	r7, r6
 800ac0e:	c703      	stmia	r7!, {r0, r1}
 800ac10:	3408      	adds	r4, #8
 800ac12:	4564      	cmp	r4, ip
 800ac14:	463e      	mov	r6, r7
 800ac16:	d1f7      	bne.n	800ac08 <__utoa+0x10>
 800ac18:	7921      	ldrb	r1, [r4, #4]
 800ac1a:	7139      	strb	r1, [r7, #4]
 800ac1c:	1e91      	subs	r1, r2, #2
 800ac1e:	6820      	ldr	r0, [r4, #0]
 800ac20:	6038      	str	r0, [r7, #0]
 800ac22:	2922      	cmp	r1, #34	; 0x22
 800ac24:	f04f 0100 	mov.w	r1, #0
 800ac28:	d904      	bls.n	800ac34 <__utoa+0x3c>
 800ac2a:	7019      	strb	r1, [r3, #0]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4618      	mov	r0, r3
 800ac30:	b00b      	add	sp, #44	; 0x2c
 800ac32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac34:	1e58      	subs	r0, r3, #1
 800ac36:	4684      	mov	ip, r0
 800ac38:	fbb5 f7f2 	udiv	r7, r5, r2
 800ac3c:	fb02 5617 	mls	r6, r2, r7, r5
 800ac40:	3628      	adds	r6, #40	; 0x28
 800ac42:	446e      	add	r6, sp
 800ac44:	460c      	mov	r4, r1
 800ac46:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ac4a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ac4e:	462e      	mov	r6, r5
 800ac50:	42b2      	cmp	r2, r6
 800ac52:	f101 0101 	add.w	r1, r1, #1
 800ac56:	463d      	mov	r5, r7
 800ac58:	d9ee      	bls.n	800ac38 <__utoa+0x40>
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	545a      	strb	r2, [r3, r1]
 800ac5e:	1919      	adds	r1, r3, r4
 800ac60:	1aa5      	subs	r5, r4, r2
 800ac62:	42aa      	cmp	r2, r5
 800ac64:	dae3      	bge.n	800ac2e <__utoa+0x36>
 800ac66:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ac6a:	780e      	ldrb	r6, [r1, #0]
 800ac6c:	7006      	strb	r6, [r0, #0]
 800ac6e:	3201      	adds	r2, #1
 800ac70:	f801 5901 	strb.w	r5, [r1], #-1
 800ac74:	e7f4      	b.n	800ac60 <__utoa+0x68>
 800ac76:	bf00      	nop
 800ac78:	0800c978 	.word	0x0800c978

0800ac7c <__malloc_lock>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__malloc_lock+0x8>)
 800ac7e:	f7ff be41 	b.w	800a904 <__retarget_lock_acquire_recursive>
 800ac82:	bf00      	nop
 800ac84:	200051b4 	.word	0x200051b4

0800ac88 <__malloc_unlock>:
 800ac88:	4801      	ldr	r0, [pc, #4]	; (800ac90 <__malloc_unlock+0x8>)
 800ac8a:	f7ff be3c 	b.w	800a906 <__retarget_lock_release_recursive>
 800ac8e:	bf00      	nop
 800ac90:	200051b4 	.word	0x200051b4

0800ac94 <_init>:
 800ac94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac96:	bf00      	nop
 800ac98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9a:	bc08      	pop	{r3}
 800ac9c:	469e      	mov	lr, r3
 800ac9e:	4770      	bx	lr

0800aca0 <_fini>:
 800aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca2:	bf00      	nop
 800aca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca6:	bc08      	pop	{r3}
 800aca8:	469e      	mov	lr, r3
 800acaa:	4770      	bx	lr
