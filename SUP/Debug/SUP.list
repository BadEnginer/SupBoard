
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009490  08009490  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009498  08009498  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009498  08009498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080094a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b94  2000007c  0800951c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006c10  0800951c  00026c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d59f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003df1  00000000  00000000  0003d64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00041440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  00042cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004243  00000000  00000000  000443e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c347  00000000  00000000  0004862b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aecf  00000000  00000000  00064972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff841  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b40  00000000  00000000  000ff894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008648 	.word	0x08008648

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08008648 	.word	0x08008648

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <driver_delay_xms>:
#include "Display/e-ink/epaper.h"

void driver_delay_xms(unsigned long xms)	
{	
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
HAL_Delay(xms);
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f001 faaf 	bl	8001a50 <HAL_Delay>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <Epaper_Spi_WriteByte>:


void Epaper_Spi_WriteByte(unsigned char TxData)
{				   			 
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	extern SPI_HandleTypeDef hspi1;
	HAL_StatusTypeDef st;
	st = HAL_SPI_Receive(&hspi1, &TxData, sizeof(TxData), 10);
 8000506:	1df9      	adds	r1, r7, #7
 8000508:	230a      	movs	r3, #10
 800050a:	2201      	movs	r2, #1
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <Epaper_Spi_WriteByte+0x24>)
 800050e:	f003 fb8a 	bl	8003c26 <HAL_SPI_Receive>
 8000512:	4603      	mov	r3, r0
 8000514:	73fb      	strb	r3, [r7, #15]


}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200020a8 	.word	0x200020a8

08000524 <Epaper_READBUSY>:

void Epaper_READBUSY(void)
{ 
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  while(1)
  {	 //=1 BUSY
     if(isEPD_W21_BUSY==0) break;;
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <Epaper_READBUSY+0x1c>)
 800052e:	f002 f8ab 	bl	8002688 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d000      	beq.n	800053a <Epaper_READBUSY+0x16>
 8000538:	e7f6      	b.n	8000528 <Epaper_READBUSY+0x4>
 800053a:	bf00      	nop
  }  
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40020400 	.word	0x40020400

08000544 <Epaper_Write_Command>:

void Epaper_Write_Command(unsigned char cmd)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 800054e:	2201      	movs	r2, #1
 8000550:	2101      	movs	r1, #1
 8000552:	480d      	ldr	r0, [pc, #52]	; (8000588 <Epaper_Write_Command+0x44>)
 8000554:	f002 f8b0 	bl	80026b8 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	480a      	ldr	r0, [pc, #40]	; (8000588 <Epaper_Write_Command+0x44>)
 800055e:	f002 f8ab 	bl	80026b8 <HAL_GPIO_WritePin>
	EPD_W21_DC_0;  // D/C#   0:command  1:data
 8000562:	2200      	movs	r2, #0
 8000564:	2104      	movs	r1, #4
 8000566:	4808      	ldr	r0, [pc, #32]	; (8000588 <Epaper_Write_Command+0x44>)
 8000568:	f002 f8a6 	bl	80026b8 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(cmd);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ffc4 	bl	80004fc <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 8000574:	2201      	movs	r2, #1
 8000576:	2101      	movs	r1, #1
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <Epaper_Write_Command+0x44>)
 800057a:	f002 f89d 	bl	80026b8 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020400 	.word	0x40020400

0800058c <Epaper_Write_Data>:

void Epaper_Write_Data(unsigned char data)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 8000596:	2201      	movs	r2, #1
 8000598:	2101      	movs	r1, #1
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <Epaper_Write_Data+0x44>)
 800059c:	f002 f88c 	bl	80026b8 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 80005a0:	2200      	movs	r2, #0
 80005a2:	2101      	movs	r1, #1
 80005a4:	480a      	ldr	r0, [pc, #40]	; (80005d0 <Epaper_Write_Data+0x44>)
 80005a6:	f002 f887 	bl	80026b8 <HAL_GPIO_WritePin>
	EPD_W21_DC_1;  // D/C#   0:command  1:data
 80005aa:	2201      	movs	r2, #1
 80005ac:	2104      	movs	r1, #4
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <Epaper_Write_Data+0x44>)
 80005b0:	f002 f882 	bl	80026b8 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(data);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ffa0 	bl	80004fc <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 80005bc:	2201      	movs	r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <Epaper_Write_Data+0x44>)
 80005c2:	f002 f879 	bl	80026b8 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020400 	.word	0x40020400

080005d4 <EPD_HW_Init>:
	
/////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

void EPD_HW_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	EPD_W21_RST_0;  // Module reset   
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	4833      	ldr	r0, [pc, #204]	; (80006ac <EPD_HW_Init+0xd8>)
 80005de:	f002 f86b 	bl	80026b8 <HAL_GPIO_WritePin>
	driver_delay_xms(100);//At least 10ms delay 
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f7ff ff7e 	bl	80004e4 <driver_delay_xms>
	EPD_W21_RST_1;
 80005e8:	2201      	movs	r2, #1
 80005ea:	2102      	movs	r1, #2
 80005ec:	482f      	ldr	r0, [pc, #188]	; (80006ac <EPD_HW_Init+0xd8>)
 80005ee:	f002 f863 	bl	80026b8 <HAL_GPIO_WritePin>
	driver_delay_xms(100); //At least 10ms delay 
 80005f2:	2064      	movs	r0, #100	; 0x64
 80005f4:	f7ff ff76 	bl	80004e4 <driver_delay_xms>
	
	Epaper_READBUSY();   
 80005f8:	f7ff ff94 	bl	8000524 <Epaper_READBUSY>
	Epaper_Write_Command(0x12);  //SWRESET
 80005fc:	2012      	movs	r0, #18
 80005fe:	f7ff ffa1 	bl	8000544 <Epaper_Write_Command>
	Epaper_READBUSY();   
 8000602:	f7ff ff8f 	bl	8000524 <Epaper_READBUSY>
		
	Epaper_Write_Command(0x01); //Driver output control      
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ff9c 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 800060c:	2027      	movs	r0, #39	; 0x27
 800060e:	f7ff ffbd 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ffba 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffb7 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x11); //data entry mode       
 800061e:	2011      	movs	r0, #17
 8000620:	f7ff ff90 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x01);
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff ffb1 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x44); //set Ram-X address start/end position   
 800062a:	2044      	movs	r0, #68	; 0x44
 800062c:	f7ff ff8a 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffab 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x0F);    //0x0F-->(15+1)*8=128
 8000636:	200f      	movs	r0, #15
 8000638:	f7ff ffa8 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x45); //set Ram-Y address start/end position          
 800063c:	2045      	movs	r0, #69	; 0x45
 800063e:	f7ff ff81 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x27);   //0x0127-->(295+1)=296
 8000642:	2027      	movs	r0, #39	; 0x27
 8000644:	f7ff ffa2 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ff9f 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ff9c 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x00); 
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff ff99 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x3C); //BorderWavefrom
 800065a:	203c      	movs	r0, #60	; 0x3c
 800065c:	f7ff ff72 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x05);	
 8000660:	2005      	movs	r0, #5
 8000662:	f7ff ff93 	bl	800058c <Epaper_Write_Data>
	  	
  Epaper_Write_Command(0x18); //Read built-in temperature sensor
 8000666:	2018      	movs	r0, #24
 8000668:	f7ff ff6c 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x80);	
 800066c:	2080      	movs	r0, #128	; 0x80
 800066e:	f7ff ff8d 	bl	800058c <Epaper_Write_Data>
	
	Epaper_Write_Command(0x21); //  Display update control
 8000672:	2021      	movs	r0, #33	; 0x21
 8000674:	f7ff ff66 	bl	8000544 <Epaper_Write_Command>
  Epaper_Write_Data(0x00);	
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff87 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x80);	
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	f7ff ff84 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x4E);   // set RAM x address count to 0;
 8000684:	204e      	movs	r0, #78	; 0x4e
 8000686:	f7ff ff5d 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff7e 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Command(0x4F);   // set RAM y address count to 0X199;    
 8000690:	204f      	movs	r0, #79	; 0x4f
 8000692:	f7ff ff57 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 8000696:	2027      	movs	r0, #39	; 0x27
 8000698:	f7ff ff78 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff75 	bl	800058c <Epaper_Write_Data>
  Epaper_READBUSY();
 80006a2:	f7ff ff3f 	bl	8000524 <Epaper_READBUSY>
	
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020400 	.word	0x40020400

080006b0 <EPD_DeepSleep>:
     Epaper_Write_Data(0x00);
   }
   EPD_Update();	 
}
void EPD_DeepSleep(void)
{  	
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  Epaper_Write_Command(0x10); //enter deep sleep
 80006b4:	2010      	movs	r0, #16
 80006b6:	f7ff ff45 	bl	8000544 <Epaper_Write_Command>
  Epaper_Write_Data(0x01); 
 80006ba:	2001      	movs	r0, #1
 80006bc:	f7ff ff66 	bl	800058c <Epaper_Write_Data>
  driver_delay_xms(100);
 80006c0:	2064      	movs	r0, #100	; 0x64
 80006c2:	f7ff ff0f 	bl	80004e4 <driver_delay_xms>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}

080006ca <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af04      	add	r7, sp, #16
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2200      	movs	r2, #0
 80006f4:	2178      	movs	r1, #120	; 0x78
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <ssd1306_WriteCommand+0x2c>)
 80006f8:	f002 f93c 	bl	8002974 <HAL_I2C_Mem_Write>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20002054 	.word	0x20002054

08000708 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af04      	add	r7, sp, #16
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b29b      	uxth	r3, r3
 8000716:	f04f 32ff 	mov.w	r2, #4294967295
 800071a:	9202      	str	r2, [sp, #8]
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	2240      	movs	r2, #64	; 0x40
 8000726:	2178      	movs	r1, #120	; 0x78
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <ssd1306_WriteData+0x30>)
 800072a:	f002 f923 	bl	8002974 <HAL_I2C_Mem_Write>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20002054 	.word	0x20002054

0800073c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000740:	f7ff ffc3 	bl	80006ca <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000744:	2064      	movs	r0, #100	; 0x64
 8000746:	f001 f983 	bl	8001a50 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800074a:	2000      	movs	r0, #0
 800074c:	f000 f9da 	bl	8000b04 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000750:	2020      	movs	r0, #32
 8000752:	f7ff ffc1 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ffbe 	bl	80006d8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800075c:	20b0      	movs	r0, #176	; 0xb0
 800075e:	f7ff ffbb 	bl	80006d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000762:	20c8      	movs	r0, #200	; 0xc8
 8000764:	f7ff ffb8 	bl	80006d8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff ffb5 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800076e:	2010      	movs	r0, #16
 8000770:	f7ff ffb2 	bl	80006d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000774:	2040      	movs	r0, #64	; 0x40
 8000776:	f7ff ffaf 	bl	80006d8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800077a:	20ff      	movs	r0, #255	; 0xff
 800077c:	f000 f9ae 	bl	8000adc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000780:	20a1      	movs	r0, #161	; 0xa1
 8000782:	f7ff ffa9 	bl	80006d8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000786:	20a6      	movs	r0, #166	; 0xa6
 8000788:	f7ff ffa6 	bl	80006d8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800078c:	20a8      	movs	r0, #168	; 0xa8
 800078e:	f7ff ffa3 	bl	80006d8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000792:	203f      	movs	r0, #63	; 0x3f
 8000794:	f7ff ffa0 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000798:	20a4      	movs	r0, #164	; 0xa4
 800079a:	f7ff ff9d 	bl	80006d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800079e:	20d3      	movs	r0, #211	; 0xd3
 80007a0:	f7ff ff9a 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff ff97 	bl	80006d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80007aa:	20d5      	movs	r0, #213	; 0xd5
 80007ac:	f7ff ff94 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80007b0:	20f0      	movs	r0, #240	; 0xf0
 80007b2:	f7ff ff91 	bl	80006d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80007b6:	20d9      	movs	r0, #217	; 0xd9
 80007b8:	f7ff ff8e 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80007bc:	2022      	movs	r0, #34	; 0x22
 80007be:	f7ff ff8b 	bl	80006d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80007c2:	20da      	movs	r0, #218	; 0xda
 80007c4:	f7ff ff88 	bl	80006d8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80007c8:	2012      	movs	r0, #18
 80007ca:	f7ff ff85 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80007ce:	20db      	movs	r0, #219	; 0xdb
 80007d0:	f7ff ff82 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80007d4:	2020      	movs	r0, #32
 80007d6:	f7ff ff7f 	bl	80006d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80007da:	208d      	movs	r0, #141	; 0x8d
 80007dc:	f7ff ff7c 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80007e0:	2014      	movs	r0, #20
 80007e2:	f7ff ff79 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 f98c 	bl	8000b04 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 f80f 	bl	8000810 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80007f2:	f000 f831 	bl	8000858 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <ssd1306_Init+0xd0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <ssd1306_Init+0xd0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000802:	4b02      	ldr	r3, [pc, #8]	; (800080c <ssd1306_Init+0xd0>)
 8000804:	2201      	movs	r2, #1
 8000806:	711a      	strb	r2, [r3, #4]
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000498 	.word	0x20000498

08000810 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	e00d      	b.n	800083c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <ssd1306_Fill+0x1a>
 8000826:	2100      	movs	r1, #0
 8000828:	e000      	b.n	800082c <ssd1306_Fill+0x1c>
 800082a:	21ff      	movs	r1, #255	; 0xff
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <ssd1306_Fill+0x44>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4413      	add	r3, r2
 8000832:	460a      	mov	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3301      	adds	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000842:	d3ed      	bcc.n	8000820 <ssd1306_Fill+0x10>
    }
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000098 	.word	0x20000098

08000858 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]
 8000862:	e016      	b.n	8000892 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	3b50      	subs	r3, #80	; 0x50
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff34 	bl	80006d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff ff31 	bl	80006d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000876:	2010      	movs	r0, #16
 8000878:	f7ff ff2e 	bl	80006d8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	01db      	lsls	r3, r3, #7
 8000880:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <ssd1306_UpdateScreen+0x4c>)
 8000882:	4413      	add	r3, r2
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff3e 	bl	8000708 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3301      	adds	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b07      	cmp	r3, #7
 8000896:	d9e5      	bls.n	8000864 <ssd1306_UpdateScreen+0xc>
    }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000098 	.word	0x20000098

080008a8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	460b      	mov	r3, r1
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	4613      	mov	r3, r2
 80008b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	db3d      	blt.n	800093e <ssd1306_DrawPixel+0x96>
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	2b3f      	cmp	r3, #63	; 0x3f
 80008c6:	d83a      	bhi.n	800093e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d11a      	bne.n	8000904 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	b2d8      	uxtb	r0, r3
 80008d6:	4603      	mov	r3, r0
 80008d8:	01db      	lsls	r3, r3, #7
 80008da:	4413      	add	r3, r2
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <ssd1306_DrawPixel+0xa4>)
 80008de:	5cd3      	ldrb	r3, [r2, r3]
 80008e0:	b25a      	sxtb	r2, r3
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	2101      	movs	r1, #1
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b259      	sxtb	r1, r3
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	4603      	mov	r3, r0
 80008f8:	01db      	lsls	r3, r3, #7
 80008fa:	4413      	add	r3, r2
 80008fc:	b2c9      	uxtb	r1, r1
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <ssd1306_DrawPixel+0xa4>)
 8000900:	54d1      	strb	r1, [r2, r3]
 8000902:	e01d      	b.n	8000940 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	79bb      	ldrb	r3, [r7, #6]
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	b2d8      	uxtb	r0, r3
 800090c:	4603      	mov	r3, r0
 800090e:	01db      	lsls	r3, r3, #7
 8000910:	4413      	add	r3, r2
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <ssd1306_DrawPixel+0xa4>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	b25a      	sxtb	r2, r3
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	b25b      	sxtb	r3, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	b25b      	sxtb	r3, r3
 800092a:	4013      	ands	r3, r2
 800092c:	b259      	sxtb	r1, r3
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	4603      	mov	r3, r0
 8000932:	01db      	lsls	r3, r3, #7
 8000934:	4413      	add	r3, r2
 8000936:	b2c9      	uxtb	r1, r1
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <ssd1306_DrawPixel+0xa4>)
 800093a:	54d1      	strb	r1, [r2, r3]
 800093c:	e000      	b.n	8000940 <ssd1306_DrawPixel+0x98>
        return;
 800093e:	bf00      	nop
    }
}
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000098 	.word	0x20000098

08000950 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	4604      	mov	r4, r0
 8000958:	1d38      	adds	r0, r7, #4
 800095a:	e880 0006 	stmia.w	r0, {r1, r2}
 800095e:	461a      	mov	r2, r3
 8000960:	4623      	mov	r3, r4
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	4613      	mov	r3, r2
 8000966:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b1f      	cmp	r3, #31
 800096c:	d902      	bls.n	8000974 <ssd1306_WriteChar+0x24>
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	2b7e      	cmp	r3, #126	; 0x7e
 8000972:	d901      	bls.n	8000978 <ssd1306_WriteChar+0x28>
        return 0;
 8000974:	2300      	movs	r3, #0
 8000976:	e06d      	b.n	8000a54 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <ssd1306_WriteChar+0x10c>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	793b      	ldrb	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	2b80      	cmp	r3, #128	; 0x80
 8000984:	dc06      	bgt.n	8000994 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000986:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <ssd1306_WriteChar+0x10c>)
 8000988:	885b      	ldrh	r3, [r3, #2]
 800098a:	461a      	mov	r2, r3
 800098c:	797b      	ldrb	r3, [r7, #5]
 800098e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000990:	2b40      	cmp	r3, #64	; 0x40
 8000992:	dd01      	ble.n	8000998 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000994:	2300      	movs	r3, #0
 8000996:	e05d      	b.n	8000a54 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	e04c      	b.n	8000a38 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	3b20      	subs	r3, #32
 80009a4:	7979      	ldrb	r1, [r7, #5]
 80009a6:	fb01 f303 	mul.w	r3, r1, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	440b      	add	r3, r1
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	e034      	b.n	8000a28 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d012      	beq.n	80009f4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <ssd1306_WriteChar+0x10c>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4413      	add	r3, r2
 80009da:	b2d8      	uxtb	r0, r3
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <ssd1306_WriteChar+0x10c>)
 80009de:	885b      	ldrh	r3, [r3, #2]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4413      	add	r3, r2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	7bba      	ldrb	r2, [r7, #14]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f7ff ff5b 	bl	80008a8 <ssd1306_DrawPixel>
 80009f2:	e016      	b.n	8000a22 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <ssd1306_WriteChar+0x10c>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4413      	add	r3, r2
 8000a00:	b2d8      	uxtb	r0, r3
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <ssd1306_WriteChar+0x10c>)
 8000a04:	885b      	ldrh	r3, [r3, #2]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b2d9      	uxtb	r1, r3
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bf0c      	ite	eq
 8000a16:	2301      	moveq	r3, #1
 8000a18:	2300      	movne	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	f7ff ff43 	bl	80008a8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	3301      	adds	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	793b      	ldrb	r3, [r7, #4]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d3c5      	bcc.n	80009be <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3301      	adds	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
 8000a38:	797b      	ldrb	r3, [r7, #5]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d3ad      	bcc.n	800099e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <ssd1306_WriteChar+0x10c>)
 8000a44:	881a      	ldrh	r2, [r3, #0]
 8000a46:	793b      	ldrb	r3, [r7, #4]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <ssd1306_WriteChar+0x10c>)
 8000a50:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3724      	adds	r7, #36	; 0x24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	20000498 	.word	0x20000498

08000a60 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	1d38      	adds	r0, r7, #4
 8000a6a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a6e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000a70:	e012      	b.n	8000a98 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	7818      	ldrb	r0, [r3, #0]
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	1d3a      	adds	r2, r7, #4
 8000a7a:	ca06      	ldmia	r2, {r1, r2}
 8000a7c:	f7ff ff68 	bl	8000950 <ssd1306_WriteChar>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d002      	beq.n	8000a92 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	e008      	b.n	8000aa4 <ssd1306_WriteString+0x44>
        }
        str++;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	3301      	adds	r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1e8      	bne.n	8000a72 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <ssd1306_SetCursor+0x2c>)
 8000ac2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <ssd1306_SetCursor+0x2c>)
 8000aca:	805a      	strh	r2, [r3, #2]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	20000498 	.word	0x20000498

08000adc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000ae6:	2381      	movs	r3, #129	; 0x81
 8000ae8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fdf3 	bl	80006d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fdef 	bl	80006d8 <ssd1306_WriteCommand>
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d005      	beq.n	8000b20 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000b14:	23af      	movs	r3, #175	; 0xaf
 8000b16:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <ssd1306_SetDisplayOn+0x38>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	715a      	strb	r2, [r3, #5]
 8000b1e:	e004      	b.n	8000b2a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000b20:	23ae      	movs	r3, #174	; 0xae
 8000b22:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <ssd1306_SetDisplayOn+0x38>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fdd3 	bl	80006d8 <ssd1306_WriteCommand>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000498 	.word	0x20000498

08000b40 <ws2812_init>:
uint16_t BUF_DMA [ARRAY_LEN] = {0};
uint8_t rgb_temp[12][3];
uint16_t DMA_BUF_TEMP[24];
//------------------------------------------------------------------
void ws2812_init(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++) BUF_DMA[i] = LOW;
 8000b46:	2330      	movs	r3, #48	; 0x30
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	e007      	b.n	8000b5c <ws2812_init+0x1c>
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <ws2812_init+0x34>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	211a      	movs	r1, #26
 8000b52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f5b3 6f5b 	cmp.w	r3, #3504	; 0xdb0
 8000b62:	dbf3      	blt.n	8000b4c <ws2812_init+0xc>
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200004a0 	.word	0x200004a0

08000b78 <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8000b78:	b490      	push	{r4, r7}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4608      	mov	r0, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71bb      	strb	r3, [r7, #6]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	717b      	strb	r3, [r7, #5]
 8000b92:	4613      	mov	r3, r2
 8000b94:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	e07a      	b.n	8000c92 <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	89fb      	ldrh	r3, [r7, #14]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	fa42 f303 	asr.w	r3, r2, r3
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00e      	beq.n	8000bd0 <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	3330      	adds	r3, #48	; 0x30
 8000bbe:	89fa      	ldrh	r2, [r7, #14]
 8000bc0:	b292      	uxth	r2, r2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	4a38      	ldr	r2, [pc, #224]	; (8000ca8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000bc8:	2141      	movs	r1, #65	; 0x41
 8000bca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000bce:	e00d      	b.n	8000bec <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 8000bd0:	887a      	ldrh	r2, [r7, #2]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	3330      	adds	r3, #48	; 0x30
 8000bdc:	89fa      	ldrh	r2, [r7, #14]
 8000bde:	b292      	uxth	r2, r2
 8000be0:	4413      	add	r3, r2
 8000be2:	3308      	adds	r3, #8
 8000be4:	4a30      	ldr	r2, [pc, #192]	; (8000ca8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000be6:	211a      	movs	r1, #26
 8000be8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	fa42 f303 	asr.w	r3, r2, r3
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00d      	beq.n	8000c1e <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	3330      	adds	r3, #48	; 0x30
 8000c0e:	89fa      	ldrh	r2, [r7, #14]
 8000c10:	b292      	uxth	r2, r2
 8000c12:	4413      	add	r3, r2
 8000c14:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000c16:	2141      	movs	r1, #65	; 0x41
 8000c18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c1c:	e00c      	b.n	8000c38 <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	3330      	adds	r3, #48	; 0x30
 8000c2a:	89fa      	ldrh	r2, [r7, #14]
 8000c2c:	b292      	uxth	r2, r2
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000c32:	211a      	movs	r1, #26
 8000c34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 8000c38:	797a      	ldrb	r2, [r7, #5]
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	fa42 f303 	asr.w	r3, r2, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00e      	beq.n	8000c6c <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 8000c4e:	887a      	ldrh	r2, [r7, #2]
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	3330      	adds	r3, #48	; 0x30
 8000c5a:	89fa      	ldrh	r2, [r7, #14]
 8000c5c:	b292      	uxth	r2, r2
 8000c5e:	4413      	add	r3, r2
 8000c60:	3310      	adds	r3, #16
 8000c62:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000c64:	2141      	movs	r1, #65	; 0x41
 8000c66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c6a:	e00d      	b.n	8000c88 <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	3330      	adds	r3, #48	; 0x30
 8000c78:	89fa      	ldrh	r2, [r7, #14]
 8000c7a:	b292      	uxth	r2, r2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	3310      	adds	r3, #16
 8000c80:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000c82:	211a      	movs	r1, #26
 8000c84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 8000c88:	89fb      	ldrh	r3, [r7, #14]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	81fb      	strh	r3, [r7, #14]
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	d980      	bls.n	8000b9c <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc90      	pop	{r4, r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200004a0 	.word	0x200004a0

08000cac <ws2812_prepareValue>:
    uint8_t r07, uint8_t g07, uint8_t b07,
    uint8_t r08, uint8_t g08, uint8_t b08,
    uint8_t r09, uint8_t g09, uint8_t b09,
    uint8_t r10, uint8_t g10, uint8_t b10,
    uint8_t r11, uint8_t g11, uint8_t b11)
  {
 8000cac:	b490      	push	{r4, r7}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4623      	mov	r3, r4
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	717b      	strb	r3, [r7, #5]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	713b      	strb	r3, [r7, #4]
  rgb_temp[0][0]=r00; rgb_temp[0][1]=g00; rgb_temp[0][2]=b00;
 8000cca:	4a48      	ldr	r2, [pc, #288]	; (8000dec <ws2812_prepareValue+0x140>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	7013      	strb	r3, [r2, #0]
 8000cd0:	4a46      	ldr	r2, [pc, #280]	; (8000dec <ws2812_prepareValue+0x140>)
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	7053      	strb	r3, [r2, #1]
 8000cd6:	4a45      	ldr	r2, [pc, #276]	; (8000dec <ws2812_prepareValue+0x140>)
 8000cd8:	797b      	ldrb	r3, [r7, #5]
 8000cda:	7093      	strb	r3, [r2, #2]
  rgb_temp[1][0]=r01; rgb_temp[1][1]=g01; rgb_temp[1][2]=b01;
 8000cdc:	4a43      	ldr	r2, [pc, #268]	; (8000dec <ws2812_prepareValue+0x140>)
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	70d3      	strb	r3, [r2, #3]
 8000ce2:	4a42      	ldr	r2, [pc, #264]	; (8000dec <ws2812_prepareValue+0x140>)
 8000ce4:	7c3b      	ldrb	r3, [r7, #16]
 8000ce6:	7113      	strb	r3, [r2, #4]
 8000ce8:	4a40      	ldr	r2, [pc, #256]	; (8000dec <ws2812_prepareValue+0x140>)
 8000cea:	7d3b      	ldrb	r3, [r7, #20]
 8000cec:	7153      	strb	r3, [r2, #5]
  rgb_temp[2][0]=r02; rgb_temp[2][1]=g02; rgb_temp[2][2]=b02;
 8000cee:	4a3f      	ldr	r2, [pc, #252]	; (8000dec <ws2812_prepareValue+0x140>)
 8000cf0:	7e3b      	ldrb	r3, [r7, #24]
 8000cf2:	7193      	strb	r3, [r2, #6]
 8000cf4:	4a3d      	ldr	r2, [pc, #244]	; (8000dec <ws2812_prepareValue+0x140>)
 8000cf6:	7f3b      	ldrb	r3, [r7, #28]
 8000cf8:	71d3      	strb	r3, [r2, #7]
 8000cfa:	4a3c      	ldr	r2, [pc, #240]	; (8000dec <ws2812_prepareValue+0x140>)
 8000cfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d00:	7213      	strb	r3, [r2, #8]
  rgb_temp[3][0]=r03; rgb_temp[3][1]=g03; rgb_temp[3][2]=b03;
 8000d02:	4a3a      	ldr	r2, [pc, #232]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d08:	7253      	strb	r3, [r2, #9]
 8000d0a:	4a38      	ldr	r2, [pc, #224]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d10:	7293      	strb	r3, [r2, #10]
 8000d12:	4a36      	ldr	r2, [pc, #216]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d18:	72d3      	strb	r3, [r2, #11]
  rgb_temp[4][0]=r04; rgb_temp[4][1]=g04; rgb_temp[4][2]=b04;
 8000d1a:	4a34      	ldr	r2, [pc, #208]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d20:	7313      	strb	r3, [r2, #12]
 8000d22:	4a32      	ldr	r2, [pc, #200]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d28:	7353      	strb	r3, [r2, #13]
 8000d2a:	4a30      	ldr	r2, [pc, #192]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d2c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d30:	7393      	strb	r3, [r2, #14]
  rgb_temp[5][0]=r05; rgb_temp[5][1]=g05; rgb_temp[5][2]=b05;
 8000d32:	4a2e      	ldr	r2, [pc, #184]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000d38:	73d3      	strb	r3, [r2, #15]
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d3c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d40:	7413      	strb	r3, [r2, #16]
 8000d42:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d44:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000d48:	7453      	strb	r3, [r2, #17]
  rgb_temp[6][0]=r06; rgb_temp[6][1]=g06; rgb_temp[6][2]=b06;
 8000d4a:	4a28      	ldr	r2, [pc, #160]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d4c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000d50:	7493      	strb	r3, [r2, #18]
 8000d52:	4a26      	ldr	r2, [pc, #152]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d54:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000d58:	74d3      	strb	r3, [r2, #19]
 8000d5a:	4a24      	ldr	r2, [pc, #144]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d5c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d60:	7513      	strb	r3, [r2, #20]
  rgb_temp[7][0]=r07; rgb_temp[7][1]=g07; rgb_temp[7][2]=b07;
 8000d62:	4a22      	ldr	r2, [pc, #136]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d64:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000d68:	7553      	strb	r3, [r2, #21]
 8000d6a:	4a20      	ldr	r2, [pc, #128]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d6c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000d70:	7593      	strb	r3, [r2, #22]
 8000d72:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d74:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000d78:	75d3      	strb	r3, [r2, #23]
  rgb_temp[8][0]=r08; rgb_temp[8][1]=g08; rgb_temp[8][2]=b08;
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d7c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000d80:	7613      	strb	r3, [r2, #24]
 8000d82:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d84:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000d88:	7653      	strb	r3, [r2, #25]
 8000d8a:	4a18      	ldr	r2, [pc, #96]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d8c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000d90:	7693      	strb	r3, [r2, #26]
  rgb_temp[9][0]=r09; rgb_temp[9][1]=g09; rgb_temp[9][2]=b09;
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d94:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000d98:	76d3      	strb	r3, [r2, #27]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <ws2812_prepareValue+0x140>)
 8000d9c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000da0:	7713      	strb	r3, [r2, #28]
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <ws2812_prepareValue+0x140>)
 8000da4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000da8:	7753      	strb	r3, [r2, #29]
  rgb_temp[10][0]=r10;rgb_temp[10][1]=g10;rgb_temp[10][2]=b10;
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <ws2812_prepareValue+0x140>)
 8000dac:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000db0:	7793      	strb	r3, [r2, #30]
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <ws2812_prepareValue+0x140>)
 8000db4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000db8:	77d3      	strb	r3, [r2, #31]
 8000dba:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <ws2812_prepareValue+0x140>)
 8000dbc:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000dc0:	f882 3020 	strb.w	r3, [r2, #32]
  rgb_temp[11][0]=r11;rgb_temp[11][1]=g11;rgb_temp[11][2]=b11;
 8000dc4:	4a09      	ldr	r2, [pc, #36]	; (8000dec <ws2812_prepareValue+0x140>)
 8000dc6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000dca:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <ws2812_prepareValue+0x140>)
 8000dd0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8000dd4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <ws2812_prepareValue+0x140>)
 8000dda:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000dde:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc90      	pop	{r4, r7}
 8000dea:	4770      	bx	lr
 8000dec:	20002000 	.word	0x20002000

08000df0 <ws2812_setValue>:
//------------------------------------------------------------------
void ws2812_setValue(void)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  uint8_t n=0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	71fb      	strb	r3, [r7, #7]
  for(n=0;n<12;n++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e0d0      	b.n	8000fa2 <ws2812_setValue+0x1b2>
  {
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[0][0], rgb_temp[0][1], rgb_temp[0][2], n*12);
 8000e00:	4b6c      	ldr	r3, [pc, #432]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e02:	7818      	ldrb	r0, [r3, #0]
 8000e04:	4b6b      	ldr	r3, [pc, #428]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e06:	7859      	ldrb	r1, [r3, #1]
 8000e08:	4b6a      	ldr	r3, [pc, #424]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e0a:	789a      	ldrb	r2, [r3, #2]
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	461c      	mov	r4, r3
 8000e12:	0064      	lsls	r4, r4, #1
 8000e14:	4423      	add	r3, r4
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	f7ff fead 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[1][0], rgb_temp[1][1], rgb_temp[1][2], n*12+1);
 8000e1e:	4b65      	ldr	r3, [pc, #404]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e20:	78d8      	ldrb	r0, [r3, #3]
 8000e22:	4b64      	ldr	r3, [pc, #400]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e24:	7919      	ldrb	r1, [r3, #4]
 8000e26:	4b63      	ldr	r3, [pc, #396]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e28:	795a      	ldrb	r2, [r3, #5]
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	461c      	mov	r4, r3
 8000e30:	0064      	lsls	r4, r4, #1
 8000e32:	4423      	add	r3, r4
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f7ff fe9c 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[2][0], rgb_temp[2][1], rgb_temp[2][2], n*12+2);
 8000e40:	4b5c      	ldr	r3, [pc, #368]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e42:	7998      	ldrb	r0, [r3, #6]
 8000e44:	4b5b      	ldr	r3, [pc, #364]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e46:	79d9      	ldrb	r1, [r3, #7]
 8000e48:	4b5a      	ldr	r3, [pc, #360]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e4a:	7a1a      	ldrb	r2, [r3, #8]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	461c      	mov	r4, r3
 8000e52:	0064      	lsls	r4, r4, #1
 8000e54:	4423      	add	r3, r4
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	f7ff fe8b 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[3][0], rgb_temp[3][1], rgb_temp[3][2], n*12+3);
 8000e62:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e64:	7a58      	ldrb	r0, [r3, #9]
 8000e66:	4b53      	ldr	r3, [pc, #332]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e68:	7a99      	ldrb	r1, [r3, #10]
 8000e6a:	4b52      	ldr	r3, [pc, #328]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e6c:	7ada      	ldrb	r2, [r3, #11]
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	461c      	mov	r4, r3
 8000e74:	0064      	lsls	r4, r4, #1
 8000e76:	4423      	add	r3, r4
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3303      	adds	r3, #3
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	f7ff fe7a 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[4][0], rgb_temp[4][1], rgb_temp[4][2], n*12+4);
 8000e84:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e86:	7b18      	ldrb	r0, [r3, #12]
 8000e88:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e8a:	7b59      	ldrb	r1, [r3, #13]
 8000e8c:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000e8e:	7b9a      	ldrb	r2, [r3, #14]
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	461c      	mov	r4, r3
 8000e96:	0064      	lsls	r4, r4, #1
 8000e98:	4423      	add	r3, r4
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	f7ff fe69 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[5][0], rgb_temp[5][1], rgb_temp[5][2], n*12+5);
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000ea8:	7bd8      	ldrb	r0, [r3, #15]
 8000eaa:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000eac:	7c19      	ldrb	r1, [r3, #16]
 8000eae:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000eb0:	7c5a      	ldrb	r2, [r3, #17]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	461c      	mov	r4, r3
 8000eb8:	0064      	lsls	r4, r4, #1
 8000eba:	4423      	add	r3, r4
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	3305      	adds	r3, #5
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f7ff fe58 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[6][0], rgb_temp[6][1], rgb_temp[6][2], n*12+6);
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000eca:	7c98      	ldrb	r0, [r3, #18]
 8000ecc:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000ece:	7cd9      	ldrb	r1, [r3, #19]
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000ed2:	7d1a      	ldrb	r2, [r3, #20]
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	461c      	mov	r4, r3
 8000eda:	0064      	lsls	r4, r4, #1
 8000edc:	4423      	add	r3, r4
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3306      	adds	r3, #6
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f7ff fe47 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[7][0], rgb_temp[7][1], rgb_temp[7][2], n*12+7);
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000eec:	7d58      	ldrb	r0, [r3, #21]
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000ef0:	7d99      	ldrb	r1, [r3, #22]
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000ef4:	7dda      	ldrb	r2, [r3, #23]
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	461c      	mov	r4, r3
 8000efc:	0064      	lsls	r4, r4, #1
 8000efe:	4423      	add	r3, r4
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3307      	adds	r3, #7
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	f7ff fe36 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[8][0], rgb_temp[8][1], rgb_temp[8][2], n*12+8);
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f0e:	7e18      	ldrb	r0, [r3, #24]
 8000f10:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f12:	7e59      	ldrb	r1, [r3, #25]
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f16:	7e9a      	ldrb	r2, [r3, #26]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461c      	mov	r4, r3
 8000f1e:	0064      	lsls	r4, r4, #1
 8000f20:	4423      	add	r3, r4
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	3308      	adds	r3, #8
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	f7ff fe25 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[9][0], rgb_temp[9][1], rgb_temp[9][2], n*12+9);
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f30:	7ed8      	ldrb	r0, [r3, #27]
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f34:	7f19      	ldrb	r1, [r3, #28]
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f38:	7f5a      	ldrb	r2, [r3, #29]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	461c      	mov	r4, r3
 8000f40:	0064      	lsls	r4, r4, #1
 8000f42:	4423      	add	r3, r4
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	3309      	adds	r3, #9
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	f7ff fe14 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma(rgb_temp[10][0],rgb_temp[10][1],rgb_temp[10][2],n*12+10);
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f52:	7f98      	ldrb	r0, [r3, #30]
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f56:	7fd9      	ldrb	r1, [r3, #31]
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f5a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	461c      	mov	r4, r3
 8000f64:	0064      	lsls	r4, r4, #1
 8000f66:	4423      	add	r3, r4
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	330a      	adds	r3, #10
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	f7ff fe02 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma(rgb_temp[11][0],rgb_temp[11][1],rgb_temp[11][2],n*12+11);
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f76:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f7c:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <ws2812_setValue+0x1c4>)
 8000f82:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	461c      	mov	r4, r3
 8000f8c:	0064      	lsls	r4, r4, #1
 8000f8e:	4423      	add	r3, r4
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	330b      	adds	r3, #11
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f7ff fdee 	bl	8000b78 <ws2812_pixel_rgb_to_buf_dma>
  for(n=0;n<12;n++)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b0b      	cmp	r3, #11
 8000fa6:	f67f af2b 	bls.w	8000e00 <ws2812_setValue+0x10>
  }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	20002000 	.word	0x20002000

08000fb8 <ws2812_light>:
//------------------------------------------------------------------
void ws2812_light(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA,ARRAY_LEN);
 8000fbc:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <ws2812_light+0x18>)
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <ws2812_light+0x1c>)
 8000fc6:	f003 fb1d 	bl	8004604 <HAL_TIM_PWM_Start_DMA>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200004a0 	.word	0x200004a0
 8000fd4:	20002100 	.word	0x20002100

08000fd8 <ws2812_test01>:
//------------------------------------------------------------------
void ws2812_test01(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0a2      	sub	sp, #136	; 0x88
 8000fdc:	af20      	add	r7, sp, #128	; 0x80
  uint8_t i,j;
  ws2812_prepareValue(128, 0, 0, 0, 128, 0, 0, 0, 128, 64, 64, 0,
 8000fde:	2360      	movs	r3, #96	; 0x60
 8000fe0:	931f      	str	r3, [sp, #124]	; 0x7c
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	931e      	str	r3, [sp, #120]	; 0x78
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	931d      	str	r3, [sp, #116]	; 0x74
 8000fea:	2360      	movs	r3, #96	; 0x60
 8000fec:	931c      	str	r3, [sp, #112]	; 0x70
 8000fee:	2320      	movs	r3, #32
 8000ff0:	931b      	str	r3, [sp, #108]	; 0x6c
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	9319      	str	r3, [sp, #100]	; 0x64
 8000ffa:	2360      	movs	r3, #96	; 0x60
 8000ffc:	9318      	str	r3, [sp, #96]	; 0x60
 8000ffe:	2300      	movs	r3, #0
 8001000:	9317      	str	r3, [sp, #92]	; 0x5c
 8001002:	2300      	movs	r3, #0
 8001004:	9316      	str	r3, [sp, #88]	; 0x58
 8001006:	2360      	movs	r3, #96	; 0x60
 8001008:	9315      	str	r3, [sp, #84]	; 0x54
 800100a:	2320      	movs	r3, #32
 800100c:	9314      	str	r3, [sp, #80]	; 0x50
 800100e:	2320      	movs	r3, #32
 8001010:	9313      	str	r3, [sp, #76]	; 0x4c
 8001012:	2300      	movs	r3, #0
 8001014:	9312      	str	r3, [sp, #72]	; 0x48
 8001016:	2360      	movs	r3, #96	; 0x60
 8001018:	9311      	str	r3, [sp, #68]	; 0x44
 800101a:	2300      	movs	r3, #0
 800101c:	9310      	str	r3, [sp, #64]	; 0x40
 800101e:	2320      	movs	r3, #32
 8001020:	930f      	str	r3, [sp, #60]	; 0x3c
 8001022:	2360      	movs	r3, #96	; 0x60
 8001024:	930e      	str	r3, [sp, #56]	; 0x38
 8001026:	2340      	movs	r3, #64	; 0x40
 8001028:	930d      	str	r3, [sp, #52]	; 0x34
 800102a:	2300      	movs	r3, #0
 800102c:	930c      	str	r3, [sp, #48]	; 0x30
 800102e:	2340      	movs	r3, #64	; 0x40
 8001030:	930b      	str	r3, [sp, #44]	; 0x2c
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	930a      	str	r3, [sp, #40]	; 0x28
 8001036:	2340      	movs	r3, #64	; 0x40
 8001038:	9309      	str	r3, [sp, #36]	; 0x24
 800103a:	2300      	movs	r3, #0
 800103c:	9308      	str	r3, [sp, #32]
 800103e:	2300      	movs	r3, #0
 8001040:	9307      	str	r3, [sp, #28]
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	9306      	str	r3, [sp, #24]
 8001046:	2340      	movs	r3, #64	; 0x40
 8001048:	9305      	str	r3, [sp, #20]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	9304      	str	r3, [sp, #16]
 800104e:	2300      	movs	r3, #0
 8001050:	9303      	str	r3, [sp, #12]
 8001052:	2300      	movs	r3, #0
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2300      	movs	r3, #0
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2080      	movs	r0, #128	; 0x80
 8001066:	f7ff fe21 	bl	8000cac <ws2812_prepareValue>
      0, 64, 64, 64, 0, 64, 96, 32, 0, 96, 0, 32,
      32, 96, 0, 0, 96, 32, 0, 32, 96, 32, 0, 96);
  ws2812_setValue();
 800106a:	f7ff fec1 	bl	8000df0 <ws2812_setValue>
  for(j=0;j<50;j++)
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	e030      	b.n	80010d6 <ws2812_test01+0xfe>
  {
    memcpy((void*)DMA_BUF_TEMP,(void*)(BUF_DMA+48),48);
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <ws2812_test01+0x110>)
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	4619      	mov	r1, r3
 800107a:	481c      	ldr	r0, [pc, #112]	; (80010ec <ws2812_test01+0x114>)
 800107c:	f007 fa0c 	bl	8008498 <memcpy>
    for(i=0;i<143;i++)
 8001080:	2300      	movs	r3, #0
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	e016      	b.n	80010b4 <ws2812_test01+0xdc>
    {
      memcpy((void*)(i*24+BUF_DMA+48),(void*)(i*24+BUF_DMA+72),48);
 8001086:	79fa      	ldrb	r2, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	3360      	adds	r3, #96	; 0x60
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <ws2812_test01+0x118>)
 8001094:	1898      	adds	r0, r3, r2
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	3390      	adds	r3, #144	; 0x90
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <ws2812_test01+0x118>)
 80010a4:	4413      	add	r3, r2
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	4619      	mov	r1, r3
 80010aa:	f007 f9f5 	bl	8008498 <memcpy>
    for(i=0;i<143;i++)
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	3301      	adds	r3, #1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b8e      	cmp	r3, #142	; 0x8e
 80010b8:	d9e5      	bls.n	8001086 <ws2812_test01+0xae>
    }
    memcpy((void*)(BUF_DMA+48+3432),(void*)DMA_BUF_TEMP,48);
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <ws2812_test01+0x11c>)
 80010bc:	2230      	movs	r2, #48	; 0x30
 80010be:	490b      	ldr	r1, [pc, #44]	; (80010ec <ws2812_test01+0x114>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f007 f9e9 	bl	8008498 <memcpy>
    ws2812_light();
 80010c6:	f7ff ff77 	bl	8000fb8 <ws2812_light>
    HAL_Delay(100);
 80010ca:	2064      	movs	r0, #100	; 0x64
 80010cc:	f000 fcc0 	bl	8001a50 <HAL_Delay>
  for(j=0;j<50;j++)
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	3301      	adds	r3, #1
 80010d4:	71bb      	strb	r3, [r7, #6]
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	2b31      	cmp	r3, #49	; 0x31
 80010da:	d9cb      	bls.n	8001074 <ws2812_test01+0x9c>
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000500 	.word	0x20000500
 80010ec:	20002024 	.word	0x20002024
 80010f0:	200004a0 	.word	0x200004a0
 80010f4:	20001fd0 	.word	0x20001fd0

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fe:	f000 fc65 	bl	80019cc <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001102:	f000 f85b 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001106:	f000 f9b9 	bl	800147c <MX_GPIO_Init>
  MX_DMA_Init();
 800110a:	f000 f997 	bl	800143c <MX_DMA_Init>
  MX_I2C1_Init();
 800110e:	f000 f8bd 	bl	800128c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001112:	f000 f8e9 	bl	80012e8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001116:	f000 f91d 	bl	8001354 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t num = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef type;
  for(uint8_t i = 0; i > 127 ; i++){
 800111e:	2300      	movs	r3, #0
 8001120:	71bb      	strb	r3, [r7, #6]
 8001122:	e013      	b.n	800114c <main+0x54>
	  type = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	b29b      	uxth	r3, r3
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	b299      	uxth	r1, r3
 800112c:	230a      	movs	r3, #10
 800112e:	2202      	movs	r2, #2
 8001130:	481c      	ldr	r0, [pc, #112]	; (80011a4 <main+0xac>)
 8001132:	f001 fd19 	bl	8002b68 <HAL_I2C_IsDeviceReady>
 8001136:	4603      	mov	r3, r0
 8001138:	717b      	strb	r3, [r7, #5]
	  if(type == HAL_OK){
 800113a:	797b      	ldrb	r3, [r7, #5]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <main+0x4e>
		  num++;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3301      	adds	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = 0; i > 127 ; i++){
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	3301      	adds	r3, #1
 800114a:	71bb      	strb	r3, [r7, #6]
 800114c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	dbe7      	blt.n	8001124 <main+0x2c>
	  }
  }
  	  ws2812_init();
 8001154:	f7ff fcf4 	bl	8000b40 <ws2812_init>
  	  ws2812_test01();
 8001158:	f7ff ff3e 	bl	8000fd8 <ws2812_test01>
  	  ws2812_light();
 800115c:	f7ff ff2c 	bl	8000fb8 <ws2812_light>
  ssd1306_Init();
 8001160:	f7ff faec 	bl	800073c <ssd1306_Init>
  //extern  unsigned char *gImage_BW;
  //extern  unsigned char *gImage_R;
  ssd1306_Fill(Black);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fb53 	bl	8000810 <ssd1306_Fill>
  ssd1306_SetCursor(5, 10);
 800116a:	210a      	movs	r1, #10
 800116c:	2005      	movs	r0, #5
 800116e:	f7ff fc9d 	bl	8000aac <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 8001172:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <main+0xb0>)
 8001174:	2301      	movs	r3, #1
 8001176:	ca06      	ldmia	r2, {r1, r2}
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <main+0xb4>)
 800117a:	f7ff fc71 	bl	8000a60 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800117e:	f7ff fb6b 	bl	8000858 <ssd1306_UpdateScreen>

  EPD_HW_Init(); //Electronic paper initialization
 8001182:	f7ff fa27 	bl	80005d4 <EPD_HW_Init>
  //EPD_WhiteScreen_ALL(gqImage_BW,gqImage_R); //Refresh the picture in full screen
  EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
 8001186:	f7ff fa93 	bl	80006b0 <EPD_DeepSleep>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800118a:	f004 fbe1 	bl	8005950 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <main+0xb8>)
 8001190:	2100      	movs	r1, #0
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <main+0xbc>)
 8001194:	f004 fc26 	bl	80059e4 <osThreadNew>
 8001198:	4603      	mov	r3, r0
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <main+0xc0>)
 800119c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800119e:	f004 fbfb 	bl	8005998 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <main+0xaa>
 80011a4:	20002054 	.word	0x20002054
 80011a8:	20000000 	.word	0x20000000
 80011ac:	0800866c 	.word	0x0800866c
 80011b0:	080093ec 	.word	0x080093ec
 80011b4:	08001539 	.word	0x08001539
 80011b8:	200021a8 	.word	0x200021a8

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	; 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	2230      	movs	r2, #48	; 0x30
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 f972 	bl	80084b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <SystemClock_Config+0xc8>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <SystemClock_Config+0xc8>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	; 0x40
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <SystemClock_Config+0xc8>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <SystemClock_Config+0xcc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a20      	ldr	r2, [pc, #128]	; (8001288 <SystemClock_Config+0xcc>)
 8001206:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <SystemClock_Config+0xcc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001218:	2301      	movs	r3, #1
 800121a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800121c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800122c:	2319      	movs	r3, #25
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001230:	23c0      	movs	r3, #192	; 0xc0
 8001232:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001238:	2304      	movs	r3, #4
 800123a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4618      	mov	r0, r3
 8001242:	f001 ffdd 	bl	8003200 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800124c:	f000 f98e 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2103      	movs	r1, #3
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fa3f 	bl	80036f0 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001278:	f000 f978 	bl	800156c <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3750      	adds	r7, #80	; 0x50
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2C1_Init+0x50>)
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <MX_I2C1_Init+0x54>)
 8001294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2C1_Init+0x50>)
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x58>)
 800129a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_I2C1_Init+0x50>)
 80012aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_I2C1_Init+0x50>)
 80012ca:	f001 fa0f 	bl	80026ec <HAL_I2C_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d4:	f000 f94a 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20002054 	.word	0x20002054
 80012e0:	40005400 	.word	0x40005400
 80012e4:	000186a0 	.word	0x000186a0

080012e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_SPI1_Init+0x64>)
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <MX_SPI1_Init+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_SPI1_Init+0x64>)
 80012f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_SPI1_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_SPI1_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_SPI1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_SPI1_Init+0x64>)
 8001314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_SPI1_Init+0x64>)
 800131c:	2230      	movs	r2, #48	; 0x30
 800131e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_SPI1_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_SPI1_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_SPI1_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_SPI1_Init+0x64>)
 8001334:	220a      	movs	r2, #10
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_SPI1_Init+0x64>)
 800133a:	f002 fbeb 	bl	8003b14 <HAL_SPI_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001344:	f000 f912 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200020a8 	.word	0x200020a8
 8001350:	40013000 	.word	0x40013000

08001354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <MX_TIM2_Init+0xe4>)
 8001386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_TIM2_Init+0xe4>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <MX_TIM2_Init+0xe4>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <MX_TIM2_Init+0xe4>)
 800139a:	2277      	movs	r2, #119	; 0x77
 800139c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_TIM2_Init+0xe4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <MX_TIM2_Init+0xe4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013aa:	4823      	ldr	r0, [pc, #140]	; (8001438 <MX_TIM2_Init+0xe4>)
 80013ac:	f003 f81e 	bl	80043ec <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80013b6:	f000 f8d9 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c4:	4619      	mov	r1, r3
 80013c6:	481c      	ldr	r0, [pc, #112]	; (8001438 <MX_TIM2_Init+0xe4>)
 80013c8:	f003 fd5c 	bl	8004e84 <HAL_TIM_ConfigClockSource>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013d2:	f000 f8cb 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013d6:	4818      	ldr	r0, [pc, #96]	; (8001438 <MX_TIM2_Init+0xe4>)
 80013d8:	f003 f8ba 	bl	8004550 <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80013e2:	f000 f8c3 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4619      	mov	r1, r3
 80013f4:	4810      	ldr	r0, [pc, #64]	; (8001438 <MX_TIM2_Init+0xe4>)
 80013f6:	f004 f9e5 	bl	80057c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001400:	f000 f8b4 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	; 0x60
 8001406:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2204      	movs	r2, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM2_Init+0xe4>)
 800141c:	f003 fc70 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001426:	f000 f8a1 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM2_Init+0xe4>)
 800142c:	f000 f9b8 	bl	80017a0 <HAL_TIM_MspPostInit>

}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	; 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20002100 	.word	0x20002100

0800143c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_DMA_Init+0x3c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <MX_DMA_Init+0x3c>)
 800144c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_DMA_Init+0x3c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2105      	movs	r1, #5
 8001462:	2011      	movs	r0, #17
 8001464:	f000 fbd0 	bl	8001c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001468:	2011      	movs	r0, #17
 800146a:	f000 fbe9 	bl	8001c40 <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_GPIO_Init+0xb4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a25      	ldr	r2, [pc, #148]	; (8001530 <MX_GPIO_Init+0xb4>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <MX_GPIO_Init+0xb4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_GPIO_Init+0xb4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <MX_GPIO_Init+0xb4>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_GPIO_Init+0xb4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_GPIO_Init+0xb4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a17      	ldr	r2, [pc, #92]	; (8001530 <MX_GPIO_Init+0xb4>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_GPIO_Init+0xb4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2107      	movs	r1, #7
 80014ea:	4812      	ldr	r0, [pc, #72]	; (8001534 <MX_GPIO_Init+0xb8>)
 80014ec:	f001 f8e4 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 80014f0:	2307      	movs	r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	480b      	ldr	r0, [pc, #44]	; (8001534 <MX_GPIO_Init+0xb8>)
 8001508:	f000 ff3a 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 800150c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001516:	2302      	movs	r3, #2
 8001518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4619      	mov	r1, r3
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_GPIO_Init+0xb8>)
 8001522:	f000 ff2d 	bl	8002380 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f004 fae1 	bl	8005b08 <osDelay>
 8001546:	e7fb      	b.n	8001540 <StartInitTask+0x8>

08001548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155a:	f000 fa59 	bl	8001a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40014000 	.word	0x40014000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_MspInit+0x54>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_MspInit+0x54>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x54>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_MspInit+0x54>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_MspInit+0x54>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_MspInit+0x54>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	210f      	movs	r1, #15
 80015ba:	f06f 0001 	mvn.w	r0, #1
 80015be:	f000 fb23 	bl	8001c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_I2C_MspInit+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12b      	bne.n	800164a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_I2C_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_I2C_MspInit+0x88>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160e:	23c0      	movs	r3, #192	; 0xc0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001612:	2312      	movs	r3, #18
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161e:	2304      	movs	r3, #4
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <HAL_I2C_MspInit+0x8c>)
 800162a:	f000 fea9 	bl	8002380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40005400 	.word	0x40005400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400

08001660 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_SPI_MspInit+0x84>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d12b      	bne.n	80016da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 800168c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016ba:	23a0      	movs	r3, #160	; 0xa0
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ca:	2305      	movs	r3, #5
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <HAL_SPI_MspInit+0x8c>)
 80016d6:	f000 fe53 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40013000 	.word	0x40013000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000

080016f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001700:	d143      	bne.n	800178a <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_TIM_Base_MspInit+0xa4>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a22      	ldr	r2, [pc, #136]	; (8001794 <HAL_TIM_Base_MspInit+0xa4>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_TIM_Base_MspInit+0xa4>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <HAL_TIM_Base_MspInit+0xac>)
 8001722:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001726:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800172a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 800173a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001746:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 800174a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001764:	f000 fa7a 	bl	8001c5c <HAL_DMA_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800176e:	f7ff fefd 	bl	800156c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a08      	ldr	r2, [pc, #32]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a05      	ldr	r2, [pc, #20]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_TIM_Base_MspInit+0xa8>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	20002148 	.word	0x20002148
 800179c:	400260a0 	.word	0x400260a0

080017a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c0:	d11d      	bne.n	80017fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_TIM_MspPostInit+0x68>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_TIM_MspPostInit+0x68>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_TIM_MspPostInit+0x68>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017de:	2302      	movs	r3, #2
 80017e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ee:	2301      	movs	r3, #1
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <HAL_TIM_MspPostInit+0x6c>)
 80017fa:	f000 fdc1 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000

08001810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_InitTick+0xd0>)
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	4a2d      	ldr	r2, [pc, #180]	; (80018e0 <HAL_InitTick+0xd0>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6453      	str	r3, [r2, #68]	; 0x44
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_InitTick+0xd0>)
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800183c:	f107 020c 	add.w	r2, r7, #12
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f002 f932 	bl	8003ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800184c:	f002 f91c 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 8001850:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <HAL_InitTick+0xd4>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9b      	lsrs	r3, r3, #18
 800185c:	3b01      	subs	r3, #1
 800185e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_InitTick+0xd8>)
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <HAL_InitTick+0xdc>)
 8001864:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_InitTick+0xd8>)
 8001868:	f240 32e7 	movw	r2, #999	; 0x3e7
 800186c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800186e:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_InitTick+0xd8>)
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_InitTick+0xd8>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_InitTick+0xd8>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_InitTick+0xd8>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001886:	4818      	ldr	r0, [pc, #96]	; (80018e8 <HAL_InitTick+0xd8>)
 8001888:	f002 fdb0 	bl	80043ec <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001896:	2b00      	cmp	r3, #0
 8001898:	d11b      	bne.n	80018d2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800189a:	4813      	ldr	r0, [pc, #76]	; (80018e8 <HAL_InitTick+0xd8>)
 800189c:	f002 fdf6 	bl	800448c <HAL_TIM_Base_Start_IT>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80018a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d111      	bne.n	80018d2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80018ae:	2018      	movs	r0, #24
 80018b0:	f000 f9c6 	bl	8001c40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	d808      	bhi.n	80018cc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80018ba:	2200      	movs	r2, #0
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	2018      	movs	r0, #24
 80018c0:	f000 f9a2 	bl	8001c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_InitTick+0xe0>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e002      	b.n	80018d2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3730      	adds	r7, #48	; 0x30
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	200021ac 	.word	0x200021ac
 80018ec:	40014000 	.word	0x40014000
 80018f0:	2000000c 	.word	0x2000000c

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <NMI_Handler+0x4>

080018fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler+0x4>

08001906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <UsageFault_Handler+0x4>

08001912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_2);
 8001924:	2104      	movs	r1, #4
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <DMA1_Stream6_IRQHandler+0x18>)
 8001928:	f003 f81c 	bl	8004964 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <DMA1_Stream6_IRQHandler+0x1c>)
 800192e:	f000 fabd 	bl	8001eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20002100 	.word	0x20002100
 800193c:	20002148 	.word	0x20002148

08001940 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001946:	f003 f8d3 	bl	8004af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200021ac 	.word	0x200021ac

08001954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <SystemInit+0x20>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <SystemInit+0x20>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001994:	4c0b      	ldr	r4, [pc, #44]	; (80019c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019a2:	f7ff ffd7 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a6:	f006 fd51 	bl	800844c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019aa:	f7ff fba5 	bl	80010f8 <main>
  bx  lr    
 80019ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80019bc:	080094a0 	.word	0x080094a0
  ldr r2, =_sbss
 80019c0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80019c4:	20006c10 	.word	0x20006c10

080019c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_Init+0x40>)
 80019d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_Init+0x40>)
 80019e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_Init+0x40>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f8fc 	bl	8001bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff ff08 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a00:	f7ff fdba 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023c00 	.word	0x40023c00

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000010 	.word	0x20000010
 8001a34:	200021f4 	.word	0x200021f4

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200021f4 	.word	0x200021f4

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000010 	.word	0x20000010

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db0b      	blt.n	8001b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4907      	ldr	r1, [pc, #28]	; (8001b34 <__NVIC_EnableIRQ+0x38>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff4c 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1a:	f7ff ff61 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	6978      	ldr	r0, [r7, #20]
 8001c26:	f7ff ffb1 	bl	8001b8c <NVIC_EncodePriority>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff80 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c38:	bf00      	nop
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff54 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff fee6 	bl	8001a38 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e099      	b.n	8001dac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c98:	e00f      	b.n	8001cba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c9a:	f7ff fecd 	bl	8001a38 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d908      	bls.n	8001cba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e078      	b.n	8001dac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e8      	bne.n	8001c9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_DMA_Init+0x158>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f023 0307 	bic.w	r3, r3, #7
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d117      	bne.n	8001d7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fa91 	bl	8002288 <DMA_CheckFifoParam>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e016      	b.n	8001dac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fa48 	bl	800221c <DMA_CalcBaseAndBitshift>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	223f      	movs	r2, #63	; 0x3f
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	f010803f 	.word	0xf010803f

08001db8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_DMA_Start_IT+0x26>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e040      	b.n	8001e60 <HAL_DMA_Start_IT+0xa8>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d12f      	bne.n	8001e52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f9da 	bl	80021c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	223f      	movs	r2, #63	; 0x3f
 8001e12:	409a      	lsls	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0216 	orr.w	r2, r2, #22
 8001e26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0208 	orr.w	r2, r2, #8
 8001e3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	e005      	b.n	8001e5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d004      	beq.n	8001e86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00c      	b.n	8001ea0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2205      	movs	r2, #5
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001eb8:	4b8e      	ldr	r3, [pc, #568]	; (80020f4 <HAL_DMA_IRQHandler+0x248>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a8e      	ldr	r2, [pc, #568]	; (80020f8 <HAL_DMA_IRQHandler+0x24c>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0a9b      	lsrs	r3, r3, #10
 8001ec4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	2208      	movs	r2, #8
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01a      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0204 	bic.w	r2, r2, #4
 8001efe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2208      	movs	r2, #8
 8001f06:	409a      	lsls	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d012      	beq.n	8001f4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f043 0202 	orr.w	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	2204      	movs	r2, #4
 8001f54:	409a      	lsls	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d012      	beq.n	8001f84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00b      	beq.n	8001f84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	2204      	movs	r2, #4
 8001f72:	409a      	lsls	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	f043 0204 	orr.w	r2, r3, #4
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	2210      	movs	r2, #16
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d043      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03c      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d018      	beq.n	8001fee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d108      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d024      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
 8001fda:	e01f      	b.n	800201c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
 8001fec:	e016      	b.n	800201c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0208 	bic.w	r2, r2, #8
 800200a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2220      	movs	r2, #32
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 808f 	beq.w	800214c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8087 	beq.w	800214c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2220      	movs	r2, #32
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b05      	cmp	r3, #5
 8002054:	d136      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0216 	bic.w	r2, r2, #22
 8002064:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002074:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <HAL_DMA_IRQHandler+0x1da>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0208 	bic.w	r2, r2, #8
 8002094:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	223f      	movs	r2, #63	; 0x3f
 800209c:	409a      	lsls	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d07e      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
        }
        return;
 80020c2:	e079      	b.n	80021b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01d      	beq.n	800210e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10d      	bne.n	80020fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d031      	beq.n	800214c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e02c      	b.n	800214c <HAL_DMA_IRQHandler+0x2a0>
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008
 80020f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d023      	beq.n	800214c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e01e      	b.n	800214c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10f      	bne.n	800213c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0210 	bic.w	r2, r2, #16
 800212a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	2b00      	cmp	r3, #0
 8002152:	d032      	beq.n	80021ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2205      	movs	r2, #5
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3301      	adds	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	d307      	bcc.n	8002194 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f2      	bne.n	8002178 <HAL_DMA_IRQHandler+0x2cc>
 8002192:	e000      	b.n	8002196 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002194:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
 80021b6:	e000      	b.n	80021ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80021b8:	bf00      	nop
    }
  }
}
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b40      	cmp	r3, #64	; 0x40
 80021ec:	d108      	bne.n	8002200 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021fe:	e007      	b.n	8002210 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	60da      	str	r2, [r3, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3b10      	subs	r3, #16
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <DMA_CalcBaseAndBitshift+0x64>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <DMA_CalcBaseAndBitshift+0x68>)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b03      	cmp	r3, #3
 8002248:	d909      	bls.n	800225e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002252:	f023 0303 	bic.w	r3, r3, #3
 8002256:	1d1a      	adds	r2, r3, #4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	659a      	str	r2, [r3, #88]	; 0x58
 800225c:	e007      	b.n	800226e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	aaaaaaab 	.word	0xaaaaaaab
 8002284:	08009428 	.word	0x08009428

08002288 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11f      	bne.n	80022e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d856      	bhi.n	8002356 <DMA_CheckFifoParam+0xce>
 80022a8:	a201      	add	r2, pc, #4	; (adr r2, 80022b0 <DMA_CheckFifoParam+0x28>)
 80022aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ae:	bf00      	nop
 80022b0:	080022c1 	.word	0x080022c1
 80022b4:	080022d3 	.word	0x080022d3
 80022b8:	080022c1 	.word	0x080022c1
 80022bc:	08002357 	.word	0x08002357
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d046      	beq.n	800235a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d0:	e043      	b.n	800235a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022da:	d140      	bne.n	800235e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e0:	e03d      	b.n	800235e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ea:	d121      	bne.n	8002330 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d837      	bhi.n	8002362 <DMA_CheckFifoParam+0xda>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <DMA_CheckFifoParam+0x70>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	08002309 	.word	0x08002309
 80022fc:	0800230f 	.word	0x0800230f
 8002300:	08002309 	.word	0x08002309
 8002304:	08002321 	.word	0x08002321
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      break;
 800230c:	e030      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d025      	beq.n	8002366 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800231e:	e022      	b.n	8002366 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002328:	d11f      	bne.n	800236a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800232e:	e01c      	b.n	800236a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d903      	bls.n	800233e <DMA_CheckFifoParam+0xb6>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d003      	beq.n	8002344 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800233c:	e018      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
      break;
 8002342:	e015      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      break;
 8002354:	e00b      	b.n	800236e <DMA_CheckFifoParam+0xe6>
      break;
 8002356:	bf00      	nop
 8002358:	e00a      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 800235a:	bf00      	nop
 800235c:	e008      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 800235e:	bf00      	nop
 8002360:	e006      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 8002362:	bf00      	nop
 8002364:	e004      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 8002366:	bf00      	nop
 8002368:	e002      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;   
 800236a:	bf00      	nop
 800236c:	e000      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
    }
  } 
  
  return status; 
 8002370:	7bfb      	ldrb	r3, [r7, #15]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop

08002380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	e159      	b.n	8002650 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	f040 8148 	bne.w	800264a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d005      	beq.n	80023d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d130      	bne.n	8002434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 0201 	and.w	r2, r3, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b03      	cmp	r3, #3
 800243e:	d017      	beq.n	8002470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d123      	bne.n	80024c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	08da      	lsrs	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3208      	adds	r2, #8
 8002484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3208      	adds	r2, #8
 80024be:	69b9      	ldr	r1, [r7, #24]
 80024c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0203 	and.w	r2, r3, #3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a2 	beq.w	800264a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b57      	ldr	r3, [pc, #348]	; (8002668 <HAL_GPIO_Init+0x2e8>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	4a56      	ldr	r2, [pc, #344]	; (8002668 <HAL_GPIO_Init+0x2e8>)
 8002510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002514:	6453      	str	r3, [r2, #68]	; 0x44
 8002516:	4b54      	ldr	r3, [pc, #336]	; (8002668 <HAL_GPIO_Init+0x2e8>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002522:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_GPIO_Init+0x2ec>)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a49      	ldr	r2, [pc, #292]	; (8002670 <HAL_GPIO_Init+0x2f0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d019      	beq.n	8002582 <HAL_GPIO_Init+0x202>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a48      	ldr	r2, [pc, #288]	; (8002674 <HAL_GPIO_Init+0x2f4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_GPIO_Init+0x1fe>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a47      	ldr	r2, [pc, #284]	; (8002678 <HAL_GPIO_Init+0x2f8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00d      	beq.n	800257a <HAL_GPIO_Init+0x1fa>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a46      	ldr	r2, [pc, #280]	; (800267c <HAL_GPIO_Init+0x2fc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_Init+0x1f6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a45      	ldr	r2, [pc, #276]	; (8002680 <HAL_GPIO_Init+0x300>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_GPIO_Init+0x1f2>
 800256e:	2304      	movs	r3, #4
 8002570:	e008      	b.n	8002584 <HAL_GPIO_Init+0x204>
 8002572:	2307      	movs	r3, #7
 8002574:	e006      	b.n	8002584 <HAL_GPIO_Init+0x204>
 8002576:	2303      	movs	r3, #3
 8002578:	e004      	b.n	8002584 <HAL_GPIO_Init+0x204>
 800257a:	2302      	movs	r3, #2
 800257c:	e002      	b.n	8002584 <HAL_GPIO_Init+0x204>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_GPIO_Init+0x204>
 8002582:	2300      	movs	r3, #0
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f002 0203 	and.w	r2, r2, #3
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	4093      	lsls	r3, r2
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002594:	4935      	ldr	r1, [pc, #212]	; (800266c <HAL_GPIO_Init+0x2ec>)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	3302      	adds	r3, #2
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <HAL_GPIO_Init+0x304>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025c6:	4a2f      	ldr	r2, [pc, #188]	; (8002684 <HAL_GPIO_Init+0x304>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025cc:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <HAL_GPIO_Init+0x304>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <HAL_GPIO_Init+0x304>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_GPIO_Init+0x304>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800261a:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <HAL_GPIO_Init+0x304>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_GPIO_Init+0x304>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002644:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_GPIO_Init+0x304>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3301      	adds	r3, #1
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	f67f aea2 	bls.w	800239c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	40013800 	.word	0x40013800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400
 8002678:	40020800 	.word	0x40020800
 800267c:	40020c00 	.word	0x40020c00
 8002680:	40021000 	.word	0x40021000
 8002684:	40013c00 	.word	0x40013c00

08002688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e001      	b.n	80026aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d4:	e003      	b.n	80026de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	041a      	lsls	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	619a      	str	r2, [r3, #24]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e12b      	b.n	8002956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe ff5c 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	; 0x24
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800273e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800274e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002750:	f001 f986 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8002754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a81      	ldr	r2, [pc, #516]	; (8002960 <HAL_I2C_Init+0x274>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d807      	bhi.n	8002770 <HAL_I2C_Init+0x84>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a80      	ldr	r2, [pc, #512]	; (8002964 <HAL_I2C_Init+0x278>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bf94      	ite	ls
 8002768:	2301      	movls	r3, #1
 800276a:	2300      	movhi	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e006      	b.n	800277e <HAL_I2C_Init+0x92>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a7d      	ldr	r2, [pc, #500]	; (8002968 <HAL_I2C_Init+0x27c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0e7      	b.n	8002956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a78      	ldr	r2, [pc, #480]	; (800296c <HAL_I2C_Init+0x280>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0c9b      	lsrs	r3, r3, #18
 8002790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a6a      	ldr	r2, [pc, #424]	; (8002960 <HAL_I2C_Init+0x274>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d802      	bhi.n	80027c0 <HAL_I2C_Init+0xd4>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	e009      	b.n	80027d4 <HAL_I2C_Init+0xe8>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	4a69      	ldr	r2, [pc, #420]	; (8002970 <HAL_I2C_Init+0x284>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	3301      	adds	r3, #1
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	430b      	orrs	r3, r1
 80027da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	495c      	ldr	r1, [pc, #368]	; (8002960 <HAL_I2C_Init+0x274>)
 80027f0:	428b      	cmp	r3, r1
 80027f2:	d819      	bhi.n	8002828 <HAL_I2C_Init+0x13c>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e59      	subs	r1, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002808:	400b      	ands	r3, r1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_I2C_Init+0x138>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e59      	subs	r1, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fbb1 f3f3 	udiv	r3, r1, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	e051      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002824:	2304      	movs	r3, #4
 8002826:	e04f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d111      	bne.n	8002854 <HAL_I2C_Init+0x168>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e58      	subs	r0, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e012      	b.n	800287a <HAL_I2C_Init+0x18e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e58      	subs	r0, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	0099      	lsls	r1, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Init+0x196>
 800287e:	2301      	movs	r3, #1
 8002880:	e022      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10e      	bne.n	80028a8 <HAL_I2C_Init+0x1bc>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e58      	subs	r0, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	440b      	add	r3, r1
 8002898:	fbb0 f3f3 	udiv	r3, r0, r3
 800289c:	3301      	adds	r3, #1
 800289e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	6809      	ldr	r1, [r1, #0]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6911      	ldr	r1, [r2, #16]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	000186a0 	.word	0x000186a0
 8002964:	001e847f 	.word	0x001e847f
 8002968:	003d08ff 	.word	0x003d08ff
 800296c:	431bde83 	.word	0x431bde83
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	4608      	mov	r0, r1
 800297e:	4611      	mov	r1, r2
 8002980:	461a      	mov	r2, r3
 8002982:	4603      	mov	r3, r0
 8002984:	817b      	strh	r3, [r7, #10]
 8002986:	460b      	mov	r3, r1
 8002988:	813b      	strh	r3, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800298e:	f7ff f853 	bl	8001a38 <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b20      	cmp	r3, #32
 800299e:	f040 80d9 	bne.w	8002b54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2319      	movs	r3, #25
 80029a8:	2201      	movs	r2, #1
 80029aa:	496d      	ldr	r1, [pc, #436]	; (8002b60 <HAL_I2C_Mem_Write+0x1ec>)
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fa9f 	bl	8002ef0 <I2C_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0cc      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_I2C_Mem_Write+0x56>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0c5      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d007      	beq.n	80029f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2221      	movs	r2, #33	; 0x21
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2240      	movs	r2, #64	; 0x40
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a4d      	ldr	r2, [pc, #308]	; (8002b64 <HAL_I2C_Mem_Write+0x1f0>)
 8002a30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a32:	88f8      	ldrh	r0, [r7, #6]
 8002a34:	893a      	ldrh	r2, [r7, #8]
 8002a36:	8979      	ldrh	r1, [r7, #10]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4603      	mov	r3, r0
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f9be 	bl	8002dc4 <I2C_RequestMemoryWrite>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d052      	beq.n	8002af4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e081      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fb20 	bl	800309c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d11b      	bne.n	8002af4 <HAL_I2C_Mem_Write+0x180>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d017      	beq.n	8002af4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1aa      	bne.n	8002a52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fb0c 	bl	800311e <I2C_WaitOnBTFFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d107      	bne.n	8002b24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e016      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	00100002 	.word	0x00100002
 8002b64:	ffff0000 	.word	0xffff0000

08002b68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7fe ff5e 	bl	8001a38 <HAL_GetTick>
 8002b7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	f040 8111 	bne.w	8002db2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2319      	movs	r3, #25
 8002b96:	2201      	movs	r2, #1
 8002b98:	4988      	ldr	r1, [pc, #544]	; (8002dbc <HAL_I2C_IsDeviceReady+0x254>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f9a8 	bl	8002ef0 <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e104      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_I2C_IsDeviceReady+0x50>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0fd      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d007      	beq.n	8002bde <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2224      	movs	r2, #36	; 0x24
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a70      	ldr	r2, [pc, #448]	; (8002dc0 <HAL_I2C_IsDeviceReady+0x258>)
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f966 	bl	8002ef0 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c38:	d103      	bne.n	8002c42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e0b6      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c56:	f7fe feef 	bl	8001a38 <HAL_GetTick>
 8002c5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c8a:	e025      	b.n	8002cd8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c8c:	f7fe fed4 	bl	8001a38 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d302      	bcc.n	8002ca2 <HAL_I2C_IsDeviceReady+0x13a>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	22a0      	movs	r2, #160	; 0xa0
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2ba0      	cmp	r3, #160	; 0xa0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_I2C_IsDeviceReady+0x188>
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_I2C_IsDeviceReady+0x188>
 8002cea:	7dbb      	ldrb	r3, [r7, #22]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0cd      	beq.n	8002c8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d129      	bne.n	8002d5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2319      	movs	r3, #25
 8002d32:	2201      	movs	r2, #1
 8002d34:	4921      	ldr	r1, [pc, #132]	; (8002dbc <HAL_I2C_IsDeviceReady+0x254>)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f8da 	bl	8002ef0 <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e036      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e02c      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2319      	movs	r3, #25
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	490f      	ldr	r1, [pc, #60]	; (8002dbc <HAL_I2C_IsDeviceReady+0x254>)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f8b6 	bl	8002ef0 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e012      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	3301      	adds	r3, #1
 8002d92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	f4ff af32 	bcc.w	8002c02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
  }
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	00100002 	.word	0x00100002
 8002dc0:	ffff0000 	.word	0xffff0000

08002dc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	817b      	strh	r3, [r7, #10]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	813b      	strh	r3, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f878 	bl	8002ef0 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e14:	d103      	bne.n	8002e1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e05f      	b.n	8002ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e22:	897b      	ldrh	r3, [r7, #10]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	492d      	ldr	r1, [pc, #180]	; (8002eec <I2C_RequestMemoryWrite+0x128>)
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f8b0 	bl	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e04c      	b.n	8002ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e60:	6a39      	ldr	r1, [r7, #32]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f91a 	bl	800309c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d107      	bne.n	8002e86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e02b      	b.n	8002ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	e021      	b.n	8002ee0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e9c:	893b      	ldrh	r3, [r7, #8]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	6a39      	ldr	r1, [r7, #32]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8f4 	bl	800309c <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d107      	bne.n	8002ed2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e005      	b.n	8002ee2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed6:	893b      	ldrh	r3, [r7, #8]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	00010002 	.word	0x00010002

08002ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f00:	e025      	b.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d021      	beq.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fd95 	bl	8001a38 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d116      	bne.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e023      	b.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10d      	bne.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4013      	ands	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	e00c      	b.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d0b6      	beq.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fac:	e051      	b.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbc:	d123      	bne.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0204 	orr.w	r2, r3, #4
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e046      	b.n	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d021      	beq.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7fe fd13 	bl	8001a38 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d116      	bne.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f043 0220 	orr.w	r2, r3, #32
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e020      	b.n	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d10c      	bne.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4013      	ands	r3, r2
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	e00b      	b.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	43da      	mvns	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d18d      	bne.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a8:	e02d      	b.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f878 	bl	80031a0 <I2C_IsAcknowledgeFailed>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e02d      	b.n	8003116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d021      	beq.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe fcb9 	bl	8001a38 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d116      	bne.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e007      	b.n	8003116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d1ca      	bne.n	80030aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800312a:	e02d      	b.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f837 	bl	80031a0 <I2C_IsAcknowledgeFailed>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e02d      	b.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d021      	beq.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003144:	f7fe fc78 	bl	8001a38 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	d302      	bcc.n	800315a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e007      	b.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d1ca      	bne.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b6:	d11b      	bne.n	80031f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f043 0204 	orr.w	r2, r3, #4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e267      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d075      	beq.n	800330a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800321e:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b04      	cmp	r3, #4
 8003228:	d00c      	beq.n	8003244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322a:	4b85      	ldr	r3, [pc, #532]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003232:	2b08      	cmp	r3, #8
 8003234:	d112      	bne.n	800325c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003236:	4b82      	ldr	r3, [pc, #520]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003242:	d10b      	bne.n	800325c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	4b7e      	ldr	r3, [pc, #504]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d05b      	beq.n	8003308 <HAL_RCC_OscConfig+0x108>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d157      	bne.n	8003308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e242      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d106      	bne.n	8003274 <HAL_RCC_OscConfig+0x74>
 8003266:	4b76      	ldr	r3, [pc, #472]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a75      	ldr	r2, [pc, #468]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xb0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x98>
 800327e:	4b70      	ldr	r3, [pc, #448]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a6f      	ldr	r2, [pc, #444]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b6d      	ldr	r3, [pc, #436]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6c      	ldr	r2, [pc, #432]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xb0>
 8003298:	4b69      	ldr	r3, [pc, #420]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a68      	ldr	r2, [pc, #416]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b66      	ldr	r3, [pc, #408]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a65      	ldr	r2, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fbbe 	bl	8001a38 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe fbba 	bl	8001a38 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e207      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b5b      	ldr	r3, [pc, #364]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xc0>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fbaa 	bl	8001a38 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fba6 	bl	8001a38 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1f3      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	4b51      	ldr	r3, [pc, #324]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0xe8>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d063      	beq.n	80033de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003316:	4b4a      	ldr	r3, [pc, #296]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003322:	4b47      	ldr	r3, [pc, #284]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332e:	4b44      	ldr	r3, [pc, #272]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x152>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1c7      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4937      	ldr	r1, [pc, #220]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	e03a      	b.n	80033de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <HAL_RCC_OscConfig+0x244>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fe fb5f 	bl	8001a38 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337e:	f7fe fb5b 	bl	8001a38 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e1a8      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b28      	ldr	r3, [pc, #160]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4925      	ldr	r1, [pc, #148]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
 80033b0:	e015      	b.n	80033de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x244>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fb3e 	bl	8001a38 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c0:	f7fe fb3a 	bl	8001a38 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e187      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d036      	beq.n	8003458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d016      	beq.n	8003420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x248>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe fb1e 	bl	8001a38 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003400:	f7fe fb1a 	bl	8001a38 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e167      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_OscConfig+0x240>)
 8003414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x200>
 800341e:	e01b      	b.n	8003458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_OscConfig+0x248>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fe fb07 	bl	8001a38 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	e00e      	b.n	800344c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342e:	f7fe fb03 	bl	8001a38 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d907      	bls.n	800344c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e150      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
 8003440:	40023800 	.word	0x40023800
 8003444:	42470000 	.word	0x42470000
 8003448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344c:	4b88      	ldr	r3, [pc, #544]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ea      	bne.n	800342e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8097 	beq.w	8003594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003466:	2300      	movs	r3, #0
 8003468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346a:	4b81      	ldr	r3, [pc, #516]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10f      	bne.n	8003496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	4b7d      	ldr	r3, [pc, #500]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	4a7c      	ldr	r2, [pc, #496]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 8003480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003484:	6413      	str	r3, [r2, #64]	; 0x40
 8003486:	4b7a      	ldr	r3, [pc, #488]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b77      	ldr	r3, [pc, #476]	; (8003674 <HAL_RCC_OscConfig+0x474>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d118      	bne.n	80034d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a2:	4b74      	ldr	r3, [pc, #464]	; (8003674 <HAL_RCC_OscConfig+0x474>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a73      	ldr	r2, [pc, #460]	; (8003674 <HAL_RCC_OscConfig+0x474>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fac3 	bl	8001a38 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b6:	f7fe fabf 	bl	8001a38 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e10c      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <HAL_RCC_OscConfig+0x474>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x2ea>
 80034dc:	4b64      	ldr	r3, [pc, #400]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a63      	ldr	r2, [pc, #396]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
 80034e8:	e01c      	b.n	8003524 <HAL_RCC_OscConfig+0x324>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x30c>
 80034f2:	4b5f      	ldr	r3, [pc, #380]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a5e      	ldr	r2, [pc, #376]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
 80034fe:	4b5c      	ldr	r3, [pc, #368]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a5b      	ldr	r2, [pc, #364]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0x324>
 800350c:	4b58      	ldr	r3, [pc, #352]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4a57      	ldr	r2, [pc, #348]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a54      	ldr	r2, [pc, #336]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800351e:	f023 0304 	bic.w	r3, r3, #4
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d015      	beq.n	8003558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fe fa84 	bl	8001a38 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe fa80 	bl	8001a38 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e0cb      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	4b49      	ldr	r3, [pc, #292]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ee      	beq.n	8003534 <HAL_RCC_OscConfig+0x334>
 8003556:	e014      	b.n	8003582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003558:	f7fe fa6e 	bl	8001a38 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fe fa6a 	bl	8001a38 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	; 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0b5      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003576:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1ee      	bne.n	8003560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d105      	bne.n	8003594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003588:	4b39      	ldr	r3, [pc, #228]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	4a38      	ldr	r2, [pc, #224]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800358e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a1 	beq.w	80036e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800359e:	4b34      	ldr	r3, [pc, #208]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d05c      	beq.n	8003664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d141      	bne.n	8003636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b31      	ldr	r3, [pc, #196]	; (8003678 <HAL_RCC_OscConfig+0x478>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe fa3e 	bl	8001a38 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe fa3a 	bl	8001a38 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e087      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	3b01      	subs	r3, #1
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	491b      	ldr	r1, [pc, #108]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x478>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fe fa13 	bl	8001a38 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003616:	f7fe fa0f 	bl	8001a38 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e05c      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x416>
 8003634:	e054      	b.n	80036e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <HAL_RCC_OscConfig+0x478>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe f9fc 	bl	8001a38 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe f9f8 	bl	8001a38 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e045      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCC_OscConfig+0x470>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x444>
 8003662:	e03d      	b.n	80036e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e038      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
 8003670:	40023800 	.word	0x40023800
 8003674:	40007000 	.word	0x40007000
 8003678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x4ec>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d028      	beq.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d121      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d11a      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d111      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	3b01      	subs	r3, #1
 80036c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0cc      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003704:	4b68      	ldr	r3, [pc, #416]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d90c      	bls.n	800372c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b63      	ldr	r3, [pc, #396]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0b8      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d020      	beq.n	800377a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003744:	4b59      	ldr	r3, [pc, #356]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800374e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800375c:	4b53      	ldr	r3, [pc, #332]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4a52      	ldr	r2, [pc, #328]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b50      	ldr	r3, [pc, #320]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	494d      	ldr	r1, [pc, #308]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d044      	beq.n	8003810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	4b47      	ldr	r3, [pc, #284]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d119      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e07f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ae:	4b3f      	ldr	r3, [pc, #252]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037be:	4b3b      	ldr	r3, [pc, #236]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e067      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b37      	ldr	r3, [pc, #220]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4934      	ldr	r1, [pc, #208]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e0:	f7fe f92a 	bl	8001a38 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fe f926 	bl	8001a38 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e04f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d20c      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e032      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4916      	ldr	r1, [pc, #88]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	490e      	ldr	r1, [pc, #56]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003876:	f000 f821 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 800387a:	4602      	mov	r2, r0
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	490a      	ldr	r1, [pc, #40]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	5ccb      	ldrb	r3, [r1, r3]
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd ffba 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40023c00 	.word	0x40023c00
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08009410 	.word	0x08009410
 80038b4:	20000008 	.word	0x20000008
 80038b8:	2000000c 	.word	0x2000000c

080038bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b090      	sub	sp, #64	; 0x40
 80038c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	637b      	str	r3, [r7, #52]	; 0x34
 80038c8:	2300      	movs	r3, #0
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038cc:	2300      	movs	r3, #0
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d00d      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x40>
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	f200 80a1 	bhi.w	8003a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ee:	e09b      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b53      	ldr	r3, [pc, #332]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80038f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038f4:	e09b      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f6:	4b53      	ldr	r3, [pc, #332]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038fa:	e098      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038fc:	4b4f      	ldr	r3, [pc, #316]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003906:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d028      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003912:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	2200      	movs	r2, #0
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	627a      	str	r2, [r7, #36]	; 0x24
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003924:	2100      	movs	r1, #0
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003928:	fb03 f201 	mul.w	r2, r3, r1
 800392c:	2300      	movs	r3, #0
 800392e:	fb00 f303 	mul.w	r3, r0, r3
 8003932:	4413      	add	r3, r2
 8003934:	4a43      	ldr	r2, [pc, #268]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003936:	fba0 1202 	umull	r1, r2, r0, r2
 800393a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800393c:	460a      	mov	r2, r1
 800393e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003942:	4413      	add	r3, r2
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003948:	2200      	movs	r2, #0
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	61fa      	str	r2, [r7, #28]
 800394e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003956:	f7fc fc43 	bl	80001e0 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4613      	mov	r3, r2
 8003960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003962:	e053      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003964:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	2200      	movs	r2, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	617a      	str	r2, [r7, #20]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003976:	f04f 0b00 	mov.w	fp, #0
 800397a:	4652      	mov	r2, sl
 800397c:	465b      	mov	r3, fp
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	0159      	lsls	r1, r3, #5
 8003988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398c:	0150      	lsls	r0, r2, #5
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	ebb2 080a 	subs.w	r8, r2, sl
 8003996:	eb63 090b 	sbc.w	r9, r3, fp
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039ae:	ebb2 0408 	subs.w	r4, r2, r8
 80039b2:	eb63 0509 	sbc.w	r5, r3, r9
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	00eb      	lsls	r3, r5, #3
 80039c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c4:	00e2      	lsls	r2, r4, #3
 80039c6:	4614      	mov	r4, r2
 80039c8:	461d      	mov	r5, r3
 80039ca:	eb14 030a 	adds.w	r3, r4, sl
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	eb45 030b 	adc.w	r3, r5, fp
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039e2:	4629      	mov	r1, r5
 80039e4:	028b      	lsls	r3, r1, #10
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ec:	4621      	mov	r1, r4
 80039ee:	028a      	lsls	r2, r1, #10
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f6:	2200      	movs	r2, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	60fa      	str	r2, [r7, #12]
 80039fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a00:	f7fc fbee 	bl	80001e0 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	3301      	adds	r3, #1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3740      	adds	r7, #64	; 0x40
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	017d7840 	.word	0x017d7840

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000008 	.word	0x20000008

08003a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a64:	f7ff fff0 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0a9b      	lsrs	r3, r3, #10
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	08009420 	.word	0x08009420

08003a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a8c:	f7ff ffdc 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0b5b      	lsrs	r3, r3, #13
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	08009420 	.word	0x08009420

08003ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	220f      	movs	r2, #15
 8003abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0203 	and.w	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	08db      	lsrs	r3, r3, #3
 8003aea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <HAL_RCC_GetClockConfig+0x60>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0207 	and.w	r2, r3, #7
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	601a      	str	r2, [r3, #0]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40023c00 	.word	0x40023c00

08003b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e07b      	b.n	8003c1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d108      	bne.n	8003b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b36:	d009      	beq.n	8003b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	61da      	str	r2, [r3, #28]
 8003b3e:	e005      	b.n	8003b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fd7a 	bl	8001660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	ea42 0103 	orr.w	r1, r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	f003 0104 	and.w	r1, r3, #4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	f003 0210 	and.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b088      	sub	sp, #32
 8003c2a:	af02      	add	r7, sp, #8
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c42:	d112      	bne.n	8003c6a <HAL_SPI_Receive+0x44>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10e      	bne.n	8003c6a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2204      	movs	r2, #4
 8003c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c54:	88fa      	ldrh	r2, [r7, #6]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f8f1 	bl	8003e48 <HAL_SPI_TransmitReceive>
 8003c66:	4603      	mov	r3, r0
 8003c68:	e0ea      	b.n	8003e40 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_SPI_Receive+0x52>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0e3      	b.n	8003e40 <HAL_SPI_Receive+0x21a>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c80:	f7fd feda 	bl	8001a38 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d002      	beq.n	8003c98 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
 8003c94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c96:	e0ca      	b.n	8003e2e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_SPI_Receive+0x7e>
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ca8:	e0c1      	b.n	8003e2e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2204      	movs	r2, #4
 8003cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf0:	d10f      	bne.n	8003d12 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d007      	beq.n	8003d30 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d162      	bne.n	8003dfe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d38:	e02e      	b.n	8003d98 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d115      	bne.n	8003d74 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f103 020c 	add.w	r2, r3, #12
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d72:	e011      	b.n	8003d98 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d74:	f7fd fe60 	bl	8001a38 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d803      	bhi.n	8003d8c <HAL_SPI_Receive+0x166>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d102      	bne.n	8003d92 <HAL_SPI_Receive+0x16c>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d96:	e04a      	b.n	8003e2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1cb      	bne.n	8003d3a <HAL_SPI_Receive+0x114>
 8003da2:	e031      	b.n	8003e08 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d113      	bne.n	8003dda <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	b292      	uxth	r2, r2
 8003dbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dd8:	e011      	b.n	8003dfe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dda:	f7fd fe2d 	bl	8001a38 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d803      	bhi.n	8003df2 <HAL_SPI_Receive+0x1cc>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d102      	bne.n	8003df8 <HAL_SPI_Receive+0x1d2>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003dfc:	e017      	b.n	8003e2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1cd      	bne.n	8003da4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	6839      	ldr	r1, [r7, #0]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fa45 	bl	800429c <SPI_EndRxTransaction>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
 8003e2a:	e000      	b.n	8003e2e <HAL_SPI_Receive+0x208>
  }

error :
 8003e2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e56:	2301      	movs	r3, #1
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x26>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e18a      	b.n	8004184 <HAL_SPI_TransmitReceive+0x33c>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e76:	f7fd fddf 	bl	8001a38 <HAL_GetTick>
 8003e7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e8c:	887b      	ldrh	r3, [r7, #2]
 8003e8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d00f      	beq.n	8003eb8 <HAL_SPI_TransmitReceive+0x70>
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9e:	d107      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x68>
 8003ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d003      	beq.n	8003eb8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003eb6:	e15b      	b.n	8004170 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x82>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x82>
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ed0:	e14e      	b.n	8004170 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d003      	beq.n	8003ee6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	887a      	ldrh	r2, [r7, #2]
 8003ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	887a      	ldrh	r2, [r7, #2]
 8003f0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d007      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f42:	d178      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_SPI_TransmitReceive+0x10a>
 8003f4c:	8b7b      	ldrh	r3, [r7, #26]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d166      	bne.n	8004020 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	881a      	ldrh	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	1c9a      	adds	r2, r3, #2
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f76:	e053      	b.n	8004020 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d11b      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x176>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d016      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0x176>
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d113      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	1c9a      	adds	r2, r3, #2
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d119      	bne.n	8004000 <HAL_SPI_TransmitReceive+0x1b8>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d014      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	b292      	uxth	r2, r2
 8003fe2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004000:	f7fd fd1a 	bl	8001a38 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800400c:	429a      	cmp	r2, r3
 800400e:	d807      	bhi.n	8004020 <HAL_SPI_TransmitReceive+0x1d8>
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004016:	d003      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800401e:	e0a7      	b.n	8004170 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1a6      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x130>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1a1      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x130>
 8004034:	e07c      	b.n	8004130 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_SPI_TransmitReceive+0x1fc>
 800403e:	8b7b      	ldrh	r3, [r7, #26]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d16b      	bne.n	800411c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	7812      	ldrb	r2, [r2, #0]
 8004050:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406a:	e057      	b.n	800411c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b02      	cmp	r3, #2
 8004078:	d11c      	bne.n	80040b4 <HAL_SPI_TransmitReceive+0x26c>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d017      	beq.n	80040b4 <HAL_SPI_TransmitReceive+0x26c>
 8004084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004086:	2b01      	cmp	r3, #1
 8004088:	d114      	bne.n	80040b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	330c      	adds	r3, #12
 8004094:	7812      	ldrb	r2, [r2, #0]
 8004096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d119      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x2ae>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d014      	beq.n	80040f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f2:	2301      	movs	r3, #1
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040f6:	f7fd fc9f 	bl	8001a38 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004102:	429a      	cmp	r2, r3
 8004104:	d803      	bhi.n	800410e <HAL_SPI_TransmitReceive+0x2c6>
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d102      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x2cc>
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800411a:	e029      	b.n	8004170 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1a2      	bne.n	800406c <HAL_SPI_TransmitReceive+0x224>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d19d      	bne.n	800406c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f917 	bl	8004368 <SPI_EndRxTxTransaction>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800414c:	e010      	b.n	8004170 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	e000      	b.n	8004170 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800416e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004184:	4618      	mov	r0, r3
 8004186:	3730      	adds	r7, #48	; 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800419c:	f7fd fc4c 	bl	8001a38 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	4413      	add	r3, r2
 80041aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041ac:	f7fd fc44 	bl	8001a38 <HAL_GetTick>
 80041b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041b2:	4b39      	ldr	r3, [pc, #228]	; (8004298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	0d1b      	lsrs	r3, r3, #20
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	fb02 f303 	mul.w	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041c2:	e054      	b.n	800426e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	d050      	beq.n	800426e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041cc:	f7fd fc34 	bl	8001a38 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d902      	bls.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d13d      	bne.n	800425e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fa:	d111      	bne.n	8004220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004204:	d004      	beq.n	8004210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420e:	d107      	bne.n	8004220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004228:	d10f      	bne.n	800424a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e017      	b.n	800428e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	3b01      	subs	r3, #1
 800426c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	429a      	cmp	r2, r3
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	429a      	cmp	r2, r3
 800428a:	d19b      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000008 	.word	0x20000008

0800429c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b0:	d111      	bne.n	80042d6 <SPI_EndRxTransaction+0x3a>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ba:	d004      	beq.n	80042c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c4:	d107      	bne.n	80042d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042de:	d12a      	bne.n	8004336 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e8:	d012      	beq.n	8004310 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2200      	movs	r2, #0
 80042f2:	2180      	movs	r1, #128	; 0x80
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f7ff ff49 	bl	800418c <SPI_WaitFlagStateUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d02d      	beq.n	800435c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004304:	f043 0220 	orr.w	r2, r3, #32
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e026      	b.n	800435e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2200      	movs	r2, #0
 8004318:	2101      	movs	r1, #1
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff ff36 	bl	800418c <SPI_WaitFlagStateUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01a      	beq.n	800435c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e013      	b.n	800435e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2200      	movs	r2, #0
 800433e:	2101      	movs	r1, #1
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff ff23 	bl	800418c <SPI_WaitFlagStateUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e000      	b.n	800435e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004374:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <SPI_EndRxTxTransaction+0x7c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <SPI_EndRxTxTransaction+0x80>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	0d5b      	lsrs	r3, r3, #21
 8004380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004384:	fb02 f303 	mul.w	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004392:	d112      	bne.n	80043ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2200      	movs	r2, #0
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7ff fef4 	bl	800418c <SPI_WaitFlagStateUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e00f      	b.n	80043da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b80      	cmp	r3, #128	; 0x80
 80043d2:	d0f2      	beq.n	80043ba <SPI_EndRxTxTransaction+0x52>
 80043d4:	e000      	b.n	80043d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80043d6:	bf00      	nop
  }

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000008 	.word	0x20000008
 80043e8:	165e9f81 	.word	0x165e9f81

080043ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e041      	b.n	8004482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd f96c 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f000 fefe 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d001      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e044      	b.n	800452e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1e      	ldr	r2, [pc, #120]	; (800453c <HAL_TIM_Base_Start_IT+0xb0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d018      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x6c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d013      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x6c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_TIM_Base_Start_IT+0xb4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00e      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x6c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a19      	ldr	r2, [pc, #100]	; (8004544 <HAL_TIM_Base_Start_IT+0xb8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x6c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a17      	ldr	r2, [pc, #92]	; (8004548 <HAL_TIM_Base_Start_IT+0xbc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x6c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a16      	ldr	r2, [pc, #88]	; (800454c <HAL_TIM_Base_Start_IT+0xc0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d111      	bne.n	800451c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b06      	cmp	r3, #6
 8004508:	d010      	beq.n	800452c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451a:	e007      	b.n	800452c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40014000 	.word	0x40014000

08004550 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e041      	b.n	80045e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f839 	bl	80045ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f000 fe4c 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <HAL_TIM_PWM_Start_DMA+0x2c>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e022      	b.n	8004676 <HAL_TIM_PWM_Start_DMA+0x72>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b04      	cmp	r3, #4
 8004634:	d109      	bne.n	800464a <HAL_TIM_PWM_Start_DMA+0x46>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	e015      	b.n	8004676 <HAL_TIM_PWM_Start_DMA+0x72>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d109      	bne.n	8004664 <HAL_TIM_PWM_Start_DMA+0x60>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e008      	b.n	8004676 <HAL_TIM_PWM_Start_DMA+0x72>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
 800467c:	e15d      	b.n	800493a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <HAL_TIM_PWM_Start_DMA+0x94>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e022      	b.n	80046de <HAL_TIM_PWM_Start_DMA+0xda>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d109      	bne.n	80046b2 <HAL_TIM_PWM_Start_DMA+0xae>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	bf0c      	ite	eq
 80046aa:	2301      	moveq	r3, #1
 80046ac:	2300      	movne	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	e015      	b.n	80046de <HAL_TIM_PWM_Start_DMA+0xda>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d109      	bne.n	80046cc <HAL_TIM_PWM_Start_DMA+0xc8>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e008      	b.n	80046de <HAL_TIM_PWM_Start_DMA+0xda>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d024      	beq.n	800472c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_PWM_Start_DMA+0xee>
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e123      	b.n	800493a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start_DMA+0xfe>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004700:	e016      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	e00e      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004720:	e006      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800472a:	e001      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e104      	b.n	800493a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	f200 80ae 	bhi.w	8004894 <HAL_TIM_PWM_Start_DMA+0x290>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004775 	.word	0x08004775
 8004744:	08004895 	.word	0x08004895
 8004748:	08004895 	.word	0x08004895
 800474c:	08004895 	.word	0x08004895
 8004750:	080047bd 	.word	0x080047bd
 8004754:	08004895 	.word	0x08004895
 8004758:	08004895 	.word	0x08004895
 800475c:	08004895 	.word	0x08004895
 8004760:	08004805 	.word	0x08004805
 8004764:	08004895 	.word	0x08004895
 8004768:	08004895 	.word	0x08004895
 800476c:	08004895 	.word	0x08004895
 8004770:	0800484d 	.word	0x0800484d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	4a72      	ldr	r2, [pc, #456]	; (8004944 <HAL_TIM_PWM_Start_DMA+0x340>)
 800477a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	4a71      	ldr	r2, [pc, #452]	; (8004948 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004782:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	4a70      	ldr	r2, [pc, #448]	; (800494c <HAL_TIM_PWM_Start_DMA+0x348>)
 800478a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3334      	adds	r3, #52	; 0x34
 8004798:	461a      	mov	r2, r3
 800479a:	887b      	ldrh	r3, [r7, #2]
 800479c:	f7fd fb0c 	bl	8001db8 <HAL_DMA_Start_IT>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0c7      	b.n	800493a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b8:	60da      	str	r2, [r3, #12]
      break;
 80047ba:	e06e      	b.n	800489a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	4a60      	ldr	r2, [pc, #384]	; (8004944 <HAL_TIM_PWM_Start_DMA+0x340>)
 80047c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	4a5f      	ldr	r2, [pc, #380]	; (8004948 <HAL_TIM_PWM_Start_DMA+0x344>)
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	4a5e      	ldr	r2, [pc, #376]	; (800494c <HAL_TIM_PWM_Start_DMA+0x348>)
 80047d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3338      	adds	r3, #56	; 0x38
 80047e0:	461a      	mov	r2, r3
 80047e2:	887b      	ldrh	r3, [r7, #2]
 80047e4:	f7fd fae8 	bl	8001db8 <HAL_DMA_Start_IT>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0a3      	b.n	800493a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004800:	60da      	str	r2, [r3, #12]
      break;
 8004802:	e04a      	b.n	800489a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	4a4e      	ldr	r2, [pc, #312]	; (8004944 <HAL_TIM_PWM_Start_DMA+0x340>)
 800480a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	4a4d      	ldr	r2, [pc, #308]	; (8004948 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4a4c      	ldr	r2, [pc, #304]	; (800494c <HAL_TIM_PWM_Start_DMA+0x348>)
 800481a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	333c      	adds	r3, #60	; 0x3c
 8004828:	461a      	mov	r2, r3
 800482a:	887b      	ldrh	r3, [r7, #2]
 800482c:	f7fd fac4 	bl	8001db8 <HAL_DMA_Start_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e07f      	b.n	800493a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004848:	60da      	str	r2, [r3, #12]
      break;
 800484a:	e026      	b.n	800489a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4a3c      	ldr	r2, [pc, #240]	; (8004944 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004852:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	4a3b      	ldr	r2, [pc, #236]	; (8004948 <HAL_TIM_PWM_Start_DMA+0x344>)
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	4a3a      	ldr	r2, [pc, #232]	; (800494c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004862:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3340      	adds	r3, #64	; 0x40
 8004870:	461a      	mov	r2, r3
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	f7fd faa0 	bl	8001db8 <HAL_DMA_Start_IT>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e05b      	b.n	800493a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004890:	60da      	str	r2, [r3, #12]
      break;
 8004892:	e002      	b.n	800489a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	75fb      	strb	r3, [r7, #23]
      break;
 8004898:	bf00      	nop
  }

  if (status == HAL_OK)
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d14b      	bne.n	8004938 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2201      	movs	r2, #1
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 ff65 	bl	8005778 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a27      	ldr	r2, [pc, #156]	; (8004950 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a20      	ldr	r2, [pc, #128]	; (8004950 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_TIM_PWM_Start_DMA+0x300>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048da:	d013      	beq.n	8004904 <HAL_TIM_PWM_Start_DMA+0x300>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_TIM_PWM_Start_DMA+0x350>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_TIM_PWM_Start_DMA+0x300>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_TIM_PWM_Start_DMA+0x354>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_TIM_PWM_Start_DMA+0x300>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <HAL_TIM_PWM_Start_DMA+0x358>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_TIM_PWM_Start_DMA+0x300>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a18      	ldr	r2, [pc, #96]	; (8004960 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d111      	bne.n	8004928 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b06      	cmp	r3, #6
 8004914:	d010      	beq.n	8004938 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004926:	e007      	b.n	8004938 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	0800511d 	.word	0x0800511d
 8004948:	080051c5 	.word	0x080051c5
 800494c:	0800508b 	.word	0x0800508b
 8004950:	40010000 	.word	0x40010000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40014000 	.word	0x40014000

08004964 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d855      	bhi.n	8004a24 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049b5 	.word	0x080049b5
 8004984:	08004a25 	.word	0x08004a25
 8004988:	08004a25 	.word	0x08004a25
 800498c:	08004a25 	.word	0x08004a25
 8004990:	080049d1 	.word	0x080049d1
 8004994:	08004a25 	.word	0x08004a25
 8004998:	08004a25 	.word	0x08004a25
 800499c:	08004a25 	.word	0x08004a25
 80049a0:	080049ed 	.word	0x080049ed
 80049a4:	08004a25 	.word	0x08004a25
 80049a8:	08004a25 	.word	0x08004a25
 80049ac:	08004a25 	.word	0x08004a25
 80049b0:	08004a09 	.word	0x08004a09
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fd fa4d 	bl	8001e68 <HAL_DMA_Abort_IT>
      break;
 80049ce:	e02c      	b.n	8004a2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fd fa3f 	bl	8001e68 <HAL_DMA_Abort_IT>
      break;
 80049ea:	e01e      	b.n	8004a2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fd fa31 	bl	8001e68 <HAL_DMA_Abort_IT>
      break;
 8004a06:	e010      	b.n	8004a2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fd fa23 	bl	8001e68 <HAL_DMA_Abort_IT>
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      break;
 8004a28:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d157      	bne.n	8004ae0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2200      	movs	r2, #0
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fe9d 	bl	8005778 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2a      	ldr	r2, [pc, #168]	; (8004aec <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d117      	bne.n	8004a78 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10f      	bne.n	8004a78 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d107      	bne.n	8004a78 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6a1a      	ldr	r2, [r3, #32]
 8004a7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10f      	bne.n	8004aa8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d107      	bne.n	8004aa8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab6:	e013      	b.n	8004ae0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d104      	bne.n	8004ac8 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac6:	e00b      	b.n	8004ae0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d104      	bne.n	8004ad8 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad6:	e003      	b.n	8004ae0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000

08004af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d122      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d11b      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0202 	mvn.w	r2, #2
 8004b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fa77 	bl	8005026 <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa69 	bl	8005012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fa7a 	bl	800503a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d122      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d11b      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0204 	mvn.w	r2, #4
 8004b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fa4d 	bl	8005026 <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa3f 	bl	8005012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fa50 	bl	800503a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d122      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d11b      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0208 	mvn.w	r2, #8
 8004bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa23 	bl	8005026 <HAL_TIM_IC_CaptureCallback>
 8004be0:	e005      	b.n	8004bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa15 	bl	8005012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fa26 	bl	800503a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d122      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d11b      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0210 	mvn.w	r2, #16
 8004c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f9f9 	bl	8005026 <HAL_TIM_IC_CaptureCallback>
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9eb 	bl	8005012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9fc 	bl	800503a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d10e      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d107      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0201 	mvn.w	r2, #1
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc fc6a 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b80      	cmp	r3, #128	; 0x80
 8004c80:	d10e      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b80      	cmp	r3, #128	; 0x80
 8004c8e:	d107      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fe0a 	bl	80058b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	d10e      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d107      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9cb 	bl	8005062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0220 	mvn.w	r2, #32
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fdd4 	bl	80058a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e0ae      	b.n	8004e7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	f200 809f 	bhi.w	8004e6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d69 	.word	0x08004d69
 8004d38:	08004e6d 	.word	0x08004e6d
 8004d3c:	08004e6d 	.word	0x08004e6d
 8004d40:	08004e6d 	.word	0x08004e6d
 8004d44:	08004da9 	.word	0x08004da9
 8004d48:	08004e6d 	.word	0x08004e6d
 8004d4c:	08004e6d 	.word	0x08004e6d
 8004d50:	08004e6d 	.word	0x08004e6d
 8004d54:	08004deb 	.word	0x08004deb
 8004d58:	08004e6d 	.word	0x08004e6d
 8004d5c:	08004e6d 	.word	0x08004e6d
 8004d60:	08004e6d 	.word	0x08004e6d
 8004d64:	08004e2b 	.word	0x08004e2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fadc 	bl	800532c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0208 	orr.w	r2, r2, #8
 8004d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0204 	bic.w	r2, r2, #4
 8004d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6999      	ldr	r1, [r3, #24]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	619a      	str	r2, [r3, #24]
      break;
 8004da6:	e064      	b.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fb22 	bl	80053f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6999      	ldr	r1, [r3, #24]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	021a      	lsls	r2, r3, #8
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	619a      	str	r2, [r3, #24]
      break;
 8004de8:	e043      	b.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fb6d 	bl	80054d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0208 	orr.w	r2, r2, #8
 8004e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0204 	bic.w	r2, r2, #4
 8004e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69d9      	ldr	r1, [r3, #28]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	61da      	str	r2, [r3, #28]
      break;
 8004e28:	e023      	b.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fbb7 	bl	80055a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69d9      	ldr	r1, [r3, #28]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	021a      	lsls	r2, r3, #8
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	61da      	str	r2, [r3, #28]
      break;
 8004e6a:	e002      	b.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0b4      	b.n	800500a <HAL_TIM_ConfigClockSource+0x186>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed8:	d03e      	beq.n	8004f58 <HAL_TIM_ConfigClockSource+0xd4>
 8004eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ede:	f200 8087 	bhi.w	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	f000 8086 	beq.w	8004ff6 <HAL_TIM_ConfigClockSource+0x172>
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d87f      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b70      	cmp	r3, #112	; 0x70
 8004ef2:	d01a      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0xa6>
 8004ef4:	2b70      	cmp	r3, #112	; 0x70
 8004ef6:	d87b      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b60      	cmp	r3, #96	; 0x60
 8004efa:	d050      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x11a>
 8004efc:	2b60      	cmp	r3, #96	; 0x60
 8004efe:	d877      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d03c      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0xfa>
 8004f04:	2b50      	cmp	r3, #80	; 0x50
 8004f06:	d873      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d058      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x13a>
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d86f      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b30      	cmp	r3, #48	; 0x30
 8004f12:	d064      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x15a>
 8004f14:	2b30      	cmp	r3, #48	; 0x30
 8004f16:	d86b      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d060      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d867      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d05c      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x15a>
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d05a      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x15a>
 8004f28:	e062      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6899      	ldr	r1, [r3, #8]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f000 fbfd 	bl	8005738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	609a      	str	r2, [r3, #8]
      break;
 8004f56:	e04f      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6899      	ldr	r1, [r3, #8]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f000 fbe6 	bl	8005738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f7a:	609a      	str	r2, [r3, #8]
      break;
 8004f7c:	e03c      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6859      	ldr	r1, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f000 fb5a 	bl	8005644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2150      	movs	r1, #80	; 0x50
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fbb3 	bl	8005702 <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e02c      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f000 fb79 	bl	80056a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2160      	movs	r1, #96	; 0x60
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fba3 	bl	8005702 <TIM_ITRx_SetConfig>
      break;
 8004fbc:	e01c      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 fb3a 	bl	8005644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2140      	movs	r1, #64	; 0x40
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fb93 	bl	8005702 <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e00c      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f000 fb8a 	bl	8005702 <TIM_ITRx_SetConfig>
      break;
 8004fee:	e003      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff4:	e000      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d107      	bne.n	80050b2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b0:	e02a      	b.n	8005108 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d107      	bne.n	80050cc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2202      	movs	r2, #2
 80050c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ca:	e01d      	b.n	8005108 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d107      	bne.n	80050e6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2204      	movs	r2, #4
 80050da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e4:	e010      	b.n	8005108 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d107      	bne.n	8005100 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2208      	movs	r2, #8
 80050f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050fe:	e003      	b.n	8005108 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ffb4 	bl	8005076 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d10b      	bne.n	800514c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d136      	bne.n	80051b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800514a:	e031      	b.n	80051b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d10b      	bne.n	800516e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2202      	movs	r2, #2
 800515a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d125      	bne.n	80051b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800516c:	e020      	b.n	80051b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d10b      	bne.n	8005190 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2204      	movs	r2, #4
 800517c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d114      	bne.n	80051b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518e:	e00f      	b.n	80051b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d10a      	bne.n	80051b0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2208      	movs	r2, #8
 800519e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff ff42 	bl	800503a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
}
 80051bc:	bf00      	nop
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d103      	bne.n	80051e4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	771a      	strb	r2, [r3, #28]
 80051e2:	e019      	b.n	8005218 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d103      	bne.n	80051f6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2202      	movs	r2, #2
 80051f2:	771a      	strb	r2, [r3, #28]
 80051f4:	e010      	b.n	8005218 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d103      	bne.n	8005208 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2204      	movs	r2, #4
 8005204:	771a      	strb	r2, [r3, #28]
 8005206:	e007      	b.n	8005218 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d102      	bne.n	8005218 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2208      	movs	r2, #8
 8005216:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff ff18 	bl	800504e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
}
 8005224:	bf00      	nop
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a34      	ldr	r2, [pc, #208]	; (8005310 <TIM_Base_SetConfig+0xe4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00f      	beq.n	8005264 <TIM_Base_SetConfig+0x38>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d00b      	beq.n	8005264 <TIM_Base_SetConfig+0x38>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a31      	ldr	r2, [pc, #196]	; (8005314 <TIM_Base_SetConfig+0xe8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <TIM_Base_SetConfig+0x38>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a30      	ldr	r2, [pc, #192]	; (8005318 <TIM_Base_SetConfig+0xec>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0x38>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a2f      	ldr	r2, [pc, #188]	; (800531c <TIM_Base_SetConfig+0xf0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d108      	bne.n	8005276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a25      	ldr	r2, [pc, #148]	; (8005310 <TIM_Base_SetConfig+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01b      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005284:	d017      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a22      	ldr	r2, [pc, #136]	; (8005314 <TIM_Base_SetConfig+0xe8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a21      	ldr	r2, [pc, #132]	; (8005318 <TIM_Base_SetConfig+0xec>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00f      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a20      	ldr	r2, [pc, #128]	; (800531c <TIM_Base_SetConfig+0xf0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00b      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <TIM_Base_SetConfig+0xf4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <TIM_Base_SetConfig+0xf8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <TIM_Base_SetConfig+0xfc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d108      	bne.n	80052c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a08      	ldr	r2, [pc, #32]	; (8005310 <TIM_Base_SetConfig+0xe4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	615a      	str	r2, [r3, #20]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40010000 	.word	0x40010000
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800

0800532c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0201 	bic.w	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 0302 	bic.w	r3, r3, #2
 8005374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <TIM_OC1_SetConfig+0xc8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d10c      	bne.n	80053a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0308 	bic.w	r3, r3, #8
 800538e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 0304 	bic.w	r3, r3, #4
 80053a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <TIM_OC1_SetConfig+0xc8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d111      	bne.n	80053ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	621a      	str	r2, [r3, #32]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40010000 	.word	0x40010000

080053f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0210 	bic.w	r2, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0320 	bic.w	r3, r3, #32
 8005442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a1e      	ldr	r2, [pc, #120]	; (80054cc <TIM_OC2_SetConfig+0xd4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d10d      	bne.n	8005474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800545e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <TIM_OC2_SetConfig+0xd4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d113      	bne.n	80054a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000

080054d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0303 	bic.w	r3, r3, #3
 8005506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a1d      	ldr	r2, [pc, #116]	; (80055a0 <TIM_OC3_SetConfig+0xd0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d10d      	bne.n	800554a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <TIM_OC3_SetConfig+0xd0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d113      	bne.n	800557a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	621a      	str	r2, [r3, #32]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	40010000 	.word	0x40010000

080055a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	031b      	lsls	r3, r3, #12
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a10      	ldr	r2, [pc, #64]	; (8005640 <TIM_OC4_SetConfig+0x9c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d109      	bne.n	8005618 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800560a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	019b      	lsls	r3, r3, #6
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40010000 	.word	0x40010000

08005644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f023 0201 	bic.w	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800566e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 030a 	bic.w	r3, r3, #10
 8005680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b087      	sub	sp, #28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f023 0210 	bic.w	r2, r3, #16
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	031b      	lsls	r3, r3, #12
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	f043 0307 	orr.w	r3, r3, #7
 8005724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	431a      	orrs	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4313      	orrs	r3, r2
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	609a      	str	r2, [r3, #8]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2201      	movs	r2, #1
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a1a      	ldr	r2, [r3, #32]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	43db      	mvns	r3, r3
 800579a:	401a      	ands	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	fa01 f303 	lsl.w	r3, r1, r3
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
	...

080057c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d8:	2302      	movs	r3, #2
 80057da:	e050      	b.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1c      	ldr	r2, [pc, #112]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d013      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a18      	ldr	r2, [pc, #96]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a16      	ldr	r2, [pc, #88]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a15      	ldr	r2, [pc, #84]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a13      	ldr	r2, [pc, #76]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10c      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	4313      	orrs	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40010000 	.word	0x40010000
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40014000 	.word	0x40014000

080058a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <__NVIC_SetPriority>:
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	6039      	str	r1, [r7, #0]
 80058d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	db0a      	blt.n	80058f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	490c      	ldr	r1, [pc, #48]	; (8005914 <__NVIC_SetPriority+0x4c>)
 80058e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e6:	0112      	lsls	r2, r2, #4
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	440b      	add	r3, r1
 80058ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058f0:	e00a      	b.n	8005908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	4908      	ldr	r1, [pc, #32]	; (8005918 <__NVIC_SetPriority+0x50>)
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	3b04      	subs	r3, #4
 8005900:	0112      	lsls	r2, r2, #4
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	440b      	add	r3, r1
 8005906:	761a      	strb	r2, [r3, #24]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	e000e100 	.word	0xe000e100
 8005918:	e000ed00 	.word	0xe000ed00

0800591c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <SysTick_Handler+0x1c>)
 8005922:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005924:	f001 fd28 	bl	8007378 <xTaskGetSchedulerState>
 8005928:	4603      	mov	r3, r0
 800592a:	2b01      	cmp	r3, #1
 800592c:	d001      	beq.n	8005932 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800592e:	f002 fb13 	bl	8007f58 <xPortSysTickHandler>
  }
}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	e000e010 	.word	0xe000e010

0800593c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005940:	2100      	movs	r1, #0
 8005942:	f06f 0004 	mvn.w	r0, #4
 8005946:	f7ff ffbf 	bl	80058c8 <__NVIC_SetPriority>
#endif
}
 800594a:	bf00      	nop
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005956:	f3ef 8305 	mrs	r3, IPSR
 800595a:	603b      	str	r3, [r7, #0]
  return(result);
 800595c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005962:	f06f 0305 	mvn.w	r3, #5
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	e00c      	b.n	8005984 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <osKernelInitialize+0x44>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d105      	bne.n	800597e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <osKernelInitialize+0x44>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005978:	2300      	movs	r3, #0
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	e002      	b.n	8005984 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800597e:	f04f 33ff 	mov.w	r3, #4294967295
 8005982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005984:	687b      	ldr	r3, [r7, #4]
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	200021f8 	.word	0x200021f8

08005998 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800599e:	f3ef 8305 	mrs	r3, IPSR
 80059a2:	603b      	str	r3, [r7, #0]
  return(result);
 80059a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80059aa:	f06f 0305 	mvn.w	r3, #5
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	e010      	b.n	80059d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059b2:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <osKernelStart+0x48>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d109      	bne.n	80059ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059ba:	f7ff ffbf 	bl	800593c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <osKernelStart+0x48>)
 80059c0:	2202      	movs	r2, #2
 80059c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059c4:	f001 f87c 	bl	8006ac0 <vTaskStartScheduler>
      stat = osOK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	607b      	str	r3, [r7, #4]
 80059cc:	e002      	b.n	80059d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295
 80059d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059d4:	687b      	ldr	r3, [r7, #4]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	200021f8 	.word	0x200021f8

080059e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08e      	sub	sp, #56	; 0x38
 80059e8:	af04      	add	r7, sp, #16
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f4:	f3ef 8305 	mrs	r3, IPSR
 80059f8:	617b      	str	r3, [r7, #20]
  return(result);
 80059fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d17e      	bne.n	8005afe <osThreadNew+0x11a>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d07b      	beq.n	8005afe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a06:	2380      	movs	r3, #128	; 0x80
 8005a08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a0a:	2318      	movs	r3, #24
 8005a0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295
 8005a16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d045      	beq.n	8005aaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <osThreadNew+0x48>
        name = attr->name;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <osThreadNew+0x6e>
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b38      	cmp	r3, #56	; 0x38
 8005a44:	d805      	bhi.n	8005a52 <osThreadNew+0x6e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <osThreadNew+0x72>
        return (NULL);
 8005a52:	2300      	movs	r3, #0
 8005a54:	e054      	b.n	8005b00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	089b      	lsrs	r3, r3, #2
 8005a64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <osThreadNew+0xa8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2bbb      	cmp	r3, #187	; 0xbb
 8005a74:	d90a      	bls.n	8005a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d006      	beq.n	8005a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <osThreadNew+0xa8>
        mem = 1;
 8005a86:	2301      	movs	r3, #1
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	e010      	b.n	8005aae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10c      	bne.n	8005aae <osThreadNew+0xca>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d108      	bne.n	8005aae <osThreadNew+0xca>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <osThreadNew+0xca>
          mem = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	e001      	b.n	8005aae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d110      	bne.n	8005ad6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005abc:	9202      	str	r2, [sp, #8]
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6a3a      	ldr	r2, [r7, #32]
 8005ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fe0c 	bl	80066e8 <xTaskCreateStatic>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	e013      	b.n	8005afe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d110      	bne.n	8005afe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f107 0310 	add.w	r3, r7, #16
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fe57 	bl	80067a2 <xTaskCreate>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d001      	beq.n	8005afe <osThreadNew+0x11a>
            hTask = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005afe:	693b      	ldr	r3, [r7, #16]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3728      	adds	r7, #40	; 0x28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b10:	f3ef 8305 	mrs	r3, IPSR
 8005b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <osDelay+0x1c>
    stat = osErrorISR;
 8005b1c:	f06f 0305 	mvn.w	r3, #5
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e007      	b.n	8005b34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 ff92 	bl	8006a58 <vTaskDelay>
    }
  }

  return (stat);
 8005b34:	68fb      	ldr	r3, [r7, #12]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a07      	ldr	r2, [pc, #28]	; (8005b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8005b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4a06      	ldr	r2, [pc, #24]	; (8005b70 <vApplicationGetIdleTaskMemory+0x30>)
 8005b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	601a      	str	r2, [r3, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	200021fc 	.word	0x200021fc
 8005b70:	200022b8 	.word	0x200022b8

08005b74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a07      	ldr	r2, [pc, #28]	; (8005ba0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4a06      	ldr	r2, [pc, #24]	; (8005ba4 <vApplicationGetTimerTaskMemory+0x30>)
 8005b8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	200024b8 	.word	0x200024b8
 8005ba4:	20002574 	.word	0x20002574

08005ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f103 0208 	add.w	r2, r3, #8
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f103 0208 	add.w	r2, r3, #8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f103 0208 	add.w	r2, r3, #8
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d103      	bne.n	8005c6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e00c      	b.n	8005c84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e002      	b.n	8005c78 <vListInsert+0x2e>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d2f6      	bcs.n	8005c72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	601a      	str	r2, [r3, #0]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6892      	ldr	r2, [r2, #8]
 8005cd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6852      	ldr	r2, [r2, #4]
 8005cdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d103      	bne.n	8005cf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	1e5a      	subs	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d3a:	f002 f87b 	bl	8007e34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d4a:	fb01 f303 	mul.w	r3, r1, r3
 8005d4e:	441a      	add	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	68f9      	ldr	r1, [r7, #12]
 8005d6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	441a      	add	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	22ff      	movs	r2, #255	; 0xff
 8005d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	22ff      	movs	r2, #255	; 0xff
 8005d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d114      	bne.n	8005dba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01a      	beq.n	8005dce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3310      	adds	r3, #16
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 f929 	bl	8006ff4 <xTaskRemoveFromEventList>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d012      	beq.n	8005dce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <xQueueGenericReset+0xcc>)
 8005daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	e009      	b.n	8005dce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fef2 	bl	8005ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3324      	adds	r3, #36	; 0x24
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff feed 	bl	8005ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005dce:	f002 f861 	bl	8007e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dd2:	2301      	movs	r3, #1
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08e      	sub	sp, #56	; 0x38
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <xQueueGenericCreateStatic+0x52>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <xQueueGenericCreateStatic+0x56>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <xQueueGenericCreateStatic+0x58>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	623b      	str	r3, [r7, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <xQueueGenericCreateStatic+0x7e>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <xQueueGenericCreateStatic+0x82>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <xQueueGenericCreateStatic+0x84>
 8005e62:	2300      	movs	r3, #0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	61fb      	str	r3, [r7, #28]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e7e:	2350      	movs	r3, #80	; 0x50
 8005e80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b50      	cmp	r3, #80	; 0x50
 8005e86:	d00a      	beq.n	8005e9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	61bb      	str	r3, [r7, #24]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005eb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f805 	bl	8005ed0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3730      	adds	r7, #48	; 0x30
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d103      	bne.n	8005eec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e002      	b.n	8005ef2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005efe:	2101      	movs	r1, #1
 8005f00:	69b8      	ldr	r0, [r7, #24]
 8005f02:	f7ff ff05 	bl	8005d10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	78fa      	ldrb	r2, [r7, #3]
 8005f0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08e      	sub	sp, #56	; 0x38
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f26:	2300      	movs	r3, #0
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <xQueueGenericSend+0x32>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d103      	bne.n	8005f58 <xQueueGenericSend+0x40>
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <xQueueGenericSend+0x44>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <xQueueGenericSend+0x46>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <xQueueGenericSend+0x60>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d103      	bne.n	8005f86 <xQueueGenericSend+0x6e>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d101      	bne.n	8005f8a <xQueueGenericSend+0x72>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <xQueueGenericSend+0x74>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	623b      	str	r3, [r7, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa6:	f001 f9e7 	bl	8007378 <xTaskGetSchedulerState>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <xQueueGenericSend+0x9e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <xQueueGenericSend+0xa2>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <xQueueGenericSend+0xa4>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	61fb      	str	r3, [r7, #28]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fd6:	f001 ff2d 	bl	8007e34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <xQueueGenericSend+0xd4>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d129      	bne.n	8006040 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ff2:	f000 fa0b 	bl	800640c <prvCopyDataToQueue>
 8005ff6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d010      	beq.n	8006022 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	3324      	adds	r3, #36	; 0x24
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fff5 	bl	8006ff4 <xTaskRemoveFromEventList>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d013      	beq.n	8006038 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006010:	4b3f      	ldr	r3, [pc, #252]	; (8006110 <xQueueGenericSend+0x1f8>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	e00a      	b.n	8006038 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006028:	4b39      	ldr	r3, [pc, #228]	; (8006110 <xQueueGenericSend+0x1f8>)
 800602a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006038:	f001 ff2c 	bl	8007e94 <vPortExitCritical>
				return pdPASS;
 800603c:	2301      	movs	r3, #1
 800603e:	e063      	b.n	8006108 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006046:	f001 ff25 	bl	8007e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800604a:	2300      	movs	r3, #0
 800604c:	e05c      	b.n	8006108 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006054:	f107 0314 	add.w	r3, r7, #20
 8006058:	4618      	mov	r0, r3
 800605a:	f001 f82f 	bl	80070bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800605e:	2301      	movs	r3, #1
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006062:	f001 ff17 	bl	8007e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006066:	f000 fd9b 	bl	8006ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800606a:	f001 fee3 	bl	8007e34 <vPortEnterCritical>
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006074:	b25b      	sxtb	r3, r3
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d103      	bne.n	8006084 <xQueueGenericSend+0x16c>
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800608a:	b25b      	sxtb	r3, r3
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d103      	bne.n	800609a <xQueueGenericSend+0x182>
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800609a:	f001 fefb 	bl	8007e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800609e:	1d3a      	adds	r2, r7, #4
 80060a0:	f107 0314 	add.w	r3, r7, #20
 80060a4:	4611      	mov	r1, r2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 f81e 	bl	80070e8 <xTaskCheckForTimeOut>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d124      	bne.n	80060fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b4:	f000 faa2 	bl	80065fc <prvIsQueueFull>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d018      	beq.n	80060f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	3310      	adds	r3, #16
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 ff44 	bl	8006f54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ce:	f000 fa2d 	bl	800652c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060d2:	f000 fd73 	bl	8006bbc <xTaskResumeAll>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f47f af7c 	bne.w	8005fd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060de:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <xQueueGenericSend+0x1f8>)
 80060e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	e772      	b.n	8005fd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060f2:	f000 fa1b 	bl	800652c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060f6:	f000 fd61 	bl	8006bbc <xTaskResumeAll>
 80060fa:	e76c      	b.n	8005fd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060fe:	f000 fa15 	bl	800652c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006102:	f000 fd5b 	bl	8006bbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006108:	4618      	mov	r0, r3
 800610a:	3738      	adds	r7, #56	; 0x38
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b090      	sub	sp, #64	; 0x40
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d103      	bne.n	8006150 <xQueueGenericSendFromISR+0x3c>
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <xQueueGenericSendFromISR+0x40>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <xQueueGenericSendFromISR+0x42>
 8006154:	2300      	movs	r3, #0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d103      	bne.n	800617e <xQueueGenericSendFromISR+0x6a>
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <xQueueGenericSendFromISR+0x6e>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <xQueueGenericSendFromISR+0x70>
 8006182:	2300      	movs	r3, #0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	623b      	str	r3, [r7, #32]
}
 800619a:	bf00      	nop
 800619c:	e7fe      	b.n	800619c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800619e:	f001 ff2b 	bl	8007ff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061a2:	f3ef 8211 	mrs	r2, BASEPRI
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	61fa      	str	r2, [r7, #28]
 80061b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d302      	bcc.n	80061d0 <xQueueGenericSendFromISR+0xbc>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d12f      	bne.n	8006230 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061e6:	f000 f911 	bl	800640c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d112      	bne.n	800621a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d016      	beq.n	800622a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	3324      	adds	r3, #36	; 0x24
 8006200:	4618      	mov	r0, r3
 8006202:	f000 fef7 	bl	8006ff4 <xTaskRemoveFromEventList>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00b      	beq.n	800622a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e007      	b.n	800622a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800621a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800621e:	3301      	adds	r3, #1
 8006220:	b2db      	uxtb	r3, r3
 8006222:	b25a      	sxtb	r2, r3
 8006224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800622a:	2301      	movs	r3, #1
 800622c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800622e:	e001      	b.n	8006234 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006230:	2300      	movs	r3, #0
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800623e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006242:	4618      	mov	r0, r3
 8006244:	3740      	adds	r7, #64	; 0x40
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08c      	sub	sp, #48	; 0x30
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006258:	2300      	movs	r3, #0
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <xQueueReceive+0x30>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	623b      	str	r3, [r7, #32]
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d103      	bne.n	800628a <xQueueReceive+0x3e>
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <xQueueReceive+0x42>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <xQueueReceive+0x44>
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueReceive+0x5e>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	61fb      	str	r3, [r7, #28]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062aa:	f001 f865 	bl	8007378 <xTaskGetSchedulerState>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <xQueueReceive+0x6e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <xQueueReceive+0x72>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e000      	b.n	80062c0 <xQueueReceive+0x74>
 80062be:	2300      	movs	r3, #0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <xQueueReceive+0x8e>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	61bb      	str	r3, [r7, #24]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062da:	f001 fdab 	bl	8007e34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01f      	beq.n	800632a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ee:	f000 f8f7 	bl	80064e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	1e5a      	subs	r2, r3, #1
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00f      	beq.n	8006322 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	3310      	adds	r3, #16
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fe74 	bl	8006ff4 <xTaskRemoveFromEventList>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006312:	4b3d      	ldr	r3, [pc, #244]	; (8006408 <xQueueReceive+0x1bc>)
 8006314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006322:	f001 fdb7 	bl	8007e94 <vPortExitCritical>
				return pdPASS;
 8006326:	2301      	movs	r3, #1
 8006328:	e069      	b.n	80063fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d103      	bne.n	8006338 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006330:	f001 fdb0 	bl	8007e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006334:	2300      	movs	r3, #0
 8006336:	e062      	b.n	80063fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800633e:	f107 0310 	add.w	r3, r7, #16
 8006342:	4618      	mov	r0, r3
 8006344:	f000 feba 	bl	80070bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006348:	2301      	movs	r3, #1
 800634a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800634c:	f001 fda2 	bl	8007e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006350:	f000 fc26 	bl	8006ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006354:	f001 fd6e 	bl	8007e34 <vPortEnterCritical>
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800635e:	b25b      	sxtb	r3, r3
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d103      	bne.n	800636e <xQueueReceive+0x122>
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006374:	b25b      	sxtb	r3, r3
 8006376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637a:	d103      	bne.n	8006384 <xQueueReceive+0x138>
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006384:	f001 fd86 	bl	8007e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006388:	1d3a      	adds	r2, r7, #4
 800638a:	f107 0310 	add.w	r3, r7, #16
 800638e:	4611      	mov	r1, r2
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fea9 	bl	80070e8 <xTaskCheckForTimeOut>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d123      	bne.n	80063e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800639c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639e:	f000 f917 	bl	80065d0 <prvIsQueueEmpty>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d017      	beq.n	80063d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	3324      	adds	r3, #36	; 0x24
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	4611      	mov	r1, r2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fdcf 	bl	8006f54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b8:	f000 f8b8 	bl	800652c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063bc:	f000 fbfe 	bl	8006bbc <xTaskResumeAll>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d189      	bne.n	80062da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80063c6:	4b10      	ldr	r3, [pc, #64]	; (8006408 <xQueueReceive+0x1bc>)
 80063c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	e780      	b.n	80062da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063da:	f000 f8a7 	bl	800652c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063de:	f000 fbed 	bl	8006bbc <xTaskResumeAll>
 80063e2:	e77a      	b.n	80062da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063e6:	f000 f8a1 	bl	800652c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ea:	f000 fbe7 	bl	8006bbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f0:	f000 f8ee 	bl	80065d0 <prvIsQueueEmpty>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f43f af6f 	beq.w	80062da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3730      	adds	r7, #48	; 0x30
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10d      	bne.n	8006446 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d14d      	bne.n	80064ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 ffbc 	bl	80073b4 <xTaskPriorityDisinherit>
 800643c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	609a      	str	r2, [r3, #8]
 8006444:	e043      	b.n	80064ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d119      	bne.n	8006480 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6858      	ldr	r0, [r3, #4]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	461a      	mov	r2, r3
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	f002 f81e 	bl	8008498 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	441a      	add	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	429a      	cmp	r2, r3
 8006474:	d32b      	bcc.n	80064ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	e026      	b.n	80064ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	68d8      	ldr	r0, [r3, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	461a      	mov	r2, r3
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	f002 f804 	bl	8008498 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	425b      	negs	r3, r3
 800649a:	441a      	add	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d207      	bcs.n	80064bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	425b      	negs	r3, r3
 80064b6:	441a      	add	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d105      	bne.n	80064ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064d6:	697b      	ldr	r3, [r7, #20]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d018      	beq.n	8006524 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	441a      	add	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	d303      	bcc.n	8006514 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68d9      	ldr	r1, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	461a      	mov	r2, r3
 800651e:	6838      	ldr	r0, [r7, #0]
 8006520:	f001 ffba 	bl	8008498 <memcpy>
	}
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006534:	f001 fc7e 	bl	8007e34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800653e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006540:	e011      	b.n	8006566 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d012      	beq.n	8006570 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fd50 	bl	8006ff4 <xTaskRemoveFromEventList>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800655a:	f000 fe27 	bl	80071ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	3b01      	subs	r3, #1
 8006562:	b2db      	uxtb	r3, r3
 8006564:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800656a:	2b00      	cmp	r3, #0
 800656c:	dce9      	bgt.n	8006542 <prvUnlockQueue+0x16>
 800656e:	e000      	b.n	8006572 <prvUnlockQueue+0x46>
					break;
 8006570:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	22ff      	movs	r2, #255	; 0xff
 8006576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800657a:	f001 fc8b 	bl	8007e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800657e:	f001 fc59 	bl	8007e34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006588:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800658a:	e011      	b.n	80065b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d012      	beq.n	80065ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3310      	adds	r3, #16
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fd2b 	bl	8006ff4 <xTaskRemoveFromEventList>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065a4:	f000 fe02 	bl	80071ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	dce9      	bgt.n	800658c <prvUnlockQueue+0x60>
 80065b8:	e000      	b.n	80065bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065c4:	f001 fc66 	bl	8007e94 <vPortExitCritical>
}
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065d8:	f001 fc2c 	bl	8007e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	e001      	b.n	80065ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ee:	f001 fc51 	bl	8007e94 <vPortExitCritical>

	return xReturn;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006604:	f001 fc16 	bl	8007e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006610:	429a      	cmp	r2, r3
 8006612:	d102      	bne.n	800661a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006614:	2301      	movs	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e001      	b.n	800661e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800661e:	f001 fc39 	bl	8007e94 <vPortExitCritical>

	return xReturn;
 8006622:	68fb      	ldr	r3, [r7, #12]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	e014      	b.n	8006666 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800663c:	4a0f      	ldr	r2, [pc, #60]	; (800667c <vQueueAddToRegistry+0x50>)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10b      	bne.n	8006660 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006648:	490c      	ldr	r1, [pc, #48]	; (800667c <vQueueAddToRegistry+0x50>)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006652:	4a0a      	ldr	r2, [pc, #40]	; (800667c <vQueueAddToRegistry+0x50>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4413      	add	r3, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800665e:	e006      	b.n	800666e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b07      	cmp	r3, #7
 800666a:	d9e7      	bls.n	800663c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20002974 	.word	0x20002974

08006680 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006690:	f001 fbd0 	bl	8007e34 <vPortEnterCritical>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800669a:	b25b      	sxtb	r3, r3
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d103      	bne.n	80066aa <vQueueWaitForMessageRestricted+0x2a>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066b0:	b25b      	sxtb	r3, r3
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d103      	bne.n	80066c0 <vQueueWaitForMessageRestricted+0x40>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066c0:	f001 fbe8 	bl	8007e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	3324      	adds	r3, #36	; 0x24
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fc61 	bl	8006f9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066da:	6978      	ldr	r0, [r7, #20]
 80066dc:	f7ff ff26 	bl	800652c <prvUnlockQueue>
	}
 80066e0:	bf00      	nop
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08e      	sub	sp, #56	; 0x38
 80066ec:	af04      	add	r7, sp, #16
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xTaskCreateStatic+0x2a>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xTaskCreateStatic+0x46>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	61fb      	str	r3, [r7, #28]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800672e:	23bc      	movs	r3, #188	; 0xbc
 8006730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2bbc      	cmp	r3, #188	; 0xbc
 8006736:	d00a      	beq.n	800674e <xTaskCreateStatic+0x66>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	61bb      	str	r3, [r7, #24]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800674e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01e      	beq.n	8006794 <xTaskCreateStatic+0xac>
 8006756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01b      	beq.n	8006794 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006764:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	2202      	movs	r2, #2
 800676a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800676e:	2300      	movs	r3, #0
 8006770:	9303      	str	r3, [sp, #12]
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	9302      	str	r3, [sp, #8]
 8006776:	f107 0314 	add.w	r3, r7, #20
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f850 	bl	800682c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800678c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800678e:	f000 f8f3 	bl	8006978 <prvAddNewTaskToReadyList>
 8006792:	e001      	b.n	8006798 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006798:	697b      	ldr	r3, [r7, #20]
	}
 800679a:	4618      	mov	r0, r3
 800679c:	3728      	adds	r7, #40	; 0x28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b08c      	sub	sp, #48	; 0x30
 80067a6:	af04      	add	r7, sp, #16
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	603b      	str	r3, [r7, #0]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 fc5e 	bl	8008078 <pvPortMalloc>
 80067bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00e      	beq.n	80067e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067c4:	20bc      	movs	r0, #188	; 0xbc
 80067c6:	f001 fc57 	bl	8008078 <pvPortMalloc>
 80067ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30
 80067d8:	e005      	b.n	80067e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f001 fd18 	bl	8008210 <vPortFree>
 80067e0:	e001      	b.n	80067e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d017      	beq.n	800681c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067f4:	88fa      	ldrh	r2, [r7, #6]
 80067f6:	2300      	movs	r3, #0
 80067f8:	9303      	str	r3, [sp, #12]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	9302      	str	r3, [sp, #8]
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 f80e 	bl	800682c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006810:	69f8      	ldr	r0, [r7, #28]
 8006812:	f000 f8b1 	bl	8006978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006816:	2301      	movs	r3, #1
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	e002      	b.n	8006822 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800681c:	f04f 33ff 	mov.w	r3, #4294967295
 8006820:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006822:	69bb      	ldr	r3, [r7, #24]
	}
 8006824:	4618      	mov	r0, r3
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	461a      	mov	r2, r3
 8006844:	21a5      	movs	r1, #165	; 0xa5
 8006846:	f001 fe35 	bl	80084b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006854:	3b01      	subs	r3, #1
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f023 0307 	bic.w	r3, r3, #7
 8006862:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <prvInitialiseNewTask+0x58>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	617b      	str	r3, [r7, #20]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01f      	beq.n	80068ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	e012      	b.n	80068b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	7819      	ldrb	r1, [r3, #0]
 8006898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	3334      	adds	r3, #52	; 0x34
 80068a0:	460a      	mov	r2, r1
 80068a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	4413      	add	r3, r2
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d006      	beq.n	80068be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	3301      	adds	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b0f      	cmp	r3, #15
 80068ba:	d9e9      	bls.n	8006890 <prvInitialiseNewTask+0x64>
 80068bc:	e000      	b.n	80068c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80068be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c8:	e003      	b.n	80068d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	2b37      	cmp	r3, #55	; 0x37
 80068d6:	d901      	bls.n	80068dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068d8:	2337      	movs	r3, #55	; 0x37
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	2200      	movs	r2, #0
 80068ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	3304      	adds	r3, #4
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff f978 	bl	8005be8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	3318      	adds	r3, #24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff f973 	bl	8005be8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006906:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006916:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	2200      	movs	r2, #0
 8006924:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	3354      	adds	r3, #84	; 0x54
 800692c:	2260      	movs	r2, #96	; 0x60
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f001 fdbf 	bl	80084b4 <memset>
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	4a0c      	ldr	r2, [pc, #48]	; (800696c <prvInitialiseNewTask+0x140>)
 800693a:	659a      	str	r2, [r3, #88]	; 0x58
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	4a0c      	ldr	r2, [pc, #48]	; (8006970 <prvInitialiseNewTask+0x144>)
 8006940:	65da      	str	r2, [r3, #92]	; 0x5c
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <prvInitialiseNewTask+0x148>)
 8006946:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	69b8      	ldr	r0, [r7, #24]
 800694e:	f001 f941 	bl	8007bd4 <pxPortInitialiseStack>
 8006952:	4602      	mov	r2, r0
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006962:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006964:	bf00      	nop
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	08009450 	.word	0x08009450
 8006970:	08009470 	.word	0x08009470
 8006974:	08009430 	.word	0x08009430

08006978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006980:	f001 fa58 	bl	8007e34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006984:	4b2d      	ldr	r3, [pc, #180]	; (8006a3c <prvAddNewTaskToReadyList+0xc4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	4a2c      	ldr	r2, [pc, #176]	; (8006a3c <prvAddNewTaskToReadyList+0xc4>)
 800698c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800698e:	4b2c      	ldr	r3, [pc, #176]	; (8006a40 <prvAddNewTaskToReadyList+0xc8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006996:	4a2a      	ldr	r2, [pc, #168]	; (8006a40 <prvAddNewTaskToReadyList+0xc8>)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800699c:	4b27      	ldr	r3, [pc, #156]	; (8006a3c <prvAddNewTaskToReadyList+0xc4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d110      	bne.n	80069c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069a4:	f000 fc26 	bl	80071f4 <prvInitialiseTaskLists>
 80069a8:	e00d      	b.n	80069c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069aa:	4b26      	ldr	r3, [pc, #152]	; (8006a44 <prvAddNewTaskToReadyList+0xcc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069b2:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <prvAddNewTaskToReadyList+0xc8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	429a      	cmp	r2, r3
 80069be:	d802      	bhi.n	80069c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069c0:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <prvAddNewTaskToReadyList+0xc8>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069c6:	4b20      	ldr	r3, [pc, #128]	; (8006a48 <prvAddNewTaskToReadyList+0xd0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	4a1e      	ldr	r2, [pc, #120]	; (8006a48 <prvAddNewTaskToReadyList+0xd0>)
 80069ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069d0:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <prvAddNewTaskToReadyList+0xd0>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	4b1b      	ldr	r3, [pc, #108]	; (8006a4c <prvAddNewTaskToReadyList+0xd4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d903      	bls.n	80069ec <prvAddNewTaskToReadyList+0x74>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	4a18      	ldr	r2, [pc, #96]	; (8006a4c <prvAddNewTaskToReadyList+0xd4>)
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <prvAddNewTaskToReadyList+0xd8>)
 80069fa:	441a      	add	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4619      	mov	r1, r3
 8006a02:	4610      	mov	r0, r2
 8006a04:	f7ff f8fd 	bl	8005c02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a08:	f001 fa44 	bl	8007e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <prvAddNewTaskToReadyList+0xcc>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00e      	beq.n	8006a32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <prvAddNewTaskToReadyList+0xc8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d207      	bcs.n	8006a32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a22:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <prvAddNewTaskToReadyList+0xdc>)
 8006a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20002e88 	.word	0x20002e88
 8006a40:	200029b4 	.word	0x200029b4
 8006a44:	20002e94 	.word	0x20002e94
 8006a48:	20002ea4 	.word	0x20002ea4
 8006a4c:	20002e90 	.word	0x20002e90
 8006a50:	200029b8 	.word	0x200029b8
 8006a54:	e000ed04 	.word	0xe000ed04

08006a58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d017      	beq.n	8006a9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a6a:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <vTaskDelay+0x60>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <vTaskDelay+0x30>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	60bb      	str	r3, [r7, #8]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a88:	f000 f88a 	bl	8006ba0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fcfe 	bl	8007490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a94:	f000 f892 	bl	8006bbc <xTaskResumeAll>
 8006a98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d107      	bne.n	8006ab0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006aa0:	4b06      	ldr	r3, [pc, #24]	; (8006abc <vTaskDelay+0x64>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ab0:	bf00      	nop
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20002eb0 	.word	0x20002eb0
 8006abc:	e000ed04 	.word	0xe000ed04

08006ac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	; 0x28
 8006ac4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ace:	463a      	mov	r2, r7
 8006ad0:	1d39      	adds	r1, r7, #4
 8006ad2:	f107 0308 	add.w	r3, r7, #8
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff f832 	bl	8005b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	9202      	str	r2, [sp, #8]
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	2300      	movs	r3, #0
 8006aec:	460a      	mov	r2, r1
 8006aee:	4924      	ldr	r1, [pc, #144]	; (8006b80 <vTaskStartScheduler+0xc0>)
 8006af0:	4824      	ldr	r0, [pc, #144]	; (8006b84 <vTaskStartScheduler+0xc4>)
 8006af2:	f7ff fdf9 	bl	80066e8 <xTaskCreateStatic>
 8006af6:	4603      	mov	r3, r0
 8006af8:	4a23      	ldr	r2, [pc, #140]	; (8006b88 <vTaskStartScheduler+0xc8>)
 8006afa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006afc:	4b22      	ldr	r3, [pc, #136]	; (8006b88 <vTaskStartScheduler+0xc8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b04:	2301      	movs	r3, #1
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	e001      	b.n	8006b0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d102      	bne.n	8006b1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b14:	f000 fd10 	bl	8007538 <xTimerCreateTimerTask>
 8006b18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d11b      	bne.n	8006b58 <vTaskStartScheduler+0x98>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	613b      	str	r3, [r7, #16]
}
 8006b32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b34:	4b15      	ldr	r3, [pc, #84]	; (8006b8c <vTaskStartScheduler+0xcc>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3354      	adds	r3, #84	; 0x54
 8006b3a:	4a15      	ldr	r2, [pc, #84]	; (8006b90 <vTaskStartScheduler+0xd0>)
 8006b3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b3e:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <vTaskStartScheduler+0xd4>)
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295
 8006b44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b46:	4b14      	ldr	r3, [pc, #80]	; (8006b98 <vTaskStartScheduler+0xd8>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b4c:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <vTaskStartScheduler+0xdc>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b52:	f001 f8cd 	bl	8007cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b56:	e00e      	b.n	8006b76 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d10a      	bne.n	8006b76 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60fb      	str	r3, [r7, #12]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <vTaskStartScheduler+0xb4>
}
 8006b76:	bf00      	nop
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	08008678 	.word	0x08008678
 8006b84:	080071c5 	.word	0x080071c5
 8006b88:	20002eac 	.word	0x20002eac
 8006b8c:	200029b4 	.word	0x200029b4
 8006b90:	20000018 	.word	0x20000018
 8006b94:	20002ea8 	.word	0x20002ea8
 8006b98:	20002e94 	.word	0x20002e94
 8006b9c:	20002e8c 	.word	0x20002e8c

08006ba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ba4:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <vTaskSuspendAll+0x18>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	4a03      	ldr	r2, [pc, #12]	; (8006bb8 <vTaskSuspendAll+0x18>)
 8006bac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bae:	bf00      	nop
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	20002eb0 	.word	0x20002eb0

08006bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bca:	4b42      	ldr	r3, [pc, #264]	; (8006cd4 <xTaskResumeAll+0x118>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	603b      	str	r3, [r7, #0]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006be8:	f001 f924 	bl	8007e34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bec:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <xTaskResumeAll+0x118>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	4a38      	ldr	r2, [pc, #224]	; (8006cd4 <xTaskResumeAll+0x118>)
 8006bf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bf6:	4b37      	ldr	r3, [pc, #220]	; (8006cd4 <xTaskResumeAll+0x118>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d162      	bne.n	8006cc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bfe:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <xTaskResumeAll+0x11c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d05e      	beq.n	8006cc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c06:	e02f      	b.n	8006c68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c08:	4b34      	ldr	r3, [pc, #208]	; (8006cdc <xTaskResumeAll+0x120>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3318      	adds	r3, #24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff f851 	bl	8005cbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff f84c 	bl	8005cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	4b2d      	ldr	r3, [pc, #180]	; (8006ce0 <xTaskResumeAll+0x124>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d903      	bls.n	8006c38 <xTaskResumeAll+0x7c>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	4a2a      	ldr	r2, [pc, #168]	; (8006ce0 <xTaskResumeAll+0x124>)
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4a27      	ldr	r2, [pc, #156]	; (8006ce4 <xTaskResumeAll+0x128>)
 8006c46:	441a      	add	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f7fe ffd7 	bl	8005c02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <xTaskResumeAll+0x12c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d302      	bcc.n	8006c68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c62:	4b22      	ldr	r3, [pc, #136]	; (8006cec <xTaskResumeAll+0x130>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c68:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <xTaskResumeAll+0x120>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1cb      	bne.n	8006c08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c76:	f000 fb5f 	bl	8007338 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c7a:	4b1d      	ldr	r3, [pc, #116]	; (8006cf0 <xTaskResumeAll+0x134>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d010      	beq.n	8006ca8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c86:	f000 f847 	bl	8006d18 <xTaskIncrementTick>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c90:	4b16      	ldr	r3, [pc, #88]	; (8006cec <xTaskResumeAll+0x130>)
 8006c92:	2201      	movs	r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f1      	bne.n	8006c86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <xTaskResumeAll+0x134>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ca8:	4b10      	ldr	r3, [pc, #64]	; (8006cec <xTaskResumeAll+0x130>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <xTaskResumeAll+0x138>)
 8006cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cc4:	f001 f8e6 	bl	8007e94 <vPortExitCritical>

	return xAlreadyYielded;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20002eb0 	.word	0x20002eb0
 8006cd8:	20002e88 	.word	0x20002e88
 8006cdc:	20002e48 	.word	0x20002e48
 8006ce0:	20002e90 	.word	0x20002e90
 8006ce4:	200029b8 	.word	0x200029b8
 8006ce8:	200029b4 	.word	0x200029b4
 8006cec:	20002e9c 	.word	0x20002e9c
 8006cf0:	20002e98 	.word	0x20002e98
 8006cf4:	e000ed04 	.word	0xe000ed04

08006cf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cfe:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <xTaskGetTickCount+0x1c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d04:	687b      	ldr	r3, [r7, #4]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20002e8c 	.word	0x20002e8c

08006d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d22:	4b4f      	ldr	r3, [pc, #316]	; (8006e60 <xTaskIncrementTick+0x148>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f040 808f 	bne.w	8006e4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d2c:	4b4d      	ldr	r3, [pc, #308]	; (8006e64 <xTaskIncrementTick+0x14c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3301      	adds	r3, #1
 8006d32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d34:	4a4b      	ldr	r2, [pc, #300]	; (8006e64 <xTaskIncrementTick+0x14c>)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d120      	bne.n	8006d82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d40:	4b49      	ldr	r3, [pc, #292]	; (8006e68 <xTaskIncrementTick+0x150>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	603b      	str	r3, [r7, #0]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <xTaskIncrementTick+0x46>
 8006d60:	4b41      	ldr	r3, [pc, #260]	; (8006e68 <xTaskIncrementTick+0x150>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	4b41      	ldr	r3, [pc, #260]	; (8006e6c <xTaskIncrementTick+0x154>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a3f      	ldr	r2, [pc, #252]	; (8006e68 <xTaskIncrementTick+0x150>)
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	4a3f      	ldr	r2, [pc, #252]	; (8006e6c <xTaskIncrementTick+0x154>)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	4b3e      	ldr	r3, [pc, #248]	; (8006e70 <xTaskIncrementTick+0x158>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	4a3d      	ldr	r2, [pc, #244]	; (8006e70 <xTaskIncrementTick+0x158>)
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	f000 fadb 	bl	8007338 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d82:	4b3c      	ldr	r3, [pc, #240]	; (8006e74 <xTaskIncrementTick+0x15c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d349      	bcc.n	8006e20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d8c:	4b36      	ldr	r3, [pc, #216]	; (8006e68 <xTaskIncrementTick+0x150>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d96:	4b37      	ldr	r3, [pc, #220]	; (8006e74 <xTaskIncrementTick+0x15c>)
 8006d98:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9c:	601a      	str	r2, [r3, #0]
					break;
 8006d9e:	e03f      	b.n	8006e20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006da0:	4b31      	ldr	r3, [pc, #196]	; (8006e68 <xTaskIncrementTick+0x150>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d203      	bcs.n	8006dc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006db8:	4a2e      	ldr	r2, [pc, #184]	; (8006e74 <xTaskIncrementTick+0x15c>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dbe:	e02f      	b.n	8006e20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe ff79 	bl	8005cbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	3318      	adds	r3, #24
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe ff70 	bl	8005cbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	4b25      	ldr	r3, [pc, #148]	; (8006e78 <xTaskIncrementTick+0x160>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d903      	bls.n	8006df0 <xTaskIncrementTick+0xd8>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	4a22      	ldr	r2, [pc, #136]	; (8006e78 <xTaskIncrementTick+0x160>)
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	; (8006e7c <xTaskIncrementTick+0x164>)
 8006dfe:	441a      	add	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f7fe fefb 	bl	8005c02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4b1b      	ldr	r3, [pc, #108]	; (8006e80 <xTaskIncrementTick+0x168>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d3b8      	bcc.n	8006d8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e1e:	e7b5      	b.n	8006d8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e20:	4b17      	ldr	r3, [pc, #92]	; (8006e80 <xTaskIncrementTick+0x168>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e26:	4915      	ldr	r1, [pc, #84]	; (8006e7c <xTaskIncrementTick+0x164>)
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d901      	bls.n	8006e3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e3c:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <xTaskIncrementTick+0x16c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d007      	beq.n	8006e54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	e004      	b.n	8006e54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e4a:	4b0f      	ldr	r3, [pc, #60]	; (8006e88 <xTaskIncrementTick+0x170>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	4a0d      	ldr	r2, [pc, #52]	; (8006e88 <xTaskIncrementTick+0x170>)
 8006e52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e54:	697b      	ldr	r3, [r7, #20]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20002eb0 	.word	0x20002eb0
 8006e64:	20002e8c 	.word	0x20002e8c
 8006e68:	20002e40 	.word	0x20002e40
 8006e6c:	20002e44 	.word	0x20002e44
 8006e70:	20002ea0 	.word	0x20002ea0
 8006e74:	20002ea8 	.word	0x20002ea8
 8006e78:	20002e90 	.word	0x20002e90
 8006e7c:	200029b8 	.word	0x200029b8
 8006e80:	200029b4 	.word	0x200029b4
 8006e84:	20002e9c 	.word	0x20002e9c
 8006e88:	20002e98 	.word	0x20002e98

08006e8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e92:	4b2a      	ldr	r3, [pc, #168]	; (8006f3c <vTaskSwitchContext+0xb0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e9a:	4b29      	ldr	r3, [pc, #164]	; (8006f40 <vTaskSwitchContext+0xb4>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ea0:	e046      	b.n	8006f30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006ea2:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <vTaskSwitchContext+0xb4>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea8:	4b26      	ldr	r3, [pc, #152]	; (8006f44 <vTaskSwitchContext+0xb8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e010      	b.n	8006ed2 <vTaskSwitchContext+0x46>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <vTaskSwitchContext+0x40>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	607b      	str	r3, [r7, #4]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <vTaskSwitchContext+0x3e>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	491d      	ldr	r1, [pc, #116]	; (8006f48 <vTaskSwitchContext+0xbc>)
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0e4      	beq.n	8006eb0 <vTaskSwitchContext+0x24>
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a15      	ldr	r2, [pc, #84]	; (8006f48 <vTaskSwitchContext+0xbc>)
 8006ef2:	4413      	add	r3, r2
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	605a      	str	r2, [r3, #4]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	3308      	adds	r3, #8
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d104      	bne.n	8006f16 <vTaskSwitchContext+0x8a>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	605a      	str	r2, [r3, #4]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	4a0b      	ldr	r2, [pc, #44]	; (8006f4c <vTaskSwitchContext+0xc0>)
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	4a08      	ldr	r2, [pc, #32]	; (8006f44 <vTaskSwitchContext+0xb8>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <vTaskSwitchContext+0xc0>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3354      	adds	r3, #84	; 0x54
 8006f2c:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <vTaskSwitchContext+0xc4>)
 8006f2e:	6013      	str	r3, [r2, #0]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20002eb0 	.word	0x20002eb0
 8006f40:	20002e9c 	.word	0x20002e9c
 8006f44:	20002e90 	.word	0x20002e90
 8006f48:	200029b8 	.word	0x200029b8
 8006f4c:	200029b4 	.word	0x200029b4
 8006f50:	20000018 	.word	0x20000018

08006f54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	60fb      	str	r3, [r7, #12]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f7a:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <vTaskPlaceOnEventList+0x44>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3318      	adds	r3, #24
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fe fe61 	bl	8005c4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f88:	2101      	movs	r1, #1
 8006f8a:	6838      	ldr	r0, [r7, #0]
 8006f8c:	f000 fa80 	bl	8007490 <prvAddCurrentTaskToDelayedList>
}
 8006f90:	bf00      	nop
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	200029b4 	.word	0x200029b4

08006f9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	617b      	str	r3, [r7, #20]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3318      	adds	r3, #24
 8006fca:	4619      	mov	r1, r3
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7fe fe18 	bl	8005c02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	68b8      	ldr	r0, [r7, #8]
 8006fe2:	f000 fa55 	bl	8007490 <prvAddCurrentTaskToDelayedList>
	}
 8006fe6:	bf00      	nop
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200029b4 	.word	0x200029b4

08006ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	60fb      	str	r3, [r7, #12]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	3318      	adds	r3, #24
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe fe49 	bl	8005cbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800702a:	4b1e      	ldr	r3, [pc, #120]	; (80070a4 <xTaskRemoveFromEventList+0xb0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d11d      	bne.n	800706e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	3304      	adds	r3, #4
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fe40 	bl	8005cbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007040:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <xTaskRemoveFromEventList+0xb4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d903      	bls.n	8007050 <xTaskRemoveFromEventList+0x5c>
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	4a16      	ldr	r2, [pc, #88]	; (80070a8 <xTaskRemoveFromEventList+0xb4>)
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4a13      	ldr	r2, [pc, #76]	; (80070ac <xTaskRemoveFromEventList+0xb8>)
 800705e:	441a      	add	r2, r3
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	3304      	adds	r3, #4
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f7fe fdcb 	bl	8005c02 <vListInsertEnd>
 800706c:	e005      	b.n	800707a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	3318      	adds	r3, #24
 8007072:	4619      	mov	r1, r3
 8007074:	480e      	ldr	r0, [pc, #56]	; (80070b0 <xTaskRemoveFromEventList+0xbc>)
 8007076:	f7fe fdc4 	bl	8005c02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <xTaskRemoveFromEventList+0xc0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	429a      	cmp	r2, r3
 8007086:	d905      	bls.n	8007094 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <xTaskRemoveFromEventList+0xc4>)
 800708e:	2201      	movs	r2, #1
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e001      	b.n	8007098 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007098:	697b      	ldr	r3, [r7, #20]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20002eb0 	.word	0x20002eb0
 80070a8:	20002e90 	.word	0x20002e90
 80070ac:	200029b8 	.word	0x200029b8
 80070b0:	20002e48 	.word	0x20002e48
 80070b4:	200029b4 	.word	0x200029b4
 80070b8:	20002e9c 	.word	0x20002e9c

080070bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070c4:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <vTaskInternalSetTimeOutState+0x24>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <vTaskInternalSetTimeOutState+0x28>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	605a      	str	r2, [r3, #4]
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	20002ea0 	.word	0x20002ea0
 80070e4:	20002e8c 	.word	0x20002e8c

080070e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	613b      	str	r3, [r7, #16]
}
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	60fb      	str	r3, [r7, #12]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800712a:	f000 fe83 	bl	8007e34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800712e:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <xTaskCheckForTimeOut+0xbc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d102      	bne.n	800714e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007148:	2300      	movs	r3, #0
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	e023      	b.n	8007196 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b15      	ldr	r3, [pc, #84]	; (80071a8 <xTaskCheckForTimeOut+0xc0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d007      	beq.n	800716a <xTaskCheckForTimeOut+0x82>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	429a      	cmp	r2, r3
 8007162:	d302      	bcc.n	800716a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007164:	2301      	movs	r3, #1
 8007166:	61fb      	str	r3, [r7, #28]
 8007168:	e015      	b.n	8007196 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	429a      	cmp	r2, r3
 8007172:	d20b      	bcs.n	800718c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	1ad2      	subs	r2, r2, r3
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff ff9b 	bl	80070bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007186:	2300      	movs	r3, #0
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	e004      	b.n	8007196 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007192:	2301      	movs	r3, #1
 8007194:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007196:	f000 fe7d 	bl	8007e94 <vPortExitCritical>

	return xReturn;
 800719a:	69fb      	ldr	r3, [r7, #28]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3720      	adds	r7, #32
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	20002e8c 	.word	0x20002e8c
 80071a8:	20002ea0 	.word	0x20002ea0

080071ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071b0:	4b03      	ldr	r3, [pc, #12]	; (80071c0 <vTaskMissedYield+0x14>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	601a      	str	r2, [r3, #0]
}
 80071b6:	bf00      	nop
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20002e9c 	.word	0x20002e9c

080071c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071cc:	f000 f852 	bl	8007274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071d0:	4b06      	ldr	r3, [pc, #24]	; (80071ec <prvIdleTask+0x28>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d9f9      	bls.n	80071cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <prvIdleTask+0x2c>)
 80071da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071e8:	e7f0      	b.n	80071cc <prvIdleTask+0x8>
 80071ea:	bf00      	nop
 80071ec:	200029b8 	.word	0x200029b8
 80071f0:	e000ed04 	.word	0xe000ed04

080071f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071fa:	2300      	movs	r3, #0
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	e00c      	b.n	800721a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4a12      	ldr	r2, [pc, #72]	; (8007254 <prvInitialiseTaskLists+0x60>)
 800720c:	4413      	add	r3, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fcca 	bl	8005ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3301      	adds	r3, #1
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b37      	cmp	r3, #55	; 0x37
 800721e:	d9ef      	bls.n	8007200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007220:	480d      	ldr	r0, [pc, #52]	; (8007258 <prvInitialiseTaskLists+0x64>)
 8007222:	f7fe fcc1 	bl	8005ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007226:	480d      	ldr	r0, [pc, #52]	; (800725c <prvInitialiseTaskLists+0x68>)
 8007228:	f7fe fcbe 	bl	8005ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800722c:	480c      	ldr	r0, [pc, #48]	; (8007260 <prvInitialiseTaskLists+0x6c>)
 800722e:	f7fe fcbb 	bl	8005ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007232:	480c      	ldr	r0, [pc, #48]	; (8007264 <prvInitialiseTaskLists+0x70>)
 8007234:	f7fe fcb8 	bl	8005ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007238:	480b      	ldr	r0, [pc, #44]	; (8007268 <prvInitialiseTaskLists+0x74>)
 800723a:	f7fe fcb5 	bl	8005ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800723e:	4b0b      	ldr	r3, [pc, #44]	; (800726c <prvInitialiseTaskLists+0x78>)
 8007240:	4a05      	ldr	r2, [pc, #20]	; (8007258 <prvInitialiseTaskLists+0x64>)
 8007242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <prvInitialiseTaskLists+0x7c>)
 8007246:	4a05      	ldr	r2, [pc, #20]	; (800725c <prvInitialiseTaskLists+0x68>)
 8007248:	601a      	str	r2, [r3, #0]
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200029b8 	.word	0x200029b8
 8007258:	20002e18 	.word	0x20002e18
 800725c:	20002e2c 	.word	0x20002e2c
 8007260:	20002e48 	.word	0x20002e48
 8007264:	20002e5c 	.word	0x20002e5c
 8007268:	20002e74 	.word	0x20002e74
 800726c:	20002e40 	.word	0x20002e40
 8007270:	20002e44 	.word	0x20002e44

08007274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800727a:	e019      	b.n	80072b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800727c:	f000 fdda 	bl	8007e34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007280:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <prvCheckTasksWaitingTermination+0x50>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3304      	adds	r3, #4
 800728c:	4618      	mov	r0, r3
 800728e:	f7fe fd15 	bl	8005cbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007292:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <prvCheckTasksWaitingTermination+0x54>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3b01      	subs	r3, #1
 8007298:	4a0b      	ldr	r2, [pc, #44]	; (80072c8 <prvCheckTasksWaitingTermination+0x54>)
 800729a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800729c:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <prvCheckTasksWaitingTermination+0x58>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	4a0a      	ldr	r2, [pc, #40]	; (80072cc <prvCheckTasksWaitingTermination+0x58>)
 80072a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072a6:	f000 fdf5 	bl	8007e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f810 	bl	80072d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072b0:	4b06      	ldr	r3, [pc, #24]	; (80072cc <prvCheckTasksWaitingTermination+0x58>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e1      	bne.n	800727c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20002e5c 	.word	0x20002e5c
 80072c8:	20002e88 	.word	0x20002e88
 80072cc:	20002e70 	.word	0x20002e70

080072d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3354      	adds	r3, #84	; 0x54
 80072dc:	4618      	mov	r0, r3
 80072de:	f001 f94b 	bl	8008578 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d108      	bne.n	80072fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 ff8d 	bl	8008210 <vPortFree>
				vPortFree( pxTCB );
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 ff8a 	bl	8008210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072fc:	e018      	b.n	8007330 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007304:	2b01      	cmp	r3, #1
 8007306:	d103      	bne.n	8007310 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 ff81 	bl	8008210 <vPortFree>
	}
 800730e:	e00f      	b.n	8007330 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007316:	2b02      	cmp	r3, #2
 8007318:	d00a      	beq.n	8007330 <prvDeleteTCB+0x60>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	60fb      	str	r3, [r7, #12]
}
 800732c:	bf00      	nop
 800732e:	e7fe      	b.n	800732e <prvDeleteTCB+0x5e>
	}
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800733e:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <prvResetNextTaskUnblockTime+0x38>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <prvResetNextTaskUnblockTime+0x3c>)
 800734a:	f04f 32ff 	mov.w	r2, #4294967295
 800734e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007350:	e008      	b.n	8007364 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007352:	4b07      	ldr	r3, [pc, #28]	; (8007370 <prvResetNextTaskUnblockTime+0x38>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4a04      	ldr	r2, [pc, #16]	; (8007374 <prvResetNextTaskUnblockTime+0x3c>)
 8007362:	6013      	str	r3, [r2, #0]
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	20002e40 	.word	0x20002e40
 8007374:	20002ea8 	.word	0x20002ea8

08007378 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800737e:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <xTaskGetSchedulerState+0x34>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d102      	bne.n	800738c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007386:	2301      	movs	r3, #1
 8007388:	607b      	str	r3, [r7, #4]
 800738a:	e008      	b.n	800739e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800738c:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <xTaskGetSchedulerState+0x38>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007394:	2302      	movs	r3, #2
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e001      	b.n	800739e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800739a:	2300      	movs	r3, #0
 800739c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800739e:	687b      	ldr	r3, [r7, #4]
	}
 80073a0:	4618      	mov	r0, r3
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	20002e94 	.word	0x20002e94
 80073b0:	20002eb0 	.word	0x20002eb0

080073b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d056      	beq.n	8007478 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073ca:	4b2e      	ldr	r3, [pc, #184]	; (8007484 <xTaskPriorityDisinherit+0xd0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d00a      	beq.n	80073ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60fb      	str	r3, [r7, #12]
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60bb      	str	r3, [r7, #8]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740c:	1e5a      	subs	r2, r3, #1
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741a:	429a      	cmp	r2, r3
 800741c:	d02c      	beq.n	8007478 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007422:	2b00      	cmp	r3, #0
 8007424:	d128      	bne.n	8007478 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3304      	adds	r3, #4
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fc46 	bl	8005cbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <xTaskPriorityDisinherit+0xd4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d903      	bls.n	8007458 <xTaskPriorityDisinherit+0xa4>
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	4a0c      	ldr	r2, [pc, #48]	; (8007488 <xTaskPriorityDisinherit+0xd4>)
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4a09      	ldr	r2, [pc, #36]	; (800748c <xTaskPriorityDisinherit+0xd8>)
 8007466:	441a      	add	r2, r3
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	3304      	adds	r3, #4
 800746c:	4619      	mov	r1, r3
 800746e:	4610      	mov	r0, r2
 8007470:	f7fe fbc7 	bl	8005c02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007474:	2301      	movs	r3, #1
 8007476:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007478:	697b      	ldr	r3, [r7, #20]
	}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	200029b4 	.word	0x200029b4
 8007488:	20002e90 	.word	0x20002e90
 800748c:	200029b8 	.word	0x200029b8

08007490 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800749a:	4b21      	ldr	r3, [pc, #132]	; (8007520 <prvAddCurrentTaskToDelayedList+0x90>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074a0:	4b20      	ldr	r3, [pc, #128]	; (8007524 <prvAddCurrentTaskToDelayedList+0x94>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fc08 	bl	8005cbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b2:	d10a      	bne.n	80074ca <prvAddCurrentTaskToDelayedList+0x3a>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ba:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <prvAddCurrentTaskToDelayedList+0x94>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3304      	adds	r3, #4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4819      	ldr	r0, [pc, #100]	; (8007528 <prvAddCurrentTaskToDelayedList+0x98>)
 80074c4:	f7fe fb9d 	bl	8005c02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074c8:	e026      	b.n	8007518 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4413      	add	r3, r2
 80074d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074d2:	4b14      	ldr	r3, [pc, #80]	; (8007524 <prvAddCurrentTaskToDelayedList+0x94>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d209      	bcs.n	80074f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074e2:	4b12      	ldr	r3, [pc, #72]	; (800752c <prvAddCurrentTaskToDelayedList+0x9c>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <prvAddCurrentTaskToDelayedList+0x94>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7fe fbab 	bl	8005c4a <vListInsert>
}
 80074f4:	e010      	b.n	8007518 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074f6:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <prvAddCurrentTaskToDelayedList+0xa0>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <prvAddCurrentTaskToDelayedList+0x94>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3304      	adds	r3, #4
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f7fe fba1 	bl	8005c4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <prvAddCurrentTaskToDelayedList+0xa4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	429a      	cmp	r2, r3
 8007510:	d202      	bcs.n	8007518 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007512:	4a08      	ldr	r2, [pc, #32]	; (8007534 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	6013      	str	r3, [r2, #0]
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20002e8c 	.word	0x20002e8c
 8007524:	200029b4 	.word	0x200029b4
 8007528:	20002e74 	.word	0x20002e74
 800752c:	20002e44 	.word	0x20002e44
 8007530:	20002e40 	.word	0x20002e40
 8007534:	20002ea8 	.word	0x20002ea8

08007538 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800753e:	2300      	movs	r3, #0
 8007540:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007542:	f000 fb07 	bl	8007b54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007546:	4b1c      	ldr	r3, [pc, #112]	; (80075b8 <xTimerCreateTimerTask+0x80>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d021      	beq.n	8007592 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007556:	1d3a      	adds	r2, r7, #4
 8007558:	f107 0108 	add.w	r1, r7, #8
 800755c:	f107 030c 	add.w	r3, r7, #12
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe fb07 	bl	8005b74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	9202      	str	r2, [sp, #8]
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	2302      	movs	r3, #2
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	2300      	movs	r3, #0
 8007576:	460a      	mov	r2, r1
 8007578:	4910      	ldr	r1, [pc, #64]	; (80075bc <xTimerCreateTimerTask+0x84>)
 800757a:	4811      	ldr	r0, [pc, #68]	; (80075c0 <xTimerCreateTimerTask+0x88>)
 800757c:	f7ff f8b4 	bl	80066e8 <xTaskCreateStatic>
 8007580:	4603      	mov	r3, r0
 8007582:	4a10      	ldr	r2, [pc, #64]	; (80075c4 <xTimerCreateTimerTask+0x8c>)
 8007584:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007586:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <xTimerCreateTimerTask+0x8c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800758e:	2301      	movs	r3, #1
 8007590:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	613b      	str	r3, [r7, #16]
}
 80075aa:	bf00      	nop
 80075ac:	e7fe      	b.n	80075ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80075ae:	697b      	ldr	r3, [r7, #20]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20002ee4 	.word	0x20002ee4
 80075bc:	08008680 	.word	0x08008680
 80075c0:	080076fd 	.word	0x080076fd
 80075c4:	20002ee8 	.word	0x20002ee8

080075c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	; 0x28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	623b      	str	r3, [r7, #32]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075f6:	4b1a      	ldr	r3, [pc, #104]	; (8007660 <xTimerGenericCommand+0x98>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d02a      	beq.n	8007654 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b05      	cmp	r3, #5
 800760e:	dc18      	bgt.n	8007642 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007610:	f7ff feb2 	bl	8007378 <xTaskGetSchedulerState>
 8007614:	4603      	mov	r3, r0
 8007616:	2b02      	cmp	r3, #2
 8007618:	d109      	bne.n	800762e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800761a:	4b11      	ldr	r3, [pc, #68]	; (8007660 <xTimerGenericCommand+0x98>)
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	f107 0110 	add.w	r1, r7, #16
 8007622:	2300      	movs	r3, #0
 8007624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007626:	f7fe fc77 	bl	8005f18 <xQueueGenericSend>
 800762a:	6278      	str	r0, [r7, #36]	; 0x24
 800762c:	e012      	b.n	8007654 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800762e:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <xTimerGenericCommand+0x98>)
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	f107 0110 	add.w	r1, r7, #16
 8007636:	2300      	movs	r3, #0
 8007638:	2200      	movs	r2, #0
 800763a:	f7fe fc6d 	bl	8005f18 <xQueueGenericSend>
 800763e:	6278      	str	r0, [r7, #36]	; 0x24
 8007640:	e008      	b.n	8007654 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007642:	4b07      	ldr	r3, [pc, #28]	; (8007660 <xTimerGenericCommand+0x98>)
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	f107 0110 	add.w	r1, r7, #16
 800764a:	2300      	movs	r3, #0
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	f7fe fd61 	bl	8006114 <xQueueGenericSendFromISR>
 8007652:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007656:	4618      	mov	r0, r3
 8007658:	3728      	adds	r7, #40	; 0x28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20002ee4 	.word	0x20002ee4

08007664 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af02      	add	r7, sp, #8
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766e:	4b22      	ldr	r3, [pc, #136]	; (80076f8 <prvProcessExpiredTimer+0x94>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	3304      	adds	r3, #4
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe fb1d 	bl	8005cbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d022      	beq.n	80076d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	699a      	ldr	r2, [r3, #24]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	18d1      	adds	r1, r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	6978      	ldr	r0, [r7, #20]
 800769e:	f000 f8d1 	bl	8007844 <prvInsertTimerInActiveList>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01f      	beq.n	80076e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076a8:	2300      	movs	r3, #0
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	2300      	movs	r3, #0
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	2100      	movs	r1, #0
 80076b2:	6978      	ldr	r0, [r7, #20]
 80076b4:	f7ff ff88 	bl	80075c8 <xTimerGenericCommand>
 80076b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d113      	bne.n	80076e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	60fb      	str	r3, [r7, #12]
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	6978      	ldr	r0, [r7, #20]
 80076ee:	4798      	blx	r3
}
 80076f0:	bf00      	nop
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20002edc 	.word	0x20002edc

080076fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007704:	f107 0308 	add.w	r3, r7, #8
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f857 	bl	80077bc <prvGetNextExpireTime>
 800770e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4619      	mov	r1, r3
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f803 	bl	8007720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800771a:	f000 f8d5 	bl	80078c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800771e:	e7f1      	b.n	8007704 <prvTimerTask+0x8>

08007720 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800772a:	f7ff fa39 	bl	8006ba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800772e:	f107 0308 	add.w	r3, r7, #8
 8007732:	4618      	mov	r0, r3
 8007734:	f000 f866 	bl	8007804 <prvSampleTimeNow>
 8007738:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d130      	bne.n	80077a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <prvProcessTimerOrBlockTask+0x3c>
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	429a      	cmp	r2, r3
 800774c:	d806      	bhi.n	800775c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800774e:	f7ff fa35 	bl	8006bbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007752:	68f9      	ldr	r1, [r7, #12]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff ff85 	bl	8007664 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800775a:	e024      	b.n	80077a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007762:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <prvProcessTimerOrBlockTask+0x90>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <prvProcessTimerOrBlockTask+0x50>
 800776c:	2301      	movs	r3, #1
 800776e:	e000      	b.n	8007772 <prvProcessTimerOrBlockTask+0x52>
 8007770:	2300      	movs	r3, #0
 8007772:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007774:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <prvProcessTimerOrBlockTask+0x94>)
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	4619      	mov	r1, r3
 8007782:	f7fe ff7d 	bl	8006680 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007786:	f7ff fa19 	bl	8006bbc <xTaskResumeAll>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <prvProcessTimerOrBlockTask+0x98>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	f3bf 8f6f 	isb	sy
}
 80077a0:	e001      	b.n	80077a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80077a2:	f7ff fa0b 	bl	8006bbc <xTaskResumeAll>
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20002ee0 	.word	0x20002ee0
 80077b4:	20002ee4 	.word	0x20002ee4
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <prvGetNextExpireTime+0x44>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <prvGetNextExpireTime+0x16>
 80077ce:	2201      	movs	r2, #1
 80077d0:	e000      	b.n	80077d4 <prvGetNextExpireTime+0x18>
 80077d2:	2200      	movs	r2, #0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d105      	bne.n	80077ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <prvGetNextExpireTime+0x44>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e001      	b.n	80077f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077f0:	68fb      	ldr	r3, [r7, #12]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	20002edc 	.word	0x20002edc

08007804 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800780c:	f7ff fa74 	bl	8006cf8 <xTaskGetTickCount>
 8007810:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007812:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <prvSampleTimeNow+0x3c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	429a      	cmp	r2, r3
 800781a:	d205      	bcs.n	8007828 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800781c:	f000 f936 	bl	8007a8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e002      	b.n	800782e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800782e:	4a04      	ldr	r2, [pc, #16]	; (8007840 <prvSampleTimeNow+0x3c>)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007834:	68fb      	ldr	r3, [r7, #12]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20002eec 	.word	0x20002eec

08007844 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	429a      	cmp	r2, r3
 8007868:	d812      	bhi.n	8007890 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	429a      	cmp	r2, r3
 8007876:	d302      	bcc.n	800787e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e01b      	b.n	80078b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <prvInsertTimerInActiveList+0x7c>)
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3304      	adds	r3, #4
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f7fe f9de 	bl	8005c4a <vListInsert>
 800788e:	e012      	b.n	80078b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d206      	bcs.n	80078a6 <prvInsertTimerInActiveList+0x62>
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d302      	bcc.n	80078a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80078a0:	2301      	movs	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e007      	b.n	80078b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078a6:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <prvInsertTimerInActiveList+0x80>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3304      	adds	r3, #4
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f7fe f9ca 	bl	8005c4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80078b6:	697b      	ldr	r3, [r7, #20]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20002ee0 	.word	0x20002ee0
 80078c4:	20002edc 	.word	0x20002edc

080078c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08e      	sub	sp, #56	; 0x38
 80078cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078ce:	e0ca      	b.n	8007a66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da18      	bge.n	8007908 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80078d6:	1d3b      	adds	r3, r7, #4
 80078d8:	3304      	adds	r3, #4
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	61fb      	str	r3, [r7, #28]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078fe:	6850      	ldr	r0, [r2, #4]
 8007900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007902:	6892      	ldr	r2, [r2, #8]
 8007904:	4611      	mov	r1, r2
 8007906:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f2c0 80aa 	blt.w	8007a64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	3304      	adds	r3, #4
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe f9cb 	bl	8005cbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007926:	463b      	mov	r3, r7
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff ff6b 	bl	8007804 <prvSampleTimeNow>
 800792e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b09      	cmp	r3, #9
 8007934:	f200 8097 	bhi.w	8007a66 <prvProcessReceivedCommands+0x19e>
 8007938:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <prvProcessReceivedCommands+0x78>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007969 	.word	0x08007969
 8007944:	08007969 	.word	0x08007969
 8007948:	08007969 	.word	0x08007969
 800794c:	080079dd 	.word	0x080079dd
 8007950:	080079f1 	.word	0x080079f1
 8007954:	08007a3b 	.word	0x08007a3b
 8007958:	08007969 	.word	0x08007969
 800795c:	08007969 	.word	0x08007969
 8007960:	080079dd 	.word	0x080079dd
 8007964:	080079f1 	.word	0x080079f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	18d1      	adds	r1, r2, r3
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007988:	f7ff ff5c 	bl	8007844 <prvInsertTimerInActiveList>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d069      	beq.n	8007a66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007998:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d05e      	beq.n	8007a66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	441a      	add	r2, r3
 80079b0:	2300      	movs	r3, #0
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	2300      	movs	r3, #0
 80079b6:	2100      	movs	r1, #0
 80079b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ba:	f7ff fe05 	bl	80075c8 <xTimerGenericCommand>
 80079be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d14f      	bne.n	8007a66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	61bb      	str	r3, [r7, #24]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079e2:	f023 0301 	bic.w	r3, r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80079ee:	e03a      	b.n	8007a66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f6:	f043 0301 	orr.w	r3, r3, #1
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	617b      	str	r3, [r7, #20]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	18d1      	adds	r1, r2, r3
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a34:	f7ff ff06 	bl	8007844 <prvInsertTimerInActiveList>
					break;
 8007a38:	e015      	b.n	8007a66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a4a:	f000 fbe1 	bl	8008210 <vPortFree>
 8007a4e:	e00a      	b.n	8007a66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a56:	f023 0301 	bic.w	r3, r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a62:	e000      	b.n	8007a66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007a64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a66:	4b08      	ldr	r3, [pc, #32]	; (8007a88 <prvProcessReceivedCommands+0x1c0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	1d39      	adds	r1, r7, #4
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fbec 	bl	800624c <xQueueReceive>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f47f af2a 	bne.w	80078d0 <prvProcessReceivedCommands+0x8>
	}
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	3730      	adds	r7, #48	; 0x30
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20002ee4 	.word	0x20002ee4

08007a8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a92:	e048      	b.n	8007b26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a94:	4b2d      	ldr	r3, [pc, #180]	; (8007b4c <prvSwitchTimerLists+0xc0>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a9e:	4b2b      	ldr	r3, [pc, #172]	; (8007b4c <prvSwitchTimerLists+0xc0>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fe f905 	bl	8005cbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d02e      	beq.n	8007b26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4413      	add	r3, r2
 8007ad0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d90e      	bls.n	8007af8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ae6:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <prvSwitchTimerLists+0xc0>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f7fe f8aa 	bl	8005c4a <vListInsert>
 8007af6:	e016      	b.n	8007b26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007af8:	2300      	movs	r3, #0
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2300      	movs	r3, #0
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	2100      	movs	r1, #0
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7ff fd60 	bl	80075c8 <xTimerGenericCommand>
 8007b08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	603b      	str	r3, [r7, #0]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <prvSwitchTimerLists+0xc0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1b1      	bne.n	8007a94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b30:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <prvSwitchTimerLists+0xc0>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b36:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <prvSwitchTimerLists+0xc4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a04      	ldr	r2, [pc, #16]	; (8007b4c <prvSwitchTimerLists+0xc0>)
 8007b3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b3e:	4a04      	ldr	r2, [pc, #16]	; (8007b50 <prvSwitchTimerLists+0xc4>)
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	6013      	str	r3, [r2, #0]
}
 8007b44:	bf00      	nop
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20002edc 	.word	0x20002edc
 8007b50:	20002ee0 	.word	0x20002ee0

08007b54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b5a:	f000 f96b 	bl	8007e34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b5e:	4b15      	ldr	r3, [pc, #84]	; (8007bb4 <prvCheckForValidListAndQueue+0x60>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d120      	bne.n	8007ba8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b66:	4814      	ldr	r0, [pc, #80]	; (8007bb8 <prvCheckForValidListAndQueue+0x64>)
 8007b68:	f7fe f81e 	bl	8005ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b6c:	4813      	ldr	r0, [pc, #76]	; (8007bbc <prvCheckForValidListAndQueue+0x68>)
 8007b6e:	f7fe f81b 	bl	8005ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b72:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <prvCheckForValidListAndQueue+0x6c>)
 8007b74:	4a10      	ldr	r2, [pc, #64]	; (8007bb8 <prvCheckForValidListAndQueue+0x64>)
 8007b76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b78:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <prvCheckForValidListAndQueue+0x70>)
 8007b7a:	4a10      	ldr	r2, [pc, #64]	; (8007bbc <prvCheckForValidListAndQueue+0x68>)
 8007b7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <prvCheckForValidListAndQueue+0x74>)
 8007b84:	4a11      	ldr	r2, [pc, #68]	; (8007bcc <prvCheckForValidListAndQueue+0x78>)
 8007b86:	2110      	movs	r1, #16
 8007b88:	200a      	movs	r0, #10
 8007b8a:	f7fe f929 	bl	8005de0 <xQueueGenericCreateStatic>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4a08      	ldr	r2, [pc, #32]	; (8007bb4 <prvCheckForValidListAndQueue+0x60>)
 8007b92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <prvCheckForValidListAndQueue+0x60>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <prvCheckForValidListAndQueue+0x60>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	490b      	ldr	r1, [pc, #44]	; (8007bd0 <prvCheckForValidListAndQueue+0x7c>)
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fd42 	bl	800662c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ba8:	f000 f974 	bl	8007e94 <vPortExitCritical>
}
 8007bac:	bf00      	nop
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20002ee4 	.word	0x20002ee4
 8007bb8:	20002eb4 	.word	0x20002eb4
 8007bbc:	20002ec8 	.word	0x20002ec8
 8007bc0:	20002edc 	.word	0x20002edc
 8007bc4:	20002ee0 	.word	0x20002ee0
 8007bc8:	20002f90 	.word	0x20002f90
 8007bcc:	20002ef0 	.word	0x20002ef0
 8007bd0:	08008688 	.word	0x08008688

08007bd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3b04      	subs	r3, #4
 8007be4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3b04      	subs	r3, #4
 8007bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f023 0201 	bic.w	r2, r3, #1
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3b04      	subs	r3, #4
 8007c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c04:	4a0c      	ldr	r2, [pc, #48]	; (8007c38 <pxPortInitialiseStack+0x64>)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3b14      	subs	r3, #20
 8007c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3b04      	subs	r3, #4
 8007c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f06f 0202 	mvn.w	r2, #2
 8007c22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3b20      	subs	r3, #32
 8007c28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	08007c3d 	.word	0x08007c3d

08007c3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <prvTaskExitError+0x54>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4e:	d00a      	beq.n	8007c66 <prvTaskExitError+0x2a>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	60fb      	str	r3, [r7, #12]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <prvTaskExitError+0x28>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	60bb      	str	r3, [r7, #8]
}
 8007c78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c7a:	bf00      	nop
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0fc      	beq.n	8007c7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c82:	bf00      	nop
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	20000014 	.word	0x20000014
	...

08007ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ca0:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <pxCurrentTCBConst2>)
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	6808      	ldr	r0, [r1, #0]
 8007ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007caa:	f380 8809 	msr	PSP, r0
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f04f 0000 	mov.w	r0, #0
 8007cb6:	f380 8811 	msr	BASEPRI, r0
 8007cba:	4770      	bx	lr
 8007cbc:	f3af 8000 	nop.w

08007cc0 <pxCurrentTCBConst2>:
 8007cc0:	200029b4 	.word	0x200029b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007cc8:	4808      	ldr	r0, [pc, #32]	; (8007cec <prvPortStartFirstTask+0x24>)
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	6800      	ldr	r0, [r0, #0]
 8007cce:	f380 8808 	msr	MSP, r0
 8007cd2:	f04f 0000 	mov.w	r0, #0
 8007cd6:	f380 8814 	msr	CONTROL, r0
 8007cda:	b662      	cpsie	i
 8007cdc:	b661      	cpsie	f
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	df00      	svc	0
 8007ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cea:	bf00      	nop
 8007cec:	e000ed08 	.word	0xe000ed08

08007cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cf6:	4b46      	ldr	r3, [pc, #280]	; (8007e10 <xPortStartScheduler+0x120>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a46      	ldr	r2, [pc, #280]	; (8007e14 <xPortStartScheduler+0x124>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10a      	bne.n	8007d16 <xPortStartScheduler+0x26>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	613b      	str	r3, [r7, #16]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d16:	4b3e      	ldr	r3, [pc, #248]	; (8007e10 <xPortStartScheduler+0x120>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a3f      	ldr	r2, [pc, #252]	; (8007e18 <xPortStartScheduler+0x128>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d10a      	bne.n	8007d36 <xPortStartScheduler+0x46>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	60fb      	str	r3, [r7, #12]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d36:	4b39      	ldr	r3, [pc, #228]	; (8007e1c <xPortStartScheduler+0x12c>)
 8007d38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	22ff      	movs	r2, #255	; 0xff
 8007d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <xPortStartScheduler+0x130>)
 8007d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d5e:	4b31      	ldr	r3, [pc, #196]	; (8007e24 <xPortStartScheduler+0x134>)
 8007d60:	2207      	movs	r2, #7
 8007d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d64:	e009      	b.n	8007d7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d66:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <xPortStartScheduler+0x134>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	4a2d      	ldr	r2, [pc, #180]	; (8007e24 <xPortStartScheduler+0x134>)
 8007d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d82:	2b80      	cmp	r3, #128	; 0x80
 8007d84:	d0ef      	beq.n	8007d66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d86:	4b27      	ldr	r3, [pc, #156]	; (8007e24 <xPortStartScheduler+0x134>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f1c3 0307 	rsb	r3, r3, #7
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d00a      	beq.n	8007da8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	60bb      	str	r3, [r7, #8]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007da8:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <xPortStartScheduler+0x134>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <xPortStartScheduler+0x134>)
 8007db0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007db2:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <xPortStartScheduler+0x134>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dba:	4a1a      	ldr	r2, [pc, #104]	; (8007e24 <xPortStartScheduler+0x134>)
 8007dbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dc6:	4b18      	ldr	r3, [pc, #96]	; (8007e28 <xPortStartScheduler+0x138>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a17      	ldr	r2, [pc, #92]	; (8007e28 <xPortStartScheduler+0x138>)
 8007dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007dd2:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <xPortStartScheduler+0x138>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a14      	ldr	r2, [pc, #80]	; (8007e28 <xPortStartScheduler+0x138>)
 8007dd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007dde:	f000 f8dd 	bl	8007f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007de2:	4b12      	ldr	r3, [pc, #72]	; (8007e2c <xPortStartScheduler+0x13c>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007de8:	f000 f8fc 	bl	8007fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007dec:	4b10      	ldr	r3, [pc, #64]	; (8007e30 <xPortStartScheduler+0x140>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a0f      	ldr	r2, [pc, #60]	; (8007e30 <xPortStartScheduler+0x140>)
 8007df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007df6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007df8:	f7ff ff66 	bl	8007cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007dfc:	f7ff f846 	bl	8006e8c <vTaskSwitchContext>
	prvTaskExitError();
 8007e00:	f7ff ff1c 	bl	8007c3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	e000ed00 	.word	0xe000ed00
 8007e14:	410fc271 	.word	0x410fc271
 8007e18:	410fc270 	.word	0x410fc270
 8007e1c:	e000e400 	.word	0xe000e400
 8007e20:	20002fe0 	.word	0x20002fe0
 8007e24:	20002fe4 	.word	0x20002fe4
 8007e28:	e000ed20 	.word	0xe000ed20
 8007e2c:	20000014 	.word	0x20000014
 8007e30:	e000ef34 	.word	0xe000ef34

08007e34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	607b      	str	r3, [r7, #4]
}
 8007e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <vPortEnterCritical+0x58>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3301      	adds	r3, #1
 8007e54:	4a0d      	ldr	r2, [pc, #52]	; (8007e8c <vPortEnterCritical+0x58>)
 8007e56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e58:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <vPortEnterCritical+0x58>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d10f      	bne.n	8007e80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <vPortEnterCritical+0x5c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	603b      	str	r3, [r7, #0]
}
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <vPortEnterCritical+0x4a>
	}
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	20000014 	.word	0x20000014
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e9a:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <vPortExitCritical+0x50>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <vPortExitCritical+0x24>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	607b      	str	r3, [r7, #4]
}
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007eb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <vPortExitCritical+0x50>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	4a09      	ldr	r2, [pc, #36]	; (8007ee4 <vPortExitCritical+0x50>)
 8007ec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ec2:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <vPortExitCritical+0x50>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d105      	bne.n	8007ed6 <vPortExitCritical+0x42>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	f383 8811 	msr	BASEPRI, r3
}
 8007ed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20000014 	.word	0x20000014
	...

08007ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ef0:	f3ef 8009 	mrs	r0, PSP
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	4b15      	ldr	r3, [pc, #84]	; (8007f50 <pxCurrentTCBConst>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	f01e 0f10 	tst.w	lr, #16
 8007f00:	bf08      	it	eq
 8007f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	6010      	str	r0, [r2, #0]
 8007f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f14:	f380 8811 	msr	BASEPRI, r0
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f7fe ffb4 	bl	8006e8c <vTaskSwitchContext>
 8007f24:	f04f 0000 	mov.w	r0, #0
 8007f28:	f380 8811 	msr	BASEPRI, r0
 8007f2c:	bc09      	pop	{r0, r3}
 8007f2e:	6819      	ldr	r1, [r3, #0]
 8007f30:	6808      	ldr	r0, [r1, #0]
 8007f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f36:	f01e 0f10 	tst.w	lr, #16
 8007f3a:	bf08      	it	eq
 8007f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f40:	f380 8809 	msr	PSP, r0
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst>:
 8007f50:	200029b4 	.word	0x200029b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	607b      	str	r3, [r7, #4]
}
 8007f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f72:	f7fe fed1 	bl	8006d18 <xTaskIncrementTick>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f7c:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <xPortSysTickHandler+0x40>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	2300      	movs	r3, #0
 8007f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f383 8811 	msr	BASEPRI, r3
}
 8007f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <vPortSetupTimerInterrupt+0x34>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <vPortSetupTimerInterrupt+0x38>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <vPortSetupTimerInterrupt+0x3c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	; (8007fdc <vPortSetupTimerInterrupt+0x40>)
 8007fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb6:	099b      	lsrs	r3, r3, #6
 8007fb8:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <vPortSetupTimerInterrupt+0x44>)
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fbe:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <vPortSetupTimerInterrupt+0x34>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	e000e010 	.word	0xe000e010
 8007fd4:	e000e018 	.word	0xe000e018
 8007fd8:	20000008 	.word	0x20000008
 8007fdc:	10624dd3 	.word	0x10624dd3
 8007fe0:	e000e014 	.word	0xe000e014

08007fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ff4 <vPortEnableVFP+0x10>
 8007fe8:	6801      	ldr	r1, [r0, #0]
 8007fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fee:	6001      	str	r1, [r0, #0]
 8007ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ff2:	bf00      	nop
 8007ff4:	e000ed88 	.word	0xe000ed88

08007ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ffe:	f3ef 8305 	mrs	r3, IPSR
 8008002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b0f      	cmp	r3, #15
 8008008:	d914      	bls.n	8008034 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800800a:	4a17      	ldr	r2, [pc, #92]	; (8008068 <vPortValidateInterruptPriority+0x70>)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008014:	4b15      	ldr	r3, [pc, #84]	; (800806c <vPortValidateInterruptPriority+0x74>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	7afa      	ldrb	r2, [r7, #11]
 800801a:	429a      	cmp	r2, r3
 800801c:	d20a      	bcs.n	8008034 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	607b      	str	r3, [r7, #4]
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008034:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <vPortValidateInterruptPriority+0x78>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800803c:	4b0d      	ldr	r3, [pc, #52]	; (8008074 <vPortValidateInterruptPriority+0x7c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d90a      	bls.n	800805a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	603b      	str	r3, [r7, #0]
}
 8008056:	bf00      	nop
 8008058:	e7fe      	b.n	8008058 <vPortValidateInterruptPriority+0x60>
	}
 800805a:	bf00      	nop
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	e000e3f0 	.word	0xe000e3f0
 800806c:	20002fe0 	.word	0x20002fe0
 8008070:	e000ed0c 	.word	0xe000ed0c
 8008074:	20002fe4 	.word	0x20002fe4

08008078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08a      	sub	sp, #40	; 0x28
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008080:	2300      	movs	r3, #0
 8008082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008084:	f7fe fd8c 	bl	8006ba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008088:	4b5b      	ldr	r3, [pc, #364]	; (80081f8 <pvPortMalloc+0x180>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008090:	f000 f920 	bl	80082d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008094:	4b59      	ldr	r3, [pc, #356]	; (80081fc <pvPortMalloc+0x184>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4013      	ands	r3, r2
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 8093 	bne.w	80081c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01d      	beq.n	80080e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80080a8:	2208      	movs	r2, #8
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d014      	beq.n	80080e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f023 0307 	bic.w	r3, r3, #7
 80080c0:	3308      	adds	r3, #8
 80080c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <pvPortMalloc+0x6c>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	617b      	str	r3, [r7, #20]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d06e      	beq.n	80081c8 <pvPortMalloc+0x150>
 80080ea:	4b45      	ldr	r3, [pc, #276]	; (8008200 <pvPortMalloc+0x188>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d869      	bhi.n	80081c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080f4:	4b43      	ldr	r3, [pc, #268]	; (8008204 <pvPortMalloc+0x18c>)
 80080f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080f8:	4b42      	ldr	r3, [pc, #264]	; (8008204 <pvPortMalloc+0x18c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080fe:	e004      	b.n	800810a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	429a      	cmp	r2, r3
 8008112:	d903      	bls.n	800811c <pvPortMalloc+0xa4>
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1f1      	bne.n	8008100 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800811c:	4b36      	ldr	r3, [pc, #216]	; (80081f8 <pvPortMalloc+0x180>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008122:	429a      	cmp	r2, r3
 8008124:	d050      	beq.n	80081c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2208      	movs	r2, #8
 800812c:	4413      	add	r3, r2
 800812e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	2308      	movs	r3, #8
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	429a      	cmp	r2, r3
 8008146:	d91f      	bls.n	8008188 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4413      	add	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	f003 0307 	and.w	r3, r3, #7
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <pvPortMalloc+0xf8>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	613b      	str	r3, [r7, #16]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	1ad2      	subs	r2, r2, r3
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008182:	69b8      	ldr	r0, [r7, #24]
 8008184:	f000 f908 	bl	8008398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008188:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <pvPortMalloc+0x188>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	4a1b      	ldr	r2, [pc, #108]	; (8008200 <pvPortMalloc+0x188>)
 8008194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008196:	4b1a      	ldr	r3, [pc, #104]	; (8008200 <pvPortMalloc+0x188>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <pvPortMalloc+0x190>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d203      	bcs.n	80081aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081a2:	4b17      	ldr	r3, [pc, #92]	; (8008200 <pvPortMalloc+0x188>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a18      	ldr	r2, [pc, #96]	; (8008208 <pvPortMalloc+0x190>)
 80081a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	4b13      	ldr	r3, [pc, #76]	; (80081fc <pvPortMalloc+0x184>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	431a      	orrs	r2, r3
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80081be:	4b13      	ldr	r3, [pc, #76]	; (800820c <pvPortMalloc+0x194>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	4a11      	ldr	r2, [pc, #68]	; (800820c <pvPortMalloc+0x194>)
 80081c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081c8:	f7fe fcf8 	bl	8006bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <pvPortMalloc+0x174>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60fb      	str	r3, [r7, #12]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <pvPortMalloc+0x172>
	return pvReturn;
 80081ec:	69fb      	ldr	r3, [r7, #28]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3728      	adds	r7, #40	; 0x28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20006bf0 	.word	0x20006bf0
 80081fc:	20006c04 	.word	0x20006c04
 8008200:	20006bf4 	.word	0x20006bf4
 8008204:	20006be8 	.word	0x20006be8
 8008208:	20006bf8 	.word	0x20006bf8
 800820c:	20006bfc 	.word	0x20006bfc

08008210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d04d      	beq.n	80082be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008222:	2308      	movs	r3, #8
 8008224:	425b      	negs	r3, r3
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4413      	add	r3, r2
 800822a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	4b24      	ldr	r3, [pc, #144]	; (80082c8 <vPortFree+0xb8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4013      	ands	r3, r2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <vPortFree+0x44>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	60fb      	str	r3, [r7, #12]
}
 8008250:	bf00      	nop
 8008252:	e7fe      	b.n	8008252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <vPortFree+0x62>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	60bb      	str	r3, [r7, #8]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <vPortFree+0xb8>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4013      	ands	r3, r2
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01e      	beq.n	80082be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d11a      	bne.n	80082be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <vPortFree+0xb8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	43db      	mvns	r3, r3
 8008292:	401a      	ands	r2, r3
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008298:	f7fe fc82 	bl	8006ba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <vPortFree+0xbc>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4413      	add	r3, r2
 80082a6:	4a09      	ldr	r2, [pc, #36]	; (80082cc <vPortFree+0xbc>)
 80082a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082aa:	6938      	ldr	r0, [r7, #16]
 80082ac:	f000 f874 	bl	8008398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80082b0:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <vPortFree+0xc0>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3301      	adds	r3, #1
 80082b6:	4a06      	ldr	r2, [pc, #24]	; (80082d0 <vPortFree+0xc0>)
 80082b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80082ba:	f7fe fc7f 	bl	8006bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082be:	bf00      	nop
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20006c04 	.word	0x20006c04
 80082cc:	20006bf4 	.word	0x20006bf4
 80082d0:	20006c00 	.word	0x20006c00

080082d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80082de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082e0:	4b27      	ldr	r3, [pc, #156]	; (8008380 <prvHeapInit+0xac>)
 80082e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00c      	beq.n	8008308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3307      	adds	r3, #7
 80082f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0307 	bic.w	r3, r3, #7
 80082fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	4a1f      	ldr	r2, [pc, #124]	; (8008380 <prvHeapInit+0xac>)
 8008304:	4413      	add	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800830c:	4a1d      	ldr	r2, [pc, #116]	; (8008384 <prvHeapInit+0xb0>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008312:	4b1c      	ldr	r3, [pc, #112]	; (8008384 <prvHeapInit+0xb0>)
 8008314:	2200      	movs	r2, #0
 8008316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008320:	2208      	movs	r2, #8
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1a9b      	subs	r3, r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f023 0307 	bic.w	r3, r3, #7
 800832e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4a15      	ldr	r2, [pc, #84]	; (8008388 <prvHeapInit+0xb4>)
 8008334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008336:	4b14      	ldr	r3, [pc, #80]	; (8008388 <prvHeapInit+0xb4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800833e:	4b12      	ldr	r3, [pc, #72]	; (8008388 <prvHeapInit+0xb4>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008354:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <prvHeapInit+0xb4>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	4a0a      	ldr	r2, [pc, #40]	; (800838c <prvHeapInit+0xb8>)
 8008362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4a09      	ldr	r2, [pc, #36]	; (8008390 <prvHeapInit+0xbc>)
 800836a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800836c:	4b09      	ldr	r3, [pc, #36]	; (8008394 <prvHeapInit+0xc0>)
 800836e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008372:	601a      	str	r2, [r3, #0]
}
 8008374:	bf00      	nop
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	20002fe8 	.word	0x20002fe8
 8008384:	20006be8 	.word	0x20006be8
 8008388:	20006bf0 	.word	0x20006bf0
 800838c:	20006bf8 	.word	0x20006bf8
 8008390:	20006bf4 	.word	0x20006bf4
 8008394:	20006c04 	.word	0x20006c04

08008398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083a0:	4b28      	ldr	r3, [pc, #160]	; (8008444 <prvInsertBlockIntoFreeList+0xac>)
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e002      	b.n	80083ac <prvInsertBlockIntoFreeList+0x14>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d8f7      	bhi.n	80083a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	4413      	add	r3, r2
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d108      	bne.n	80083da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	441a      	add	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	441a      	add	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d118      	bne.n	8008420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	4b15      	ldr	r3, [pc, #84]	; (8008448 <prvInsertBlockIntoFreeList+0xb0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d00d      	beq.n	8008416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	441a      	add	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	e008      	b.n	8008428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008416:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <prvInsertBlockIntoFreeList+0xb0>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	e003      	b.n	8008428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d002      	beq.n	8008436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008436:	bf00      	nop
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	20006be8 	.word	0x20006be8
 8008448:	20006bf0 	.word	0x20006bf0

0800844c <__libc_init_array>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	4d0d      	ldr	r5, [pc, #52]	; (8008484 <__libc_init_array+0x38>)
 8008450:	4c0d      	ldr	r4, [pc, #52]	; (8008488 <__libc_init_array+0x3c>)
 8008452:	1b64      	subs	r4, r4, r5
 8008454:	10a4      	asrs	r4, r4, #2
 8008456:	2600      	movs	r6, #0
 8008458:	42a6      	cmp	r6, r4
 800845a:	d109      	bne.n	8008470 <__libc_init_array+0x24>
 800845c:	4d0b      	ldr	r5, [pc, #44]	; (800848c <__libc_init_array+0x40>)
 800845e:	4c0c      	ldr	r4, [pc, #48]	; (8008490 <__libc_init_array+0x44>)
 8008460:	f000 f8f2 	bl	8008648 <_init>
 8008464:	1b64      	subs	r4, r4, r5
 8008466:	10a4      	asrs	r4, r4, #2
 8008468:	2600      	movs	r6, #0
 800846a:	42a6      	cmp	r6, r4
 800846c:	d105      	bne.n	800847a <__libc_init_array+0x2e>
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	f855 3b04 	ldr.w	r3, [r5], #4
 8008474:	4798      	blx	r3
 8008476:	3601      	adds	r6, #1
 8008478:	e7ee      	b.n	8008458 <__libc_init_array+0xc>
 800847a:	f855 3b04 	ldr.w	r3, [r5], #4
 800847e:	4798      	blx	r3
 8008480:	3601      	adds	r6, #1
 8008482:	e7f2      	b.n	800846a <__libc_init_array+0x1e>
 8008484:	08009498 	.word	0x08009498
 8008488:	08009498 	.word	0x08009498
 800848c:	08009498 	.word	0x08009498
 8008490:	0800949c 	.word	0x0800949c

08008494 <__retarget_lock_acquire_recursive>:
 8008494:	4770      	bx	lr

08008496 <__retarget_lock_release_recursive>:
 8008496:	4770      	bx	lr

08008498 <memcpy>:
 8008498:	440a      	add	r2, r1
 800849a:	4291      	cmp	r1, r2
 800849c:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a0:	d100      	bne.n	80084a4 <memcpy+0xc>
 80084a2:	4770      	bx	lr
 80084a4:	b510      	push	{r4, lr}
 80084a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ae:	4291      	cmp	r1, r2
 80084b0:	d1f9      	bne.n	80084a6 <memcpy+0xe>
 80084b2:	bd10      	pop	{r4, pc}

080084b4 <memset>:
 80084b4:	4402      	add	r2, r0
 80084b6:	4603      	mov	r3, r0
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d100      	bne.n	80084be <memset+0xa>
 80084bc:	4770      	bx	lr
 80084be:	f803 1b01 	strb.w	r1, [r3], #1
 80084c2:	e7f9      	b.n	80084b8 <memset+0x4>

080084c4 <_free_r>:
 80084c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084c6:	2900      	cmp	r1, #0
 80084c8:	d044      	beq.n	8008554 <_free_r+0x90>
 80084ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ce:	9001      	str	r0, [sp, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f1a1 0404 	sub.w	r4, r1, #4
 80084d6:	bfb8      	it	lt
 80084d8:	18e4      	addlt	r4, r4, r3
 80084da:	f000 f8a9 	bl	8008630 <__malloc_lock>
 80084de:	4a1e      	ldr	r2, [pc, #120]	; (8008558 <_free_r+0x94>)
 80084e0:	9801      	ldr	r0, [sp, #4]
 80084e2:	6813      	ldr	r3, [r2, #0]
 80084e4:	b933      	cbnz	r3, 80084f4 <_free_r+0x30>
 80084e6:	6063      	str	r3, [r4, #4]
 80084e8:	6014      	str	r4, [r2, #0]
 80084ea:	b003      	add	sp, #12
 80084ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084f0:	f000 b8a4 	b.w	800863c <__malloc_unlock>
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	d908      	bls.n	800850a <_free_r+0x46>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	1961      	adds	r1, r4, r5
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf01      	itttt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	1949      	addeq	r1, r1, r5
 8008506:	6021      	streq	r1, [r4, #0]
 8008508:	e7ed      	b.n	80084e6 <_free_r+0x22>
 800850a:	461a      	mov	r2, r3
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	b10b      	cbz	r3, 8008514 <_free_r+0x50>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d9fa      	bls.n	800850a <_free_r+0x46>
 8008514:	6811      	ldr	r1, [r2, #0]
 8008516:	1855      	adds	r5, r2, r1
 8008518:	42a5      	cmp	r5, r4
 800851a:	d10b      	bne.n	8008534 <_free_r+0x70>
 800851c:	6824      	ldr	r4, [r4, #0]
 800851e:	4421      	add	r1, r4
 8008520:	1854      	adds	r4, r2, r1
 8008522:	42a3      	cmp	r3, r4
 8008524:	6011      	str	r1, [r2, #0]
 8008526:	d1e0      	bne.n	80084ea <_free_r+0x26>
 8008528:	681c      	ldr	r4, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	6053      	str	r3, [r2, #4]
 800852e:	4421      	add	r1, r4
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	e7da      	b.n	80084ea <_free_r+0x26>
 8008534:	d902      	bls.n	800853c <_free_r+0x78>
 8008536:	230c      	movs	r3, #12
 8008538:	6003      	str	r3, [r0, #0]
 800853a:	e7d6      	b.n	80084ea <_free_r+0x26>
 800853c:	6825      	ldr	r5, [r4, #0]
 800853e:	1961      	adds	r1, r4, r5
 8008540:	428b      	cmp	r3, r1
 8008542:	bf04      	itt	eq
 8008544:	6819      	ldreq	r1, [r3, #0]
 8008546:	685b      	ldreq	r3, [r3, #4]
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	bf04      	itt	eq
 800854c:	1949      	addeq	r1, r1, r5
 800854e:	6021      	streq	r1, [r4, #0]
 8008550:	6054      	str	r4, [r2, #4]
 8008552:	e7ca      	b.n	80084ea <_free_r+0x26>
 8008554:	b003      	add	sp, #12
 8008556:	bd30      	pop	{r4, r5, pc}
 8008558:	20006c0c 	.word	0x20006c0c

0800855c <cleanup_glue>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	460c      	mov	r4, r1
 8008560:	6809      	ldr	r1, [r1, #0]
 8008562:	4605      	mov	r5, r0
 8008564:	b109      	cbz	r1, 800856a <cleanup_glue+0xe>
 8008566:	f7ff fff9 	bl	800855c <cleanup_glue>
 800856a:	4621      	mov	r1, r4
 800856c:	4628      	mov	r0, r5
 800856e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008572:	f7ff bfa7 	b.w	80084c4 <_free_r>
	...

08008578 <_reclaim_reent>:
 8008578:	4b2c      	ldr	r3, [pc, #176]	; (800862c <_reclaim_reent+0xb4>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4283      	cmp	r3, r0
 800857e:	b570      	push	{r4, r5, r6, lr}
 8008580:	4604      	mov	r4, r0
 8008582:	d051      	beq.n	8008628 <_reclaim_reent+0xb0>
 8008584:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008586:	b143      	cbz	r3, 800859a <_reclaim_reent+0x22>
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d14a      	bne.n	8008624 <_reclaim_reent+0xac>
 800858e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008590:	6819      	ldr	r1, [r3, #0]
 8008592:	b111      	cbz	r1, 800859a <_reclaim_reent+0x22>
 8008594:	4620      	mov	r0, r4
 8008596:	f7ff ff95 	bl	80084c4 <_free_r>
 800859a:	6961      	ldr	r1, [r4, #20]
 800859c:	b111      	cbz	r1, 80085a4 <_reclaim_reent+0x2c>
 800859e:	4620      	mov	r0, r4
 80085a0:	f7ff ff90 	bl	80084c4 <_free_r>
 80085a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085a6:	b111      	cbz	r1, 80085ae <_reclaim_reent+0x36>
 80085a8:	4620      	mov	r0, r4
 80085aa:	f7ff ff8b 	bl	80084c4 <_free_r>
 80085ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80085b0:	b111      	cbz	r1, 80085b8 <_reclaim_reent+0x40>
 80085b2:	4620      	mov	r0, r4
 80085b4:	f7ff ff86 	bl	80084c4 <_free_r>
 80085b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80085ba:	b111      	cbz	r1, 80085c2 <_reclaim_reent+0x4a>
 80085bc:	4620      	mov	r0, r4
 80085be:	f7ff ff81 	bl	80084c4 <_free_r>
 80085c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80085c4:	b111      	cbz	r1, 80085cc <_reclaim_reent+0x54>
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7ff ff7c 	bl	80084c4 <_free_r>
 80085cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80085ce:	b111      	cbz	r1, 80085d6 <_reclaim_reent+0x5e>
 80085d0:	4620      	mov	r0, r4
 80085d2:	f7ff ff77 	bl	80084c4 <_free_r>
 80085d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80085d8:	b111      	cbz	r1, 80085e0 <_reclaim_reent+0x68>
 80085da:	4620      	mov	r0, r4
 80085dc:	f7ff ff72 	bl	80084c4 <_free_r>
 80085e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085e2:	b111      	cbz	r1, 80085ea <_reclaim_reent+0x72>
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7ff ff6d 	bl	80084c4 <_free_r>
 80085ea:	69a3      	ldr	r3, [r4, #24]
 80085ec:	b1e3      	cbz	r3, 8008628 <_reclaim_reent+0xb0>
 80085ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085f0:	4620      	mov	r0, r4
 80085f2:	4798      	blx	r3
 80085f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80085f6:	b1b9      	cbz	r1, 8008628 <_reclaim_reent+0xb0>
 80085f8:	4620      	mov	r0, r4
 80085fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085fe:	f7ff bfad 	b.w	800855c <cleanup_glue>
 8008602:	5949      	ldr	r1, [r1, r5]
 8008604:	b941      	cbnz	r1, 8008618 <_reclaim_reent+0xa0>
 8008606:	3504      	adds	r5, #4
 8008608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800860a:	2d80      	cmp	r5, #128	; 0x80
 800860c:	68d9      	ldr	r1, [r3, #12]
 800860e:	d1f8      	bne.n	8008602 <_reclaim_reent+0x8a>
 8008610:	4620      	mov	r0, r4
 8008612:	f7ff ff57 	bl	80084c4 <_free_r>
 8008616:	e7ba      	b.n	800858e <_reclaim_reent+0x16>
 8008618:	680e      	ldr	r6, [r1, #0]
 800861a:	4620      	mov	r0, r4
 800861c:	f7ff ff52 	bl	80084c4 <_free_r>
 8008620:	4631      	mov	r1, r6
 8008622:	e7ef      	b.n	8008604 <_reclaim_reent+0x8c>
 8008624:	2500      	movs	r5, #0
 8008626:	e7ef      	b.n	8008608 <_reclaim_reent+0x90>
 8008628:	bd70      	pop	{r4, r5, r6, pc}
 800862a:	bf00      	nop
 800862c:	20000018 	.word	0x20000018

08008630 <__malloc_lock>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__malloc_lock+0x8>)
 8008632:	f7ff bf2f 	b.w	8008494 <__retarget_lock_acquire_recursive>
 8008636:	bf00      	nop
 8008638:	20006c08 	.word	0x20006c08

0800863c <__malloc_unlock>:
 800863c:	4801      	ldr	r0, [pc, #4]	; (8008644 <__malloc_unlock+0x8>)
 800863e:	f7ff bf2a 	b.w	8008496 <__retarget_lock_release_recursive>
 8008642:	bf00      	nop
 8008644:	20006c08 	.word	0x20006c08

08008648 <_init>:
 8008648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864a:	bf00      	nop
 800864c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864e:	bc08      	pop	{r3}
 8008650:	469e      	mov	lr, r3
 8008652:	4770      	bx	lr

08008654 <_fini>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	bf00      	nop
 8008658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865a:	bc08      	pop	{r3}
 800865c:	469e      	mov	lr, r3
 800865e:	4770      	bx	lr
