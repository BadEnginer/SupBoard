
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008650  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003330  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb20  0800bb20  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb20  0800bb20  0001bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb28  0800bb28  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb28  0800bb28  0001bb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb2c  0800bb2c  0001bb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800bb30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b94  2000007c  0800bbac  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006c10  0800bbac  00026c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d61c  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003df1  00000000  00000000  0003d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  000414c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  00042d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004243  00000000  00000000  00044468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c33c  00000000  00000000  000486ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aed7  00000000  00000000  000649e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff8be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b40  00000000  00000000  000ff910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080087d8 	.word	0x080087d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080087d8 	.word	0x080087d8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <driver_delay_xms>:
#include "Display/e-ink/epaper.h"

void driver_delay_xms(unsigned long xms)	
{	
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
HAL_Delay(xms);
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f001 fb77 	bl	8001be0 <HAL_Delay>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <Epaper_Spi_WriteByte>:


void Epaper_Spi_WriteByte(unsigned char TxData)
{				   			 
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	extern SPI_HandleTypeDef hspi1;
	HAL_StatusTypeDef st;
	st = HAL_SPI_Receive(&hspi1, &TxData, sizeof(TxData), 10);
 8000506:	1df9      	adds	r1, r7, #7
 8000508:	230a      	movs	r3, #10
 800050a:	2201      	movs	r2, #1
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <Epaper_Spi_WriteByte+0x24>)
 800050e:	f003 fc52 	bl	8003db6 <HAL_SPI_Receive>
 8000512:	4603      	mov	r3, r0
 8000514:	73fb      	strb	r3, [r7, #15]


}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200020a8 	.word	0x200020a8

08000524 <Epaper_READBUSY>:

void Epaper_READBUSY(void)
{ 
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  while(1)
  {	 //=1 BUSY
     if(isEPD_W21_BUSY==0) break;;
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <Epaper_READBUSY+0x1c>)
 800052e:	f002 f973 	bl	8002818 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d000      	beq.n	800053a <Epaper_READBUSY+0x16>
 8000538:	e7f6      	b.n	8000528 <Epaper_READBUSY+0x4>
 800053a:	bf00      	nop
  }  
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40020400 	.word	0x40020400

08000544 <Epaper_Write_Command>:

void Epaper_Write_Command(unsigned char cmd)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 800054e:	2201      	movs	r2, #1
 8000550:	2101      	movs	r1, #1
 8000552:	480d      	ldr	r0, [pc, #52]	; (8000588 <Epaper_Write_Command+0x44>)
 8000554:	f002 f978 	bl	8002848 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	480a      	ldr	r0, [pc, #40]	; (8000588 <Epaper_Write_Command+0x44>)
 800055e:	f002 f973 	bl	8002848 <HAL_GPIO_WritePin>
	EPD_W21_DC_0;  // D/C#   0:command  1:data
 8000562:	2200      	movs	r2, #0
 8000564:	2104      	movs	r1, #4
 8000566:	4808      	ldr	r0, [pc, #32]	; (8000588 <Epaper_Write_Command+0x44>)
 8000568:	f002 f96e 	bl	8002848 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(cmd);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ffc4 	bl	80004fc <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 8000574:	2201      	movs	r2, #1
 8000576:	2101      	movs	r1, #1
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <Epaper_Write_Command+0x44>)
 800057a:	f002 f965 	bl	8002848 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020400 	.word	0x40020400

0800058c <Epaper_Write_Data>:

void Epaper_Write_Data(unsigned char data)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 8000596:	2201      	movs	r2, #1
 8000598:	2101      	movs	r1, #1
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <Epaper_Write_Data+0x44>)
 800059c:	f002 f954 	bl	8002848 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 80005a0:	2200      	movs	r2, #0
 80005a2:	2101      	movs	r1, #1
 80005a4:	480a      	ldr	r0, [pc, #40]	; (80005d0 <Epaper_Write_Data+0x44>)
 80005a6:	f002 f94f 	bl	8002848 <HAL_GPIO_WritePin>
	EPD_W21_DC_1;  // D/C#   0:command  1:data
 80005aa:	2201      	movs	r2, #1
 80005ac:	2104      	movs	r1, #4
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <Epaper_Write_Data+0x44>)
 80005b0:	f002 f94a 	bl	8002848 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(data);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ffa0 	bl	80004fc <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 80005bc:	2201      	movs	r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <Epaper_Write_Data+0x44>)
 80005c2:	f002 f941 	bl	8002848 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020400 	.word	0x40020400

080005d4 <EPD_HW_Init>:
	
/////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

void EPD_HW_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	EPD_W21_RST_0;  // Module reset   
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	4833      	ldr	r0, [pc, #204]	; (80006ac <EPD_HW_Init+0xd8>)
 80005de:	f002 f933 	bl	8002848 <HAL_GPIO_WritePin>
	driver_delay_xms(100);//At least 10ms delay 
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f7ff ff7e 	bl	80004e4 <driver_delay_xms>
	EPD_W21_RST_1;
 80005e8:	2201      	movs	r2, #1
 80005ea:	2102      	movs	r1, #2
 80005ec:	482f      	ldr	r0, [pc, #188]	; (80006ac <EPD_HW_Init+0xd8>)
 80005ee:	f002 f92b 	bl	8002848 <HAL_GPIO_WritePin>
	driver_delay_xms(100); //At least 10ms delay 
 80005f2:	2064      	movs	r0, #100	; 0x64
 80005f4:	f7ff ff76 	bl	80004e4 <driver_delay_xms>
	
	Epaper_READBUSY();   
 80005f8:	f7ff ff94 	bl	8000524 <Epaper_READBUSY>
	Epaper_Write_Command(0x12);  //SWRESET
 80005fc:	2012      	movs	r0, #18
 80005fe:	f7ff ffa1 	bl	8000544 <Epaper_Write_Command>
	Epaper_READBUSY();   
 8000602:	f7ff ff8f 	bl	8000524 <Epaper_READBUSY>
		
	Epaper_Write_Command(0x01); //Driver output control      
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ff9c 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 800060c:	2027      	movs	r0, #39	; 0x27
 800060e:	f7ff ffbd 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ffba 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffb7 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x11); //data entry mode       
 800061e:	2011      	movs	r0, #17
 8000620:	f7ff ff90 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x01);
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff ffb1 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x44); //set Ram-X address start/end position   
 800062a:	2044      	movs	r0, #68	; 0x44
 800062c:	f7ff ff8a 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffab 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x0F);    //0x0F-->(15+1)*8=128
 8000636:	200f      	movs	r0, #15
 8000638:	f7ff ffa8 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x45); //set Ram-Y address start/end position          
 800063c:	2045      	movs	r0, #69	; 0x45
 800063e:	f7ff ff81 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x27);   //0x0127-->(295+1)=296
 8000642:	2027      	movs	r0, #39	; 0x27
 8000644:	f7ff ffa2 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ff9f 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ff9c 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x00); 
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff ff99 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x3C); //BorderWavefrom
 800065a:	203c      	movs	r0, #60	; 0x3c
 800065c:	f7ff ff72 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x05);	
 8000660:	2005      	movs	r0, #5
 8000662:	f7ff ff93 	bl	800058c <Epaper_Write_Data>
	  	
  Epaper_Write_Command(0x18); //Read built-in temperature sensor
 8000666:	2018      	movs	r0, #24
 8000668:	f7ff ff6c 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x80);	
 800066c:	2080      	movs	r0, #128	; 0x80
 800066e:	f7ff ff8d 	bl	800058c <Epaper_Write_Data>
	
	Epaper_Write_Command(0x21); //  Display update control
 8000672:	2021      	movs	r0, #33	; 0x21
 8000674:	f7ff ff66 	bl	8000544 <Epaper_Write_Command>
  Epaper_Write_Data(0x00);	
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff87 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x80);	
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	f7ff ff84 	bl	800058c <Epaper_Write_Data>

	Epaper_Write_Command(0x4E);   // set RAM x address count to 0;
 8000684:	204e      	movs	r0, #78	; 0x4e
 8000686:	f7ff ff5d 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff7e 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Command(0x4F);   // set RAM y address count to 0X199;    
 8000690:	204f      	movs	r0, #79	; 0x4f
 8000692:	f7ff ff57 	bl	8000544 <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 8000696:	2027      	movs	r0, #39	; 0x27
 8000698:	f7ff ff78 	bl	800058c <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff75 	bl	800058c <Epaper_Write_Data>
  Epaper_READBUSY();
 80006a2:	f7ff ff3f 	bl	8000524 <Epaper_READBUSY>
	
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020400 	.word	0x40020400

080006b0 <EPD_Update>:
/////////////////////////////////////////////////////////////////////////////////////////
void EPD_Update(void)
{   
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  Epaper_Write_Command(0x22); //Display Update Control
 80006b4:	2022      	movs	r0, #34	; 0x22
 80006b6:	f7ff ff45 	bl	8000544 <Epaper_Write_Command>
  Epaper_Write_Data(0xF7);   
 80006ba:	20f7      	movs	r0, #247	; 0xf7
 80006bc:	f7ff ff66 	bl	800058c <Epaper_Write_Data>
  Epaper_Write_Command(0x20);  //Activate Display Update Sequence
 80006c0:	2020      	movs	r0, #32
 80006c2:	f7ff ff3f 	bl	8000544 <Epaper_Write_Command>
  Epaper_READBUSY();   
 80006c6:	f7ff ff2d 	bl	8000524 <Epaper_READBUSY>

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}

080006ce <EPD_WhiteScreen_ALL>:
//////////////////////////////All screen update////////////////////////////////////////////
void EPD_WhiteScreen_ALL(const unsigned char *BW_datas,const unsigned char *R_datas)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
   unsigned int i;	
  Epaper_Write_Command(0x24);   //write RAM for black(0)/white (1)
 80006d8:	2024      	movs	r0, #36	; 0x24
 80006da:	f7ff ff33 	bl	8000544 <Epaper_Write_Command>
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e00a      	b.n	80006fa <EPD_WhiteScreen_ALL+0x2c>
   {               
     Epaper_Write_Data(*BW_datas);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff4f 	bl	800058c <Epaper_Write_Data>
			BW_datas++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000700:	d3f0      	bcc.n	80006e4 <EPD_WhiteScreen_ALL+0x16>
   }
	Epaper_Write_Command(0x26);   //write RAM for black(0)/white (1)
 8000702:	2026      	movs	r0, #38	; 0x26
 8000704:	f7ff ff1e 	bl	8000544 <Epaper_Write_Command>
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e00c      	b.n	8000728 <EPD_WhiteScreen_ALL+0x5a>
   {               
     Epaper_Write_Data(~(*R_datas));
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	43db      	mvns	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff38 	bl	800058c <Epaper_Write_Data>
			R_datas++;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	603b      	str	r3, [r7, #0]
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800072e:	d3ee      	bcc.n	800070e <EPD_WhiteScreen_ALL+0x40>
   }
   EPD_Update();	 
 8000730:	f7ff ffbe 	bl	80006b0 <EPD_Update>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <EPD_DeepSleep>:
     Epaper_Write_Data(0x00);
   }
   EPD_Update();	 
}
void EPD_DeepSleep(void)
{  	
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  Epaper_Write_Command(0x10); //enter deep sleep
 8000740:	2010      	movs	r0, #16
 8000742:	f7ff feff 	bl	8000544 <Epaper_Write_Command>
  Epaper_Write_Data(0x01); 
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ff20 	bl	800058c <Epaper_Write_Data>
  driver_delay_xms(100);
 800074c:	2064      	movs	r0, #100	; 0x64
 800074e:	f7ff fec9 	bl	80004e4 <driver_delay_xms>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}

08000756 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af04      	add	r7, sp, #16
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	9302      	str	r3, [sp, #8]
 8000774:	2301      	movs	r3, #1
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2301      	movs	r3, #1
 800077e:	2200      	movs	r2, #0
 8000780:	2178      	movs	r1, #120	; 0x78
 8000782:	4803      	ldr	r0, [pc, #12]	; (8000790 <ssd1306_WriteCommand+0x2c>)
 8000784:	f002 f9be 	bl	8002b04 <HAL_I2C_Mem_Write>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20002054 	.word	0x20002054

08000794 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	f04f 32ff 	mov.w	r2, #4294967295
 80007a6:	9202      	str	r2, [sp, #8]
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2301      	movs	r3, #1
 80007b0:	2240      	movs	r2, #64	; 0x40
 80007b2:	2178      	movs	r1, #120	; 0x78
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <ssd1306_WriteData+0x30>)
 80007b6:	f002 f9a5 	bl	8002b04 <HAL_I2C_Mem_Write>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20002054 	.word	0x20002054

080007c8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80007cc:	f7ff ffc3 	bl	8000756 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80007d0:	2064      	movs	r0, #100	; 0x64
 80007d2:	f001 fa05 	bl	8001be0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 fa34 	bl	8000c44 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80007dc:	2020      	movs	r0, #32
 80007de:	f7ff ffc1 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ffbe 	bl	8000764 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007e8:	20b0      	movs	r0, #176	; 0xb0
 80007ea:	f7ff ffbb 	bl	8000764 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80007ee:	20c8      	movs	r0, #200	; 0xc8
 80007f0:	f7ff ffb8 	bl	8000764 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff ffb5 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80007fa:	2010      	movs	r0, #16
 80007fc:	f7ff ffb2 	bl	8000764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000800:	2040      	movs	r0, #64	; 0x40
 8000802:	f7ff ffaf 	bl	8000764 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000806:	20ff      	movs	r0, #255	; 0xff
 8000808:	f000 fa09 	bl	8000c1e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800080c:	20a1      	movs	r0, #161	; 0xa1
 800080e:	f7ff ffa9 	bl	8000764 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000812:	20a6      	movs	r0, #166	; 0xa6
 8000814:	f7ff ffa6 	bl	8000764 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000818:	20a8      	movs	r0, #168	; 0xa8
 800081a:	f7ff ffa3 	bl	8000764 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800081e:	203f      	movs	r0, #63	; 0x3f
 8000820:	f7ff ffa0 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000824:	20a4      	movs	r0, #164	; 0xa4
 8000826:	f7ff ff9d 	bl	8000764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800082a:	20d3      	movs	r0, #211	; 0xd3
 800082c:	f7ff ff9a 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ff97 	bl	8000764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000836:	20d5      	movs	r0, #213	; 0xd5
 8000838:	f7ff ff94 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800083c:	20f0      	movs	r0, #240	; 0xf0
 800083e:	f7ff ff91 	bl	8000764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000842:	20d9      	movs	r0, #217	; 0xd9
 8000844:	f7ff ff8e 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000848:	2022      	movs	r0, #34	; 0x22
 800084a:	f7ff ff8b 	bl	8000764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800084e:	20da      	movs	r0, #218	; 0xda
 8000850:	f7ff ff88 	bl	8000764 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000854:	2012      	movs	r0, #18
 8000856:	f7ff ff85 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800085a:	20db      	movs	r0, #219	; 0xdb
 800085c:	f7ff ff82 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000860:	2020      	movs	r0, #32
 8000862:	f7ff ff7f 	bl	8000764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000866:	208d      	movs	r0, #141	; 0x8d
 8000868:	f7ff ff7c 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800086c:	2014      	movs	r0, #20
 800086e:	f7ff ff79 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000872:	2001      	movs	r0, #1
 8000874:	f000 f9e6 	bl	8000c44 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f80f 	bl	800089c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800087e:	f000 f831 	bl	80008e4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <ssd1306_Init+0xd0>)
 8000884:	2200      	movs	r2, #0
 8000886:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <ssd1306_Init+0xd0>)
 800088a:	2200      	movs	r2, #0
 800088c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800088e:	4b02      	ldr	r3, [pc, #8]	; (8000898 <ssd1306_Init+0xd0>)
 8000890:	2201      	movs	r2, #1
 8000892:	711a      	strb	r2, [r3, #4]
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000498 	.word	0x20000498

0800089c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e00d      	b.n	80008c8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d101      	bne.n	80008b6 <ssd1306_Fill+0x1a>
 80008b2:	2100      	movs	r1, #0
 80008b4:	e000      	b.n	80008b8 <ssd1306_Fill+0x1c>
 80008b6:	21ff      	movs	r1, #255	; 0xff
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <ssd1306_Fill+0x44>)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	460a      	mov	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008ce:	d3ed      	bcc.n	80008ac <ssd1306_Fill+0x10>
    }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000098 	.word	0x20000098

080008e4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	e016      	b.n	800091e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	3b50      	subs	r3, #80	; 0x50
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff34 	bl	8000764 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ff31 	bl	8000764 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000902:	2010      	movs	r0, #16
 8000904:	f7ff ff2e 	bl	8000764 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	01db      	lsls	r3, r3, #7
 800090c:	4a08      	ldr	r2, [pc, #32]	; (8000930 <ssd1306_UpdateScreen+0x4c>)
 800090e:	4413      	add	r3, r2
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff3e 	bl	8000794 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	3301      	adds	r3, #1
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b07      	cmp	r3, #7
 8000922:	d9e5      	bls.n	80008f0 <ssd1306_UpdateScreen+0xc>
    }
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000098 	.word	0x20000098

08000934 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	460b      	mov	r3, r1
 8000940:	71bb      	strb	r3, [r7, #6]
 8000942:	4613      	mov	r3, r2
 8000944:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db3d      	blt.n	80009ca <ssd1306_DrawPixel+0x96>
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	2b3f      	cmp	r3, #63	; 0x3f
 8000952:	d83a      	bhi.n	80009ca <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d11a      	bne.n	8000990 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	b2d8      	uxtb	r0, r3
 8000962:	4603      	mov	r3, r0
 8000964:	01db      	lsls	r3, r3, #7
 8000966:	4413      	add	r3, r2
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <ssd1306_DrawPixel+0xa4>)
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	b25a      	sxtb	r2, r3
 800096e:	79bb      	ldrb	r3, [r7, #6]
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	2101      	movs	r1, #1
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	b25b      	sxtb	r3, r3
 800097c:	4313      	orrs	r3, r2
 800097e:	b259      	sxtb	r1, r3
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	4603      	mov	r3, r0
 8000984:	01db      	lsls	r3, r3, #7
 8000986:	4413      	add	r3, r2
 8000988:	b2c9      	uxtb	r1, r1
 800098a:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <ssd1306_DrawPixel+0xa4>)
 800098c:	54d1      	strb	r1, [r2, r3]
 800098e:	e01d      	b.n	80009cc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000990:	79fa      	ldrb	r2, [r7, #7]
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	b2d8      	uxtb	r0, r3
 8000998:	4603      	mov	r3, r0
 800099a:	01db      	lsls	r3, r3, #7
 800099c:	4413      	add	r3, r2
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <ssd1306_DrawPixel+0xa4>)
 80009a0:	5cd3      	ldrb	r3, [r2, r3]
 80009a2:	b25a      	sxtb	r2, r3
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	2101      	movs	r1, #1
 80009ac:	fa01 f303 	lsl.w	r3, r1, r3
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	4013      	ands	r3, r2
 80009b8:	b259      	sxtb	r1, r3
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	4603      	mov	r3, r0
 80009be:	01db      	lsls	r3, r3, #7
 80009c0:	4413      	add	r3, r2
 80009c2:	b2c9      	uxtb	r1, r1
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <ssd1306_DrawPixel+0xa4>)
 80009c6:	54d1      	strb	r1, [r2, r3]
 80009c8:	e000      	b.n	80009cc <ssd1306_DrawPixel+0x98>
        return;
 80009ca:	bf00      	nop
    }
}
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000098 	.word	0x20000098

080009dc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4604      	mov	r4, r0
 80009e4:	1d38      	adds	r0, r7, #4
 80009e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80009ea:	461a      	mov	r2, r3
 80009ec:	4623      	mov	r3, r4
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	4613      	mov	r3, r2
 80009f2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	2b1f      	cmp	r3, #31
 80009f8:	d902      	bls.n	8000a00 <ssd1306_WriteChar+0x24>
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	2b7e      	cmp	r3, #126	; 0x7e
 80009fe:	d901      	bls.n	8000a04 <ssd1306_WriteChar+0x28>
        return 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	e06d      	b.n	8000ae0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <ssd1306_WriteChar+0x10c>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	793b      	ldrb	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2b80      	cmp	r3, #128	; 0x80
 8000a10:	dc06      	bgt.n	8000a20 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <ssd1306_WriteChar+0x10c>)
 8000a14:	885b      	ldrh	r3, [r3, #2]
 8000a16:	461a      	mov	r2, r3
 8000a18:	797b      	ldrb	r3, [r7, #5]
 8000a1a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a1c:	2b40      	cmp	r3, #64	; 0x40
 8000a1e:	dd01      	ble.n	8000a24 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e05d      	b.n	8000ae0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	e04c      	b.n	8000ac4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	3b20      	subs	r3, #32
 8000a30:	7979      	ldrb	r1, [r7, #5]
 8000a32:	fb01 f303 	mul.w	r3, r1, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	440b      	add	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	e034      	b.n	8000ab4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d012      	beq.n	8000a80 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <ssd1306_WriteChar+0x10c>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4413      	add	r3, r2
 8000a66:	b2d8      	uxtb	r0, r3
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <ssd1306_WriteChar+0x10c>)
 8000a6a:	885b      	ldrh	r3, [r3, #2]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	7bba      	ldrb	r2, [r7, #14]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f7ff ff5b 	bl	8000934 <ssd1306_DrawPixel>
 8000a7e:	e016      	b.n	8000aae <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <ssd1306_WriteChar+0x10c>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b2d8      	uxtb	r0, r3
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <ssd1306_WriteChar+0x10c>)
 8000a90:	885b      	ldrh	r3, [r3, #2]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	b2d9      	uxtb	r1, r3
 8000a9c:	7bbb      	ldrb	r3, [r7, #14]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2301      	moveq	r3, #1
 8000aa4:	2300      	movne	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f7ff ff43 	bl	8000934 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	793b      	ldrb	r3, [r7, #4]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d3c5      	bcc.n	8000a4a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	797b      	ldrb	r3, [r7, #5]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d3ad      	bcc.n	8000a2a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <ssd1306_WriteChar+0x10c>)
 8000ad0:	881a      	ldrh	r2, [r3, #0]
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <ssd1306_WriteChar+0x10c>)
 8000adc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3724      	adds	r7, #36	; 0x24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	20000498 	.word	0x20000498

08000aec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	1d38      	adds	r0, r7, #4
 8000af6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000afa:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000afc:	e012      	b.n	8000b24 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	7818      	ldrb	r0, [r3, #0]
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	1d3a      	adds	r2, r7, #4
 8000b06:	ca06      	ldmia	r2, {r1, r2}
 8000b08:	f7ff ff68 	bl	80009dc <ssd1306_WriteChar>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d002      	beq.n	8000b1e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <ssd1306_WriteString+0x44>
        }
        str++;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1e8      	bne.n	8000afe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <ssd1306_SetCursor+0x2c>)
 8000b4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <ssd1306_SetCursor+0x2c>)
 8000b56:	805a      	strh	r2, [r3, #2]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	20000498 	.word	0x20000498

08000b68 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	603a      	str	r2, [r7, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	460b      	mov	r3, r1
 8000b78:	71bb      	strb	r3, [r7, #6]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b7e:	797b      	ldrb	r3, [r7, #5]
 8000b80:	3307      	adds	r3, #7
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da00      	bge.n	8000b88 <ssd1306_DrawBitmap+0x20>
 8000b86:	3307      	adds	r3, #7
 8000b88:	10db      	asrs	r3, r3, #3
 8000b8a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db3e      	blt.n	8000c16 <ssd1306_DrawBitmap+0xae>
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b9c:	d83b      	bhi.n	8000c16 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	73bb      	strb	r3, [r7, #14]
 8000ba2:	e033      	b.n	8000c0c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	737b      	strb	r3, [r7, #13]
 8000ba8:	e026      	b.n	8000bf8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000baa:	7b7b      	ldrb	r3, [r7, #13]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e00d      	b.n	8000bd8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	7b7a      	ldrb	r2, [r7, #13]
 8000bc8:	08d2      	lsrs	r2, r2, #3
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	4413      	add	r3, r2
 8000bce:	461a      	mov	r2, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	da08      	bge.n	8000bf2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000be0:	79fa      	ldrb	r2, [r7, #7]
 8000be2:	7b7b      	ldrb	r3, [r7, #13]
 8000be4:	4413      	add	r3, r2
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	7f3a      	ldrb	r2, [r7, #28]
 8000bea:	79b9      	ldrb	r1, [r7, #6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fea1 	bl	8000934 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	737b      	strb	r3, [r7, #13]
 8000bf8:	7b7a      	ldrb	r2, [r7, #13]
 8000bfa:	797b      	ldrb	r3, [r7, #5]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d3d4      	bcc.n	8000baa <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	3301      	adds	r3, #1
 8000c04:	73bb      	strb	r3, [r7, #14]
 8000c06:	79bb      	ldrb	r3, [r7, #6]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	71bb      	strb	r3, [r7, #6]
 8000c0c:	7bba      	ldrb	r2, [r7, #14]
 8000c0e:	7e3b      	ldrb	r3, [r7, #24]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3c7      	bcc.n	8000ba4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000c14:	e000      	b.n	8000c18 <ssd1306_DrawBitmap+0xb0>
        return;
 8000c16:	bf00      	nop
}
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000c28:	2381      	movs	r3, #129	; 0x81
 8000c2a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fd98 	bl	8000764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fd94 	bl	8000764 <ssd1306_WriteCommand>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d005      	beq.n	8000c60 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000c54:	23af      	movs	r3, #175	; 0xaf
 8000c56:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <ssd1306_SetDisplayOn+0x38>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	715a      	strb	r2, [r3, #5]
 8000c5e:	e004      	b.n	8000c6a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000c60:	23ae      	movs	r3, #174	; 0xae
 8000c62:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <ssd1306_SetDisplayOn+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fd79 	bl	8000764 <ssd1306_WriteCommand>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000498 	.word	0x20000498

08000c80 <ws2812_init>:
uint16_t BUF_DMA [ARRAY_LEN] = {0};
uint8_t rgb_temp[12][3];
uint16_t DMA_BUF_TEMP[24];
//------------------------------------------------------------------
void ws2812_init(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++) BUF_DMA[i] = LOW;
 8000c86:	2330      	movs	r3, #48	; 0x30
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	e007      	b.n	8000c9c <ws2812_init+0x1c>
 8000c8c:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <ws2812_init+0x34>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	211a      	movs	r1, #26
 8000c92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f5b3 6f5b 	cmp.w	r3, #3504	; 0xdb0
 8000ca2:	dbf3      	blt.n	8000c8c <ws2812_init+0xc>
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	200004a0 	.word	0x200004a0

08000cb8 <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8000cb8:	b490      	push	{r4, r7}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4623      	mov	r3, r4
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71bb      	strb	r3, [r7, #6]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	717b      	strb	r3, [r7, #5]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	81fb      	strh	r3, [r7, #14]
 8000cda:	e07a      	b.n	8000dd2 <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	fa42 f303 	asr.w	r3, r2, r3
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00e      	beq.n	8000d10 <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	3330      	adds	r3, #48	; 0x30
 8000cfe:	89fa      	ldrh	r2, [r7, #14]
 8000d00:	b292      	uxth	r2, r2
 8000d02:	4413      	add	r3, r2
 8000d04:	3308      	adds	r3, #8
 8000d06:	4a38      	ldr	r2, [pc, #224]	; (8000de8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000d08:	2141      	movs	r1, #65	; 0x41
 8000d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d0e:	e00d      	b.n	8000d2c <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 8000d10:	887a      	ldrh	r2, [r7, #2]
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	3330      	adds	r3, #48	; 0x30
 8000d1c:	89fa      	ldrh	r2, [r7, #14]
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	4413      	add	r3, r2
 8000d22:	3308      	adds	r3, #8
 8000d24:	4a30      	ldr	r2, [pc, #192]	; (8000de8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000d26:	211a      	movs	r1, #26
 8000d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 8000d2c:	79ba      	ldrb	r2, [r7, #6]
 8000d2e:	89fb      	ldrh	r3, [r7, #14]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	fa42 f303 	asr.w	r3, r2, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00d      	beq.n	8000d5e <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 8000d42:	887a      	ldrh	r2, [r7, #2]
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	3330      	adds	r3, #48	; 0x30
 8000d4e:	89fa      	ldrh	r2, [r7, #14]
 8000d50:	b292      	uxth	r2, r2
 8000d52:	4413      	add	r3, r2
 8000d54:	4a24      	ldr	r2, [pc, #144]	; (8000de8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000d56:	2141      	movs	r1, #65	; 0x41
 8000d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d5c:	e00c      	b.n	8000d78 <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	3330      	adds	r3, #48	; 0x30
 8000d6a:	89fa      	ldrh	r2, [r7, #14]
 8000d6c:	b292      	uxth	r2, r2
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000d72:	211a      	movs	r1, #26
 8000d74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 8000d78:	797a      	ldrb	r2, [r7, #5]
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	fa42 f303 	asr.w	r3, r2, r3
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00e      	beq.n	8000dac <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 8000d8e:	887a      	ldrh	r2, [r7, #2]
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	3330      	adds	r3, #48	; 0x30
 8000d9a:	89fa      	ldrh	r2, [r7, #14]
 8000d9c:	b292      	uxth	r2, r2
 8000d9e:	4413      	add	r3, r2
 8000da0:	3310      	adds	r3, #16
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000da4:	2141      	movs	r1, #65	; 0x41
 8000da6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000daa:	e00d      	b.n	8000dc8 <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 8000dac:	887a      	ldrh	r2, [r7, #2]
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	3330      	adds	r3, #48	; 0x30
 8000db8:	89fa      	ldrh	r2, [r7, #14]
 8000dba:	b292      	uxth	r2, r2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	3310      	adds	r3, #16
 8000dc0:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000dc2:	211a      	movs	r1, #26
 8000dc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 8000dc8:	89fb      	ldrh	r3, [r7, #14]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	81fb      	strh	r3, [r7, #14]
 8000dd2:	89fb      	ldrh	r3, [r7, #14]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	d980      	bls.n	8000cdc <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc90      	pop	{r4, r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200004a0 	.word	0x200004a0

08000dec <ws2812_prepareValue>:
    uint8_t r07, uint8_t g07, uint8_t b07,
    uint8_t r08, uint8_t g08, uint8_t b08,
    uint8_t r09, uint8_t g09, uint8_t b09,
    uint8_t r10, uint8_t g10, uint8_t b10,
    uint8_t r11, uint8_t g11, uint8_t b11)
  {
 8000dec:	b490      	push	{r4, r7}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4604      	mov	r4, r0
 8000df4:	4608      	mov	r0, r1
 8000df6:	4611      	mov	r1, r2
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71bb      	strb	r3, [r7, #6]
 8000e02:	460b      	mov	r3, r1
 8000e04:	717b      	strb	r3, [r7, #5]
 8000e06:	4613      	mov	r3, r2
 8000e08:	713b      	strb	r3, [r7, #4]
  rgb_temp[0][0]=r00; rgb_temp[0][1]=g00; rgb_temp[0][2]=b00;
 8000e0a:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	7013      	strb	r3, [r2, #0]
 8000e10:	4a46      	ldr	r2, [pc, #280]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	7053      	strb	r3, [r2, #1]
 8000e16:	4a45      	ldr	r2, [pc, #276]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e18:	797b      	ldrb	r3, [r7, #5]
 8000e1a:	7093      	strb	r3, [r2, #2]
  rgb_temp[1][0]=r01; rgb_temp[1][1]=g01; rgb_temp[1][2]=b01;
 8000e1c:	4a43      	ldr	r2, [pc, #268]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e1e:	793b      	ldrb	r3, [r7, #4]
 8000e20:	70d3      	strb	r3, [r2, #3]
 8000e22:	4a42      	ldr	r2, [pc, #264]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e24:	7c3b      	ldrb	r3, [r7, #16]
 8000e26:	7113      	strb	r3, [r2, #4]
 8000e28:	4a40      	ldr	r2, [pc, #256]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	7153      	strb	r3, [r2, #5]
  rgb_temp[2][0]=r02; rgb_temp[2][1]=g02; rgb_temp[2][2]=b02;
 8000e2e:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e30:	7e3b      	ldrb	r3, [r7, #24]
 8000e32:	7193      	strb	r3, [r2, #6]
 8000e34:	4a3d      	ldr	r2, [pc, #244]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e36:	7f3b      	ldrb	r3, [r7, #28]
 8000e38:	71d3      	strb	r3, [r2, #7]
 8000e3a:	4a3c      	ldr	r2, [pc, #240]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e40:	7213      	strb	r3, [r2, #8]
  rgb_temp[3][0]=r03; rgb_temp[3][1]=g03; rgb_temp[3][2]=b03;
 8000e42:	4a3a      	ldr	r2, [pc, #232]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e48:	7253      	strb	r3, [r2, #9]
 8000e4a:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e50:	7293      	strb	r3, [r2, #10]
 8000e52:	4a36      	ldr	r2, [pc, #216]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e58:	72d3      	strb	r3, [r2, #11]
  rgb_temp[4][0]=r04; rgb_temp[4][1]=g04; rgb_temp[4][2]=b04;
 8000e5a:	4a34      	ldr	r2, [pc, #208]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e60:	7313      	strb	r3, [r2, #12]
 8000e62:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e64:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e68:	7353      	strb	r3, [r2, #13]
 8000e6a:	4a30      	ldr	r2, [pc, #192]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e70:	7393      	strb	r3, [r2, #14]
  rgb_temp[5][0]=r05; rgb_temp[5][1]=g05; rgb_temp[5][2]=b05;
 8000e72:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e74:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000e78:	73d3      	strb	r3, [r2, #15]
 8000e7a:	4a2c      	ldr	r2, [pc, #176]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e7c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e80:	7413      	strb	r3, [r2, #16]
 8000e82:	4a2a      	ldr	r2, [pc, #168]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e84:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000e88:	7453      	strb	r3, [r2, #17]
  rgb_temp[6][0]=r06; rgb_temp[6][1]=g06; rgb_temp[6][2]=b06;
 8000e8a:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e8c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000e90:	7493      	strb	r3, [r2, #18]
 8000e92:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e94:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000e98:	74d3      	strb	r3, [r2, #19]
 8000e9a:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000e9c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000ea0:	7513      	strb	r3, [r2, #20]
  rgb_temp[7][0]=r07; rgb_temp[7][1]=g07; rgb_temp[7][2]=b07;
 8000ea2:	4a22      	ldr	r2, [pc, #136]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000ea4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000ea8:	7553      	strb	r3, [r2, #21]
 8000eaa:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000eac:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000eb0:	7593      	strb	r3, [r2, #22]
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000eb4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000eb8:	75d3      	strb	r3, [r2, #23]
  rgb_temp[8][0]=r08; rgb_temp[8][1]=g08; rgb_temp[8][2]=b08;
 8000eba:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000ebc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000ec0:	7613      	strb	r3, [r2, #24]
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000ec4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000ec8:	7653      	strb	r3, [r2, #25]
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000ecc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000ed0:	7693      	strb	r3, [r2, #26]
  rgb_temp[9][0]=r09; rgb_temp[9][1]=g09; rgb_temp[9][2]=b09;
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000ed4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000ed8:	76d3      	strb	r3, [r2, #27]
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000edc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000ee0:	7713      	strb	r3, [r2, #28]
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000ee4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000ee8:	7753      	strb	r3, [r2, #29]
  rgb_temp[10][0]=r10;rgb_temp[10][1]=g10;rgb_temp[10][2]=b10;
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000eec:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000ef0:	7793      	strb	r3, [r2, #30]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000ef4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000ef8:	77d3      	strb	r3, [r2, #31]
 8000efa:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000efc:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000f00:	f882 3020 	strb.w	r3, [r2, #32]
  rgb_temp[11][0]=r11;rgb_temp[11][1]=g11;rgb_temp[11][2]=b11;
 8000f04:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000f06:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000f0a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000f10:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8000f14:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <ws2812_prepareValue+0x140>)
 8000f1a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000f1e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc90      	pop	{r4, r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20002000 	.word	0x20002000

08000f30 <ws2812_setValue>:
//------------------------------------------------------------------
void ws2812_setValue(void)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  uint8_t n=0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
  for(n=0;n<12;n++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	e0d0      	b.n	80010e2 <ws2812_setValue+0x1b2>
  {
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[0][0], rgb_temp[0][1], rgb_temp[0][2], n*12);
 8000f40:	4b6c      	ldr	r3, [pc, #432]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000f42:	7818      	ldrb	r0, [r3, #0]
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000f46:	7859      	ldrb	r1, [r3, #1]
 8000f48:	4b6a      	ldr	r3, [pc, #424]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000f4a:	789a      	ldrb	r2, [r3, #2]
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	461c      	mov	r4, r3
 8000f52:	0064      	lsls	r4, r4, #1
 8000f54:	4423      	add	r3, r4
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	f7ff fead 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[1][0], rgb_temp[1][1], rgb_temp[1][2], n*12+1);
 8000f5e:	4b65      	ldr	r3, [pc, #404]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000f60:	78d8      	ldrb	r0, [r3, #3]
 8000f62:	4b64      	ldr	r3, [pc, #400]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000f64:	7919      	ldrb	r1, [r3, #4]
 8000f66:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000f68:	795a      	ldrb	r2, [r3, #5]
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	461c      	mov	r4, r3
 8000f70:	0064      	lsls	r4, r4, #1
 8000f72:	4423      	add	r3, r4
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	f7ff fe9c 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[2][0], rgb_temp[2][1], rgb_temp[2][2], n*12+2);
 8000f80:	4b5c      	ldr	r3, [pc, #368]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000f82:	7998      	ldrb	r0, [r3, #6]
 8000f84:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000f86:	79d9      	ldrb	r1, [r3, #7]
 8000f88:	4b5a      	ldr	r3, [pc, #360]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000f8a:	7a1a      	ldrb	r2, [r3, #8]
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	461c      	mov	r4, r3
 8000f92:	0064      	lsls	r4, r4, #1
 8000f94:	4423      	add	r3, r4
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f7ff fe8b 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[3][0], rgb_temp[3][1], rgb_temp[3][2], n*12+3);
 8000fa2:	4b54      	ldr	r3, [pc, #336]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000fa4:	7a58      	ldrb	r0, [r3, #9]
 8000fa6:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000fa8:	7a99      	ldrb	r1, [r3, #10]
 8000faa:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000fac:	7ada      	ldrb	r2, [r3, #11]
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	461c      	mov	r4, r3
 8000fb4:	0064      	lsls	r4, r4, #1
 8000fb6:	4423      	add	r3, r4
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	3303      	adds	r3, #3
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	f7ff fe7a 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[4][0], rgb_temp[4][1], rgb_temp[4][2], n*12+4);
 8000fc4:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000fc6:	7b18      	ldrb	r0, [r3, #12]
 8000fc8:	4b4a      	ldr	r3, [pc, #296]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000fca:	7b59      	ldrb	r1, [r3, #13]
 8000fcc:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000fce:	7b9a      	ldrb	r2, [r3, #14]
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461c      	mov	r4, r3
 8000fd6:	0064      	lsls	r4, r4, #1
 8000fd8:	4423      	add	r3, r4
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	3304      	adds	r3, #4
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	f7ff fe69 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[5][0], rgb_temp[5][1], rgb_temp[5][2], n*12+5);
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000fe8:	7bd8      	ldrb	r0, [r3, #15]
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000fec:	7c19      	ldrb	r1, [r3, #16]
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <ws2812_setValue+0x1c4>)
 8000ff0:	7c5a      	ldrb	r2, [r3, #17]
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	461c      	mov	r4, r3
 8000ff8:	0064      	lsls	r4, r4, #1
 8000ffa:	4423      	add	r3, r4
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	3305      	adds	r3, #5
 8001002:	b29b      	uxth	r3, r3
 8001004:	f7ff fe58 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[6][0], rgb_temp[6][1], rgb_temp[6][2], n*12+6);
 8001008:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <ws2812_setValue+0x1c4>)
 800100a:	7c98      	ldrb	r0, [r3, #18]
 800100c:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <ws2812_setValue+0x1c4>)
 800100e:	7cd9      	ldrb	r1, [r3, #19]
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001012:	7d1a      	ldrb	r2, [r3, #20]
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	b29b      	uxth	r3, r3
 8001018:	461c      	mov	r4, r3
 800101a:	0064      	lsls	r4, r4, #1
 800101c:	4423      	add	r3, r4
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	b29b      	uxth	r3, r3
 8001022:	3306      	adds	r3, #6
 8001024:	b29b      	uxth	r3, r3
 8001026:	f7ff fe47 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[7][0], rgb_temp[7][1], rgb_temp[7][2], n*12+7);
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <ws2812_setValue+0x1c4>)
 800102c:	7d58      	ldrb	r0, [r3, #21]
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001030:	7d99      	ldrb	r1, [r3, #22]
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001034:	7dda      	ldrb	r2, [r3, #23]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	b29b      	uxth	r3, r3
 800103a:	461c      	mov	r4, r3
 800103c:	0064      	lsls	r4, r4, #1
 800103e:	4423      	add	r3, r4
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	b29b      	uxth	r3, r3
 8001044:	3307      	adds	r3, #7
 8001046:	b29b      	uxth	r3, r3
 8001048:	f7ff fe36 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[8][0], rgb_temp[8][1], rgb_temp[8][2], n*12+8);
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <ws2812_setValue+0x1c4>)
 800104e:	7e18      	ldrb	r0, [r3, #24]
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001052:	7e59      	ldrb	r1, [r3, #25]
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001056:	7e9a      	ldrb	r2, [r3, #26]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	b29b      	uxth	r3, r3
 800105c:	461c      	mov	r4, r3
 800105e:	0064      	lsls	r4, r4, #1
 8001060:	4423      	add	r3, r4
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	b29b      	uxth	r3, r3
 8001066:	3308      	adds	r3, #8
 8001068:	b29b      	uxth	r3, r3
 800106a:	f7ff fe25 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[9][0], rgb_temp[9][1], rgb_temp[9][2], n*12+9);
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001070:	7ed8      	ldrb	r0, [r3, #27]
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001074:	7f19      	ldrb	r1, [r3, #28]
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001078:	7f5a      	ldrb	r2, [r3, #29]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b29b      	uxth	r3, r3
 800107e:	461c      	mov	r4, r3
 8001080:	0064      	lsls	r4, r4, #1
 8001082:	4423      	add	r3, r4
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	b29b      	uxth	r3, r3
 8001088:	3309      	adds	r3, #9
 800108a:	b29b      	uxth	r3, r3
 800108c:	f7ff fe14 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma(rgb_temp[10][0],rgb_temp[10][1],rgb_temp[10][2],n*12+10);
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001092:	7f98      	ldrb	r0, [r3, #30]
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <ws2812_setValue+0x1c4>)
 8001096:	7fd9      	ldrb	r1, [r3, #31]
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <ws2812_setValue+0x1c4>)
 800109a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	461c      	mov	r4, r3
 80010a4:	0064      	lsls	r4, r4, #1
 80010a6:	4423      	add	r3, r4
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	330a      	adds	r3, #10
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	f7ff fe02 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma(rgb_temp[11][0],rgb_temp[11][1],rgb_temp[11][2],n*12+11);
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <ws2812_setValue+0x1c4>)
 80010b6:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <ws2812_setValue+0x1c4>)
 80010bc:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <ws2812_setValue+0x1c4>)
 80010c2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	461c      	mov	r4, r3
 80010cc:	0064      	lsls	r4, r4, #1
 80010ce:	4423      	add	r3, r4
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	330b      	adds	r3, #11
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f7ff fdee 	bl	8000cb8 <ws2812_pixel_rgb_to_buf_dma>
  for(n=0;n<12;n++)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	3301      	adds	r3, #1
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b0b      	cmp	r3, #11
 80010e6:	f67f af2b 	bls.w	8000f40 <ws2812_setValue+0x10>
  }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	20002000 	.word	0x20002000

080010f8 <ws2812_light>:
//------------------------------------------------------------------
void ws2812_light(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA,ARRAY_LEN);
 80010fc:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
 8001100:	4a03      	ldr	r2, [pc, #12]	; (8001110 <ws2812_light+0x18>)
 8001102:	2104      	movs	r1, #4
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <ws2812_light+0x1c>)
 8001106:	f003 fb45 	bl	8004794 <HAL_TIM_PWM_Start_DMA>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200004a0 	.word	0x200004a0
 8001114:	20002100 	.word	0x20002100

08001118 <ws2812_test01>:
//------------------------------------------------------------------
void ws2812_test01(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0a2      	sub	sp, #136	; 0x88
 800111c:	af20      	add	r7, sp, #128	; 0x80
  uint8_t i,j;
  ws2812_prepareValue(128, 0, 0, 0, 128, 0, 0, 0, 128, 64, 64, 0,
 800111e:	2360      	movs	r3, #96	; 0x60
 8001120:	931f      	str	r3, [sp, #124]	; 0x7c
 8001122:	2300      	movs	r3, #0
 8001124:	931e      	str	r3, [sp, #120]	; 0x78
 8001126:	2320      	movs	r3, #32
 8001128:	931d      	str	r3, [sp, #116]	; 0x74
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	931c      	str	r3, [sp, #112]	; 0x70
 800112e:	2320      	movs	r3, #32
 8001130:	931b      	str	r3, [sp, #108]	; 0x6c
 8001132:	2300      	movs	r3, #0
 8001134:	931a      	str	r3, [sp, #104]	; 0x68
 8001136:	2320      	movs	r3, #32
 8001138:	9319      	str	r3, [sp, #100]	; 0x64
 800113a:	2360      	movs	r3, #96	; 0x60
 800113c:	9318      	str	r3, [sp, #96]	; 0x60
 800113e:	2300      	movs	r3, #0
 8001140:	9317      	str	r3, [sp, #92]	; 0x5c
 8001142:	2300      	movs	r3, #0
 8001144:	9316      	str	r3, [sp, #88]	; 0x58
 8001146:	2360      	movs	r3, #96	; 0x60
 8001148:	9315      	str	r3, [sp, #84]	; 0x54
 800114a:	2320      	movs	r3, #32
 800114c:	9314      	str	r3, [sp, #80]	; 0x50
 800114e:	2320      	movs	r3, #32
 8001150:	9313      	str	r3, [sp, #76]	; 0x4c
 8001152:	2300      	movs	r3, #0
 8001154:	9312      	str	r3, [sp, #72]	; 0x48
 8001156:	2360      	movs	r3, #96	; 0x60
 8001158:	9311      	str	r3, [sp, #68]	; 0x44
 800115a:	2300      	movs	r3, #0
 800115c:	9310      	str	r3, [sp, #64]	; 0x40
 800115e:	2320      	movs	r3, #32
 8001160:	930f      	str	r3, [sp, #60]	; 0x3c
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	930e      	str	r3, [sp, #56]	; 0x38
 8001166:	2340      	movs	r3, #64	; 0x40
 8001168:	930d      	str	r3, [sp, #52]	; 0x34
 800116a:	2300      	movs	r3, #0
 800116c:	930c      	str	r3, [sp, #48]	; 0x30
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	930b      	str	r3, [sp, #44]	; 0x2c
 8001172:	2340      	movs	r3, #64	; 0x40
 8001174:	930a      	str	r3, [sp, #40]	; 0x28
 8001176:	2340      	movs	r3, #64	; 0x40
 8001178:	9309      	str	r3, [sp, #36]	; 0x24
 800117a:	2300      	movs	r3, #0
 800117c:	9308      	str	r3, [sp, #32]
 800117e:	2300      	movs	r3, #0
 8001180:	9307      	str	r3, [sp, #28]
 8001182:	2340      	movs	r3, #64	; 0x40
 8001184:	9306      	str	r3, [sp, #24]
 8001186:	2340      	movs	r3, #64	; 0x40
 8001188:	9305      	str	r3, [sp, #20]
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	9304      	str	r3, [sp, #16]
 800118e:	2300      	movs	r3, #0
 8001190:	9303      	str	r3, [sp, #12]
 8001192:	2300      	movs	r3, #0
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	2300      	movs	r3, #0
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2080      	movs	r0, #128	; 0x80
 80011a6:	f7ff fe21 	bl	8000dec <ws2812_prepareValue>
      0, 64, 64, 64, 0, 64, 96, 32, 0, 96, 0, 32,
      32, 96, 0, 0, 96, 32, 0, 32, 96, 32, 0, 96);
  ws2812_setValue();
 80011aa:	f7ff fec1 	bl	8000f30 <ws2812_setValue>
  for(j=0;j<50;j++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	71bb      	strb	r3, [r7, #6]
 80011b2:	e030      	b.n	8001216 <ws2812_test01+0xfe>
  {
    memcpy((void*)DMA_BUF_TEMP,(void*)(BUF_DMA+48),48);
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <ws2812_test01+0x110>)
 80011b6:	2230      	movs	r2, #48	; 0x30
 80011b8:	4619      	mov	r1, r3
 80011ba:	481c      	ldr	r0, [pc, #112]	; (800122c <ws2812_test01+0x114>)
 80011bc:	f007 fa34 	bl	8008628 <memcpy>
    for(i=0;i<143;i++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	e016      	b.n	80011f4 <ws2812_test01+0xdc>
    {
      memcpy((void*)(i*24+BUF_DMA+48),(void*)(i*24+BUF_DMA+72),48);
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	3360      	adds	r3, #96	; 0x60
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <ws2812_test01+0x118>)
 80011d4:	1898      	adds	r0, r3, r2
 80011d6:	79fa      	ldrb	r2, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	3390      	adds	r3, #144	; 0x90
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <ws2812_test01+0x118>)
 80011e4:	4413      	add	r3, r2
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	4619      	mov	r1, r3
 80011ea:	f007 fa1d 	bl	8008628 <memcpy>
    for(i=0;i<143;i++)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	3301      	adds	r3, #1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b8e      	cmp	r3, #142	; 0x8e
 80011f8:	d9e5      	bls.n	80011c6 <ws2812_test01+0xae>
    }
    memcpy((void*)(BUF_DMA+48+3432),(void*)DMA_BUF_TEMP,48);
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <ws2812_test01+0x11c>)
 80011fc:	2230      	movs	r2, #48	; 0x30
 80011fe:	490b      	ldr	r1, [pc, #44]	; (800122c <ws2812_test01+0x114>)
 8001200:	4618      	mov	r0, r3
 8001202:	f007 fa11 	bl	8008628 <memcpy>
    ws2812_light();
 8001206:	f7ff ff77 	bl	80010f8 <ws2812_light>
    HAL_Delay(100);
 800120a:	2064      	movs	r0, #100	; 0x64
 800120c:	f000 fce8 	bl	8001be0 <HAL_Delay>
  for(j=0;j<50;j++)
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	3301      	adds	r3, #1
 8001214:	71bb      	strb	r3, [r7, #6]
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	2b31      	cmp	r3, #49	; 0x31
 800121a:	d9cb      	bls.n	80011b4 <ws2812_test01+0x9c>
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000500 	.word	0x20000500
 800122c:	20002024 	.word	0x20002024
 8001230:	200004a0 	.word	0x200004a0
 8001234:	20001fd0 	.word	0x20001fd0

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0b6      	sub	sp, #216	; 0xd8
 800123c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123e:	f000 fc8d 	bl	8001b5c <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001242:	f000 f883 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 f9e1 	bl	800160c <MX_GPIO_Init>
  MX_DMA_Init();
 800124a:	f000 f9bf 	bl	80015cc <MX_DMA_Init>
  MX_I2C1_Init();
 800124e:	f000 f8e5 	bl	800141c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001252:	f000 f911 	bl	8001478 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001256:	f000 f945 	bl	80014e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t all_dev[200] = {0};
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	22c4      	movs	r2, #196	; 0xc4
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f007 f9ec 	bl	8008644 <memset>
  HAL_StatusTypeDef type;
  for(uint8_t i = 1; i > 128 ; i++){
 800126c:	2301      	movs	r3, #1
 800126e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8001272:	e014      	b.n	800129e <main+0x66>
	  type = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 8001274:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001278:	b29b      	uxth	r3, r3
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	b299      	uxth	r1, r3
 800127e:	230a      	movs	r3, #10
 8001280:	2202      	movs	r2, #2
 8001282:	482a      	ldr	r0, [pc, #168]	; (800132c <main+0xf4>)
 8001284:	f001 fd38 	bl	8002cf8 <HAL_I2C_IsDeviceReady>
 8001288:	4603      	mov	r3, r0
 800128a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	  if(type= HAL_OK){
 800128e:	2300      	movs	r3, #0
 8001290:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
  for(uint8_t i = 1; i > 128 ; i++){
 8001294:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001298:	3301      	adds	r3, #1
 800129a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800129e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80012a2:	2b80      	cmp	r3, #128	; 0x80
 80012a4:	d8e6      	bhi.n	8001274 <main+0x3c>
		  all_dev[i] = i;
	  }
  }
  	  ws2812_init();
 80012a6:	f7ff fceb 	bl	8000c80 <ws2812_init>
  	  ws2812_test01();
 80012aa:	f7ff ff35 	bl	8001118 <ws2812_test01>
  	  ws2812_light();
 80012ae:	f7ff ff23 	bl	80010f8 <ws2812_light>
  ssd1306_Init();
 80012b2:	f7ff fa89 	bl	80007c8 <ssd1306_Init>
  //extern  unsigned char *gImage_BW;
  //extern  unsigned char *gImage_R;
  ssd1306_Fill(Black);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff faf0 	bl	800089c <ssd1306_Fill>
  ssd1306_SetCursor(5, 10);
 80012bc:	210a      	movs	r1, #10
 80012be:	2005      	movs	r0, #5
 80012c0:	f7ff fc3a 	bl	8000b38 <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <main+0xf8>)
 80012c6:	2301      	movs	r3, #1
 80012c8:	ca06      	ldmia	r2, {r1, r2}
 80012ca:	481a      	ldr	r0, [pc, #104]	; (8001334 <main+0xfc>)
 80012cc:	f7ff fc0e 	bl	8000aec <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80012d0:	f7ff fb08 	bl	80008e4 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 80012d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d8:	f000 fc82 	bl	8001be0 <HAL_Delay>
  ssd1306_Fill(Black);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fadd 	bl	800089c <ssd1306_Fill>
  ssd1306_DrawBitmap(0, 0, gqImage_BW, 128, 32, White);
 80012e2:	2301      	movs	r3, #1
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	2320      	movs	r3, #32
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <main+0x100>)
 80012ee:	2100      	movs	r1, #0
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fc39 	bl	8000b68 <ssd1306_DrawBitmap>
  ssd1306_UpdateScreen();
 80012f6:	f7ff faf5 	bl	80008e4 <ssd1306_UpdateScreen>

  EPD_HW_Init(); //Electronic paper initialization
 80012fa:	f7ff f96b 	bl	80005d4 <EPD_HW_Init>
  EPD_WhiteScreen_ALL(gqImage_BW,gqImage_R); //Refresh the picture in full screen
 80012fe:	490f      	ldr	r1, [pc, #60]	; (800133c <main+0x104>)
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <main+0x100>)
 8001302:	f7ff f9e4 	bl	80006ce <EPD_WhiteScreen_ALL>
  EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
 8001306:	f7ff fa19 	bl	800073c <EPD_DeepSleep>
  driver_delay_xms(5000);
 800130a:	f241 3088 	movw	r0, #5000	; 0x1388
 800130e:	f7ff f8e9 	bl	80004e4 <driver_delay_xms>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001312:	f004 fbe5 	bl	8005ae0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <main+0x108>)
 8001318:	2100      	movs	r1, #0
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <main+0x10c>)
 800131c:	f004 fc2a 	bl	8005b74 <osThreadNew>
 8001320:	4603      	mov	r3, r0
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <main+0x110>)
 8001324:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001326:	f004 fbff 	bl	8005b28 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800132a:	e7fe      	b.n	800132a <main+0xf2>
 800132c:	20002054 	.word	0x20002054
 8001330:	20000000 	.word	0x20000000
 8001334:	080087fc 	.word	0x080087fc
 8001338:	0800957c 	.word	0x0800957c
 800133c:	0800a7fc 	.word	0x0800a7fc
 8001340:	0800ba7c 	.word	0x0800ba7c
 8001344:	080016c9 	.word	0x080016c9
 8001348:	200021a8 	.word	0x200021a8

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	; 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	2230      	movs	r2, #48	; 0x30
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f007 f972 	bl	8008644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <SystemClock_Config+0xc8>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <SystemClock_Config+0xc8>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <SystemClock_Config+0xc8>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <SystemClock_Config+0xcc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <SystemClock_Config+0xcc>)
 8001396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <SystemClock_Config+0xcc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b2:	2302      	movs	r3, #2
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013bc:	2319      	movs	r3, #25
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013c0:	23c0      	movs	r3, #192	; 0xc0
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 ffdd 	bl	8003390 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013dc:	f000 f98e 	bl	80016fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e0:	230f      	movs	r3, #15
 80013e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e4:	2302      	movs	r3, #2
 80013e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2103      	movs	r1, #3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fa3f 	bl	8003880 <HAL_RCC_ClockConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001408:	f000 f978 	bl	80016fc <Error_Handler>
  }
}
 800140c:	bf00      	nop
 800140e:	3750      	adds	r7, #80	; 0x50
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000

0800141c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_I2C1_Init+0x50>)
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <MX_I2C1_Init+0x54>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_I2C1_Init+0x50>)
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <MX_I2C1_Init+0x58>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_I2C1_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_I2C1_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_I2C1_Init+0x50>)
 800143a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <MX_I2C1_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_I2C1_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_I2C1_Init+0x50>)
 800145a:	f001 fa0f 	bl	800287c <HAL_I2C_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001464:	f000 f94a 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20002054 	.word	0x20002054
 8001470:	40005400 	.word	0x40005400
 8001474:	000186a0 	.word	0x000186a0

08001478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_SPI1_Init+0x64>)
 800147e:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <MX_SPI1_Init+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_SPI1_Init+0x64>)
 8001484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_SPI1_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_SPI1_Init+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_SPI1_Init+0x64>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_SPI1_Init+0x64>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_SPI1_Init+0x64>)
 80014a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_SPI1_Init+0x64>)
 80014ac:	2230      	movs	r2, #48	; 0x30
 80014ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_SPI1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_SPI1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_SPI1_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_SPI1_Init+0x64>)
 80014c4:	220a      	movs	r2, #10
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_SPI1_Init+0x64>)
 80014ca:	f002 fbeb 	bl	8003ca4 <HAL_SPI_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014d4:	f000 f912 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200020a8 	.word	0x200020a8
 80014e0:	40013000 	.word	0x40013000

080014e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	; 0x38
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <MX_TIM2_Init+0xe4>)
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <MX_TIM2_Init+0xe4>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <MX_TIM2_Init+0xe4>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <MX_TIM2_Init+0xe4>)
 800152a:	2277      	movs	r2, #119	; 0x77
 800152c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <MX_TIM2_Init+0xe4>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <MX_TIM2_Init+0xe4>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800153a:	4823      	ldr	r0, [pc, #140]	; (80015c8 <MX_TIM2_Init+0xe4>)
 800153c:	f003 f81e 	bl	800457c <HAL_TIM_Base_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001546:	f000 f8d9 	bl	80016fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001554:	4619      	mov	r1, r3
 8001556:	481c      	ldr	r0, [pc, #112]	; (80015c8 <MX_TIM2_Init+0xe4>)
 8001558:	f003 fd5c 	bl	8005014 <HAL_TIM_ConfigClockSource>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001562:	f000 f8cb 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001566:	4818      	ldr	r0, [pc, #96]	; (80015c8 <MX_TIM2_Init+0xe4>)
 8001568:	f003 f8ba 	bl	80046e0 <HAL_TIM_PWM_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001572:	f000 f8c3 	bl	80016fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	4619      	mov	r1, r3
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <MX_TIM2_Init+0xe4>)
 8001586:	f004 f9e5 	bl	8005954 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001590:	f000 f8b4 	bl	80016fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001594:	2360      	movs	r3, #96	; 0x60
 8001596:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2204      	movs	r2, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <MX_TIM2_Init+0xe4>)
 80015ac:	f003 fc70 	bl	8004e90 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80015b6:	f000 f8a1 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ba:	4803      	ldr	r0, [pc, #12]	; (80015c8 <MX_TIM2_Init+0xe4>)
 80015bc:	f000 f9b8 	bl	8001930 <HAL_TIM_MspPostInit>

}
 80015c0:	bf00      	nop
 80015c2:	3738      	adds	r7, #56	; 0x38
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20002100 	.word	0x20002100

080015cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_DMA_Init+0x3c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <MX_DMA_Init+0x3c>)
 80015dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_DMA_Init+0x3c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2105      	movs	r1, #5
 80015f2:	2011      	movs	r0, #17
 80015f4:	f000 fbd0 	bl	8001d98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015f8:	2011      	movs	r0, #17
 80015fa:	f000 fbe9 	bl	8001dd0 <HAL_NVIC_EnableIRQ>

}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_GPIO_Init+0xb4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <MX_GPIO_Init+0xb4>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <MX_GPIO_Init+0xb4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_GPIO_Init+0xb4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <MX_GPIO_Init+0xb4>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_GPIO_Init+0xb4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_GPIO_Init+0xb4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <MX_GPIO_Init+0xb4>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_GPIO_Init+0xb4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2107      	movs	r1, #7
 800167a:	4812      	ldr	r0, [pc, #72]	; (80016c4 <MX_GPIO_Init+0xb8>)
 800167c:	f001 f8e4 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8001680:	2307      	movs	r3, #7
 8001682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001698:	f000 ff3a 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 800169c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016a6:	2302      	movs	r3, #2
 80016a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4619      	mov	r1, r3
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <MX_GPIO_Init+0xb8>)
 80016b2:	f000 ff2d 	bl	8002510 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b6:	bf00      	nop
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020400 	.word	0x40020400

080016c8 <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f004 fae1 	bl	8005c98 <osDelay>
 80016d6:	e7fb      	b.n	80016d0 <StartInitTask+0x8>

080016d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ea:	f000 fa59 	bl	8001ba0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40014000 	.word	0x40014000

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	e7fe      	b.n	8001704 <Error_Handler+0x8>
	...

08001708 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_MspInit+0x54>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_MspInit+0x54>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_MspInit+0x54>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_MspInit+0x54>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_MspInit+0x54>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_MspInit+0x54>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	210f      	movs	r1, #15
 800174a:	f06f 0001 	mvn.w	r0, #1
 800174e:	f000 fb23 	bl	8001d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_I2C_MspInit+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12b      	bne.n	80017da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_I2C_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_I2C_MspInit+0x88>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_I2C_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a2:	2312      	movs	r3, #18
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ae:	2304      	movs	r3, #4
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <HAL_I2C_MspInit+0x8c>)
 80017ba:	f000 fea9 	bl	8002510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_I2C_MspInit+0x88>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_I2C_MspInit+0x88>)
 80017c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_I2C_MspInit+0x88>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40005400 	.word	0x40005400
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020400 	.word	0x40020400

080017f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_SPI_MspInit+0x84>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d12b      	bne.n	800186a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_SPI_MspInit+0x88>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_SPI_MspInit+0x88>)
 800181c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_SPI_MspInit+0x88>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_SPI_MspInit+0x88>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_SPI_MspInit+0x88>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_SPI_MspInit+0x88>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800184a:	23a0      	movs	r3, #160	; 0xa0
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800185a:	2305      	movs	r3, #5
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <HAL_SPI_MspInit+0x8c>)
 8001866:	f000 fe53 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40013000 	.word	0x40013000
 8001878:	40023800 	.word	0x40023800
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001890:	d143      	bne.n	800191a <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_TIM_Base_MspInit+0xa4>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_TIM_Base_MspInit+0xa4>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_TIM_Base_MspInit+0xa4>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018b0:	4a1e      	ldr	r2, [pc, #120]	; (800192c <HAL_TIM_Base_MspInit+0xac>)
 80018b2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018b6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80018ba:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ce:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 80018f4:	f000 fa7a 	bl	8001dec <HAL_DMA_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80018fe:	f7ff fefd 	bl	80016fc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_TIM_Base_MspInit+0xa8>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	20002148 	.word	0x20002148
 800192c:	400260a0 	.word	0x400260a0

08001930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d11d      	bne.n	800198e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_TIM_MspPostInit+0x68>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_TIM_MspPostInit+0x68>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_TIM_MspPostInit+0x68>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800196e:	2308      	movs	r3, #8
 8001970:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800197e:	2301      	movs	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <HAL_TIM_MspPostInit+0x6c>)
 800198a:	f000 fdc1 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40020400 	.word	0x40020400

080019a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	; 0x30
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_InitTick+0xd0>)
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	4a2d      	ldr	r2, [pc, #180]	; (8001a70 <HAL_InitTick+0xd0>)
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019be:	6453      	str	r3, [r2, #68]	; 0x44
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_InitTick+0xd0>)
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019cc:	f107 020c 	add.w	r2, r7, #12
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 f932 	bl	8003c40 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019dc:	f002 f91c 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 80019e0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e4:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_InitTick+0xd4>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0c9b      	lsrs	r3, r3, #18
 80019ec:	3b01      	subs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_InitTick+0xd8>)
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <HAL_InitTick+0xdc>)
 80019f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_InitTick+0xd8>)
 80019f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019fc:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80019fe:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <HAL_InitTick+0xd8>)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_InitTick+0xd8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_InitTick+0xd8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_InitTick+0xd8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001a16:	4818      	ldr	r0, [pc, #96]	; (8001a78 <HAL_InitTick+0xd8>)
 8001a18:	f002 fdb0 	bl	800457c <HAL_TIM_Base_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11b      	bne.n	8001a62 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001a2a:	4813      	ldr	r0, [pc, #76]	; (8001a78 <HAL_InitTick+0xd8>)
 8001a2c:	f002 fdf6 	bl	800461c <HAL_TIM_Base_Start_IT>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d111      	bne.n	8001a62 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a3e:	2018      	movs	r0, #24
 8001a40:	f000 f9c6 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	d808      	bhi.n	8001a5c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	2018      	movs	r0, #24
 8001a50:	f000 f9a2 	bl	8001d98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_InitTick+0xe0>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e002      	b.n	8001a62 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3730      	adds	r7, #48	; 0x30
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	431bde83 	.word	0x431bde83
 8001a78:	200021ac 	.word	0x200021ac
 8001a7c:	40014000 	.word	0x40014000
 8001a80:	2000000c 	.word	0x2000000c

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <NMI_Handler+0x4>

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_2);
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <DMA1_Stream6_IRQHandler+0x18>)
 8001ab8:	f003 f81c 	bl	8004af4 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001abc:	4803      	ldr	r0, [pc, #12]	; (8001acc <DMA1_Stream6_IRQHandler+0x1c>)
 8001abe:	f000 fabd 	bl	800203c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20002100 	.word	0x20002100
 8001acc:	20002148 	.word	0x20002148

08001ad0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001ad6:	f003 f8d3 	bl	8004c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200021ac 	.word	0x200021ac

08001ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0e:	490e      	ldr	r1, [pc, #56]	; (8001b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b24:	4c0b      	ldr	r4, [pc, #44]	; (8001b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b32:	f7ff ffd7 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f006 fd51 	bl	80085dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff fb7d 	bl	8001238 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001b4c:	0800bb30 	.word	0x0800bb30
  ldr r2, =_sbss
 8001b50:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001b54:	20006c10 	.word	0x20006c10

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f8fc 	bl	8001d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff ff08 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fdba 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000010 	.word	0x20000010
 8001bc4:	200021f4 	.word	0x200021f4

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	200021f4 	.word	0x200021f4

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff ffee 	bl	8001bc8 <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffde 	bl	8001bc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000010 	.word	0x20000010

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <__NVIC_EnableIRQ+0x38>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ff4c 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001daa:	f7ff ff61 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	6978      	ldr	r0, [r7, #20]
 8001db6:	f7ff ffb1 	bl	8001d1c <NVIC_EncodePriority>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff80 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff54 	bl	8001c8c <__NVIC_EnableIRQ>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff fee6 	bl	8001bc8 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e099      	b.n	8001f3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e28:	e00f      	b.n	8001e4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e2a:	f7ff fecd 	bl	8001bc8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d908      	bls.n	8001e4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e078      	b.n	8001f3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e8      	bne.n	8001e2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_DMA_Init+0x158>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d107      	bne.n	8001eb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4313      	orrs	r3, r2
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f023 0307 	bic.w	r3, r3, #7
 8001eca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d117      	bne.n	8001f0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fa91 	bl	8002418 <DMA_CheckFifoParam>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fa48 	bl	80023ac <DMA_CalcBaseAndBitshift>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	f010803f 	.word	0xf010803f

08001f48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_DMA_Start_IT+0x26>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e040      	b.n	8001ff0 <HAL_DMA_Start_IT+0xa8>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d12f      	bne.n	8001fe2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2202      	movs	r2, #2
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f9da 	bl	8002350 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	223f      	movs	r2, #63	; 0x3f
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0216 	orr.w	r2, r2, #22
 8001fb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0208 	orr.w	r2, r2, #8
 8001fce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e005      	b.n	8001fee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
 8001fec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d004      	beq.n	8002016 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00c      	b.n	8002030 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2205      	movs	r2, #5
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002048:	4b8e      	ldr	r3, [pc, #568]	; (8002284 <HAL_DMA_IRQHandler+0x248>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a8e      	ldr	r2, [pc, #568]	; (8002288 <HAL_DMA_IRQHandler+0x24c>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0a9b      	lsrs	r3, r3, #10
 8002054:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2208      	movs	r2, #8
 8002068:	409a      	lsls	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d01a      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d013      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0204 	bic.w	r2, r2, #4
 800208e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	2208      	movs	r2, #8
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2201      	movs	r2, #1
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d012      	beq.n	80020de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2201      	movs	r2, #1
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	f043 0202 	orr.w	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2204      	movs	r2, #4
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d012      	beq.n	8002114 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00b      	beq.n	8002114 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	2204      	movs	r2, #4
 8002102:	409a      	lsls	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	2210      	movs	r2, #16
 800211a:	409a      	lsls	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d043      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d03c      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	2210      	movs	r2, #16
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d018      	beq.n	800217e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d024      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
 800216a:	e01f      	b.n	80021ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
 800217c:	e016      	b.n	80021ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0208 	bic.w	r2, r2, #8
 800219a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2220      	movs	r2, #32
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 808f 	beq.w	80022dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8087 	beq.w	80022dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2220      	movs	r2, #32
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d136      	bne.n	8002254 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0216 	bic.w	r2, r2, #22
 80021f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002204:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_DMA_IRQHandler+0x1da>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0208 	bic.w	r2, r2, #8
 8002224:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	223f      	movs	r2, #63	; 0x3f
 800222c:	409a      	lsls	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002246:	2b00      	cmp	r3, #0
 8002248:	d07e      	beq.n	8002348 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
        }
        return;
 8002252:	e079      	b.n	8002348 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01d      	beq.n	800229e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	2b00      	cmp	r3, #0
 8002276:	d031      	beq.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e02c      	b.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008
 8002288:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d023      	beq.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
 800229c:	e01e      	b.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10f      	bne.n	80022cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0210 	bic.w	r2, r2, #16
 80022ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d032      	beq.n	800234a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d022      	beq.n	8002336 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2205      	movs	r2, #5
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3301      	adds	r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	d307      	bcc.n	8002324 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f2      	bne.n	8002308 <HAL_DMA_IRQHandler+0x2cc>
 8002322:	e000      	b.n	8002326 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002324:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
 8002346:	e000      	b.n	800234a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002348:	bf00      	nop
    }
  }
}
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800236c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b40      	cmp	r3, #64	; 0x40
 800237c:	d108      	bne.n	8002390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800238e:	e007      	b.n	80023a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3b10      	subs	r3, #16
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <DMA_CalcBaseAndBitshift+0x64>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <DMA_CalcBaseAndBitshift+0x68>)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d909      	bls.n	80023ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	1d1a      	adds	r2, r3, #4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	659a      	str	r2, [r3, #88]	; 0x58
 80023ec:	e007      	b.n	80023fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023f6:	f023 0303 	bic.w	r3, r3, #3
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	aaaaaaab 	.word	0xaaaaaaab
 8002414:	0800bab8 	.word	0x0800bab8

08002418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11f      	bne.n	8002472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d856      	bhi.n	80024e6 <DMA_CheckFifoParam+0xce>
 8002438:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <DMA_CheckFifoParam+0x28>)
 800243a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243e:	bf00      	nop
 8002440:	08002451 	.word	0x08002451
 8002444:	08002463 	.word	0x08002463
 8002448:	08002451 	.word	0x08002451
 800244c:	080024e7 	.word	0x080024e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d046      	beq.n	80024ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002460:	e043      	b.n	80024ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800246a:	d140      	bne.n	80024ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002470:	e03d      	b.n	80024ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247a:	d121      	bne.n	80024c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d837      	bhi.n	80024f2 <DMA_CheckFifoParam+0xda>
 8002482:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <DMA_CheckFifoParam+0x70>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	08002499 	.word	0x08002499
 800248c:	0800249f 	.word	0x0800249f
 8002490:	08002499 	.word	0x08002499
 8002494:	080024b1 	.word	0x080024b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	e030      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d025      	beq.n	80024f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ae:	e022      	b.n	80024f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024b8:	d11f      	bne.n	80024fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024be:	e01c      	b.n	80024fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d903      	bls.n	80024ce <DMA_CheckFifoParam+0xb6>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d003      	beq.n	80024d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024cc:	e018      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
      break;
 80024d2:	e015      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e00b      	b.n	80024fe <DMA_CheckFifoParam+0xe6>
      break;
 80024e6:	bf00      	nop
 80024e8:	e00a      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024ea:	bf00      	nop
 80024ec:	e008      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e006      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024f2:	bf00      	nop
 80024f4:	e004      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e002      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;   
 80024fa:	bf00      	nop
 80024fc:	e000      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e159      	b.n	80027e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8148 	bne.w	80027da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255e:	2b02      	cmp	r3, #2
 8002560:	d130      	bne.n	80025c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d017      	beq.n	8002600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a2 	beq.w	80027da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_GPIO_Init+0x2e8>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b54      	ldr	r3, [pc, #336]	; (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_GPIO_Init+0x2ec>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a49      	ldr	r2, [pc, #292]	; (8002800 <HAL_GPIO_Init+0x2f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x202>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a48      	ldr	r2, [pc, #288]	; (8002804 <HAL_GPIO_Init+0x2f4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x1fe>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a47      	ldr	r2, [pc, #284]	; (8002808 <HAL_GPIO_Init+0x2f8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x1fa>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a46      	ldr	r2, [pc, #280]	; (800280c <HAL_GPIO_Init+0x2fc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x1f6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a45      	ldr	r2, [pc, #276]	; (8002810 <HAL_GPIO_Init+0x300>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x1f2>
 80026fe:	2304      	movs	r3, #4
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002702:	2307      	movs	r3, #7
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	; (80027fc <HAL_GPIO_Init+0x2ec>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_GPIO_Init+0x304>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a2f      	ldr	r2, [pc, #188]	; (8002814 <HAL_GPIO_Init+0x304>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_GPIO_Init+0x304>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a24      	ldr	r2, [pc, #144]	; (8002814 <HAL_GPIO_Init+0x304>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_GPIO_Init+0x304>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <HAL_GPIO_Init+0x304>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_GPIO_Init+0x304>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <HAL_GPIO_Init+0x304>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f aea2 	bls.w	800252c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e001      	b.n	800283a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e12b      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe ff5c 	bl	8001760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	; 0x24
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028e0:	f001 f986 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a81      	ldr	r2, [pc, #516]	; (8002af0 <HAL_I2C_Init+0x274>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d807      	bhi.n	8002900 <HAL_I2C_Init+0x84>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a80      	ldr	r2, [pc, #512]	; (8002af4 <HAL_I2C_Init+0x278>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e006      	b.n	800290e <HAL_I2C_Init+0x92>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a7d      	ldr	r2, [pc, #500]	; (8002af8 <HAL_I2C_Init+0x27c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	bf94      	ite	ls
 8002908:	2301      	movls	r3, #1
 800290a:	2300      	movhi	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0e7      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a78      	ldr	r2, [pc, #480]	; (8002afc <HAL_I2C_Init+0x280>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a6a      	ldr	r2, [pc, #424]	; (8002af0 <HAL_I2C_Init+0x274>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d802      	bhi.n	8002950 <HAL_I2C_Init+0xd4>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3301      	adds	r3, #1
 800294e:	e009      	b.n	8002964 <HAL_I2C_Init+0xe8>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a69      	ldr	r2, [pc, #420]	; (8002b00 <HAL_I2C_Init+0x284>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	3301      	adds	r3, #1
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	495c      	ldr	r1, [pc, #368]	; (8002af0 <HAL_I2C_Init+0x274>)
 8002980:	428b      	cmp	r3, r1
 8002982:	d819      	bhi.n	80029b8 <HAL_I2C_Init+0x13c>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e59      	subs	r1, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002998:	400b      	ands	r3, r1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_I2C_Init+0x138>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e59      	subs	r1, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b2:	e051      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b4:	2304      	movs	r3, #4
 80029b6:	e04f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <HAL_I2C_Init+0x168>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e58      	subs	r0, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e012      	b.n	8002a0a <HAL_I2C_Init+0x18e>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Init+0x196>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e022      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10e      	bne.n	8002a38 <HAL_I2C_Init+0x1bc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1e58      	subs	r0, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	440b      	add	r3, r1
 8002a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a36:	e00f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	6809      	ldr	r1, [r1, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6911      	ldr	r1, [r2, #16]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	000186a0 	.word	0x000186a0
 8002af4:	001e847f 	.word	0x001e847f
 8002af8:	003d08ff 	.word	0x003d08ff
 8002afc:	431bde83 	.word	0x431bde83
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b1e:	f7ff f853 	bl	8001bc8 <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	f040 80d9 	bne.w	8002ce4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2319      	movs	r3, #25
 8002b38:	2201      	movs	r2, #1
 8002b3a:	496d      	ldr	r1, [pc, #436]	; (8002cf0 <HAL_I2C_Mem_Write+0x1ec>)
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fa9f 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e0cc      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_I2C_Mem_Write+0x56>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0c5      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d007      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2221      	movs	r2, #33	; 0x21
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4a4d      	ldr	r2, [pc, #308]	; (8002cf4 <HAL_I2C_Mem_Write+0x1f0>)
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bc2:	88f8      	ldrh	r0, [r7, #6]
 8002bc4:	893a      	ldrh	r2, [r7, #8]
 8002bc6:	8979      	ldrh	r1, [r7, #10]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f9be 	bl	8002f54 <I2C_RequestMemoryWrite>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d052      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e081      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fb20 	bl	800322c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d107      	bne.n	8002c0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06b      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d11b      	bne.n	8002c84 <HAL_I2C_Mem_Write+0x180>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d017      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1aa      	bne.n	8002be2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fb0c 	bl	80032ae <I2C_WaitOnBTFFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d107      	bne.n	8002cb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e016      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e000      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ce4:	2302      	movs	r3, #2
  }
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	00100002 	.word	0x00100002
 8002cf4:	ffff0000 	.word	0xffff0000

08002cf8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	460b      	mov	r3, r1
 8002d06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7fe ff5e 	bl	8001bc8 <HAL_GetTick>
 8002d0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	f040 8111 	bne.w	8002f42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2319      	movs	r3, #25
 8002d26:	2201      	movs	r2, #1
 8002d28:	4988      	ldr	r1, [pc, #544]	; (8002f4c <HAL_I2C_IsDeviceReady+0x254>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f9a8 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	e104      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_I2C_IsDeviceReady+0x50>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e0fd      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d007      	beq.n	8002d6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2224      	movs	r2, #36	; 0x24
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a70      	ldr	r2, [pc, #448]	; (8002f50 <HAL_I2C_IsDeviceReady+0x258>)
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f966 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc8:	d103      	bne.n	8002dd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e0b6      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002de4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe feef 	bl	8001bc8 <HAL_GetTick>
 8002dea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e1a:	e025      	b.n	8002e68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e1c:	f7fe fed4 	bl	8001bc8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d302      	bcc.n	8002e32 <HAL_I2C_IsDeviceReady+0x13a>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	22a0      	movs	r2, #160	; 0xa0
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2ba0      	cmp	r3, #160	; 0xa0
 8002e72:	d005      	beq.n	8002e80 <HAL_I2C_IsDeviceReady+0x188>
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_I2C_IsDeviceReady+0x188>
 8002e7a:	7dbb      	ldrb	r3, [r7, #22]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0cd      	beq.n	8002e1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d129      	bne.n	8002eea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2319      	movs	r3, #25
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4921      	ldr	r1, [pc, #132]	; (8002f4c <HAL_I2C_IsDeviceReady+0x254>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f8da 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e036      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e02c      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2319      	movs	r3, #25
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	490f      	ldr	r1, [pc, #60]	; (8002f4c <HAL_I2C_IsDeviceReady+0x254>)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f8b6 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e012      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f4ff af32 	bcc.w	8002d92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	00100002 	.word	0x00100002
 8002f50:	ffff0000 	.word	0xffff0000

08002f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f878 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa4:	d103      	bne.n	8002fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e05f      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	492d      	ldr	r1, [pc, #180]	; (800307c <I2C_RequestMemoryWrite+0x128>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f8b0 	bl	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e04c      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f91a 	bl	800322c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b04      	cmp	r3, #4
 8003004:	d107      	bne.n	8003016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e02b      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003020:	893b      	ldrh	r3, [r7, #8]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	e021      	b.n	8003070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b29b      	uxth	r3, r3
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f8f4 	bl	800322c <I2C_WaitOnTXEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b04      	cmp	r3, #4
 8003050:	d107      	bne.n	8003062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e005      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003066:	893b      	ldrh	r3, [r7, #8]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	00010002 	.word	0x00010002

08003080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003090:	e025      	b.n	80030de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d021      	beq.n	80030de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7fe fd95 	bl	8001bc8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d116      	bne.n	80030de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e023      	b.n	8003126 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10d      	bne.n	8003104 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	e00c      	b.n	800311e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	429a      	cmp	r2, r3
 8003122:	d0b6      	beq.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800313c:	e051      	b.n	80031e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314c:	d123      	bne.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003166:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e046      	b.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d021      	beq.n	80031e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7fe fd13 	bl	8001bc8 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d116      	bne.n	80031e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e020      	b.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10c      	bne.n	8003206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	43da      	mvns	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	e00b      	b.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	43da      	mvns	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d18d      	bne.n	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003238:	e02d      	b.n	8003296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f878 	bl	8003330 <I2C_IsAcknowledgeFailed>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e02d      	b.n	80032a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d021      	beq.n	8003296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003252:	f7fe fcb9 	bl	8001bc8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	429a      	cmp	r2, r3
 8003260:	d302      	bcc.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d116      	bne.n	8003296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f043 0220 	orr.w	r2, r3, #32
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e007      	b.n	80032a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b80      	cmp	r3, #128	; 0x80
 80032a2:	d1ca      	bne.n	800323a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032ba:	e02d      	b.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f837 	bl	8003330 <I2C_IsAcknowledgeFailed>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e02d      	b.n	8003328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d021      	beq.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d4:	f7fe fc78 	bl	8001bc8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d302      	bcc.n	80032ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d116      	bne.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e007      	b.n	8003328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d1ca      	bne.n	80032bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003346:	d11b      	bne.n	8003380 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003350:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f043 0204 	orr.w	r2, r3, #4
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e267      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d075      	beq.n	800349a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d00c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ba:	4b85      	ldr	r3, [pc, #532]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d112      	bne.n	80033ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c6:	4b82      	ldr	r3, [pc, #520]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d2:	d10b      	bne.n	80033ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05b      	beq.n	8003498 <HAL_RCC_OscConfig+0x108>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d157      	bne.n	8003498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e242      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f4:	d106      	bne.n	8003404 <HAL_RCC_OscConfig+0x74>
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a75      	ldr	r2, [pc, #468]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e01d      	b.n	8003440 <HAL_RCC_OscConfig+0xb0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0x98>
 800340e:	4b70      	ldr	r3, [pc, #448]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6f      	ldr	r2, [pc, #444]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6c      	ldr	r2, [pc, #432]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0xb0>
 8003428:	4b69      	ldr	r3, [pc, #420]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a68      	ldr	r2, [pc, #416]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 800342e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b66      	ldr	r3, [pc, #408]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a65      	ldr	r2, [pc, #404]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 800343a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fbbe 	bl	8001bc8 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe fbba 	bl	8001bc8 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e207      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0xc0>
 800346e:	e014      	b.n	800349a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fbaa 	bl	8001bc8 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003478:	f7fe fba6 	bl	8001bc8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1f3      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	4b51      	ldr	r3, [pc, #324]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0xe8>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d063      	beq.n	800356e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a6:	4b4a      	ldr	r3, [pc, #296]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d11c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034be:	4b44      	ldr	r3, [pc, #272]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d116      	bne.n	80034f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x152>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e1c7      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4937      	ldr	r1, [pc, #220]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	e03a      	b.n	800356e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003500:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <HAL_RCC_OscConfig+0x244>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe fb5f 	bl	8001bc8 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350e:	f7fe fb5b 	bl	8001bc8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1a8      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4925      	ldr	r1, [pc, #148]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_OscConfig+0x244>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe fb3e 	bl	8001bc8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003550:	f7fe fb3a 	bl	8001bc8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e187      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003562:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d036      	beq.n	80035e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_RCC_OscConfig+0x248>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe fb1e 	bl	8001bc8 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003590:	f7fe fb1a 	bl	8001bc8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e167      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x240>)
 80035a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x200>
 80035ae:	e01b      	b.n	80035e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCC_OscConfig+0x248>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fe fb07 	bl	8001bc8 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	e00e      	b.n	80035dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035be:	f7fe fb03 	bl	8001bc8 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d907      	bls.n	80035dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e150      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
 80035d0:	40023800 	.word	0x40023800
 80035d4:	42470000 	.word	0x42470000
 80035d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	4b88      	ldr	r3, [pc, #544]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 80035de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ea      	bne.n	80035be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8097 	beq.w	8003724 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b81      	ldr	r3, [pc, #516]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10f      	bne.n	8003626 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	4b7d      	ldr	r3, [pc, #500]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	4a7c      	ldr	r2, [pc, #496]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003614:	6413      	str	r3, [r2, #64]	; 0x40
 8003616:	4b7a      	ldr	r3, [pc, #488]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b77      	ldr	r3, [pc, #476]	; (8003804 <HAL_RCC_OscConfig+0x474>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003632:	4b74      	ldr	r3, [pc, #464]	; (8003804 <HAL_RCC_OscConfig+0x474>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a73      	ldr	r2, [pc, #460]	; (8003804 <HAL_RCC_OscConfig+0x474>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7fe fac3 	bl	8001bc8 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003646:	f7fe fabf 	bl	8001bc8 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e10c      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_RCC_OscConfig+0x474>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x2ea>
 800366c:	4b64      	ldr	r3, [pc, #400]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	4a63      	ldr	r2, [pc, #396]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6713      	str	r3, [r2, #112]	; 0x70
 8003678:	e01c      	b.n	80036b4 <HAL_RCC_OscConfig+0x324>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b05      	cmp	r3, #5
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x30c>
 8003682:	4b5f      	ldr	r3, [pc, #380]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a5e      	ldr	r2, [pc, #376]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	6713      	str	r3, [r2, #112]	; 0x70
 800368e:	4b5c      	ldr	r3, [pc, #368]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	4a5b      	ldr	r2, [pc, #364]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6713      	str	r3, [r2, #112]	; 0x70
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0x324>
 800369c:	4b58      	ldr	r3, [pc, #352]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	4a57      	ldr	r2, [pc, #348]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	6713      	str	r3, [r2, #112]	; 0x70
 80036a8:	4b55      	ldr	r3, [pc, #340]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	4a54      	ldr	r2, [pc, #336]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 80036ae:	f023 0304 	bic.w	r3, r3, #4
 80036b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fe fa84 	bl	8001bc8 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fe fa80 	bl	8001bc8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0cb      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	4b49      	ldr	r3, [pc, #292]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ee      	beq.n	80036c4 <HAL_RCC_OscConfig+0x334>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e8:	f7fe fa6e 	bl	8001bc8 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fe fa6a 	bl	8001bc8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e0b5      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ee      	bne.n	80036f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003718:	4b39      	ldr	r3, [pc, #228]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4a38      	ldr	r2, [pc, #224]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 800371e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003722:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80a1 	beq.w	8003870 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372e:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b08      	cmp	r3, #8
 8003738:	d05c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d141      	bne.n	80037c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b31      	ldr	r3, [pc, #196]	; (8003808 <HAL_RCC_OscConfig+0x478>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fe fa3e 	bl	8001bc8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe fa3a 	bl	8001bc8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e087      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003762:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	019b      	lsls	r3, r3, #6
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	3b01      	subs	r3, #1
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	491b      	ldr	r1, [pc, #108]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x478>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7fe fa13 	bl	8001bc8 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a6:	f7fe fa0f 	bl	8001bc8 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e05c      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x416>
 80037c4:	e054      	b.n	8003870 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <HAL_RCC_OscConfig+0x478>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe f9fc 	bl	8001bc8 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fe f9f8 	bl	8001bc8 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e045      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_OscConfig+0x470>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x444>
 80037f2:	e03d      	b.n	8003870 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d107      	bne.n	800380c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e038      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
 8003800:	40023800 	.word	0x40023800
 8003804:	40007000 	.word	0x40007000
 8003808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_RCC_OscConfig+0x4ec>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d028      	beq.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d121      	bne.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d11a      	bne.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800383c:	4013      	ands	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003844:	4293      	cmp	r3, r2
 8003846:	d111      	bne.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	3b01      	subs	r3, #1
 8003856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d107      	bne.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800

08003880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0cc      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003894:	4b68      	ldr	r3, [pc, #416]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d90c      	bls.n	80038bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b65      	ldr	r3, [pc, #404]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0b8      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a58      	ldr	r2, [pc, #352]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a52      	ldr	r2, [pc, #328]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	494d      	ldr	r1, [pc, #308]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d044      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d119      	bne.n	800395e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e07f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d003      	beq.n	800393e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393a:	2b03      	cmp	r3, #3
 800393c:	d107      	bne.n	800394e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e06f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e067      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 0203 	bic.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4934      	ldr	r1, [pc, #208]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	4313      	orrs	r3, r2
 800396e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003970:	f7fe f92a 	bl	8001bc8 <HAL_GetTick>
 8003974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	e00a      	b.n	800398e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003978:	f7fe f926 	bl	8001bc8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e04f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 020c 	and.w	r2, r3, #12
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	429a      	cmp	r2, r3
 800399e:	d1eb      	bne.n	8003978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a0:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d20c      	bcs.n	80039c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e032      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	490e      	ldr	r1, [pc, #56]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a06:	f000 f821 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	490a      	ldr	r1, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	5ccb      	ldrb	r3, [r1, r3]
 8003a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd ffba 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023c00 	.word	0x40023c00
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	0800baa0 	.word	0x0800baa0
 8003a44:	20000008 	.word	0x20000008
 8003a48:	2000000c 	.word	0x2000000c

08003a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a50:	b090      	sub	sp, #64	; 0x40
 8003a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
 8003a58:	2300      	movs	r3, #0
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d00d      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x40>
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	f200 80a1 	bhi.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x34>
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a7e:	e09b      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a80:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a84:	e09b      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a86:	4b53      	ldr	r3, [pc, #332]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a8a:	e098      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a8c:	4b4f      	ldr	r3, [pc, #316]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a96:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d028      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	099b      	lsrs	r3, r3, #6
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	627a      	str	r2, [r7, #36]	; 0x24
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ab8:	fb03 f201 	mul.w	r2, r3, r1
 8003abc:	2300      	movs	r3, #0
 8003abe:	fb00 f303 	mul.w	r3, r0, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	4a43      	ldr	r2, [pc, #268]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac6:	fba0 1202 	umull	r1, r2, r0, r2
 8003aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003acc:	460a      	mov	r2, r1
 8003ace:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad2:	4413      	add	r3, r2
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad8:	2200      	movs	r2, #0
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	61fa      	str	r2, [r7, #28]
 8003ade:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ae6:	f7fc fb7b 	bl	80001e0 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4613      	mov	r3, r2
 8003af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af2:	e053      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af4:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	2200      	movs	r2, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	617a      	str	r2, [r7, #20]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b06:	f04f 0b00 	mov.w	fp, #0
 8003b0a:	4652      	mov	r2, sl
 8003b0c:	465b      	mov	r3, fp
 8003b0e:	f04f 0000 	mov.w	r0, #0
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	0159      	lsls	r1, r3, #5
 8003b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b1c:	0150      	lsls	r0, r2, #5
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	ebb2 080a 	subs.w	r8, r2, sl
 8003b26:	eb63 090b 	sbc.w	r9, r3, fp
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b3e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b42:	eb63 0509 	sbc.w	r5, r3, r9
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	00eb      	lsls	r3, r5, #3
 8003b50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b54:	00e2      	lsls	r2, r4, #3
 8003b56:	4614      	mov	r4, r2
 8003b58:	461d      	mov	r5, r3
 8003b5a:	eb14 030a 	adds.w	r3, r4, sl
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	eb45 030b 	adc.w	r3, r5, fp
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b72:	4629      	mov	r1, r5
 8003b74:	028b      	lsls	r3, r1, #10
 8003b76:	4621      	mov	r1, r4
 8003b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	028a      	lsls	r2, r1, #10
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b86:	2200      	movs	r2, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	60fa      	str	r2, [r7, #12]
 8003b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b90:	f7fc fb26 	bl	80001e0 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4613      	mov	r3, r2
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bb6:	e002      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3740      	adds	r7, #64	; 0x40
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	017d7840 	.word	0x017d7840

08003bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000008 	.word	0x20000008

08003bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0a9b      	lsrs	r3, r3, #10
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	0800bab0 	.word	0x0800bab0

08003c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c1c:	f7ff ffdc 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0b5b      	lsrs	r3, r3, #13
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4903      	ldr	r1, [pc, #12]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	0800bab0 	.word	0x0800bab0

08003c40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	220f      	movs	r2, #15
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_RCC_GetClockConfig+0x5c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0203 	and.w	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <HAL_RCC_GetClockConfig+0x5c>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_RCC_GetClockConfig+0x5c>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_RCC_GetClockConfig+0x5c>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	08db      	lsrs	r3, r3, #3
 8003c7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_RCC_GetClockConfig+0x60>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0207 	and.w	r2, r3, #7
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40023c00 	.word	0x40023c00

08003ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e07b      	b.n	8003dae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d108      	bne.n	8003cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc6:	d009      	beq.n	8003cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	61da      	str	r2, [r3, #28]
 8003cce:	e005      	b.n	8003cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fd7a 	bl	80017f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d60:	ea42 0103 	orr.w	r1, r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0104 	and.w	r1, r3, #4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f003 0210 	and.w	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b088      	sub	sp, #32
 8003dba:	af02      	add	r7, sp, #8
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd2:	d112      	bne.n	8003dfa <HAL_SPI_Receive+0x44>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10e      	bne.n	8003dfa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2204      	movs	r2, #4
 8003de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f8f1 	bl	8003fd8 <HAL_SPI_TransmitReceive>
 8003df6:	4603      	mov	r3, r0
 8003df8:	e0ea      	b.n	8003fd0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_SPI_Receive+0x52>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e0e3      	b.n	8003fd0 <HAL_SPI_Receive+0x21a>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e10:	f7fd feda 	bl	8001bc8 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d002      	beq.n	8003e28 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
 8003e24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e26:	e0ca      	b.n	8003fbe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_Receive+0x7e>
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e38:	e0c1      	b.n	8003fbe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	88fa      	ldrh	r2, [r7, #6]
 8003e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e80:	d10f      	bne.n	8003ea2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d007      	beq.n	8003ec0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d162      	bne.n	8003f8e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ec8:	e02e      	b.n	8003f28 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d115      	bne.n	8003f04 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f103 020c 	add.w	r2, r3, #12
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f02:	e011      	b.n	8003f28 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f04:	f7fd fe60 	bl	8001bc8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d803      	bhi.n	8003f1c <HAL_SPI_Receive+0x166>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d102      	bne.n	8003f22 <HAL_SPI_Receive+0x16c>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f26:	e04a      	b.n	8003fbe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1cb      	bne.n	8003eca <HAL_SPI_Receive+0x114>
 8003f32:	e031      	b.n	8003f98 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d113      	bne.n	8003f6a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	b292      	uxth	r2, r2
 8003f4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	1c9a      	adds	r2, r3, #2
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f68:	e011      	b.n	8003f8e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f6a:	f7fd fe2d 	bl	8001bc8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d803      	bhi.n	8003f82 <HAL_SPI_Receive+0x1cc>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d102      	bne.n	8003f88 <HAL_SPI_Receive+0x1d2>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f8c:	e017      	b.n	8003fbe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1cd      	bne.n	8003f34 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	6839      	ldr	r1, [r7, #0]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fa45 	bl	800442c <SPI_EndRxTransaction>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
 8003fba:	e000      	b.n	8003fbe <HAL_SPI_Receive+0x208>
  }

error :
 8003fbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	; 0x30
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x26>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e18a      	b.n	8004314 <HAL_SPI_TransmitReceive+0x33c>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004006:	f7fd fddf 	bl	8001bc8 <HAL_GetTick>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800401c:	887b      	ldrh	r3, [r7, #2]
 800401e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004024:	2b01      	cmp	r3, #1
 8004026:	d00f      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x70>
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402e:	d107      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d103      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x68>
 8004038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800403c:	2b04      	cmp	r3, #4
 800403e:	d003      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004040:	2302      	movs	r3, #2
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004046:	e15b      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_SPI_TransmitReceive+0x82>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_SPI_TransmitReceive+0x82>
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d103      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004060:	e14e      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b04      	cmp	r3, #4
 800406c:	d003      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2205      	movs	r2, #5
 8004072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	887a      	ldrh	r2, [r7, #2]
 8004086:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	887a      	ldrh	r2, [r7, #2]
 800409e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d007      	beq.n	80040ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d178      	bne.n	80041c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_SPI_TransmitReceive+0x10a>
 80040dc:	8b7b      	ldrh	r3, [r7, #26]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d166      	bne.n	80041b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	1c9a      	adds	r2, r3, #2
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004106:	e053      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	d11b      	bne.n	800414e <HAL_SPI_TransmitReceive+0x176>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d016      	beq.n	800414e <HAL_SPI_TransmitReceive+0x176>
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d113      	bne.n	800414e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	1c9a      	adds	r2, r3, #2
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d119      	bne.n	8004190 <HAL_SPI_TransmitReceive+0x1b8>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d014      	beq.n	8004190 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	b292      	uxth	r2, r2
 8004172:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	1c9a      	adds	r2, r3, #2
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800418c:	2301      	movs	r3, #1
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004190:	f7fd fd1a 	bl	8001bc8 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800419c:	429a      	cmp	r2, r3
 800419e:	d807      	bhi.n	80041b0 <HAL_SPI_TransmitReceive+0x1d8>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d003      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041ae:	e0a7      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1a6      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x130>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1a1      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x130>
 80041c4:	e07c      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x1fc>
 80041ce:	8b7b      	ldrh	r3, [r7, #26]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d16b      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041fa:	e057      	b.n	80042ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d11c      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x26c>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d017      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x26c>
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	2b01      	cmp	r3, #1
 8004218:	d114      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	330c      	adds	r3, #12
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b01      	cmp	r3, #1
 8004250:	d119      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x2ae>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d014      	beq.n	8004286 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004282:	2301      	movs	r3, #1
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004286:	f7fd fc9f 	bl	8001bc8 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004292:	429a      	cmp	r2, r3
 8004294:	d803      	bhi.n	800429e <HAL_SPI_TransmitReceive+0x2c6>
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x2cc>
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042aa:	e029      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1a2      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x224>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d19d      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f917 	bl	80044f8 <SPI_EndRxTxTransaction>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d006      	beq.n	80042de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042dc:	e010      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	e000      	b.n	8004300 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004314:	4618      	mov	r0, r3
 8004316:	3730      	adds	r7, #48	; 0x30
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800432c:	f7fd fc4c 	bl	8001bc8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	4413      	add	r3, r2
 800433a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800433c:	f7fd fc44 	bl	8001bc8 <HAL_GetTick>
 8004340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004342:	4b39      	ldr	r3, [pc, #228]	; (8004428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	015b      	lsls	r3, r3, #5
 8004348:	0d1b      	lsrs	r3, r3, #20
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004352:	e054      	b.n	80043fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d050      	beq.n	80043fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800435c:	f7fd fc34 	bl	8001bc8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	429a      	cmp	r2, r3
 800436a:	d902      	bls.n	8004372 <SPI_WaitFlagStateUntilTimeout+0x56>
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d13d      	bne.n	80043ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438a:	d111      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004394:	d004      	beq.n	80043a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d107      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b8:	d10f      	bne.n	80043da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e017      	b.n	800441e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	429a      	cmp	r2, r3
 800441a:	d19b      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000008 	.word	0x20000008

0800442c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004440:	d111      	bne.n	8004466 <SPI_EndRxTransaction+0x3a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444a:	d004      	beq.n	8004456 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004454:	d107      	bne.n	8004466 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004464:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800446e:	d12a      	bne.n	80044c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004478:	d012      	beq.n	80044a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2200      	movs	r2, #0
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff ff49 	bl	800431c <SPI_WaitFlagStateUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d02d      	beq.n	80044ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e026      	b.n	80044ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2101      	movs	r1, #1
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff ff36 	bl	800431c <SPI_WaitFlagStateUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01a      	beq.n	80044ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e013      	b.n	80044ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2101      	movs	r1, #1
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff ff23 	bl	800431c <SPI_WaitFlagStateUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e000      	b.n	80044ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <SPI_EndRxTxTransaction+0x7c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <SPI_EndRxTxTransaction+0x80>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	0d5b      	lsrs	r3, r3, #21
 8004510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004522:	d112      	bne.n	800454a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff fef4 	bl	800431c <SPI_WaitFlagStateUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e00f      	b.n	800456a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	3b01      	subs	r3, #1
 8004554:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d0f2      	beq.n	800454a <SPI_EndRxTxTransaction+0x52>
 8004564:	e000      	b.n	8004568 <SPI_EndRxTxTransaction+0x70>
        break;
 8004566:	bf00      	nop
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000008 	.word	0x20000008
 8004578:	165e9f81 	.word	0x165e9f81

0800457c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e041      	b.n	8004612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fd f96c 	bl	8001880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f000 fefe 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d001      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e044      	b.n	80046be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <HAL_TIM_Base_Start_IT+0xb0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465e:	d013      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a19      	ldr	r2, [pc, #100]	; (80046d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <HAL_TIM_Base_Start_IT+0xc0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d111      	bne.n	80046ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d010      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	e007      	b.n	80046bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40014000 	.word	0x40014000

080046e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e041      	b.n	8004776 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f839 	bl	800477e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 fe4c 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e022      	b.n	8004806 <HAL_TIM_PWM_Start_DMA+0x72>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d109      	bne.n	80047da <HAL_TIM_PWM_Start_DMA+0x46>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	e015      	b.n	8004806 <HAL_TIM_PWM_Start_DMA+0x72>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d109      	bne.n	80047f4 <HAL_TIM_PWM_Start_DMA+0x60>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e008      	b.n	8004806 <HAL_TIM_PWM_Start_DMA+0x72>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800480a:	2302      	movs	r3, #2
 800480c:	e15d      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d109      	bne.n	8004828 <HAL_TIM_PWM_Start_DMA+0x94>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e022      	b.n	800486e <HAL_TIM_PWM_Start_DMA+0xda>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d109      	bne.n	8004842 <HAL_TIM_PWM_Start_DMA+0xae>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	e015      	b.n	800486e <HAL_TIM_PWM_Start_DMA+0xda>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d109      	bne.n	800485c <HAL_TIM_PWM_Start_DMA+0xc8>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e008      	b.n	800486e <HAL_TIM_PWM_Start_DMA+0xda>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d024      	beq.n	80048bc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <HAL_TIM_PWM_Start_DMA+0xee>
 8004878:	887b      	ldrh	r3, [r7, #2]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e123      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d104      	bne.n	8004892 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004890:	e016      	b.n	80048c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b04      	cmp	r3, #4
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a0:	e00e      	b.n	80048c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b0:	e006      	b.n	80048c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ba:	e001      	b.n	80048c0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e104      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	f200 80ae 	bhi.w	8004a24 <HAL_TIM_PWM_Start_DMA+0x290>
 80048c8:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	08004905 	.word	0x08004905
 80048d4:	08004a25 	.word	0x08004a25
 80048d8:	08004a25 	.word	0x08004a25
 80048dc:	08004a25 	.word	0x08004a25
 80048e0:	0800494d 	.word	0x0800494d
 80048e4:	08004a25 	.word	0x08004a25
 80048e8:	08004a25 	.word	0x08004a25
 80048ec:	08004a25 	.word	0x08004a25
 80048f0:	08004995 	.word	0x08004995
 80048f4:	08004a25 	.word	0x08004a25
 80048f8:	08004a25 	.word	0x08004a25
 80048fc:	08004a25 	.word	0x08004a25
 8004900:	080049dd 	.word	0x080049dd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	4a72      	ldr	r2, [pc, #456]	; (8004ad4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	4a71      	ldr	r2, [pc, #452]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004912:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	4a70      	ldr	r2, [pc, #448]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x348>)
 800491a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3334      	adds	r3, #52	; 0x34
 8004928:	461a      	mov	r2, r3
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	f7fd fb0c 	bl	8001f48 <HAL_DMA_Start_IT>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e0c7      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	60da      	str	r2, [r3, #12]
      break;
 800494a:	e06e      	b.n	8004a2a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	4a60      	ldr	r2, [pc, #384]	; (8004ad4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004952:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	4a5f      	ldr	r2, [pc, #380]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800495a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004962:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3338      	adds	r3, #56	; 0x38
 8004970:	461a      	mov	r2, r3
 8004972:	887b      	ldrh	r3, [r7, #2]
 8004974:	f7fd fae8 	bl	8001f48 <HAL_DMA_Start_IT>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0a3      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004990:	60da      	str	r2, [r3, #12]
      break;
 8004992:	e04a      	b.n	8004a2a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	4a4e      	ldr	r2, [pc, #312]	; (8004ad4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800499a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	4a4d      	ldr	r2, [pc, #308]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	4a4c      	ldr	r2, [pc, #304]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x348>)
 80049aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	333c      	adds	r3, #60	; 0x3c
 80049b8:	461a      	mov	r2, r3
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	f7fd fac4 	bl	8001f48 <HAL_DMA_Start_IT>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d8:	60da      	str	r2, [r3, #12]
      break;
 80049da:	e026      	b.n	8004a2a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	4a3c      	ldr	r2, [pc, #240]	; (8004ad4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80049e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	4a3b      	ldr	r2, [pc, #236]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80049ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	4a3a      	ldr	r2, [pc, #232]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x348>)
 80049f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3340      	adds	r3, #64	; 0x40
 8004a00:	461a      	mov	r2, r3
 8004a02:	887b      	ldrh	r3, [r7, #2]
 8004a04:	f7fd faa0 	bl	8001f48 <HAL_DMA_Start_IT>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e05b      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a20:	60da      	str	r2, [r3, #12]
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	75fb      	strb	r3, [r7, #23]
      break;
 8004a28:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d14b      	bne.n	8004ac8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2201      	movs	r2, #1
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 ff65 	bl	8005908 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a56:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d018      	beq.n	8004a94 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6a:	d013      	beq.n	8004a94 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1c      	ldr	r2, [pc, #112]	; (8004ae4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00e      	beq.n	8004a94 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <HAL_TIM_PWM_Start_DMA+0x358>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d111      	bne.n	8004ab8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b06      	cmp	r3, #6
 8004aa4:	d010      	beq.n	8004ac8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab6:	e007      	b.n	8004ac8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	080052ad 	.word	0x080052ad
 8004ad8:	08005355 	.word	0x08005355
 8004adc:	0800521b 	.word	0x0800521b
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40014000 	.word	0x40014000

08004af4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d855      	bhi.n	8004bb4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004bb5 	.word	0x08004bb5
 8004b18:	08004bb5 	.word	0x08004bb5
 8004b1c:	08004bb5 	.word	0x08004bb5
 8004b20:	08004b61 	.word	0x08004b61
 8004b24:	08004bb5 	.word	0x08004bb5
 8004b28:	08004bb5 	.word	0x08004bb5
 8004b2c:	08004bb5 	.word	0x08004bb5
 8004b30:	08004b7d 	.word	0x08004b7d
 8004b34:	08004bb5 	.word	0x08004bb5
 8004b38:	08004bb5 	.word	0x08004bb5
 8004b3c:	08004bb5 	.word	0x08004bb5
 8004b40:	08004b99 	.word	0x08004b99
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fd fa4d 	bl	8001ff8 <HAL_DMA_Abort_IT>
      break;
 8004b5e:	e02c      	b.n	8004bba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fd fa3f 	bl	8001ff8 <HAL_DMA_Abort_IT>
      break;
 8004b7a:	e01e      	b.n	8004bba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd fa31 	bl	8001ff8 <HAL_DMA_Abort_IT>
      break;
 8004b96:	e010      	b.n	8004bba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ba6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fd fa23 	bl	8001ff8 <HAL_DMA_Abort_IT>
      break;
 8004bb2:	e002      	b.n	8004bba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d157      	bne.n	8004c70 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fe9d 	bl	8005908 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2a      	ldr	r2, [pc, #168]	; (8004c7c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d117      	bne.n	8004c08 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6a1a      	ldr	r2, [r3, #32]
 8004bde:	f241 1311 	movw	r3, #4369	; 0x1111
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10f      	bne.n	8004c08 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6a1a      	ldr	r2, [r3, #32]
 8004bee:	f240 4344 	movw	r3, #1092	; 0x444
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10f      	bne.n	8004c38 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	f240 4344 	movw	r3, #1092	; 0x444
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d107      	bne.n	8004c38 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d104      	bne.n	8004c48 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c46:	e013      	b.n	8004c70 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d104      	bne.n	8004c58 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c56:	e00b      	b.n	8004c70 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d104      	bne.n	8004c68 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c66:	e003      	b.n	8004c70 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000

08004c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d122      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d11b      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0202 	mvn.w	r2, #2
 8004cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa77 	bl	80051b6 <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fa69 	bl	80051a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fa7a 	bl	80051ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d122      	bne.n	8004d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d11b      	bne.n	8004d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0204 	mvn.w	r2, #4
 8004d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa4d 	bl	80051b6 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa3f 	bl	80051a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa50 	bl	80051ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d122      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d11b      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0208 	mvn.w	r2, #8
 8004d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2204      	movs	r2, #4
 8004d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fa23 	bl	80051b6 <HAL_TIM_IC_CaptureCallback>
 8004d70:	e005      	b.n	8004d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa15 	bl	80051a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fa26 	bl	80051ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b10      	cmp	r3, #16
 8004d90:	d122      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d11b      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0210 	mvn.w	r2, #16
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2208      	movs	r2, #8
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f9f9 	bl	80051b6 <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9eb 	bl	80051a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f9fc 	bl	80051ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10e      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d107      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0201 	mvn.w	r2, #1
 8004dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc fc6a 	bl	80016d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	d10e      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b80      	cmp	r3, #128	; 0x80
 8004e1e:	d107      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fe0a 	bl	8005a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d10e      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9cb 	bl	80051f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d10e      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d107      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0220 	mvn.w	r2, #32
 8004e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fdd4 	bl	8005a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e0ae      	b.n	800500c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	f200 809f 	bhi.w	8004ffc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004ffd 	.word	0x08004ffd
 8004ecc:	08004ffd 	.word	0x08004ffd
 8004ed0:	08004ffd 	.word	0x08004ffd
 8004ed4:	08004f39 	.word	0x08004f39
 8004ed8:	08004ffd 	.word	0x08004ffd
 8004edc:	08004ffd 	.word	0x08004ffd
 8004ee0:	08004ffd 	.word	0x08004ffd
 8004ee4:	08004f7b 	.word	0x08004f7b
 8004ee8:	08004ffd 	.word	0x08004ffd
 8004eec:	08004ffd 	.word	0x08004ffd
 8004ef0:	08004ffd 	.word	0x08004ffd
 8004ef4:	08004fbb 	.word	0x08004fbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fadc 	bl	80054bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0208 	orr.w	r2, r2, #8
 8004f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0204 	bic.w	r2, r2, #4
 8004f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6999      	ldr	r1, [r3, #24]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	619a      	str	r2, [r3, #24]
      break;
 8004f36:	e064      	b.n	8005002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fb22 	bl	8005588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6999      	ldr	r1, [r3, #24]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	021a      	lsls	r2, r3, #8
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	619a      	str	r2, [r3, #24]
      break;
 8004f78:	e043      	b.n	8005002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fb6d 	bl	8005660 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0208 	orr.w	r2, r2, #8
 8004f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0204 	bic.w	r2, r2, #4
 8004fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	61da      	str	r2, [r3, #28]
      break;
 8004fb8:	e023      	b.n	8005002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fbb7 	bl	8005734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69d9      	ldr	r1, [r3, #28]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	021a      	lsls	r2, r3, #8
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	61da      	str	r2, [r3, #28]
      break;
 8004ffa:	e002      	b.n	8005002 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8005000:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800500a:	7dfb      	ldrb	r3, [r7, #23]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_TIM_ConfigClockSource+0x1c>
 800502c:	2302      	movs	r3, #2
 800502e:	e0b4      	b.n	800519a <HAL_TIM_ConfigClockSource+0x186>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800504e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005068:	d03e      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0xd4>
 800506a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506e:	f200 8087 	bhi.w	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	f000 8086 	beq.w	8005186 <HAL_TIM_ConfigClockSource+0x172>
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507e:	d87f      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b70      	cmp	r3, #112	; 0x70
 8005082:	d01a      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0xa6>
 8005084:	2b70      	cmp	r3, #112	; 0x70
 8005086:	d87b      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005088:	2b60      	cmp	r3, #96	; 0x60
 800508a:	d050      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x11a>
 800508c:	2b60      	cmp	r3, #96	; 0x60
 800508e:	d877      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b50      	cmp	r3, #80	; 0x50
 8005092:	d03c      	beq.n	800510e <HAL_TIM_ConfigClockSource+0xfa>
 8005094:	2b50      	cmp	r3, #80	; 0x50
 8005096:	d873      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d058      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x13a>
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d86f      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 80050a0:	2b30      	cmp	r3, #48	; 0x30
 80050a2:	d064      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050a4:	2b30      	cmp	r3, #48	; 0x30
 80050a6:	d86b      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d060      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d867      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d05c      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d05a      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050b8:	e062      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6899      	ldr	r1, [r3, #8]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f000 fbfd 	bl	80058c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	609a      	str	r2, [r3, #8]
      break;
 80050e6:	e04f      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	6899      	ldr	r1, [r3, #8]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f000 fbe6 	bl	80058c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800510a:	609a      	str	r2, [r3, #8]
      break;
 800510c:	e03c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	461a      	mov	r2, r3
 800511c:	f000 fb5a 	bl	80057d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2150      	movs	r1, #80	; 0x50
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fbb3 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 800512c:	e02c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	461a      	mov	r2, r3
 800513c:	f000 fb79 	bl	8005832 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2160      	movs	r1, #96	; 0x60
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fba3 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 800514c:	e01c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	461a      	mov	r2, r3
 800515c:	f000 fb3a 	bl	80057d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2140      	movs	r1, #64	; 0x40
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fb93 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 800516c:	e00c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f000 fb8a 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 800517e:	e003      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
      break;
 8005184:	e000      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d107      	bne.n	8005242 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005240:	e02a      	b.n	8005298 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	429a      	cmp	r2, r3
 800524a:	d107      	bne.n	800525c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2202      	movs	r2, #2
 8005250:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800525a:	e01d      	b.n	8005298 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d107      	bne.n	8005276 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2204      	movs	r2, #4
 800526a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005274:	e010      	b.n	8005298 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d107      	bne.n	8005290 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2208      	movs	r2, #8
 8005284:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800528e:	e003      	b.n	8005298 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff ffb4 	bl	8005206 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d10b      	bne.n	80052dc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d136      	bne.n	8005340 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052da:	e031      	b.n	8005340 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d10b      	bne.n	80052fe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2202      	movs	r2, #2
 80052ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d125      	bne.n	8005340 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fc:	e020      	b.n	8005340 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	429a      	cmp	r2, r3
 8005306:	d10b      	bne.n	8005320 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2204      	movs	r2, #4
 800530c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d114      	bne.n	8005340 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800531e:	e00f      	b.n	8005340 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	d10a      	bne.n	8005340 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2208      	movs	r2, #8
 800532e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff ff42 	bl	80051ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d103      	bne.n	8005374 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	771a      	strb	r2, [r3, #28]
 8005372:	e019      	b.n	80053a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d103      	bne.n	8005386 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2202      	movs	r2, #2
 8005382:	771a      	strb	r2, [r3, #28]
 8005384:	e010      	b.n	80053a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d103      	bne.n	8005398 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2204      	movs	r2, #4
 8005394:	771a      	strb	r2, [r3, #28]
 8005396:	e007      	b.n	80053a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d102      	bne.n	80053a8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2208      	movs	r2, #8
 80053a6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff ff18 	bl	80051de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a34      	ldr	r2, [pc, #208]	; (80054a0 <TIM_Base_SetConfig+0xe4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00f      	beq.n	80053f4 <TIM_Base_SetConfig+0x38>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d00b      	beq.n	80053f4 <TIM_Base_SetConfig+0x38>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a31      	ldr	r2, [pc, #196]	; (80054a4 <TIM_Base_SetConfig+0xe8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <TIM_Base_SetConfig+0x38>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a30      	ldr	r2, [pc, #192]	; (80054a8 <TIM_Base_SetConfig+0xec>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_Base_SetConfig+0x38>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a2f      	ldr	r2, [pc, #188]	; (80054ac <TIM_Base_SetConfig+0xf0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d108      	bne.n	8005406 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <TIM_Base_SetConfig+0xe4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01b      	beq.n	8005446 <TIM_Base_SetConfig+0x8a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005414:	d017      	beq.n	8005446 <TIM_Base_SetConfig+0x8a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <TIM_Base_SetConfig+0xe8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <TIM_Base_SetConfig+0x8a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <TIM_Base_SetConfig+0xec>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00f      	beq.n	8005446 <TIM_Base_SetConfig+0x8a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a20      	ldr	r2, [pc, #128]	; (80054ac <TIM_Base_SetConfig+0xf0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00b      	beq.n	8005446 <TIM_Base_SetConfig+0x8a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <TIM_Base_SetConfig+0xf4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d007      	beq.n	8005446 <TIM_Base_SetConfig+0x8a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <TIM_Base_SetConfig+0xf8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d003      	beq.n	8005446 <TIM_Base_SetConfig+0x8a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <TIM_Base_SetConfig+0xfc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d108      	bne.n	8005458 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <TIM_Base_SetConfig+0xe4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d103      	bne.n	800548c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	615a      	str	r2, [r3, #20]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800

080054bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f023 0201 	bic.w	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 0302 	bic.w	r3, r3, #2
 8005504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a1c      	ldr	r2, [pc, #112]	; (8005584 <TIM_OC1_SetConfig+0xc8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d10c      	bne.n	8005532 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0308 	bic.w	r3, r3, #8
 800551e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f023 0304 	bic.w	r3, r3, #4
 8005530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <TIM_OC1_SetConfig+0xc8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d111      	bne.n	800555e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	621a      	str	r2, [r3, #32]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40010000 	.word	0x40010000

08005588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f023 0210 	bic.w	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0320 	bic.w	r3, r3, #32
 80055d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a1e      	ldr	r2, [pc, #120]	; (800565c <TIM_OC2_SetConfig+0xd4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d10d      	bne.n	8005604 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005602:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a15      	ldr	r2, [pc, #84]	; (800565c <TIM_OC2_SetConfig+0xd4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d113      	bne.n	8005634 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800561a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40010000 	.word	0x40010000

08005660 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1d      	ldr	r2, [pc, #116]	; (8005730 <TIM_OC3_SetConfig+0xd0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d10d      	bne.n	80056da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	021b      	lsls	r3, r3, #8
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a14      	ldr	r2, [pc, #80]	; (8005730 <TIM_OC3_SetConfig+0xd0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d113      	bne.n	800570a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	621a      	str	r2, [r3, #32]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40010000 	.word	0x40010000

08005734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800577e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a10      	ldr	r2, [pc, #64]	; (80057d0 <TIM_OC4_SetConfig+0x9c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d109      	bne.n	80057a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800579a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40010000 	.word	0x40010000

080057d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 030a 	bic.w	r3, r3, #10
 8005810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005832:	b480      	push	{r7}
 8005834:	b087      	sub	sp, #28
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0210 	bic.w	r2, r3, #16
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800585c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800586e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f043 0307 	orr.w	r3, r3, #7
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	609a      	str	r2, [r3, #8]
}
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	021a      	lsls	r2, r3, #8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2201      	movs	r2, #1
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	43db      	mvns	r3, r3
 800592a:	401a      	ands	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	431a      	orrs	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005968:	2302      	movs	r3, #2
 800596a:	e050      	b.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d018      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b8:	d013      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a18      	ldr	r2, [pc, #96]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00e      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d009      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d004      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10c      	bne.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40014000 	.word	0x40014000

08005a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <__NVIC_SetPriority>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	6039      	str	r1, [r7, #0]
 8005a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	db0a      	blt.n	8005a82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	490c      	ldr	r1, [pc, #48]	; (8005aa4 <__NVIC_SetPriority+0x4c>)
 8005a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a76:	0112      	lsls	r2, r2, #4
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a80:	e00a      	b.n	8005a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	4908      	ldr	r1, [pc, #32]	; (8005aa8 <__NVIC_SetPriority+0x50>)
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	3b04      	subs	r3, #4
 8005a90:	0112      	lsls	r2, r2, #4
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	440b      	add	r3, r1
 8005a96:	761a      	strb	r2, [r3, #24]
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	e000e100 	.word	0xe000e100
 8005aa8:	e000ed00 	.word	0xe000ed00

08005aac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <SysTick_Handler+0x1c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ab4:	f001 fd28 	bl	8007508 <xTaskGetSchedulerState>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d001      	beq.n	8005ac2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005abe:	f002 fb13 	bl	80080e8 <xPortSysTickHandler>
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	e000e010 	.word	0xe000e010

08005acc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	f06f 0004 	mvn.w	r0, #4
 8005ad6:	f7ff ffbf 	bl	8005a58 <__NVIC_SetPriority>
#endif
}
 8005ada:	bf00      	nop
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae6:	f3ef 8305 	mrs	r3, IPSR
 8005aea:	603b      	str	r3, [r7, #0]
  return(result);
 8005aec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005af2:	f06f 0305 	mvn.w	r3, #5
 8005af6:	607b      	str	r3, [r7, #4]
 8005af8:	e00c      	b.n	8005b14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005afa:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <osKernelInitialize+0x44>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d105      	bne.n	8005b0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <osKernelInitialize+0x44>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	607b      	str	r3, [r7, #4]
 8005b0c:	e002      	b.n	8005b14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b14:	687b      	ldr	r3, [r7, #4]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	200021f8 	.word	0x200021f8

08005b28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b2e:	f3ef 8305 	mrs	r3, IPSR
 8005b32:	603b      	str	r3, [r7, #0]
  return(result);
 8005b34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b3a:	f06f 0305 	mvn.w	r3, #5
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	e010      	b.n	8005b64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <osKernelStart+0x48>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d109      	bne.n	8005b5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b4a:	f7ff ffbf 	bl	8005acc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <osKernelStart+0x48>)
 8005b50:	2202      	movs	r2, #2
 8005b52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b54:	f001 f87c 	bl	8006c50 <vTaskStartScheduler>
      stat = osOK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	e002      	b.n	8005b64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b64:	687b      	ldr	r3, [r7, #4]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	200021f8 	.word	0x200021f8

08005b74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08e      	sub	sp, #56	; 0x38
 8005b78:	af04      	add	r7, sp, #16
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b84:	f3ef 8305 	mrs	r3, IPSR
 8005b88:	617b      	str	r3, [r7, #20]
  return(result);
 8005b8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d17e      	bne.n	8005c8e <osThreadNew+0x11a>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d07b      	beq.n	8005c8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b96:	2380      	movs	r3, #128	; 0x80
 8005b98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b9a:	2318      	movs	r3, #24
 8005b9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d045      	beq.n	8005c3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <osThreadNew+0x48>
        name = attr->name;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <osThreadNew+0x6e>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	2b38      	cmp	r3, #56	; 0x38
 8005bd4:	d805      	bhi.n	8005be2 <osThreadNew+0x6e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <osThreadNew+0x72>
        return (NULL);
 8005be2:	2300      	movs	r3, #0
 8005be4:	e054      	b.n	8005c90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	089b      	lsrs	r3, r3, #2
 8005bf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00e      	beq.n	8005c1c <osThreadNew+0xa8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	2bbb      	cmp	r3, #187	; 0xbb
 8005c04:	d90a      	bls.n	8005c1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d006      	beq.n	8005c1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <osThreadNew+0xa8>
        mem = 1;
 8005c16:	2301      	movs	r3, #1
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	e010      	b.n	8005c3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10c      	bne.n	8005c3e <osThreadNew+0xca>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d108      	bne.n	8005c3e <osThreadNew+0xca>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <osThreadNew+0xca>
          mem = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e001      	b.n	8005c3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d110      	bne.n	8005c66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c4c:	9202      	str	r2, [sp, #8]
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fe0c 	bl	8006878 <xTaskCreateStatic>
 8005c60:	4603      	mov	r3, r0
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e013      	b.n	8005c8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d110      	bne.n	8005c8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fe57 	bl	8006932 <xTaskCreate>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d001      	beq.n	8005c8e <osThreadNew+0x11a>
            hTask = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c8e:	693b      	ldr	r3, [r7, #16]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3728      	adds	r7, #40	; 0x28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ca0:	f3ef 8305 	mrs	r3, IPSR
 8005ca4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <osDelay+0x1c>
    stat = osErrorISR;
 8005cac:	f06f 0305 	mvn.w	r3, #5
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e007      	b.n	8005cc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 ff92 	bl	8006be8 <vTaskDelay>
    }
  }

  return (stat);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4a07      	ldr	r2, [pc, #28]	; (8005cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8005ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4a06      	ldr	r2, [pc, #24]	; (8005d00 <vApplicationGetIdleTaskMemory+0x30>)
 8005ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2280      	movs	r2, #128	; 0x80
 8005cec:	601a      	str	r2, [r3, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	200021fc 	.word	0x200021fc
 8005d00:	200022b8 	.word	0x200022b8

08005d04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a07      	ldr	r2, [pc, #28]	; (8005d30 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4a06      	ldr	r2, [pc, #24]	; (8005d34 <vApplicationGetTimerTaskMemory+0x30>)
 8005d1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	200024b8 	.word	0x200024b8
 8005d34:	20002574 	.word	0x20002574

08005d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f103 0208 	add.w	r2, r3, #8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f103 0208 	add.w	r2, r3, #8
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f103 0208 	add.w	r2, r3, #8
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d103      	bne.n	8005dfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	e00c      	b.n	8005e14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e002      	b.n	8005e08 <vListInsert+0x2e>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d2f6      	bcs.n	8005e02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	601a      	str	r2, [r3, #0]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6892      	ldr	r2, [r2, #8]
 8005e62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6852      	ldr	r2, [r2, #4]
 8005e6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d103      	bne.n	8005e80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	1e5a      	subs	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005eca:	f002 f87b 	bl	8007fc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	441a      	add	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	3b01      	subs	r3, #1
 8005efc:	68f9      	ldr	r1, [r7, #12]
 8005efe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d114      	bne.n	8005f4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01a      	beq.n	8005f5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3310      	adds	r3, #16
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 f929 	bl	8007184 <xTaskRemoveFromEventList>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d012      	beq.n	8005f5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <xQueueGenericReset+0xcc>)
 8005f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	e009      	b.n	8005f5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fef2 	bl	8005d38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3324      	adds	r3, #36	; 0x24
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff feed 	bl	8005d38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f5e:	f002 f861 	bl	8008024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f62:	2301      	movs	r3, #1
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <xQueueGenericCreateStatic+0x52>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <xQueueGenericCreateStatic+0x56>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <xQueueGenericCreateStatic+0x58>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	623b      	str	r3, [r7, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <xQueueGenericCreateStatic+0x7e>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <xQueueGenericCreateStatic+0x82>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <xQueueGenericCreateStatic+0x84>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	61fb      	str	r3, [r7, #28]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800600e:	2350      	movs	r3, #80	; 0x50
 8006010:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b50      	cmp	r3, #80	; 0x50
 8006016:	d00a      	beq.n	800602e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	61bb      	str	r3, [r7, #24]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800602e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00d      	beq.n	8006056 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006042:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f805 	bl	8006060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006058:	4618      	mov	r0, r3
 800605a:	3730      	adds	r7, #48	; 0x30
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d103      	bne.n	800607c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e002      	b.n	8006082 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800608e:	2101      	movs	r1, #1
 8006090:	69b8      	ldr	r0, [r7, #24]
 8006092:	f7ff ff05 	bl	8005ea0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08e      	sub	sp, #56	; 0x38
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060b6:	2300      	movs	r3, #0
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xQueueGenericSend+0x32>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <xQueueGenericSend+0x40>
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <xQueueGenericSend+0x44>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <xQueueGenericSend+0x46>
 80060ec:	2300      	movs	r3, #0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <xQueueGenericSend+0x60>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d103      	bne.n	8006116 <xQueueGenericSend+0x6e>
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <xQueueGenericSend+0x72>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <xQueueGenericSend+0x74>
 800611a:	2300      	movs	r3, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <xQueueGenericSend+0x8e>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	623b      	str	r3, [r7, #32]
}
 8006132:	bf00      	nop
 8006134:	e7fe      	b.n	8006134 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006136:	f001 f9e7 	bl	8007508 <xTaskGetSchedulerState>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <xQueueGenericSend+0x9e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <xQueueGenericSend+0xa2>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <xQueueGenericSend+0xa4>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xQueueGenericSend+0xbe>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	61fb      	str	r3, [r7, #28]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006166:	f001 ff2d 	bl	8007fc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	429a      	cmp	r2, r3
 8006174:	d302      	bcc.n	800617c <xQueueGenericSend+0xd4>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d129      	bne.n	80061d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006182:	f000 fa0b 	bl	800659c <prvCopyDataToQueue>
 8006186:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	2b00      	cmp	r3, #0
 800618e:	d010      	beq.n	80061b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	3324      	adds	r3, #36	; 0x24
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fff5 	bl	8007184 <xTaskRemoveFromEventList>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d013      	beq.n	80061c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061a0:	4b3f      	ldr	r3, [pc, #252]	; (80062a0 <xQueueGenericSend+0x1f8>)
 80061a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	e00a      	b.n	80061c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061b8:	4b39      	ldr	r3, [pc, #228]	; (80062a0 <xQueueGenericSend+0x1f8>)
 80061ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061c8:	f001 ff2c 	bl	8008024 <vPortExitCritical>
				return pdPASS;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e063      	b.n	8006298 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061d6:	f001 ff25 	bl	8008024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	e05c      	b.n	8006298 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061e4:	f107 0314 	add.w	r3, r7, #20
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 f82f 	bl	800724c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061ee:	2301      	movs	r3, #1
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061f2:	f001 ff17 	bl	8008024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061f6:	f000 fd9b 	bl	8006d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061fa:	f001 fee3 	bl	8007fc4 <vPortEnterCritical>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006204:	b25b      	sxtb	r3, r3
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620a:	d103      	bne.n	8006214 <xQueueGenericSend+0x16c>
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800621a:	b25b      	sxtb	r3, r3
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d103      	bne.n	800622a <xQueueGenericSend+0x182>
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800622a:	f001 fefb 	bl	8008024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800622e:	1d3a      	adds	r2, r7, #4
 8006230:	f107 0314 	add.w	r3, r7, #20
 8006234:	4611      	mov	r1, r2
 8006236:	4618      	mov	r0, r3
 8006238:	f001 f81e 	bl	8007278 <xTaskCheckForTimeOut>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d124      	bne.n	800628c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006244:	f000 faa2 	bl	800678c <prvIsQueueFull>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d018      	beq.n	8006280 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	3310      	adds	r3, #16
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	4611      	mov	r1, r2
 8006256:	4618      	mov	r0, r3
 8006258:	f000 ff44 	bl	80070e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800625c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800625e:	f000 fa2d 	bl	80066bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006262:	f000 fd73 	bl	8006d4c <xTaskResumeAll>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	f47f af7c 	bne.w	8006166 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <xQueueGenericSend+0x1f8>)
 8006270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	e772      	b.n	8006166 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006282:	f000 fa1b 	bl	80066bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006286:	f000 fd61 	bl	8006d4c <xTaskResumeAll>
 800628a:	e76c      	b.n	8006166 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800628c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800628e:	f000 fa15 	bl	80066bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006292:	f000 fd5b 	bl	8006d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006296:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006298:	4618      	mov	r0, r3
 800629a:	3738      	adds	r7, #56	; 0x38
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b090      	sub	sp, #64	; 0x40
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <xQueueGenericSendFromISR+0x3c>
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <xQueueGenericSendFromISR+0x40>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <xQueueGenericSendFromISR+0x42>
 80062e4:	2300      	movs	r3, #0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d103      	bne.n	800630e <xQueueGenericSendFromISR+0x6a>
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <xQueueGenericSendFromISR+0x6e>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <xQueueGenericSendFromISR+0x70>
 8006312:	2300      	movs	r3, #0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	623b      	str	r3, [r7, #32]
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800632e:	f001 ff2b 	bl	8008188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006332:	f3ef 8211 	mrs	r2, BASEPRI
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	61fa      	str	r2, [r7, #28]
 8006348:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800634a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <xQueueGenericSendFromISR+0xbc>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d12f      	bne.n	80063c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006376:	f000 f911 	bl	800659c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800637a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d112      	bne.n	80063aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	d016      	beq.n	80063ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	3324      	adds	r3, #36	; 0x24
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fef7 	bl	8007184 <xTaskRemoveFromEventList>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00e      	beq.n	80063ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	e007      	b.n	80063ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063ae:	3301      	adds	r3, #1
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	b25a      	sxtb	r2, r3
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063ba:	2301      	movs	r3, #1
 80063bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063be:	e001      	b.n	80063c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3740      	adds	r7, #64	; 0x40
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08c      	sub	sp, #48	; 0x30
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <xQueueReceive+0x30>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	623b      	str	r3, [r7, #32]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d103      	bne.n	800641a <xQueueReceive+0x3e>
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <xQueueReceive+0x42>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <xQueueReceive+0x44>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <xQueueReceive+0x5e>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	61fb      	str	r3, [r7, #28]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800643a:	f001 f865 	bl	8007508 <xTaskGetSchedulerState>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <xQueueReceive+0x6e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <xQueueReceive+0x72>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueReceive+0x74>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xQueueReceive+0x8e>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	61bb      	str	r3, [r7, #24]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800646a:	f001 fdab 	bl	8007fc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01f      	beq.n	80064ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800647e:	f000 f8f7 	bl	8006670 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	1e5a      	subs	r2, r3, #1
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00f      	beq.n	80064b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	3310      	adds	r3, #16
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fe74 	bl	8007184 <xTaskRemoveFromEventList>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064a2:	4b3d      	ldr	r3, [pc, #244]	; (8006598 <xQueueReceive+0x1bc>)
 80064a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064b2:	f001 fdb7 	bl	8008024 <vPortExitCritical>
				return pdPASS;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e069      	b.n	800658e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d103      	bne.n	80064c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064c0:	f001 fdb0 	bl	8008024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e062      	b.n	800658e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ce:	f107 0310 	add.w	r3, r7, #16
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 feba 	bl	800724c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064d8:	2301      	movs	r3, #1
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064dc:	f001 fda2 	bl	8008024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064e0:	f000 fc26 	bl	8006d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064e4:	f001 fd6e 	bl	8007fc4 <vPortEnterCritical>
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f4:	d103      	bne.n	80064fe <xQueueReceive+0x122>
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006504:	b25b      	sxtb	r3, r3
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d103      	bne.n	8006514 <xQueueReceive+0x138>
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006514:	f001 fd86 	bl	8008024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006518:	1d3a      	adds	r2, r7, #4
 800651a:	f107 0310 	add.w	r3, r7, #16
 800651e:	4611      	mov	r1, r2
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fea9 	bl	8007278 <xTaskCheckForTimeOut>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d123      	bne.n	8006574 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800652c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652e:	f000 f917 	bl	8006760 <prvIsQueueEmpty>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d017      	beq.n	8006568 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	3324      	adds	r3, #36	; 0x24
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fdcf 	bl	80070e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006548:	f000 f8b8 	bl	80066bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800654c:	f000 fbfe 	bl	8006d4c <xTaskResumeAll>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d189      	bne.n	800646a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006556:	4b10      	ldr	r3, [pc, #64]	; (8006598 <xQueueReceive+0x1bc>)
 8006558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	e780      	b.n	800646a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656a:	f000 f8a7 	bl	80066bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800656e:	f000 fbed 	bl	8006d4c <xTaskResumeAll>
 8006572:	e77a      	b.n	800646a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006576:	f000 f8a1 	bl	80066bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800657a:	f000 fbe7 	bl	8006d4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800657e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006580:	f000 f8ee 	bl	8006760 <prvIsQueueEmpty>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	f43f af6f 	beq.w	800646a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800658c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800658e:	4618      	mov	r0, r3
 8006590:	3730      	adds	r7, #48	; 0x30
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10d      	bne.n	80065d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d14d      	bne.n	800665e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 ffbc 	bl	8007544 <xTaskPriorityDisinherit>
 80065cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	609a      	str	r2, [r3, #8]
 80065d4:	e043      	b.n	800665e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d119      	bne.n	8006610 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6858      	ldr	r0, [r3, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	461a      	mov	r2, r3
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	f002 f81e 	bl	8008628 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	441a      	add	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	429a      	cmp	r2, r3
 8006604:	d32b      	bcc.n	800665e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	605a      	str	r2, [r3, #4]
 800660e:	e026      	b.n	800665e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68d8      	ldr	r0, [r3, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	461a      	mov	r2, r3
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	f002 f804 	bl	8008628 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	425b      	negs	r3, r3
 800662a:	441a      	add	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d207      	bcs.n	800664c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	425b      	negs	r3, r3
 8006646:	441a      	add	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b02      	cmp	r3, #2
 8006650:	d105      	bne.n	800665e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	3b01      	subs	r3, #1
 800665c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006666:	697b      	ldr	r3, [r7, #20]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d018      	beq.n	80066b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	441a      	add	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	d303      	bcc.n	80066a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68d9      	ldr	r1, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	461a      	mov	r2, r3
 80066ae:	6838      	ldr	r0, [r7, #0]
 80066b0:	f001 ffba 	bl	8008628 <memcpy>
	}
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066c4:	f001 fc7e 	bl	8007fc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066d0:	e011      	b.n	80066f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d012      	beq.n	8006700 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3324      	adds	r3, #36	; 0x24
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fd50 	bl	8007184 <xTaskRemoveFromEventList>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066ea:	f000 fe27 	bl	800733c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dce9      	bgt.n	80066d2 <prvUnlockQueue+0x16>
 80066fe:	e000      	b.n	8006702 <prvUnlockQueue+0x46>
					break;
 8006700:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	22ff      	movs	r2, #255	; 0xff
 8006706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800670a:	f001 fc8b 	bl	8008024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800670e:	f001 fc59 	bl	8007fc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006718:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800671a:	e011      	b.n	8006740 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d012      	beq.n	800674a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3310      	adds	r3, #16
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fd2b 	bl	8007184 <xTaskRemoveFromEventList>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006734:	f000 fe02 	bl	800733c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	3b01      	subs	r3, #1
 800673c:	b2db      	uxtb	r3, r3
 800673e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006744:	2b00      	cmp	r3, #0
 8006746:	dce9      	bgt.n	800671c <prvUnlockQueue+0x60>
 8006748:	e000      	b.n	800674c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800674a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	22ff      	movs	r2, #255	; 0xff
 8006750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006754:	f001 fc66 	bl	8008024 <vPortExitCritical>
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006768:	f001 fc2c 	bl	8007fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	2b00      	cmp	r3, #0
 8006772:	d102      	bne.n	800677a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	e001      	b.n	800677e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800677e:	f001 fc51 	bl	8008024 <vPortExitCritical>

	return xReturn;
 8006782:	68fb      	ldr	r3, [r7, #12]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006794:	f001 fc16 	bl	8007fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d102      	bne.n	80067aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e001      	b.n	80067ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ae:	f001 fc39 	bl	8008024 <vPortExitCritical>

	return xReturn;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	e014      	b.n	80067f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067cc:	4a0f      	ldr	r2, [pc, #60]	; (800680c <vQueueAddToRegistry+0x50>)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10b      	bne.n	80067f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067d8:	490c      	ldr	r1, [pc, #48]	; (800680c <vQueueAddToRegistry+0x50>)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067e2:	4a0a      	ldr	r2, [pc, #40]	; (800680c <vQueueAddToRegistry+0x50>)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	4413      	add	r3, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067ee:	e006      	b.n	80067fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b07      	cmp	r3, #7
 80067fa:	d9e7      	bls.n	80067cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20002974 	.word	0x20002974

08006810 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006820:	f001 fbd0 	bl	8007fc4 <vPortEnterCritical>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800682a:	b25b      	sxtb	r3, r3
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d103      	bne.n	800683a <vQueueWaitForMessageRestricted+0x2a>
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006840:	b25b      	sxtb	r3, r3
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d103      	bne.n	8006850 <vQueueWaitForMessageRestricted+0x40>
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006850:	f001 fbe8 	bl	8008024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	3324      	adds	r3, #36	; 0x24
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	68b9      	ldr	r1, [r7, #8]
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fc61 	bl	800712c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800686a:	6978      	ldr	r0, [r7, #20]
 800686c:	f7ff ff26 	bl	80066bc <prvUnlockQueue>
	}
 8006870:	bf00      	nop
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08e      	sub	sp, #56	; 0x38
 800687c:	af04      	add	r7, sp, #16
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	623b      	str	r3, [r7, #32]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <xTaskCreateStatic+0x46>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	61fb      	str	r3, [r7, #28]
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068be:	23bc      	movs	r3, #188	; 0xbc
 80068c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	2bbc      	cmp	r3, #188	; 0xbc
 80068c6:	d00a      	beq.n	80068de <xTaskCreateStatic+0x66>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	61bb      	str	r3, [r7, #24]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01e      	beq.n	8006924 <xTaskCreateStatic+0xac>
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01b      	beq.n	8006924 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068fe:	2300      	movs	r3, #0
 8006900:	9303      	str	r3, [sp, #12]
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	9302      	str	r3, [sp, #8]
 8006906:	f107 0314 	add.w	r3, r7, #20
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 f850 	bl	80069bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800691c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800691e:	f000 f8f3 	bl	8006b08 <prvAddNewTaskToReadyList>
 8006922:	e001      	b.n	8006928 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006928:	697b      	ldr	r3, [r7, #20]
	}
 800692a:	4618      	mov	r0, r3
 800692c:	3728      	adds	r7, #40	; 0x28
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006932:	b580      	push	{r7, lr}
 8006934:	b08c      	sub	sp, #48	; 0x30
 8006936:	af04      	add	r7, sp, #16
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4618      	mov	r0, r3
 8006948:	f001 fc5e 	bl	8008208 <pvPortMalloc>
 800694c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00e      	beq.n	8006972 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006954:	20bc      	movs	r0, #188	; 0xbc
 8006956:	f001 fc57 	bl	8008208 <pvPortMalloc>
 800695a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	631a      	str	r2, [r3, #48]	; 0x30
 8006968:	e005      	b.n	8006976 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800696a:	6978      	ldr	r0, [r7, #20]
 800696c:	f001 fd18 	bl	80083a0 <vPortFree>
 8006970:	e001      	b.n	8006976 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d017      	beq.n	80069ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	2300      	movs	r3, #0
 8006988:	9303      	str	r3, [sp, #12]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	9302      	str	r3, [sp, #8]
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f80e 	bl	80069bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069a0:	69f8      	ldr	r0, [r7, #28]
 80069a2:	f000 f8b1 	bl	8006b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069a6:	2301      	movs	r3, #1
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	e002      	b.n	80069b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069ac:	f04f 33ff 	mov.w	r3, #4294967295
 80069b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069b2:	69bb      	ldr	r3, [r7, #24]
	}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	461a      	mov	r2, r3
 80069d4:	21a5      	movs	r1, #165	; 0xa5
 80069d6:	f001 fe35 	bl	8008644 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069e4:	3b01      	subs	r3, #1
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	f023 0307 	bic.w	r3, r3, #7
 80069f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <prvInitialiseNewTask+0x58>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	617b      	str	r3, [r7, #20]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01f      	beq.n	8006a5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61fb      	str	r3, [r7, #28]
 8006a1e:	e012      	b.n	8006a46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	7819      	ldrb	r1, [r3, #0]
 8006a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	3334      	adds	r3, #52	; 0x34
 8006a30:	460a      	mov	r2, r1
 8006a32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	4413      	add	r3, r2
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	3301      	adds	r3, #1
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b0f      	cmp	r3, #15
 8006a4a:	d9e9      	bls.n	8006a20 <prvInitialiseNewTask+0x64>
 8006a4c:	e000      	b.n	8006a50 <prvInitialiseNewTask+0x94>
			{
				break;
 8006a4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a58:	e003      	b.n	8006a62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	2b37      	cmp	r3, #55	; 0x37
 8006a66:	d901      	bls.n	8006a6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a68:	2337      	movs	r3, #55	; 0x37
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff f978 	bl	8005d78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	3318      	adds	r3, #24
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff f973 	bl	8005d78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	3354      	adds	r3, #84	; 0x54
 8006abc:	2260      	movs	r2, #96	; 0x60
 8006abe:	2100      	movs	r1, #0
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f001 fdbf 	bl	8008644 <memset>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <prvInitialiseNewTask+0x140>)
 8006aca:	659a      	str	r2, [r3, #88]	; 0x58
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <prvInitialiseNewTask+0x144>)
 8006ad0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	4a0b      	ldr	r2, [pc, #44]	; (8006b04 <prvInitialiseNewTask+0x148>)
 8006ad6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	69b8      	ldr	r0, [r7, #24]
 8006ade:	f001 f941 	bl	8007d64 <pxPortInitialiseStack>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006af4:	bf00      	nop
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	0800bae0 	.word	0x0800bae0
 8006b00:	0800bb00 	.word	0x0800bb00
 8006b04:	0800bac0 	.word	0x0800bac0

08006b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b10:	f001 fa58 	bl	8007fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b14:	4b2d      	ldr	r3, [pc, #180]	; (8006bcc <prvAddNewTaskToReadyList+0xc4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	4a2c      	ldr	r2, [pc, #176]	; (8006bcc <prvAddNewTaskToReadyList+0xc4>)
 8006b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b1e:	4b2c      	ldr	r3, [pc, #176]	; (8006bd0 <prvAddNewTaskToReadyList+0xc8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b26:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <prvAddNewTaskToReadyList+0xc8>)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b2c:	4b27      	ldr	r3, [pc, #156]	; (8006bcc <prvAddNewTaskToReadyList+0xc4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d110      	bne.n	8006b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b34:	f000 fc26 	bl	8007384 <prvInitialiseTaskLists>
 8006b38:	e00d      	b.n	8006b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b3a:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <prvAddNewTaskToReadyList+0xcc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d109      	bne.n	8006b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b42:	4b23      	ldr	r3, [pc, #140]	; (8006bd0 <prvAddNewTaskToReadyList+0xc8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d802      	bhi.n	8006b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b50:	4a1f      	ldr	r2, [pc, #124]	; (8006bd0 <prvAddNewTaskToReadyList+0xc8>)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b56:	4b20      	ldr	r3, [pc, #128]	; (8006bd8 <prvAddNewTaskToReadyList+0xd0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <prvAddNewTaskToReadyList+0xd0>)
 8006b5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b60:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <prvAddNewTaskToReadyList+0xd0>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6c:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <prvAddNewTaskToReadyList+0xd4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d903      	bls.n	8006b7c <prvAddNewTaskToReadyList+0x74>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	4a18      	ldr	r2, [pc, #96]	; (8006bdc <prvAddNewTaskToReadyList+0xd4>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <prvAddNewTaskToReadyList+0xd8>)
 8006b8a:	441a      	add	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f7ff f8fd 	bl	8005d92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b98:	f001 fa44 	bl	8008024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <prvAddNewTaskToReadyList+0xcc>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00e      	beq.n	8006bc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <prvAddNewTaskToReadyList+0xc8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d207      	bcs.n	8006bc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <prvAddNewTaskToReadyList+0xdc>)
 8006bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20002e88 	.word	0x20002e88
 8006bd0:	200029b4 	.word	0x200029b4
 8006bd4:	20002e94 	.word	0x20002e94
 8006bd8:	20002ea4 	.word	0x20002ea4
 8006bdc:	20002e90 	.word	0x20002e90
 8006be0:	200029b8 	.word	0x200029b8
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d017      	beq.n	8006c2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bfa:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <vTaskDelay+0x60>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <vTaskDelay+0x30>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	60bb      	str	r3, [r7, #8]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c18:	f000 f88a 	bl	8006d30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fcfe 	bl	8007620 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c24:	f000 f892 	bl	8006d4c <xTaskResumeAll>
 8006c28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d107      	bne.n	8006c40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <vTaskDelay+0x64>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20002eb0 	.word	0x20002eb0
 8006c4c:	e000ed04 	.word	0xe000ed04

08006c50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08a      	sub	sp, #40	; 0x28
 8006c54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c5e:	463a      	mov	r2, r7
 8006c60:	1d39      	adds	r1, r7, #4
 8006c62:	f107 0308 	add.w	r3, r7, #8
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff f832 	bl	8005cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	9202      	str	r2, [sp, #8]
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	2300      	movs	r3, #0
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	460a      	mov	r2, r1
 8006c7e:	4924      	ldr	r1, [pc, #144]	; (8006d10 <vTaskStartScheduler+0xc0>)
 8006c80:	4824      	ldr	r0, [pc, #144]	; (8006d14 <vTaskStartScheduler+0xc4>)
 8006c82:	f7ff fdf9 	bl	8006878 <xTaskCreateStatic>
 8006c86:	4603      	mov	r3, r0
 8006c88:	4a23      	ldr	r2, [pc, #140]	; (8006d18 <vTaskStartScheduler+0xc8>)
 8006c8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c8c:	4b22      	ldr	r3, [pc, #136]	; (8006d18 <vTaskStartScheduler+0xc8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c94:	2301      	movs	r3, #1
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e001      	b.n	8006c9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d102      	bne.n	8006caa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ca4:	f000 fd10 	bl	80076c8 <xTimerCreateTimerTask>
 8006ca8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d11b      	bne.n	8006ce8 <vTaskStartScheduler+0x98>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	613b      	str	r3, [r7, #16]
}
 8006cc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cc4:	4b15      	ldr	r3, [pc, #84]	; (8006d1c <vTaskStartScheduler+0xcc>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3354      	adds	r3, #84	; 0x54
 8006cca:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <vTaskStartScheduler+0xd0>)
 8006ccc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <vTaskStartScheduler+0xd4>)
 8006cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <vTaskStartScheduler+0xd8>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cdc:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <vTaskStartScheduler+0xdc>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ce2:	f001 f8cd 	bl	8007e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ce6:	e00e      	b.n	8006d06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d10a      	bne.n	8006d06 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <vTaskStartScheduler+0xb4>
}
 8006d06:	bf00      	nop
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	08008808 	.word	0x08008808
 8006d14:	08007355 	.word	0x08007355
 8006d18:	20002eac 	.word	0x20002eac
 8006d1c:	200029b4 	.word	0x200029b4
 8006d20:	20000018 	.word	0x20000018
 8006d24:	20002ea8 	.word	0x20002ea8
 8006d28:	20002e94 	.word	0x20002e94
 8006d2c:	20002e8c 	.word	0x20002e8c

08006d30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d34:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <vTaskSuspendAll+0x18>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	4a03      	ldr	r2, [pc, #12]	; (8006d48 <vTaskSuspendAll+0x18>)
 8006d3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d3e:	bf00      	nop
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	20002eb0 	.word	0x20002eb0

08006d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d5a:	4b42      	ldr	r3, [pc, #264]	; (8006e64 <xTaskResumeAll+0x118>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	603b      	str	r3, [r7, #0]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d78:	f001 f924 	bl	8007fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d7c:	4b39      	ldr	r3, [pc, #228]	; (8006e64 <xTaskResumeAll+0x118>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	4a38      	ldr	r2, [pc, #224]	; (8006e64 <xTaskResumeAll+0x118>)
 8006d84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d86:	4b37      	ldr	r3, [pc, #220]	; (8006e64 <xTaskResumeAll+0x118>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d162      	bne.n	8006e54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d8e:	4b36      	ldr	r3, [pc, #216]	; (8006e68 <xTaskResumeAll+0x11c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d05e      	beq.n	8006e54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d96:	e02f      	b.n	8006df8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d98:	4b34      	ldr	r3, [pc, #208]	; (8006e6c <xTaskResumeAll+0x120>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3318      	adds	r3, #24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff f851 	bl	8005e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff f84c 	bl	8005e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	4b2d      	ldr	r3, [pc, #180]	; (8006e70 <xTaskResumeAll+0x124>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d903      	bls.n	8006dc8 <xTaskResumeAll+0x7c>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <xTaskResumeAll+0x124>)
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4a27      	ldr	r2, [pc, #156]	; (8006e74 <xTaskResumeAll+0x128>)
 8006dd6:	441a      	add	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f7fe ffd7 	bl	8005d92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <xTaskResumeAll+0x12c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d302      	bcc.n	8006df8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006df2:	4b22      	ldr	r3, [pc, #136]	; (8006e7c <xTaskResumeAll+0x130>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006df8:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <xTaskResumeAll+0x120>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1cb      	bne.n	8006d98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e06:	f000 fb5f 	bl	80074c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e0a:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <xTaskResumeAll+0x134>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e16:	f000 f847 	bl	8006ea8 <xTaskIncrementTick>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006e20:	4b16      	ldr	r3, [pc, #88]	; (8006e7c <xTaskResumeAll+0x130>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f1      	bne.n	8006e16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006e32:	4b13      	ldr	r3, [pc, #76]	; (8006e80 <xTaskResumeAll+0x134>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e38:	4b10      	ldr	r3, [pc, #64]	; (8006e7c <xTaskResumeAll+0x130>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d009      	beq.n	8006e54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e40:	2301      	movs	r3, #1
 8006e42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e44:	4b0f      	ldr	r3, [pc, #60]	; (8006e84 <xTaskResumeAll+0x138>)
 8006e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e54:	f001 f8e6 	bl	8008024 <vPortExitCritical>

	return xAlreadyYielded;
 8006e58:	68bb      	ldr	r3, [r7, #8]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20002eb0 	.word	0x20002eb0
 8006e68:	20002e88 	.word	0x20002e88
 8006e6c:	20002e48 	.word	0x20002e48
 8006e70:	20002e90 	.word	0x20002e90
 8006e74:	200029b8 	.word	0x200029b8
 8006e78:	200029b4 	.word	0x200029b4
 8006e7c:	20002e9c 	.word	0x20002e9c
 8006e80:	20002e98 	.word	0x20002e98
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e8e:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <xTaskGetTickCount+0x1c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e94:	687b      	ldr	r3, [r7, #4]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20002e8c 	.word	0x20002e8c

08006ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb2:	4b4f      	ldr	r3, [pc, #316]	; (8006ff0 <xTaskIncrementTick+0x148>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 808f 	bne.w	8006fda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ebc:	4b4d      	ldr	r3, [pc, #308]	; (8006ff4 <xTaskIncrementTick+0x14c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ec4:	4a4b      	ldr	r2, [pc, #300]	; (8006ff4 <xTaskIncrementTick+0x14c>)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d120      	bne.n	8006f12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ed0:	4b49      	ldr	r3, [pc, #292]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	603b      	str	r3, [r7, #0]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <xTaskIncrementTick+0x46>
 8006ef0:	4b41      	ldr	r3, [pc, #260]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	4b41      	ldr	r3, [pc, #260]	; (8006ffc <xTaskIncrementTick+0x154>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a3f      	ldr	r2, [pc, #252]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	4a3f      	ldr	r2, [pc, #252]	; (8006ffc <xTaskIncrementTick+0x154>)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <xTaskIncrementTick+0x158>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	4a3d      	ldr	r2, [pc, #244]	; (8007000 <xTaskIncrementTick+0x158>)
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	f000 fadb 	bl	80074c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f12:	4b3c      	ldr	r3, [pc, #240]	; (8007004 <xTaskIncrementTick+0x15c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d349      	bcc.n	8006fb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f1c:	4b36      	ldr	r3, [pc, #216]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d104      	bne.n	8006f30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f26:	4b37      	ldr	r3, [pc, #220]	; (8007004 <xTaskIncrementTick+0x15c>)
 8006f28:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2c:	601a      	str	r2, [r3, #0]
					break;
 8006f2e:	e03f      	b.n	8006fb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f30:	4b31      	ldr	r3, [pc, #196]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d203      	bcs.n	8006f50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f48:	4a2e      	ldr	r2, [pc, #184]	; (8007004 <xTaskIncrementTick+0x15c>)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f4e:	e02f      	b.n	8006fb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe ff79 	bl	8005e4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	3318      	adds	r3, #24
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe ff70 	bl	8005e4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4b25      	ldr	r3, [pc, #148]	; (8007008 <xTaskIncrementTick+0x160>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d903      	bls.n	8006f80 <xTaskIncrementTick+0xd8>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	4a22      	ldr	r2, [pc, #136]	; (8007008 <xTaskIncrementTick+0x160>)
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4a1f      	ldr	r2, [pc, #124]	; (800700c <xTaskIncrementTick+0x164>)
 8006f8e:	441a      	add	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f7fe fefb 	bl	8005d92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <xTaskIncrementTick+0x168>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d3b8      	bcc.n	8006f1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006faa:	2301      	movs	r3, #1
 8006fac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fae:	e7b5      	b.n	8006f1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fb0:	4b17      	ldr	r3, [pc, #92]	; (8007010 <xTaskIncrementTick+0x168>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	4915      	ldr	r1, [pc, #84]	; (800700c <xTaskIncrementTick+0x164>)
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d901      	bls.n	8006fcc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006fcc:	4b11      	ldr	r3, [pc, #68]	; (8007014 <xTaskIncrementTick+0x16c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	e004      	b.n	8006fe4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006fda:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <xTaskIncrementTick+0x170>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	4a0d      	ldr	r2, [pc, #52]	; (8007018 <xTaskIncrementTick+0x170>)
 8006fe2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006fe4:	697b      	ldr	r3, [r7, #20]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20002eb0 	.word	0x20002eb0
 8006ff4:	20002e8c 	.word	0x20002e8c
 8006ff8:	20002e40 	.word	0x20002e40
 8006ffc:	20002e44 	.word	0x20002e44
 8007000:	20002ea0 	.word	0x20002ea0
 8007004:	20002ea8 	.word	0x20002ea8
 8007008:	20002e90 	.word	0x20002e90
 800700c:	200029b8 	.word	0x200029b8
 8007010:	200029b4 	.word	0x200029b4
 8007014:	20002e9c 	.word	0x20002e9c
 8007018:	20002e98 	.word	0x20002e98

0800701c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007022:	4b2a      	ldr	r3, [pc, #168]	; (80070cc <vTaskSwitchContext+0xb0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800702a:	4b29      	ldr	r3, [pc, #164]	; (80070d0 <vTaskSwitchContext+0xb4>)
 800702c:	2201      	movs	r2, #1
 800702e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007030:	e046      	b.n	80070c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007032:	4b27      	ldr	r3, [pc, #156]	; (80070d0 <vTaskSwitchContext+0xb4>)
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007038:	4b26      	ldr	r3, [pc, #152]	; (80070d4 <vTaskSwitchContext+0xb8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	e010      	b.n	8007062 <vTaskSwitchContext+0x46>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <vTaskSwitchContext+0x40>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	607b      	str	r3, [r7, #4]
}
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <vTaskSwitchContext+0x3e>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3b01      	subs	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	491d      	ldr	r1, [pc, #116]	; (80070d8 <vTaskSwitchContext+0xbc>)
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0e4      	beq.n	8007040 <vTaskSwitchContext+0x24>
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4a15      	ldr	r2, [pc, #84]	; (80070d8 <vTaskSwitchContext+0xbc>)
 8007082:	4413      	add	r3, r2
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	605a      	str	r2, [r3, #4]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	3308      	adds	r3, #8
 8007098:	429a      	cmp	r2, r3
 800709a:	d104      	bne.n	80070a6 <vTaskSwitchContext+0x8a>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	605a      	str	r2, [r3, #4]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	4a0b      	ldr	r2, [pc, #44]	; (80070dc <vTaskSwitchContext+0xc0>)
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <vTaskSwitchContext+0xb8>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070b6:	4b09      	ldr	r3, [pc, #36]	; (80070dc <vTaskSwitchContext+0xc0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3354      	adds	r3, #84	; 0x54
 80070bc:	4a08      	ldr	r2, [pc, #32]	; (80070e0 <vTaskSwitchContext+0xc4>)
 80070be:	6013      	str	r3, [r2, #0]
}
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	20002eb0 	.word	0x20002eb0
 80070d0:	20002e9c 	.word	0x20002e9c
 80070d4:	20002e90 	.word	0x20002e90
 80070d8:	200029b8 	.word	0x200029b8
 80070dc:	200029b4 	.word	0x200029b4
 80070e0:	20000018 	.word	0x20000018

080070e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	60fb      	str	r3, [r7, #12]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800710a:	4b07      	ldr	r3, [pc, #28]	; (8007128 <vTaskPlaceOnEventList+0x44>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3318      	adds	r3, #24
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fe fe61 	bl	8005dda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007118:	2101      	movs	r1, #1
 800711a:	6838      	ldr	r0, [r7, #0]
 800711c:	f000 fa80 	bl	8007620 <prvAddCurrentTaskToDelayedList>
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	200029b4 	.word	0x200029b4

0800712c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	617b      	str	r3, [r7, #20]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007154:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <vTaskPlaceOnEventListRestricted+0x54>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3318      	adds	r3, #24
 800715a:	4619      	mov	r1, r3
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7fe fe18 	bl	8005d92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007168:	f04f 33ff 	mov.w	r3, #4294967295
 800716c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	68b8      	ldr	r0, [r7, #8]
 8007172:	f000 fa55 	bl	8007620 <prvAddCurrentTaskToDelayedList>
	}
 8007176:	bf00      	nop
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	200029b4 	.word	0x200029b4

08007184 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	60fb      	str	r3, [r7, #12]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3318      	adds	r3, #24
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fe49 	bl	8005e4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ba:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <xTaskRemoveFromEventList+0xb0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d11d      	bne.n	80071fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fe40 	bl	8005e4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	4b19      	ldr	r3, [pc, #100]	; (8007238 <xTaskRemoveFromEventList+0xb4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d903      	bls.n	80071e0 <xTaskRemoveFromEventList+0x5c>
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	4a16      	ldr	r2, [pc, #88]	; (8007238 <xTaskRemoveFromEventList+0xb4>)
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4a13      	ldr	r2, [pc, #76]	; (800723c <xTaskRemoveFromEventList+0xb8>)
 80071ee:	441a      	add	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4619      	mov	r1, r3
 80071f6:	4610      	mov	r0, r2
 80071f8:	f7fe fdcb 	bl	8005d92 <vListInsertEnd>
 80071fc:	e005      	b.n	800720a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	3318      	adds	r3, #24
 8007202:	4619      	mov	r1, r3
 8007204:	480e      	ldr	r0, [pc, #56]	; (8007240 <xTaskRemoveFromEventList+0xbc>)
 8007206:	f7fe fdc4 	bl	8005d92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720e:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <xTaskRemoveFromEventList+0xc0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	429a      	cmp	r2, r3
 8007216:	d905      	bls.n	8007224 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007218:	2301      	movs	r3, #1
 800721a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800721c:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <xTaskRemoveFromEventList+0xc4>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e001      	b.n	8007228 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007228:	697b      	ldr	r3, [r7, #20]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20002eb0 	.word	0x20002eb0
 8007238:	20002e90 	.word	0x20002e90
 800723c:	200029b8 	.word	0x200029b8
 8007240:	20002e48 	.word	0x20002e48
 8007244:	200029b4 	.word	0x200029b4
 8007248:	20002e9c 	.word	0x20002e9c

0800724c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007254:	4b06      	ldr	r3, [pc, #24]	; (8007270 <vTaskInternalSetTimeOutState+0x24>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <vTaskInternalSetTimeOutState+0x28>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	20002ea0 	.word	0x20002ea0
 8007274:	20002e8c 	.word	0x20002e8c

08007278 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	613b      	str	r3, [r7, #16]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60fb      	str	r3, [r7, #12]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80072ba:	f000 fe83 	bl	8007fc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072be:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <xTaskCheckForTimeOut+0xbc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d6:	d102      	bne.n	80072de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072d8:	2300      	movs	r3, #0
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	e023      	b.n	8007326 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <xTaskCheckForTimeOut+0xc0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d007      	beq.n	80072fa <xTaskCheckForTimeOut+0x82>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d302      	bcc.n	80072fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072f4:	2301      	movs	r3, #1
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	e015      	b.n	8007326 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	429a      	cmp	r2, r3
 8007302:	d20b      	bcs.n	800731c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	1ad2      	subs	r2, r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff ff9b 	bl	800724c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	e004      	b.n	8007326 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007322:	2301      	movs	r3, #1
 8007324:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007326:	f000 fe7d 	bl	8008024 <vPortExitCritical>

	return xReturn;
 800732a:	69fb      	ldr	r3, [r7, #28]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20002e8c 	.word	0x20002e8c
 8007338:	20002ea0 	.word	0x20002ea0

0800733c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <vTaskMissedYield+0x14>)
 8007342:	2201      	movs	r2, #1
 8007344:	601a      	str	r2, [r3, #0]
}
 8007346:	bf00      	nop
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20002e9c 	.word	0x20002e9c

08007354 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800735c:	f000 f852 	bl	8007404 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007360:	4b06      	ldr	r3, [pc, #24]	; (800737c <prvIdleTask+0x28>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d9f9      	bls.n	800735c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007368:	4b05      	ldr	r3, [pc, #20]	; (8007380 <prvIdleTask+0x2c>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007378:	e7f0      	b.n	800735c <prvIdleTask+0x8>
 800737a:	bf00      	nop
 800737c:	200029b8 	.word	0x200029b8
 8007380:	e000ed04 	.word	0xe000ed04

08007384 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	e00c      	b.n	80073aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4a12      	ldr	r2, [pc, #72]	; (80073e4 <prvInitialiseTaskLists+0x60>)
 800739c:	4413      	add	r3, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fcca 	bl	8005d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3301      	adds	r3, #1
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b37      	cmp	r3, #55	; 0x37
 80073ae:	d9ef      	bls.n	8007390 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073b0:	480d      	ldr	r0, [pc, #52]	; (80073e8 <prvInitialiseTaskLists+0x64>)
 80073b2:	f7fe fcc1 	bl	8005d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073b6:	480d      	ldr	r0, [pc, #52]	; (80073ec <prvInitialiseTaskLists+0x68>)
 80073b8:	f7fe fcbe 	bl	8005d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073bc:	480c      	ldr	r0, [pc, #48]	; (80073f0 <prvInitialiseTaskLists+0x6c>)
 80073be:	f7fe fcbb 	bl	8005d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073c2:	480c      	ldr	r0, [pc, #48]	; (80073f4 <prvInitialiseTaskLists+0x70>)
 80073c4:	f7fe fcb8 	bl	8005d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073c8:	480b      	ldr	r0, [pc, #44]	; (80073f8 <prvInitialiseTaskLists+0x74>)
 80073ca:	f7fe fcb5 	bl	8005d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <prvInitialiseTaskLists+0x78>)
 80073d0:	4a05      	ldr	r2, [pc, #20]	; (80073e8 <prvInitialiseTaskLists+0x64>)
 80073d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073d4:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <prvInitialiseTaskLists+0x7c>)
 80073d6:	4a05      	ldr	r2, [pc, #20]	; (80073ec <prvInitialiseTaskLists+0x68>)
 80073d8:	601a      	str	r2, [r3, #0]
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	200029b8 	.word	0x200029b8
 80073e8:	20002e18 	.word	0x20002e18
 80073ec:	20002e2c 	.word	0x20002e2c
 80073f0:	20002e48 	.word	0x20002e48
 80073f4:	20002e5c 	.word	0x20002e5c
 80073f8:	20002e74 	.word	0x20002e74
 80073fc:	20002e40 	.word	0x20002e40
 8007400:	20002e44 	.word	0x20002e44

08007404 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800740a:	e019      	b.n	8007440 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800740c:	f000 fdda 	bl	8007fc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007410:	4b10      	ldr	r3, [pc, #64]	; (8007454 <prvCheckTasksWaitingTermination+0x50>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe fd15 	bl	8005e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <prvCheckTasksWaitingTermination+0x54>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3b01      	subs	r3, #1
 8007428:	4a0b      	ldr	r2, [pc, #44]	; (8007458 <prvCheckTasksWaitingTermination+0x54>)
 800742a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800742c:	4b0b      	ldr	r3, [pc, #44]	; (800745c <prvCheckTasksWaitingTermination+0x58>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3b01      	subs	r3, #1
 8007432:	4a0a      	ldr	r2, [pc, #40]	; (800745c <prvCheckTasksWaitingTermination+0x58>)
 8007434:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007436:	f000 fdf5 	bl	8008024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f810 	bl	8007460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <prvCheckTasksWaitingTermination+0x58>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e1      	bne.n	800740c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007448:	bf00      	nop
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20002e5c 	.word	0x20002e5c
 8007458:	20002e88 	.word	0x20002e88
 800745c:	20002e70 	.word	0x20002e70

08007460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3354      	adds	r3, #84	; 0x54
 800746c:	4618      	mov	r0, r3
 800746e:	f001 f94b 	bl	8008708 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007478:	2b00      	cmp	r3, #0
 800747a:	d108      	bne.n	800748e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	4618      	mov	r0, r3
 8007482:	f000 ff8d 	bl	80083a0 <vPortFree>
				vPortFree( pxTCB );
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 ff8a 	bl	80083a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800748c:	e018      	b.n	80074c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007494:	2b01      	cmp	r3, #1
 8007496:	d103      	bne.n	80074a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 ff81 	bl	80083a0 <vPortFree>
	}
 800749e:	e00f      	b.n	80074c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d00a      	beq.n	80074c0 <prvDeleteTCB+0x60>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	60fb      	str	r3, [r7, #12]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <prvDeleteTCB+0x5e>
	}
 80074c0:	bf00      	nop
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074ce:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <prvResetNextTaskUnblockTime+0x38>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <prvResetNextTaskUnblockTime+0x3c>)
 80074da:	f04f 32ff 	mov.w	r2, #4294967295
 80074de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074e0:	e008      	b.n	80074f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e2:	4b07      	ldr	r3, [pc, #28]	; (8007500 <prvResetNextTaskUnblockTime+0x38>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4a04      	ldr	r2, [pc, #16]	; (8007504 <prvResetNextTaskUnblockTime+0x3c>)
 80074f2:	6013      	str	r3, [r2, #0]
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	20002e40 	.word	0x20002e40
 8007504:	20002ea8 	.word	0x20002ea8

08007508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800750e:	4b0b      	ldr	r3, [pc, #44]	; (800753c <xTaskGetSchedulerState+0x34>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d102      	bne.n	800751c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007516:	2301      	movs	r3, #1
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	e008      	b.n	800752e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800751c:	4b08      	ldr	r3, [pc, #32]	; (8007540 <xTaskGetSchedulerState+0x38>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007524:	2302      	movs	r3, #2
 8007526:	607b      	str	r3, [r7, #4]
 8007528:	e001      	b.n	800752e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800752a:	2300      	movs	r3, #0
 800752c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800752e:	687b      	ldr	r3, [r7, #4]
	}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	20002e94 	.word	0x20002e94
 8007540:	20002eb0 	.word	0x20002eb0

08007544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d056      	beq.n	8007608 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800755a:	4b2e      	ldr	r3, [pc, #184]	; (8007614 <xTaskPriorityDisinherit+0xd0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d00a      	beq.n	800757a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	60bb      	str	r3, [r7, #8]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759c:	1e5a      	subs	r2, r3, #1
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d02c      	beq.n	8007608 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d128      	bne.n	8007608 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fc46 	bl	8005e4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <xTaskPriorityDisinherit+0xd4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d903      	bls.n	80075e8 <xTaskPriorityDisinherit+0xa4>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <xTaskPriorityDisinherit+0xd4>)
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4a09      	ldr	r2, [pc, #36]	; (800761c <xTaskPriorityDisinherit+0xd8>)
 80075f6:	441a      	add	r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fe fbc7 	bl	8005d92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007608:	697b      	ldr	r3, [r7, #20]
	}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200029b4 	.word	0x200029b4
 8007618:	20002e90 	.word	0x20002e90
 800761c:	200029b8 	.word	0x200029b8

08007620 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800762a:	4b21      	ldr	r3, [pc, #132]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007630:	4b20      	ldr	r3, [pc, #128]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3304      	adds	r3, #4
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fc08 	bl	8005e4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d10a      	bne.n	800765a <prvAddCurrentTaskToDelayedList+0x3a>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800764a:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3304      	adds	r3, #4
 8007650:	4619      	mov	r1, r3
 8007652:	4819      	ldr	r0, [pc, #100]	; (80076b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007654:	f7fe fb9d 	bl	8005d92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007658:	e026      	b.n	80076a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4413      	add	r3, r2
 8007660:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007662:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	429a      	cmp	r2, r3
 8007670:	d209      	bcs.n	8007686 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007672:	4b12      	ldr	r3, [pc, #72]	; (80076bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fe fbab 	bl	8005dda <vListInsert>
}
 8007684:	e010      	b.n	80076a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007686:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3304      	adds	r3, #4
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fe fba1 	bl	8005dda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d202      	bcs.n	80076a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076a2:	4a08      	ldr	r2, [pc, #32]	; (80076c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6013      	str	r3, [r2, #0]
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20002e8c 	.word	0x20002e8c
 80076b4:	200029b4 	.word	0x200029b4
 80076b8:	20002e74 	.word	0x20002e74
 80076bc:	20002e44 	.word	0x20002e44
 80076c0:	20002e40 	.word	0x20002e40
 80076c4:	20002ea8 	.word	0x20002ea8

080076c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	; 0x28
 80076cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076d2:	f000 fb07 	bl	8007ce4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076d6:	4b1c      	ldr	r3, [pc, #112]	; (8007748 <xTimerCreateTimerTask+0x80>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d021      	beq.n	8007722 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076e6:	1d3a      	adds	r2, r7, #4
 80076e8:	f107 0108 	add.w	r1, r7, #8
 80076ec:	f107 030c 	add.w	r3, r7, #12
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe fb07 	bl	8005d04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	9202      	str	r2, [sp, #8]
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	2302      	movs	r3, #2
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	2300      	movs	r3, #0
 8007706:	460a      	mov	r2, r1
 8007708:	4910      	ldr	r1, [pc, #64]	; (800774c <xTimerCreateTimerTask+0x84>)
 800770a:	4811      	ldr	r0, [pc, #68]	; (8007750 <xTimerCreateTimerTask+0x88>)
 800770c:	f7ff f8b4 	bl	8006878 <xTaskCreateStatic>
 8007710:	4603      	mov	r3, r0
 8007712:	4a10      	ldr	r2, [pc, #64]	; (8007754 <xTimerCreateTimerTask+0x8c>)
 8007714:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <xTimerCreateTimerTask+0x8c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800771e:	2301      	movs	r3, #1
 8007720:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	613b      	str	r3, [r7, #16]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800773e:	697b      	ldr	r3, [r7, #20]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20002ee4 	.word	0x20002ee4
 800774c:	08008810 	.word	0x08008810
 8007750:	0800788d 	.word	0x0800788d
 8007754:	20002ee8 	.word	0x20002ee8

08007758 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007766:	2300      	movs	r3, #0
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	623b      	str	r3, [r7, #32]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007786:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <xTimerGenericCommand+0x98>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d02a      	beq.n	80077e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b05      	cmp	r3, #5
 800779e:	dc18      	bgt.n	80077d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077a0:	f7ff feb2 	bl	8007508 <xTaskGetSchedulerState>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d109      	bne.n	80077be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077aa:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <xTimerGenericCommand+0x98>)
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	f107 0110 	add.w	r1, r7, #16
 80077b2:	2300      	movs	r3, #0
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	f7fe fc77 	bl	80060a8 <xQueueGenericSend>
 80077ba:	6278      	str	r0, [r7, #36]	; 0x24
 80077bc:	e012      	b.n	80077e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077be:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <xTimerGenericCommand+0x98>)
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	f107 0110 	add.w	r1, r7, #16
 80077c6:	2300      	movs	r3, #0
 80077c8:	2200      	movs	r2, #0
 80077ca:	f7fe fc6d 	bl	80060a8 <xQueueGenericSend>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24
 80077d0:	e008      	b.n	80077e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <xTimerGenericCommand+0x98>)
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	f107 0110 	add.w	r1, r7, #16
 80077da:	2300      	movs	r3, #0
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	f7fe fd61 	bl	80062a4 <xQueueGenericSendFromISR>
 80077e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3728      	adds	r7, #40	; 0x28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20002ee4 	.word	0x20002ee4

080077f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fe:	4b22      	ldr	r3, [pc, #136]	; (8007888 <prvProcessExpiredTimer+0x94>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	3304      	adds	r3, #4
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe fb1d 	bl	8005e4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d022      	beq.n	8007866 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	699a      	ldr	r2, [r3, #24]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	18d1      	adds	r1, r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	6978      	ldr	r0, [r7, #20]
 800782e:	f000 f8d1 	bl	80079d4 <prvInsertTimerInActiveList>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01f      	beq.n	8007878 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007838:	2300      	movs	r3, #0
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2300      	movs	r3, #0
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	2100      	movs	r1, #0
 8007842:	6978      	ldr	r0, [r7, #20]
 8007844:	f7ff ff88 	bl	8007758 <xTimerGenericCommand>
 8007848:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d113      	bne.n	8007878 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	b2da      	uxtb	r2, r3
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	6978      	ldr	r0, [r7, #20]
 800787e:	4798      	blx	r3
}
 8007880:	bf00      	nop
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20002edc 	.word	0x20002edc

0800788c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007894:	f107 0308 	add.w	r3, r7, #8
 8007898:	4618      	mov	r0, r3
 800789a:	f000 f857 	bl	800794c <prvGetNextExpireTime>
 800789e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4619      	mov	r1, r3
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f803 	bl	80078b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078aa:	f000 f8d5 	bl	8007a58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078ae:	e7f1      	b.n	8007894 <prvTimerTask+0x8>

080078b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078ba:	f7ff fa39 	bl	8006d30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078be:	f107 0308 	add.w	r3, r7, #8
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f866 	bl	8007994 <prvSampleTimeNow>
 80078c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d130      	bne.n	8007932 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <prvProcessTimerOrBlockTask+0x3c>
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d806      	bhi.n	80078ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078de:	f7ff fa35 	bl	8006d4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff ff85 	bl	80077f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078ea:	e024      	b.n	8007936 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078f2:	4b13      	ldr	r3, [pc, #76]	; (8007940 <prvProcessTimerOrBlockTask+0x90>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <prvProcessTimerOrBlockTask+0x50>
 80078fc:	2301      	movs	r3, #1
 80078fe:	e000      	b.n	8007902 <prvProcessTimerOrBlockTask+0x52>
 8007900:	2300      	movs	r3, #0
 8007902:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007904:	4b0f      	ldr	r3, [pc, #60]	; (8007944 <prvProcessTimerOrBlockTask+0x94>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	4619      	mov	r1, r3
 8007912:	f7fe ff7d 	bl	8006810 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007916:	f7ff fa19 	bl	8006d4c <xTaskResumeAll>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007920:	4b09      	ldr	r3, [pc, #36]	; (8007948 <prvProcessTimerOrBlockTask+0x98>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
}
 8007930:	e001      	b.n	8007936 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007932:	f7ff fa0b 	bl	8006d4c <xTaskResumeAll>
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20002ee0 	.word	0x20002ee0
 8007944:	20002ee4 	.word	0x20002ee4
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007954:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <prvGetNextExpireTime+0x44>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <prvGetNextExpireTime+0x16>
 800795e:	2201      	movs	r2, #1
 8007960:	e000      	b.n	8007964 <prvGetNextExpireTime+0x18>
 8007962:	2200      	movs	r2, #0
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d105      	bne.n	800797c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <prvGetNextExpireTime+0x44>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e001      	b.n	8007980 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007980:	68fb      	ldr	r3, [r7, #12]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	20002edc 	.word	0x20002edc

08007994 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800799c:	f7ff fa74 	bl	8006e88 <xTaskGetTickCount>
 80079a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079a2:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <prvSampleTimeNow+0x3c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d205      	bcs.n	80079b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079ac:	f000 f936 	bl	8007c1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	e002      	b.n	80079be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079be:	4a04      	ldr	r2, [pc, #16]	; (80079d0 <prvSampleTimeNow+0x3c>)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20002eec 	.word	0x20002eec

080079d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d812      	bhi.n	8007a20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d302      	bcc.n	8007a0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	e01b      	b.n	8007a46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a0e:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <prvInsertTimerInActiveList+0x7c>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f7fe f9de 	bl	8005dda <vListInsert>
 8007a1e:	e012      	b.n	8007a46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d206      	bcs.n	8007a36 <prvInsertTimerInActiveList+0x62>
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e007      	b.n	8007a46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a36:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <prvInsertTimerInActiveList+0x80>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f7fe f9ca 	bl	8005dda <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a46:	697b      	ldr	r3, [r7, #20]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20002ee0 	.word	0x20002ee0
 8007a54:	20002edc 	.word	0x20002edc

08007a58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08e      	sub	sp, #56	; 0x38
 8007a5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a5e:	e0ca      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	da18      	bge.n	8007a98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a66:	1d3b      	adds	r3, r7, #4
 8007a68:	3304      	adds	r3, #4
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	61fb      	str	r3, [r7, #28]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8e:	6850      	ldr	r0, [r2, #4]
 8007a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a92:	6892      	ldr	r2, [r2, #8]
 8007a94:	4611      	mov	r1, r2
 8007a96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f2c0 80aa 	blt.w	8007bf4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe f9cb 	bl	8005e4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff ff6b 	bl	8007994 <prvSampleTimeNow>
 8007abe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b09      	cmp	r3, #9
 8007ac4:	f200 8097 	bhi.w	8007bf6 <prvProcessReceivedCommands+0x19e>
 8007ac8:	a201      	add	r2, pc, #4	; (adr r2, 8007ad0 <prvProcessReceivedCommands+0x78>)
 8007aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ace:	bf00      	nop
 8007ad0:	08007af9 	.word	0x08007af9
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007af9 	.word	0x08007af9
 8007adc:	08007b6d 	.word	0x08007b6d
 8007ae0:	08007b81 	.word	0x08007b81
 8007ae4:	08007bcb 	.word	0x08007bcb
 8007ae8:	08007af9 	.word	0x08007af9
 8007aec:	08007af9 	.word	0x08007af9
 8007af0:	08007b6d 	.word	0x08007b6d
 8007af4:	08007b81 	.word	0x08007b81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007afe:	f043 0301 	orr.w	r3, r3, #1
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	18d1      	adds	r1, r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b18:	f7ff ff5c 	bl	80079d4 <prvInsertTimerInActiveList>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d069      	beq.n	8007bf6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d05e      	beq.n	8007bf6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	441a      	add	r2, r3
 8007b40:	2300      	movs	r3, #0
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	2100      	movs	r1, #0
 8007b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b4a:	f7ff fe05 	bl	8007758 <xTimerGenericCommand>
 8007b4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d14f      	bne.n	8007bf6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	61bb      	str	r3, [r7, #24]
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b72:	f023 0301 	bic.w	r3, r3, #1
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b7e:	e03a      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b86:	f043 0301 	orr.w	r3, r3, #1
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	617b      	str	r3, [r7, #20]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	18d1      	adds	r1, r2, r3
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc4:	f7ff ff06 	bl	80079d4 <prvInsertTimerInActiveList>
					break;
 8007bc8:	e015      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bda:	f000 fbe1 	bl	80083a0 <vPortFree>
 8007bde:	e00a      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bf2:	e000      	b.n	8007bf6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007bf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bf6:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <prvProcessReceivedCommands+0x1c0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	1d39      	adds	r1, r7, #4
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fbec 	bl	80063dc <xQueueReceive>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f47f af2a 	bne.w	8007a60 <prvProcessReceivedCommands+0x8>
	}
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	3730      	adds	r7, #48	; 0x30
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20002ee4 	.word	0x20002ee4

08007c1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c22:	e048      	b.n	8007cb6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c24:	4b2d      	ldr	r3, [pc, #180]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2e:	4b2b      	ldr	r3, [pc, #172]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe f905 	bl	8005e4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d02e      	beq.n	8007cb6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4413      	add	r3, r2
 8007c60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d90e      	bls.n	8007c88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c76:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f7fe f8aa 	bl	8005dda <vListInsert>
 8007c86:	e016      	b.n	8007cb6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c88:	2300      	movs	r3, #0
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	2100      	movs	r1, #0
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff fd60 	bl	8007758 <xTimerGenericCommand>
 8007c98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	603b      	str	r3, [r7, #0]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1b1      	bne.n	8007c24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cc6:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <prvSwitchTimerLists+0xc4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a04      	ldr	r2, [pc, #16]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007ccc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cce:	4a04      	ldr	r2, [pc, #16]	; (8007ce0 <prvSwitchTimerLists+0xc4>)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	6013      	str	r3, [r2, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20002edc 	.word	0x20002edc
 8007ce0:	20002ee0 	.word	0x20002ee0

08007ce4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cea:	f000 f96b 	bl	8007fc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <prvCheckForValidListAndQueue+0x60>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d120      	bne.n	8007d38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cf6:	4814      	ldr	r0, [pc, #80]	; (8007d48 <prvCheckForValidListAndQueue+0x64>)
 8007cf8:	f7fe f81e 	bl	8005d38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cfc:	4813      	ldr	r0, [pc, #76]	; (8007d4c <prvCheckForValidListAndQueue+0x68>)
 8007cfe:	f7fe f81b 	bl	8005d38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d02:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <prvCheckForValidListAndQueue+0x6c>)
 8007d04:	4a10      	ldr	r2, [pc, #64]	; (8007d48 <prvCheckForValidListAndQueue+0x64>)
 8007d06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d08:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <prvCheckForValidListAndQueue+0x70>)
 8007d0a:	4a10      	ldr	r2, [pc, #64]	; (8007d4c <prvCheckForValidListAndQueue+0x68>)
 8007d0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <prvCheckForValidListAndQueue+0x74>)
 8007d14:	4a11      	ldr	r2, [pc, #68]	; (8007d5c <prvCheckForValidListAndQueue+0x78>)
 8007d16:	2110      	movs	r1, #16
 8007d18:	200a      	movs	r0, #10
 8007d1a:	f7fe f929 	bl	8005f70 <xQueueGenericCreateStatic>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	4a08      	ldr	r2, [pc, #32]	; (8007d44 <prvCheckForValidListAndQueue+0x60>)
 8007d22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d24:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <prvCheckForValidListAndQueue+0x60>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <prvCheckForValidListAndQueue+0x60>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	490b      	ldr	r1, [pc, #44]	; (8007d60 <prvCheckForValidListAndQueue+0x7c>)
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fd42 	bl	80067bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d38:	f000 f974 	bl	8008024 <vPortExitCritical>
}
 8007d3c:	bf00      	nop
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20002ee4 	.word	0x20002ee4
 8007d48:	20002eb4 	.word	0x20002eb4
 8007d4c:	20002ec8 	.word	0x20002ec8
 8007d50:	20002edc 	.word	0x20002edc
 8007d54:	20002ee0 	.word	0x20002ee0
 8007d58:	20002f90 	.word	0x20002f90
 8007d5c:	20002ef0 	.word	0x20002ef0
 8007d60:	08008818 	.word	0x08008818

08007d64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3b04      	subs	r3, #4
 8007d74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3b04      	subs	r3, #4
 8007d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f023 0201 	bic.w	r2, r3, #1
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3b04      	subs	r3, #4
 8007d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d94:	4a0c      	ldr	r2, [pc, #48]	; (8007dc8 <pxPortInitialiseStack+0x64>)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3b14      	subs	r3, #20
 8007d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3b04      	subs	r3, #4
 8007daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f06f 0202 	mvn.w	r2, #2
 8007db2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3b20      	subs	r3, #32
 8007db8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dba:	68fb      	ldr	r3, [r7, #12]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	08007dcd 	.word	0x08007dcd

08007dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dd6:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <prvTaskExitError+0x54>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dde:	d00a      	beq.n	8007df6 <prvTaskExitError+0x2a>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	60fb      	str	r3, [r7, #12]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <prvTaskExitError+0x28>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60bb      	str	r3, [r7, #8]
}
 8007e08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e0a:	bf00      	nop
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0fc      	beq.n	8007e0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000014 	.word	0x20000014
	...

08007e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <pxCurrentTCBConst2>)
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	6808      	ldr	r0, [r1, #0]
 8007e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	f380 8809 	msr	PSP, r0
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f380 8811 	msr	BASEPRI, r0
 8007e4a:	4770      	bx	lr
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst2>:
 8007e50:	200029b4 	.word	0x200029b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e58:	4808      	ldr	r0, [pc, #32]	; (8007e7c <prvPortStartFirstTask+0x24>)
 8007e5a:	6800      	ldr	r0, [r0, #0]
 8007e5c:	6800      	ldr	r0, [r0, #0]
 8007e5e:	f380 8808 	msr	MSP, r0
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f380 8814 	msr	CONTROL, r0
 8007e6a:	b662      	cpsie	i
 8007e6c:	b661      	cpsie	f
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	df00      	svc	0
 8007e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e7a:	bf00      	nop
 8007e7c:	e000ed08 	.word	0xe000ed08

08007e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e86:	4b46      	ldr	r3, [pc, #280]	; (8007fa0 <xPortStartScheduler+0x120>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a46      	ldr	r2, [pc, #280]	; (8007fa4 <xPortStartScheduler+0x124>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d10a      	bne.n	8007ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	613b      	str	r3, [r7, #16]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ea6:	4b3e      	ldr	r3, [pc, #248]	; (8007fa0 <xPortStartScheduler+0x120>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a3f      	ldr	r2, [pc, #252]	; (8007fa8 <xPortStartScheduler+0x128>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d10a      	bne.n	8007ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	60fb      	str	r3, [r7, #12]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ec6:	4b39      	ldr	r3, [pc, #228]	; (8007fac <xPortStartScheduler+0x12c>)
 8007ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	22ff      	movs	r2, #255	; 0xff
 8007ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	4b31      	ldr	r3, [pc, #196]	; (8007fb0 <xPortStartScheduler+0x130>)
 8007eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007eee:	4b31      	ldr	r3, [pc, #196]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ef4:	e009      	b.n	8007f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ef6:	4b2f      	ldr	r3, [pc, #188]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	4a2d      	ldr	r2, [pc, #180]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b80      	cmp	r3, #128	; 0x80
 8007f14:	d0ef      	beq.n	8007ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f16:	4b27      	ldr	r3, [pc, #156]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f1c3 0307 	rsb	r3, r3, #7
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d00a      	beq.n	8007f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	60bb      	str	r3, [r7, #8]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f38:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	4a1d      	ldr	r2, [pc, #116]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f4a:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f56:	4b18      	ldr	r3, [pc, #96]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a14      	ldr	r2, [pc, #80]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f6e:	f000 f8dd 	bl	800812c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f72:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <xPortStartScheduler+0x13c>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f78:	f000 f8fc 	bl	8008174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f7c:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <xPortStartScheduler+0x140>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a0f      	ldr	r2, [pc, #60]	; (8007fc0 <xPortStartScheduler+0x140>)
 8007f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f88:	f7ff ff66 	bl	8007e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f8c:	f7ff f846 	bl	800701c <vTaskSwitchContext>
	prvTaskExitError();
 8007f90:	f7ff ff1c 	bl	8007dcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	e000ed00 	.word	0xe000ed00
 8007fa4:	410fc271 	.word	0x410fc271
 8007fa8:	410fc270 	.word	0x410fc270
 8007fac:	e000e400 	.word	0xe000e400
 8007fb0:	20002fe0 	.word	0x20002fe0
 8007fb4:	20002fe4 	.word	0x20002fe4
 8007fb8:	e000ed20 	.word	0xe000ed20
 8007fbc:	20000014 	.word	0x20000014
 8007fc0:	e000ef34 	.word	0xe000ef34

08007fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	607b      	str	r3, [r7, #4]
}
 8007fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <vPortEnterCritical+0x58>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	4a0d      	ldr	r2, [pc, #52]	; (800801c <vPortEnterCritical+0x58>)
 8007fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	; (800801c <vPortEnterCritical+0x58>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d10f      	bne.n	8008010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <vPortEnterCritical+0x5c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <vPortEnterCritical+0x4c>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	603b      	str	r3, [r7, #0]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <vPortEnterCritical+0x4a>
	}
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20000014 	.word	0x20000014
 8008020:	e000ed04 	.word	0xe000ed04

08008024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800802a:	4b12      	ldr	r3, [pc, #72]	; (8008074 <vPortExitCritical+0x50>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <vPortExitCritical+0x24>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	607b      	str	r3, [r7, #4]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <vPortExitCritical+0x50>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3b01      	subs	r3, #1
 800804e:	4a09      	ldr	r2, [pc, #36]	; (8008074 <vPortExitCritical+0x50>)
 8008050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008052:	4b08      	ldr	r3, [pc, #32]	; (8008074 <vPortExitCritical+0x50>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d105      	bne.n	8008066 <vPortExitCritical+0x42>
 800805a:	2300      	movs	r3, #0
 800805c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	f383 8811 	msr	BASEPRI, r3
}
 8008064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000014 	.word	0x20000014
	...

08008080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008080:	f3ef 8009 	mrs	r0, PSP
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <pxCurrentTCBConst>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	f01e 0f10 	tst.w	lr, #16
 8008090:	bf08      	it	eq
 8008092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	6010      	str	r0, [r2, #0]
 800809c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080a4:	f380 8811 	msr	BASEPRI, r0
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f7fe ffb4 	bl	800701c <vTaskSwitchContext>
 80080b4:	f04f 0000 	mov.w	r0, #0
 80080b8:	f380 8811 	msr	BASEPRI, r0
 80080bc:	bc09      	pop	{r0, r3}
 80080be:	6819      	ldr	r1, [r3, #0]
 80080c0:	6808      	ldr	r0, [r1, #0]
 80080c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c6:	f01e 0f10 	tst.w	lr, #16
 80080ca:	bf08      	it	eq
 80080cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080d0:	f380 8809 	msr	PSP, r0
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	f3af 8000 	nop.w

080080e0 <pxCurrentTCBConst>:
 80080e0:	200029b4 	.word	0x200029b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop

080080e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	607b      	str	r3, [r7, #4]
}
 8008100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008102:	f7fe fed1 	bl	8006ea8 <xTaskIncrementTick>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <xPortSysTickHandler+0x40>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	2300      	movs	r3, #0
 8008116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	f383 8811 	msr	BASEPRI, r3
}
 800811e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <vPortSetupTimerInterrupt+0x34>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <vPortSetupTimerInterrupt+0x38>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <vPortSetupTimerInterrupt+0x3c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a0a      	ldr	r2, [pc, #40]	; (800816c <vPortSetupTimerInterrupt+0x40>)
 8008142:	fba2 2303 	umull	r2, r3, r2, r3
 8008146:	099b      	lsrs	r3, r3, #6
 8008148:	4a09      	ldr	r2, [pc, #36]	; (8008170 <vPortSetupTimerInterrupt+0x44>)
 800814a:	3b01      	subs	r3, #1
 800814c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800814e:	4b04      	ldr	r3, [pc, #16]	; (8008160 <vPortSetupTimerInterrupt+0x34>)
 8008150:	2207      	movs	r2, #7
 8008152:	601a      	str	r2, [r3, #0]
}
 8008154:	bf00      	nop
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	e000e010 	.word	0xe000e010
 8008164:	e000e018 	.word	0xe000e018
 8008168:	20000008 	.word	0x20000008
 800816c:	10624dd3 	.word	0x10624dd3
 8008170:	e000e014 	.word	0xe000e014

08008174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008184 <vPortEnableVFP+0x10>
 8008178:	6801      	ldr	r1, [r0, #0]
 800817a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800817e:	6001      	str	r1, [r0, #0]
 8008180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008182:	bf00      	nop
 8008184:	e000ed88 	.word	0xe000ed88

08008188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800818e:	f3ef 8305 	mrs	r3, IPSR
 8008192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b0f      	cmp	r3, #15
 8008198:	d914      	bls.n	80081c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800819a:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <vPortValidateInterruptPriority+0x70>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081a4:	4b15      	ldr	r3, [pc, #84]	; (80081fc <vPortValidateInterruptPriority+0x74>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	7afa      	ldrb	r2, [r7, #11]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d20a      	bcs.n	80081c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	607b      	str	r3, [r7, #4]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081c4:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <vPortValidateInterruptPriority+0x78>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081cc:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <vPortValidateInterruptPriority+0x7c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d90a      	bls.n	80081ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	603b      	str	r3, [r7, #0]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <vPortValidateInterruptPriority+0x60>
	}
 80081ea:	bf00      	nop
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	e000e3f0 	.word	0xe000e3f0
 80081fc:	20002fe0 	.word	0x20002fe0
 8008200:	e000ed0c 	.word	0xe000ed0c
 8008204:	20002fe4 	.word	0x20002fe4

08008208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08a      	sub	sp, #40	; 0x28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008214:	f7fe fd8c 	bl	8006d30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008218:	4b5b      	ldr	r3, [pc, #364]	; (8008388 <pvPortMalloc+0x180>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008220:	f000 f920 	bl	8008464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008224:	4b59      	ldr	r3, [pc, #356]	; (800838c <pvPortMalloc+0x184>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4013      	ands	r3, r2
 800822c:	2b00      	cmp	r3, #0
 800822e:	f040 8093 	bne.w	8008358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01d      	beq.n	8008274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008238:	2208      	movs	r2, #8
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b00      	cmp	r3, #0
 8008248:	d014      	beq.n	8008274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f023 0307 	bic.w	r3, r3, #7
 8008250:	3308      	adds	r3, #8
 8008252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <pvPortMalloc+0x6c>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	617b      	str	r3, [r7, #20]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d06e      	beq.n	8008358 <pvPortMalloc+0x150>
 800827a:	4b45      	ldr	r3, [pc, #276]	; (8008390 <pvPortMalloc+0x188>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d869      	bhi.n	8008358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008284:	4b43      	ldr	r3, [pc, #268]	; (8008394 <pvPortMalloc+0x18c>)
 8008286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008288:	4b42      	ldr	r3, [pc, #264]	; (8008394 <pvPortMalloc+0x18c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800828e:	e004      	b.n	800829a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d903      	bls.n	80082ac <pvPortMalloc+0xa4>
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f1      	bne.n	8008290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082ac:	4b36      	ldr	r3, [pc, #216]	; (8008388 <pvPortMalloc+0x180>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d050      	beq.n	8008358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2208      	movs	r2, #8
 80082bc:	4413      	add	r3, r2
 80082be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	2308      	movs	r3, #8
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d91f      	bls.n	8008318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <pvPortMalloc+0xf8>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	613b      	str	r3, [r7, #16]
}
 80082fc:	bf00      	nop
 80082fe:	e7fe      	b.n	80082fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008312:	69b8      	ldr	r0, [r7, #24]
 8008314:	f000 f908 	bl	8008528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008318:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <pvPortMalloc+0x188>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	4a1b      	ldr	r2, [pc, #108]	; (8008390 <pvPortMalloc+0x188>)
 8008324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008326:	4b1a      	ldr	r3, [pc, #104]	; (8008390 <pvPortMalloc+0x188>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <pvPortMalloc+0x190>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d203      	bcs.n	800833a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008332:	4b17      	ldr	r3, [pc, #92]	; (8008390 <pvPortMalloc+0x188>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a18      	ldr	r2, [pc, #96]	; (8008398 <pvPortMalloc+0x190>)
 8008338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	4b13      	ldr	r3, [pc, #76]	; (800838c <pvPortMalloc+0x184>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	431a      	orrs	r2, r3
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800834e:	4b13      	ldr	r3, [pc, #76]	; (800839c <pvPortMalloc+0x194>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3301      	adds	r3, #1
 8008354:	4a11      	ldr	r2, [pc, #68]	; (800839c <pvPortMalloc+0x194>)
 8008356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008358:	f7fe fcf8 	bl	8006d4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <pvPortMalloc+0x174>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	60fb      	str	r3, [r7, #12]
}
 8008378:	bf00      	nop
 800837a:	e7fe      	b.n	800837a <pvPortMalloc+0x172>
	return pvReturn;
 800837c:	69fb      	ldr	r3, [r7, #28]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3728      	adds	r7, #40	; 0x28
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20006bf0 	.word	0x20006bf0
 800838c:	20006c04 	.word	0x20006c04
 8008390:	20006bf4 	.word	0x20006bf4
 8008394:	20006be8 	.word	0x20006be8
 8008398:	20006bf8 	.word	0x20006bf8
 800839c:	20006bfc 	.word	0x20006bfc

080083a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d04d      	beq.n	800844e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083b2:	2308      	movs	r3, #8
 80083b4:	425b      	negs	r3, r3
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4413      	add	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	4b24      	ldr	r3, [pc, #144]	; (8008458 <vPortFree+0xb8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4013      	ands	r3, r2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <vPortFree+0x44>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <vPortFree+0x62>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	60bb      	str	r3, [r7, #8]
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <vPortFree+0xb8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4013      	ands	r3, r2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d01e      	beq.n	800844e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11a      	bne.n	800844e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	4b0e      	ldr	r3, [pc, #56]	; (8008458 <vPortFree+0xb8>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	43db      	mvns	r3, r3
 8008422:	401a      	ands	r2, r3
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008428:	f7fe fc82 	bl	8006d30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	4b0a      	ldr	r3, [pc, #40]	; (800845c <vPortFree+0xbc>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4413      	add	r3, r2
 8008436:	4a09      	ldr	r2, [pc, #36]	; (800845c <vPortFree+0xbc>)
 8008438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800843a:	6938      	ldr	r0, [r7, #16]
 800843c:	f000 f874 	bl	8008528 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <vPortFree+0xc0>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3301      	adds	r3, #1
 8008446:	4a06      	ldr	r2, [pc, #24]	; (8008460 <vPortFree+0xc0>)
 8008448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800844a:	f7fe fc7f 	bl	8006d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800844e:	bf00      	nop
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20006c04 	.word	0x20006c04
 800845c:	20006bf4 	.word	0x20006bf4
 8008460:	20006c00 	.word	0x20006c00

08008464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800846a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800846e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008470:	4b27      	ldr	r3, [pc, #156]	; (8008510 <prvHeapInit+0xac>)
 8008472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00c      	beq.n	8008498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3307      	adds	r3, #7
 8008482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0307 	bic.w	r3, r3, #7
 800848a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	4a1f      	ldr	r2, [pc, #124]	; (8008510 <prvHeapInit+0xac>)
 8008494:	4413      	add	r3, r2
 8008496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800849c:	4a1d      	ldr	r2, [pc, #116]	; (8008514 <prvHeapInit+0xb0>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084a2:	4b1c      	ldr	r3, [pc, #112]	; (8008514 <prvHeapInit+0xb0>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	4413      	add	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084b0:	2208      	movs	r2, #8
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a15      	ldr	r2, [pc, #84]	; (8008518 <prvHeapInit+0xb4>)
 80084c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084c6:	4b14      	ldr	r3, [pc, #80]	; (8008518 <prvHeapInit+0xb4>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2200      	movs	r2, #0
 80084cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <prvHeapInit+0xb4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084e4:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <prvHeapInit+0xb4>)
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	4a0a      	ldr	r2, [pc, #40]	; (800851c <prvHeapInit+0xb8>)
 80084f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	4a09      	ldr	r2, [pc, #36]	; (8008520 <prvHeapInit+0xbc>)
 80084fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084fc:	4b09      	ldr	r3, [pc, #36]	; (8008524 <prvHeapInit+0xc0>)
 80084fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008502:	601a      	str	r2, [r3, #0]
}
 8008504:	bf00      	nop
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	20002fe8 	.word	0x20002fe8
 8008514:	20006be8 	.word	0x20006be8
 8008518:	20006bf0 	.word	0x20006bf0
 800851c:	20006bf8 	.word	0x20006bf8
 8008520:	20006bf4 	.word	0x20006bf4
 8008524:	20006c04 	.word	0x20006c04

08008528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008530:	4b28      	ldr	r3, [pc, #160]	; (80085d4 <prvInsertBlockIntoFreeList+0xac>)
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	e002      	b.n	800853c <prvInsertBlockIntoFreeList+0x14>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	429a      	cmp	r2, r3
 8008544:	d8f7      	bhi.n	8008536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	4413      	add	r3, r2
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	429a      	cmp	r2, r3
 8008556:	d108      	bne.n	800856a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	441a      	add	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	441a      	add	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	429a      	cmp	r2, r3
 800857c:	d118      	bne.n	80085b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d00d      	beq.n	80085a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	441a      	add	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e008      	b.n	80085b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085a6:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <prvInsertBlockIntoFreeList+0xb0>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	e003      	b.n	80085b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d002      	beq.n	80085c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20006be8 	.word	0x20006be8
 80085d8:	20006bf0 	.word	0x20006bf0

080085dc <__libc_init_array>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	4d0d      	ldr	r5, [pc, #52]	; (8008614 <__libc_init_array+0x38>)
 80085e0:	4c0d      	ldr	r4, [pc, #52]	; (8008618 <__libc_init_array+0x3c>)
 80085e2:	1b64      	subs	r4, r4, r5
 80085e4:	10a4      	asrs	r4, r4, #2
 80085e6:	2600      	movs	r6, #0
 80085e8:	42a6      	cmp	r6, r4
 80085ea:	d109      	bne.n	8008600 <__libc_init_array+0x24>
 80085ec:	4d0b      	ldr	r5, [pc, #44]	; (800861c <__libc_init_array+0x40>)
 80085ee:	4c0c      	ldr	r4, [pc, #48]	; (8008620 <__libc_init_array+0x44>)
 80085f0:	f000 f8f2 	bl	80087d8 <_init>
 80085f4:	1b64      	subs	r4, r4, r5
 80085f6:	10a4      	asrs	r4, r4, #2
 80085f8:	2600      	movs	r6, #0
 80085fa:	42a6      	cmp	r6, r4
 80085fc:	d105      	bne.n	800860a <__libc_init_array+0x2e>
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	f855 3b04 	ldr.w	r3, [r5], #4
 8008604:	4798      	blx	r3
 8008606:	3601      	adds	r6, #1
 8008608:	e7ee      	b.n	80085e8 <__libc_init_array+0xc>
 800860a:	f855 3b04 	ldr.w	r3, [r5], #4
 800860e:	4798      	blx	r3
 8008610:	3601      	adds	r6, #1
 8008612:	e7f2      	b.n	80085fa <__libc_init_array+0x1e>
 8008614:	0800bb28 	.word	0x0800bb28
 8008618:	0800bb28 	.word	0x0800bb28
 800861c:	0800bb28 	.word	0x0800bb28
 8008620:	0800bb2c 	.word	0x0800bb2c

08008624 <__retarget_lock_acquire_recursive>:
 8008624:	4770      	bx	lr

08008626 <__retarget_lock_release_recursive>:
 8008626:	4770      	bx	lr

08008628 <memcpy>:
 8008628:	440a      	add	r2, r1
 800862a:	4291      	cmp	r1, r2
 800862c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008630:	d100      	bne.n	8008634 <memcpy+0xc>
 8008632:	4770      	bx	lr
 8008634:	b510      	push	{r4, lr}
 8008636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800863a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800863e:	4291      	cmp	r1, r2
 8008640:	d1f9      	bne.n	8008636 <memcpy+0xe>
 8008642:	bd10      	pop	{r4, pc}

08008644 <memset>:
 8008644:	4402      	add	r2, r0
 8008646:	4603      	mov	r3, r0
 8008648:	4293      	cmp	r3, r2
 800864a:	d100      	bne.n	800864e <memset+0xa>
 800864c:	4770      	bx	lr
 800864e:	f803 1b01 	strb.w	r1, [r3], #1
 8008652:	e7f9      	b.n	8008648 <memset+0x4>

08008654 <_free_r>:
 8008654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008656:	2900      	cmp	r1, #0
 8008658:	d044      	beq.n	80086e4 <_free_r+0x90>
 800865a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865e:	9001      	str	r0, [sp, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f1a1 0404 	sub.w	r4, r1, #4
 8008666:	bfb8      	it	lt
 8008668:	18e4      	addlt	r4, r4, r3
 800866a:	f000 f8a9 	bl	80087c0 <__malloc_lock>
 800866e:	4a1e      	ldr	r2, [pc, #120]	; (80086e8 <_free_r+0x94>)
 8008670:	9801      	ldr	r0, [sp, #4]
 8008672:	6813      	ldr	r3, [r2, #0]
 8008674:	b933      	cbnz	r3, 8008684 <_free_r+0x30>
 8008676:	6063      	str	r3, [r4, #4]
 8008678:	6014      	str	r4, [r2, #0]
 800867a:	b003      	add	sp, #12
 800867c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008680:	f000 b8a4 	b.w	80087cc <__malloc_unlock>
 8008684:	42a3      	cmp	r3, r4
 8008686:	d908      	bls.n	800869a <_free_r+0x46>
 8008688:	6825      	ldr	r5, [r4, #0]
 800868a:	1961      	adds	r1, r4, r5
 800868c:	428b      	cmp	r3, r1
 800868e:	bf01      	itttt	eq
 8008690:	6819      	ldreq	r1, [r3, #0]
 8008692:	685b      	ldreq	r3, [r3, #4]
 8008694:	1949      	addeq	r1, r1, r5
 8008696:	6021      	streq	r1, [r4, #0]
 8008698:	e7ed      	b.n	8008676 <_free_r+0x22>
 800869a:	461a      	mov	r2, r3
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	b10b      	cbz	r3, 80086a4 <_free_r+0x50>
 80086a0:	42a3      	cmp	r3, r4
 80086a2:	d9fa      	bls.n	800869a <_free_r+0x46>
 80086a4:	6811      	ldr	r1, [r2, #0]
 80086a6:	1855      	adds	r5, r2, r1
 80086a8:	42a5      	cmp	r5, r4
 80086aa:	d10b      	bne.n	80086c4 <_free_r+0x70>
 80086ac:	6824      	ldr	r4, [r4, #0]
 80086ae:	4421      	add	r1, r4
 80086b0:	1854      	adds	r4, r2, r1
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	6011      	str	r1, [r2, #0]
 80086b6:	d1e0      	bne.n	800867a <_free_r+0x26>
 80086b8:	681c      	ldr	r4, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	6053      	str	r3, [r2, #4]
 80086be:	4421      	add	r1, r4
 80086c0:	6011      	str	r1, [r2, #0]
 80086c2:	e7da      	b.n	800867a <_free_r+0x26>
 80086c4:	d902      	bls.n	80086cc <_free_r+0x78>
 80086c6:	230c      	movs	r3, #12
 80086c8:	6003      	str	r3, [r0, #0]
 80086ca:	e7d6      	b.n	800867a <_free_r+0x26>
 80086cc:	6825      	ldr	r5, [r4, #0]
 80086ce:	1961      	adds	r1, r4, r5
 80086d0:	428b      	cmp	r3, r1
 80086d2:	bf04      	itt	eq
 80086d4:	6819      	ldreq	r1, [r3, #0]
 80086d6:	685b      	ldreq	r3, [r3, #4]
 80086d8:	6063      	str	r3, [r4, #4]
 80086da:	bf04      	itt	eq
 80086dc:	1949      	addeq	r1, r1, r5
 80086de:	6021      	streq	r1, [r4, #0]
 80086e0:	6054      	str	r4, [r2, #4]
 80086e2:	e7ca      	b.n	800867a <_free_r+0x26>
 80086e4:	b003      	add	sp, #12
 80086e6:	bd30      	pop	{r4, r5, pc}
 80086e8:	20006c0c 	.word	0x20006c0c

080086ec <cleanup_glue>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	460c      	mov	r4, r1
 80086f0:	6809      	ldr	r1, [r1, #0]
 80086f2:	4605      	mov	r5, r0
 80086f4:	b109      	cbz	r1, 80086fa <cleanup_glue+0xe>
 80086f6:	f7ff fff9 	bl	80086ec <cleanup_glue>
 80086fa:	4621      	mov	r1, r4
 80086fc:	4628      	mov	r0, r5
 80086fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008702:	f7ff bfa7 	b.w	8008654 <_free_r>
	...

08008708 <_reclaim_reent>:
 8008708:	4b2c      	ldr	r3, [pc, #176]	; (80087bc <_reclaim_reent+0xb4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4283      	cmp	r3, r0
 800870e:	b570      	push	{r4, r5, r6, lr}
 8008710:	4604      	mov	r4, r0
 8008712:	d051      	beq.n	80087b8 <_reclaim_reent+0xb0>
 8008714:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008716:	b143      	cbz	r3, 800872a <_reclaim_reent+0x22>
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d14a      	bne.n	80087b4 <_reclaim_reent+0xac>
 800871e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	b111      	cbz	r1, 800872a <_reclaim_reent+0x22>
 8008724:	4620      	mov	r0, r4
 8008726:	f7ff ff95 	bl	8008654 <_free_r>
 800872a:	6961      	ldr	r1, [r4, #20]
 800872c:	b111      	cbz	r1, 8008734 <_reclaim_reent+0x2c>
 800872e:	4620      	mov	r0, r4
 8008730:	f7ff ff90 	bl	8008654 <_free_r>
 8008734:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008736:	b111      	cbz	r1, 800873e <_reclaim_reent+0x36>
 8008738:	4620      	mov	r0, r4
 800873a:	f7ff ff8b 	bl	8008654 <_free_r>
 800873e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008740:	b111      	cbz	r1, 8008748 <_reclaim_reent+0x40>
 8008742:	4620      	mov	r0, r4
 8008744:	f7ff ff86 	bl	8008654 <_free_r>
 8008748:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800874a:	b111      	cbz	r1, 8008752 <_reclaim_reent+0x4a>
 800874c:	4620      	mov	r0, r4
 800874e:	f7ff ff81 	bl	8008654 <_free_r>
 8008752:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008754:	b111      	cbz	r1, 800875c <_reclaim_reent+0x54>
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff ff7c 	bl	8008654 <_free_r>
 800875c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800875e:	b111      	cbz	r1, 8008766 <_reclaim_reent+0x5e>
 8008760:	4620      	mov	r0, r4
 8008762:	f7ff ff77 	bl	8008654 <_free_r>
 8008766:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008768:	b111      	cbz	r1, 8008770 <_reclaim_reent+0x68>
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff ff72 	bl	8008654 <_free_r>
 8008770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008772:	b111      	cbz	r1, 800877a <_reclaim_reent+0x72>
 8008774:	4620      	mov	r0, r4
 8008776:	f7ff ff6d 	bl	8008654 <_free_r>
 800877a:	69a3      	ldr	r3, [r4, #24]
 800877c:	b1e3      	cbz	r3, 80087b8 <_reclaim_reent+0xb0>
 800877e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008780:	4620      	mov	r0, r4
 8008782:	4798      	blx	r3
 8008784:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008786:	b1b9      	cbz	r1, 80087b8 <_reclaim_reent+0xb0>
 8008788:	4620      	mov	r0, r4
 800878a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800878e:	f7ff bfad 	b.w	80086ec <cleanup_glue>
 8008792:	5949      	ldr	r1, [r1, r5]
 8008794:	b941      	cbnz	r1, 80087a8 <_reclaim_reent+0xa0>
 8008796:	3504      	adds	r5, #4
 8008798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800879a:	2d80      	cmp	r5, #128	; 0x80
 800879c:	68d9      	ldr	r1, [r3, #12]
 800879e:	d1f8      	bne.n	8008792 <_reclaim_reent+0x8a>
 80087a0:	4620      	mov	r0, r4
 80087a2:	f7ff ff57 	bl	8008654 <_free_r>
 80087a6:	e7ba      	b.n	800871e <_reclaim_reent+0x16>
 80087a8:	680e      	ldr	r6, [r1, #0]
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7ff ff52 	bl	8008654 <_free_r>
 80087b0:	4631      	mov	r1, r6
 80087b2:	e7ef      	b.n	8008794 <_reclaim_reent+0x8c>
 80087b4:	2500      	movs	r5, #0
 80087b6:	e7ef      	b.n	8008798 <_reclaim_reent+0x90>
 80087b8:	bd70      	pop	{r4, r5, r6, pc}
 80087ba:	bf00      	nop
 80087bc:	20000018 	.word	0x20000018

080087c0 <__malloc_lock>:
 80087c0:	4801      	ldr	r0, [pc, #4]	; (80087c8 <__malloc_lock+0x8>)
 80087c2:	f7ff bf2f 	b.w	8008624 <__retarget_lock_acquire_recursive>
 80087c6:	bf00      	nop
 80087c8:	20006c08 	.word	0x20006c08

080087cc <__malloc_unlock>:
 80087cc:	4801      	ldr	r0, [pc, #4]	; (80087d4 <__malloc_unlock+0x8>)
 80087ce:	f7ff bf2a 	b.w	8008626 <__retarget_lock_release_recursive>
 80087d2:	bf00      	nop
 80087d4:	20006c08 	.word	0x20006c08

080087d8 <_init>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	bf00      	nop
 80087dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087de:	bc08      	pop	{r3}
 80087e0:	469e      	mov	lr, r3
 80087e2:	4770      	bx	lr

080087e4 <_fini>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	bf00      	nop
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr
